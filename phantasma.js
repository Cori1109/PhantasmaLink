/**
 * @version   : 17.2.0 - Bridge.NET
 * @author    : Object.NET, Inc. http://bridge.net/
 * @copyright : Copyright 2008-2018 Object.NET, Inc. http://object.net/
 * @license   : See license.txt and https://github.com/bridgedotnet/Bridge/blob/master/LICENSE.md
 */

    // @source Init.js

(function (globals) {
    "use strict";

    if (typeof module !== "undefined" && module.exports) {
        globals = global;
    }

    // @source Core.js

    var core = {
        global: globals,

        isNode: Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]",

        emptyFn: function () { },

        identity: function (x) {
            return x;
        },

        Deconstruct: function (obj) {
            var args = Array.prototype.slice.call(arguments, 1);

            for (var i = 0; i < args.length; i++) {
                args[i].v = i == 7 ? obj["Rest"] : obj["Item" + (i + 1)];
            }
        },

        toString: function (instance) {
            if (instance == null) {
                throw new System.ArgumentNullException();
            }

            var guardItem = Bridge.$toStringGuard[Bridge.$toStringGuard.length - 1];

            if (instance.toString === Object.prototype.toString || guardItem && guardItem === instance) {
                return Bridge.Reflection.getTypeFullName(instance);
            }

            Bridge.$toStringGuard.push(instance);

            var result = instance.toString();

            Bridge.$toStringGuard.pop();

            return result;
        },

        geti: function (scope, name1, name2) {
            if (Bridge.hasValue(scope[name1])) {
                return name1;
            }

            if (name2 && Bridge.hasValue(scope[name2])) {
                return name2;
            }

            var name = name2 || name1;
            var idx = name.lastIndexOf("$");

            if (/\$\d+$/g.test(name)) {
                idx = name.lastIndexOf("$", idx - 1);
            }

            return name.substr(idx + 1);
        },

        box: function (v, T, toStr, hashCode) {
            if (v && v.$boxed) {
                return v;
            }

            if (v == null) {
                return v;
            }

            if (v.$clone) {
                v = v.$clone();
            }

            return {
                $boxed: true,
                fn: {
                    toString: toStr,
                    getHashCode: hashCode
                },
                v: v,
                type: T,
                constructor: T,
                getHashCode: function () {
                    return this.fn.getHashCode ? this.fn.getHashCode(this.v) : Bridge.getHashCode(this.v);
                },
                equals: function (o) {
                    if (this === o) {
                        return true;
                    }

                    var eq = this.equals;
                    this.equals = null;
                    var r = Bridge.equals(this.v, o);
                    this.equals = eq;

                    return r;
                },
                valueOf: function () {
                    return this.v;
                },
                toString: function () {
                    return this.fn.toString ? this.fn.toString(this.v) : this.v.toString();
                }
            };
        },

        unbox: function (o, noclone) {
            var T;

            if (noclone && Bridge.isFunction(noclone)) {
                T = noclone;
                noclone = false;
            }

            if (o && o.$boxed) {
                var v = o.v,
                    t = o.type;

                if (T && T.$nullable) {
                    T = T.$nullableType;
                }

                if (T && T.$kind === "enum") {
                    T = System.Enum.getUnderlyingType(T);
                }

                if (t.$nullable) {
                    t = t.$nullableType;
                }

                if (t.$kind === "enum") {
                    t = System.Enum.getUnderlyingType(t);
                }

                if (T && T !== t && !Bridge.isObject(T)) { 
                    throw new System.InvalidCastException.$ctor1("Specified cast is not valid.");
                }

                if (!noclone && v && v.$clone) {
                    v = v.$clone();
                }

                return v;
            }

            if (Bridge.isArray(o)) {
                for (var i = 0; i < o.length; i++) {
                    var item = o[i];

                    if (item && item.$boxed) {
                        item = item.v;

                        if (item.$clone) {
                            item = item.$clone();
                        }
                    } else if (!noclone && item && item.$clone) {
                        item = item.$clone();
                    }

                    o[i] = item;
                }
            }

            if (o && !noclone && o.$clone) {
                o = o.$clone();
            }

            return o;
        },

        virtualc: function (name) {
            return Bridge.virtual(name, true);
        },

        virtual: function (name, isClass) {
            var type = Bridge.unroll(name);

            if (!type || !Bridge.isFunction(type)) {
                var old = Bridge.Class.staticInitAllow;
                type = isClass ? Bridge.define(name) : Bridge.definei(name);
                Bridge.Class.staticInitAllow = true;

                if (type.$staticInit) {
                    type.$staticInit();
                }

                Bridge.Class.staticInitAllow = old;
            }

            return type;
        },

        safe: function (fn) {
            try {
                return fn();
            } catch (ex) {
            }

            return false;
        },

        literal: function (type, obj) {
            obj.$getType = function () { return type };

            return obj;
        },

        isJSObject: function (value) {
            return Object.prototype.toString.call(value) === "[object Object]";
        },

        isPlainObject: function (obj) {
            if (typeof obj == "object" && obj !== null) {
                if (typeof Object.getPrototypeOf == "function") {
                    var proto = Object.getPrototypeOf(obj);

                    return proto === Object.prototype || proto === null;
                }

                return Object.prototype.toString.call(obj) === "[object Object]";
            }

            return false;
        },

        toPlain: function (o) {
            if (!o || Bridge.isPlainObject(o) || typeof o != "object") {
                return o;
            }

            if (typeof o.toJSON == "function") {
                return o.toJSON();
            }

            if (Bridge.isArray(o)) {
                var arr = [];

                for (var i = 0; i < o.length; i++) {
                    arr.push(Bridge.toPlain(o[i]));
                }

                return arr;
            }

            var newo = {},
                m;

            for (var key in o) {
                m = o[key];

                if (!Bridge.isFunction(m)) {
                    newo[key] = m;
                }
            }

            return newo;
        },

        ref: function (o, n) {
            if (Bridge.isArray(n)) {
                n = System.Array.toIndex(o, n);
            }

            var proxy = {};

            Object.defineProperty(proxy, "v", {
                get: function () {
                    if (n == null) {
                        return o;
                    }

                    return o[n];
                },

                set: function (value) {
                    if (n == null) {
                        if (value && value.$clone) {
                            value.$clone(o);
                        } else {
                            o = value;
                        }
                    }

                    o[n] = value;
                }
            });

            return proxy;
        },

        ensureBaseProperty: function (scope, name, alias) {
            var scopeType = Bridge.getType(scope),
                descriptors = scopeType.$descriptors || [];

            scope.$propMap = scope.$propMap || {};

            if (scope.$propMap[name]) {
                return scope;
            }

            if ((!scopeType.$descriptors || scopeType.$descriptors.length === 0) && alias) {
                var aliasCfg = {},
                    aliasName = "$" + alias + "$" + name;

                aliasCfg.get = function () {
                    return scope[name];
                };

                aliasCfg.set = function (value) {
                    scope[name] = value;
                };

                Bridge.property(scope, aliasName, aliasCfg, false, scopeType, true);
            }
            else {
                for (var j = 0; j < descriptors.length; j++) {
                    var d = descriptors[j];

                    if (d.name === name) {
                        var aliasCfg = {},
                            aliasName = "$" + Bridge.getTypeAlias(d.cls) + "$" + name;

                        if (d.get) {
                            aliasCfg.get = d.get;
                        }

                        if (d.set) {
                            aliasCfg.set = d.set;
                        }

                        Bridge.property(scope, aliasName, aliasCfg, false, scopeType, true);
                    }
                }
            }

            scope.$propMap[name] = true;

            return scope;
        },

        property: function (scope, name, v, statics, cls, alias) {
            var cfg = {
                enumerable: alias ? false : true,
                configurable: true
            };

            if (v && v.get) {
                cfg.get = v.get;
            }

            if (v && v.set) {
                cfg.set = v.set;
            }

            if (!v || !(v.get || v.set)) {
                var backingField = Bridge.getTypeAlias(cls) + "$" + name;

                cls.$init = cls.$init || {};

                if (statics) {
                    cls.$init[backingField] = v;
                }

                (function (cfg, scope, backingField, v) {
                    cfg.get = function () {
                        var o = this.$init[backingField];

                        return o === undefined ? v : o;
                    };

                    cfg.set = function (value) {
                        this.$init[backingField] = value;
                    };
                })(cfg, scope, backingField, v);
            }

            Object.defineProperty(scope, name, cfg);

            return cfg;
        },

        event: function (scope, name, v, statics) {
            scope[name] = v;

            var rs = name.charAt(0) === "$",
                cap = rs ? name.slice(1) : name,
                addName = "add" + cap,
                removeName = "remove" + cap,
                lastSep = name.lastIndexOf("$"),
                endsNum = lastSep > 0 && ((name.length - lastSep - 1) > 0) && !isNaN(parseInt(name.substr(lastSep + 1)));

            if (endsNum) {
                lastSep = name.substring(0, lastSep - 1).lastIndexOf("$");
            }

            if (lastSep > 0 && lastSep !== (name.length - 1)) {
                addName = name.substring(0, lastSep) + "add" + name.substr(lastSep + 1);
                removeName = name.substring(0, lastSep) + "remove" + name.substr(lastSep + 1);
            }

            scope[addName] = (function (name, scope, statics) {
                return statics ? function (value) {
                    scope[name] = Bridge.fn.combine(scope[name], value);
                } : function (value) {
                    this[name] = Bridge.fn.combine(this[name], value);
                };
            })(name, scope, statics);

            scope[removeName] = (function (name, scope, statics) {
                return statics ? function (value) {
                    scope[name] = Bridge.fn.remove(scope[name], value);
                } : function (value) {
                    this[name] = Bridge.fn.remove(this[name], value);
                };
            })(name, scope, statics);
        },

        createInstance: function (type, args) {
            if (type === System.Decimal) {
                return System.Decimal.Zero;
            }

            if (type === System.Int64) {
                return System.Int64.Zero;
            }

            if (type === System.UInt64) {
                return System.UInt64.Zero;
            }

            if (type === System.Double ||
                type === System.Single ||
                type === System.Byte ||
                type === System.SByte ||
                type === System.Int16 ||
                type === System.UInt16 ||
                type === System.Int32 ||
                type === System.UInt32 ||
                type === Bridge.Int) {
                return 0;
            }

            if (typeof (type.createInstance) === "function") {
                return type.createInstance();
            } else if (typeof (type.getDefaultValue) === "function") {
                return type.getDefaultValue();
            } else if (type === Boolean || type === System.Boolean) {
                return false;
            } else if (type === System.DateTime) {
                return System.DateTime.getDefaultValue();
            } else if (type === Date) {
                return new Date();
            } else if (type === Number) {
                return 0;
            } else if (type === String || type === System.String) {
                return "";
            } else if (type && type.$literal) {
                return type.ctor();
            } else if (args && args.length > 0) {
                return Bridge.Reflection.applyConstructor(type, args);
            } 

            var ctors = Bridge.Reflection.getMembers(type, 1, 54);

            if (ctors.length > 0) {
                ctors = ctors.filter(function (c) { return !c.isSynthetic; });

                for (var idx = 0; idx < ctors.length; idx++) {
                    var c = ctors[idx],
                        isDefault = (c.pi || []).length === 0;

                    if (isDefault) {
                        return Bridge.Reflection.invokeCI(c, []);
                    }
                }
            }

            return new type();
        },

        clone: function (obj) {
            if (obj == null) {
                return obj;
            }

            if (Bridge.isArray(obj)) {
                return System.Array.clone(obj);
            }

            if (Bridge.isString(obj)) {
                return obj;
            }

            var name;

            if (Bridge.isFunction(Bridge.getProperty(obj, name = "System$ICloneable$clone"))) {
                return obj[name]();
            }

            if (Bridge.is(obj, System.ICloneable)) {
                return obj.clone();
            }

            if (Bridge.isFunction(obj.$clone)) {
                return obj.$clone();
            }

            return null;
        },

        copy: function (to, from, keys, toIf) {
            if (typeof keys === "string") {
                keys = keys.split(/[,;\s]+/);
            }

            for (var name, i = 0, n = keys ? keys.length : 0; i < n; i++) {
                name = keys[i];

                if (toIf !== true || to[name] == undefined) {
                    if (Bridge.is(from[name], System.ICloneable)) {
                        to[name] = Bridge.clone(from[name]);
                    } else {
                        to[name] = from[name];
                    }
                }
            }

            return to;
        },

        get: function (t) {
            if (t && t.$staticInit !== null) {
                t.$staticInit();
            }

            return t;
        },

        ns: function (ns, scope) {
            var nsParts = ns.split("."),
                i = 0;

            if (!scope) {
                scope = Bridge.global;
            }

            for (i = 0; i < nsParts.length; i++) {
                if (typeof scope[nsParts[i]] === "undefined") {
                    scope[nsParts[i]] = {};
                }

                scope = scope[nsParts[i]];
            }

            return scope;
        },

        ready: function (fn, scope) {
            var delayfn = function () {
                if (scope) {
                    fn.apply(scope);
                } else {
                    fn();
                }
            };

            if (typeof Bridge.global.jQuery !== "undefined") {
                Bridge.global.jQuery(delayfn);
            } else {
                if (typeof Bridge.global.document === "undefined" ||
                    Bridge.global.document.readyState === "complete" ||
                    Bridge.global.document.readyState === "loaded" ||
                    Bridge.global.document.readyState === "interactive") {
                    delayfn();
                } else {
                    Bridge.on("DOMContentLoaded", Bridge.global.document, delayfn);
                }
            }
        },

        on: function (event, elem, fn, scope) {
            var listenHandler = function (e) {
                var ret = fn.apply(scope || this, arguments);

                if (ret === false) {
                    e.stopPropagation();
                    e.preventDefault();
                }

                return (ret);
            };

            var attachHandler = function () {
                var ret = fn.call(scope || elem, Bridge.global.event);

                if (ret === false) {
                    Bridge.global.event.returnValue = false;
                    Bridge.global.event.cancelBubble = true;
                }

                return (ret);
            };

            if (elem.addEventListener) {
                elem.addEventListener(event, listenHandler, false);
            } else {
                elem.attachEvent("on" + event, attachHandler);
            }
        },

        addHash: function (v, r, m) {
            if (isNaN(r)) {
                r = 17;
            }

            if (isNaN(m)) {
                m = 23;
            }

            if (Bridge.isArray(v)) {
                for (var i = 0; i < v.length; i++) {
                    r = r + ((r * m | 0) + (v[i] == null ? 0 : Bridge.getHashCode(v[i]))) | 0;
                }

                return r;
            }

            return r = r + ((r * m | 0) + (v == null ? 0 : Bridge.getHashCode(v))) | 0;
        },

        getHashCode: function (value, safe, deep) {
            // In CLR: mutable object should keep on returning same value
            // Bridge.NET goals: make it deterministic (to make testing easier) without breaking CLR contracts
            //     for value types it returns deterministic values (f.e. for int 3 it returns 3)
            //     for reference types it returns random value

            if (value && value.$boxed && value.type.getHashCode) {
                return value.type.getHashCode(Bridge.unbox(value, true));
            }

            value = Bridge.unbox(value, true);

            if (Bridge.isEmpty(value, true)) {
                if (safe) {
                    return 0;
                }

                throw new System.InvalidOperationException.$ctor1("HashCode cannot be calculated for empty value");
            }

            if (deep !== false && value.hasOwnProperty("Item1") && Bridge.isPlainObject(value)) {
                deep = true;
            }

            if (value.getHashCode && Bridge.isFunction(value.getHashCode) && !value.__insideHashCode && value.getHashCode.length === 0) {
                value.__insideHashCode = true;
                var r = value.getHashCode();

                delete value.__insideHashCode;

                return r;
            }

            if (Bridge.isBoolean(value)) {
                return value ? 1 : 0;
            }

            if (Bridge.isDate(value)) {
                return value.valueOf() & 0xFFFFFFFF;
            }

            if (value === Number.POSITIVE_INFINITY) {
                return 0x7FF00000;
            }

            if (value === Number.NEGATIVE_INFINITY) {
                return 0xFFF00000;
            }

            if (Bridge.isNumber(value)) {
                if (Math.floor(value) === value) {
                    return value;
                }

                value = value.toExponential();
            }

            if (Bridge.isString(value)) {
                var hash = 0,
                    i;

                for (i = 0; i < value.length; i++) {
                    hash = (((hash << 5) - hash) + value.charCodeAt(i)) & 0xFFFFFFFF;
                }

                return hash;
            }

            if (value.$$hashCode) {
                return value.$$hashCode;
            }

            if (deep && typeof value == "object") {
                var result = 0,
                    temp;

                for (var property in value) {
                    if (value.hasOwnProperty(property)) {
                        temp = Bridge.isEmpty(value[property], true) ? 0 : Bridge.getHashCode(value[property]);
                        result = 29 * result + temp;
                    }
                }

                if (result !== 0) {
                    value.$$hashCode = result;

                    return result;
                }
            }

            value.$$hashCode = (Math.random() * 0x100000000) | 0;

            return value.$$hashCode;
        },

        getDefaultValue: function (type) {
            if (type == null) {
                throw new System.ArgumentNullException.$ctor1("type");
            } else if ((type.getDefaultValue) && type.getDefaultValue.length === 0) {
                return type.getDefaultValue();
            } else if (Bridge.Reflection.isEnum(type)) {
                return System.Enum.parse(type, 0);
            } else if (type === Boolean || type === System.Boolean) {
                return false;
            } else if (type === System.DateTime) {
                return System.DateTime.getDefaultValue();
            } else if (type === Date) {
                return new Date();
            } else if (type === Number) {
                return 0;
            }

            return null;
        },

        $$aliasCache: [],

        getTypeAlias: function (obj) {
            if (obj.$$alias) {
                return obj.$$alias;
            }

            var type = (obj.$$name || typeof obj === "function") ? obj : Bridge.getType(obj),
                alias;

            if (type.$$alias) {
                return type.$$alias;
            }

            alias = Bridge.$$aliasCache[type];
            if (alias) {
                return alias;
            }

            if (type.$isArray) {
                var elementName = Bridge.getTypeAlias(type.$elementType);
                alias = elementName + "$Array" + (type.$rank > 1 ? ("$" + type.$rank) : "");

                if (type.$$name) {
                    type.$$alias = alias;
                } else {
                    Bridge.$$aliasCache[type] = alias;
                }

                return alias;
            }

            var name = obj.$$name || Bridge.getTypeName(obj);

            alias = name.replace(/[\.\(\)\,\+]/g, "$");

            if (type.$$name) {
                type.$$alias = alias;
            } else {
                Bridge.$$aliasCache[type] = alias;
            }

            return alias;
        },

        getTypeName: function (obj) {
            return Bridge.Reflection.getTypeFullName(obj);
        },

        hasValue: function (obj) {
            return Bridge.unbox(obj, true) != null;
        },

        hasValue$1: function () {
            if (arguments.length === 0) {
                return false;
            }

            var i = 0;

            for (i; i < arguments.length; i++) {
                if (Bridge.unbox(arguments[i], true) == null) {
                    return false;
                }
            }

            return true;
        },

        isObject: function (type) {
            return type === Object || type === System.Object;
        },

        is: function (obj, type, ignoreFn, allowNull) {
            if (obj == null) {
                return !!allowNull;
            }

            if (type === System.Object) {
                type = Object;
            }

            var tt = typeof type;

            if (tt === "boolean") {
                return type;
            }

            if (obj.$boxed) {
                if (obj.type.$kind === "enum" && (obj.type.prototype.$utype === type || type === System.Enum || type === System.IFormattable || type === System.IComparable)) {
                    return true;
                } else if (type.$kind !== "interface" && !type.$nullable) {
                    return obj.type === type || Bridge.isObject(type);
                }

                if (ignoreFn !== true && type.$is) {
                    return type.$is(Bridge.unbox(obj, true));
                }

                if (Bridge.Reflection.isAssignableFrom(type, obj.type)) {
                    return true;
                }

                obj = Bridge.unbox(obj, true);
            }

            var ctor = obj.constructor === Object && obj.$getType ? obj.$getType() : Bridge.Reflection.convertType(obj.constructor);

            if (type.constructor === Function && obj instanceof type || ctor === type || Bridge.isObject(type)) {
                return true;
            }

            var hasObjKind = ctor.$kind || ctor.$$inherits,
                hasTypeKind = type.$kind;

            if (hasObjKind || hasTypeKind) {
                var isInterface = type.$isInterface;

                if (isInterface) {
                    if (hasObjKind) {
                        if (ctor.$isArrayEnumerator) {
                            return System.Array.is(obj, type);
                        }

                        return type.isAssignableFrom ? type.isAssignableFrom(ctor) : Bridge.Reflection.getInterfaces(ctor).indexOf(type) >= 0;
                    }

                    if (Bridge.isArray(obj, ctor)) {
                        return System.Array.is(obj, type);
                    }
                }

                if (ignoreFn !== true && type.$is) {
                    return type.$is(obj);
                }

                if (type.$literal) {
                    if (Bridge.isPlainObject(obj)) {
                        if (obj.$getType) {
                            return Bridge.Reflection.isAssignableFrom(type, obj.$getType());
                        }

                        return true;
                    }
                }

                return false;
            }

            if (tt === "string") {
                type = Bridge.unroll(type);
            }

            if (tt === "function" && (Bridge.getType(obj).prototype instanceof type)) {
                return true;
            }

            if (ignoreFn !== true) {
                if (typeof (type.$is) === "function") {
                    return type.$is(obj);
                }

                if (typeof (type.isAssignableFrom) === "function") {
                    return type.isAssignableFrom(Bridge.getType(obj));
                }
            }

            if (Bridge.isArray(obj)) {
                return System.Array.is(obj, type);
            }

            return tt === "object" && ((ctor === type) || (obj instanceof type));
        },

        as: function (obj, type, allowNull) {
            if (Bridge.is(obj, type, false, allowNull)) {
                return obj != null && obj.$boxed && type !== Object && type !== System.Object ? obj.v : obj;
            }
            return null;
        },

        cast: function (obj, type, allowNull) {
            if (obj == null) {
                return obj;
            }

            var result = Bridge.is(obj, type, false, allowNull) ? obj : null;

            if (result === null) {
                throw new System.InvalidCastException.$ctor1("Unable to cast type " + (obj ? Bridge.getTypeName(obj) : "'null'") + " to type " + Bridge.getTypeName(type));
            }

            if (obj.$boxed && type !== Object && type !== System.Object) {
                return obj.v;
            }

            return result;
        },

        apply: function (obj, values, callback) {
            var names = Bridge.getPropertyNames(values, true),
                i;

            for (i = 0; i < names.length; i++) {
                var name = names[i];

                if (typeof obj[name] === "function" && typeof values[name] !== "function") {
                    obj[name](values[name]);
                } else {
                    obj[name] = values[name];
                }
            }

            if (callback) {
                callback.call(obj, obj);
            }

            return obj;
        },

        copyProperties: function (to, from) {
            var names = Bridge.getPropertyNames(from, false),
                i;

            for (i = 0; i < names.length; i++) {
                var name = names[i],
                    own = from.hasOwnProperty(name),
                    dcount = name.split("$").length;

                if (own && (dcount === 1 || dcount === 2 && name.match("\$\d+$"))) {
                    to[name] = from[name];
                }

            }

            return to;
        },

        merge: function (to, from, callback, elemFactory) {
            if (to == null) {
                return from;
            }

            // Maps instance of plain JS value or Object into Bridge object.
            // Used for deserialization. Proper deserialization requires reflection that is currently not supported in Bridge.
            // It currently is only capable to deserialize:
            // -instance of single class or primitive
            // -array of primitives
            // -array of single class
            if (to instanceof System.Decimal && typeof from === "number") {
                return new System.Decimal(from);
            }

            if (to instanceof System.Int64 && Bridge.isNumber(from)) {
                return new System.Int64(from);
            }

            if (to instanceof System.UInt64 && Bridge.isNumber(from)) {
                return new System.UInt64(from);
            }

            if (to instanceof Boolean || Bridge.isBoolean(to) ||
                typeof to === "number" ||
                to instanceof String || Bridge.isString(to) ||
                to instanceof Function || Bridge.isFunction(to) ||
                to instanceof Date || Bridge.isDate(to) ||
                Bridge.getType(to).$number) {
                return from;
            }

            var key,
                i,
                value,
                toValue,
                fn;

            if (Bridge.isArray(from) && Bridge.isFunction(to.add || to.push)) {
                fn = Bridge.isArray(to) ? to.push : to.add;

                for (i = 0; i < from.length; i++) {
                    var item = from[i];

                    if (!Bridge.isArray(item)) {
                        item = [typeof elemFactory === "undefined" ? item : Bridge.merge(elemFactory(), item)];
                    }

                    fn.apply(to, item);
                }
            } else {
                var t = Bridge.getType(to),
                    descriptors = t && t.$descriptors;

                if (from) {
                    for (key in from) {
                        value = from[key];

                        var descriptor = null;

                        if (descriptors) {
                            for (var i = descriptors.length - 1; i >= 0; i--) {
                                if (descriptors[i].name === key) {
                                    descriptor = descriptors[i];

                                    break;
                                }
                            }
                        }

                        if (descriptor != null) {
                            if (descriptor.set) {
                                to[key] = Bridge.merge(to[key], value);
                            } else {
                                Bridge.merge(to[key], value);
                            }
                        } else if (typeof to[key] === "function") {
                            if (key.match(/^\s*get[A-Z]/)) {
                                Bridge.merge(to[key](), value);
                            } else {
                                to[key](value);
                            }
                        } else {
                            var setter1 = "set" + key.charAt(0).toUpperCase() + key.slice(1),
                                setter2 = "set" + key,
                                getter;

                            if (typeof to[setter1] === "function" && typeof value !== "function") {
                                getter = "g" + setter1.slice(1);

                                if (typeof to[getter] === "function") {
                                    to[setter1](Bridge.merge(to[getter](), value));
                                } else {
                                    to[setter1](value);
                                }
                            } else if (typeof to[setter2] === "function" && typeof value !== "function") {
                                getter = "g" + setter2.slice(1);

                                if (typeof to[getter] === "function") {
                                    to[setter2](Bridge.merge(to[getter](), value));
                                } else {
                                    to[setter2](value);
                                }
                            } else if (value && value.constructor === Object && to[key]) {
                                toValue = to[key];
                                Bridge.merge(toValue, value);
                            } else {
                                var isNumber = Bridge.isNumber(from);

                                if (to[key] instanceof System.Decimal && isNumber) {
                                    return new System.Decimal(from);
                                }

                                if (to[key] instanceof System.Int64 && isNumber) {
                                    return new System.Int64(from);
                                }

                                if (to[key] instanceof System.UInt64 && isNumber) {
                                    return new System.UInt64(from);
                                }

                                to[key] = value;
                            }
                        }
                    }
                } else {
                    if (callback) {
                        callback.call(to, to);
                    }

                    return from;
                }
            }

            if (callback) {
                callback.call(to, to);
            }

            return to;
        },

        getEnumerator: function (obj, fnName, T) {
            if (typeof obj === "string") {
                obj = System.String.toCharArray(obj);
            }

            if (arguments.length === 2 && Bridge.isFunction(fnName)) {
                T = fnName;
                fnName = null;
            }

            if (fnName && obj && obj[fnName]) {
                return obj[fnName].call(obj);
            }

            if (!T && obj && obj.GetEnumerator) {
                return obj.GetEnumerator();
            }

            var name;

            if (T && Bridge.isFunction(Bridge.getProperty(obj, name = "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator"))) {
                return obj[name]();
            }

            if (T && Bridge.isFunction(Bridge.getProperty(obj, name = "System$Collections$Generic$IEnumerable$1$GetEnumerator"))) {
                return obj[name]();
            }

            if (Bridge.isFunction(Bridge.getProperty(obj, name = "System$Collections$IEnumerable$GetEnumerator"))) {
                return obj[name]();
            }

            if (T && obj && obj.GetEnumerator) {
                return obj.GetEnumerator();
            }

            if ((Object.prototype.toString.call(obj) === "[object Array]") ||
                (obj && Bridge.isDefined(obj.length))) {
                return new Bridge.ArrayEnumerator(obj, T);
            }

            throw new System.InvalidOperationException.$ctor1("Cannot create Enumerator.");
        },

        getPropertyNames: function (obj, includeFunctions) {
            var names = [],
                name;

            for (name in obj) {
                if (includeFunctions || typeof obj[name] !== "function") {
                    names.push(name);
                }
            }

            return names;
        },

        getProperty: function (obj, propertyName) {
            if (Bridge.isHtmlAttributeCollection(obj) && !this.isValidHtmlAttributeName(propertyName)) {
                return undefined;
            }

            return obj[propertyName];
        },

        isValidHtmlAttributeName : function (name) {
            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

            if (!name || !name.length) {
                return false;
            }

            var r = /^[a-zA-Z_][\w\-]*$/;

            return r.test(name);
        },

        isHtmlAttributeCollection: function (obj) {
            return typeof obj !== "undefined" && (Object.prototype.toString.call(obj) === "[object NamedNodeMap]");
        },

        isDefined: function (value, noNull) {
            return typeof value !== "undefined" && (noNull ? value !== null : true);
        },

        isEmpty: function (value, allowEmpty) {
            return (typeof value === "undefined" || value === null) || (!allowEmpty ? value === "" : false) || ((!allowEmpty && Bridge.isArray(value)) ? value.length === 0 : false);
        },

        toArray: function (ienumerable) {
            var i,
                item,
                len,
                result = [];

            if (Bridge.isArray(ienumerable)) {
                for (i = 0, len = ienumerable.length; i < len; ++i) {
                    result.push(ienumerable[i]);
                }
            } else {
                i = Bridge.getEnumerator(ienumerable);

                while (i.moveNext()) {
                    item = i.Current;
                    result.push(item);
                }
            }

            return result;
        },

        toList: function (ienumerable, T) {
            return new (System.Collections.Generic.List$1(T || System.Object).$ctor1)(ienumerable);
        },

        arrayTypes: [globals.Array, globals.Uint8Array, globals.Int8Array, globals.Int16Array, globals.Uint16Array, globals.Int32Array, globals.Uint32Array, globals.Float32Array, globals.Float64Array, globals.Uint8ClampedArray],

        isArray: function (obj, ctor) {
            var c = ctor || (obj != null ? obj.constructor : null);

            if (!c) {
                return false;
            }

            return Bridge.arrayTypes.indexOf(c) >= 0 || c.$isArray || Array.isArray(obj);
        },

        isFunction: function (obj) {
            return typeof (obj) === "function";
        },

        isDate: function (obj) {
            return obj instanceof Date;
        },

        isNull: function (value) {
            return (value === null) || (value === undefined);
        },

        isBoolean: function (value) {
            return typeof value === "boolean";
        },

        isNumber: function (value) {
            return typeof value === "number" && isFinite(value);
        },

        isString: function (value) {
            return typeof value === "string";
        },

        unroll: function (value, scope) {
            if (Bridge.isArray(value)) {
                for (var i = 0; i < value.length; i++) {
                    var v = value[i];

                    if (Bridge.isString(v)) {
                        value[i] = Bridge.unroll(v, scope);
                    }
                }

                return;
            }

            var d = value.split("."),
                o = (scope || Bridge.global)[d[0]],
                i = 1;

            for (i; i < d.length; i++) {
                if (!o) {
                    return null;
                }

                o = o[d[i]];
            }

            return o;
        },

        referenceEquals: function (a, b) {
            return Bridge.hasValue(a) ? a === b : !Bridge.hasValue(b);
        },

        staticEquals: function (a, b) {
            if (!Bridge.hasValue(a)) {
                return !Bridge.hasValue(b);
            }

            return Bridge.hasValue(b) ? Bridge.equals(a, b) : false;
        },

        equals: function (a, b) {
            if (a == null && b == null) {
                return true;
            }

            var guardItem = Bridge.$equalsGuard[Bridge.$equalsGuard.length - 1];

            if (guardItem && guardItem.a === a && guardItem.b === b) {
                return a === b;
            }

            Bridge.$equalsGuard.push({a: a, b: b});

            var fn = function (a, b) {
                if (a && a.$boxed && a.type.equals && a.type.equals.length === 2) {
                    return a.type.equals(a, b);
                }

                if (b && b.$boxed && b.type.equals && b.type.equals.length === 2) {
                    return b.type.equals(b, a);
                }

                if (a && Bridge.isFunction(a.equals) && a.equals.length === 1) {
                    return a.equals(b);
                }

                if (b && Bridge.isFunction(b.equals) && b.equals.length === 1) {
                    return b.equals(a);
                } if (Bridge.isFunction(a) && Bridge.isFunction(b)) {
                    return Bridge.fn.equals.call(a, b);
                } else if (Bridge.isDate(a) && Bridge.isDate(b)) {
                    if (a.kind !== undefined && a.ticks !== undefined && b.kind !== undefined && b.ticks !== undefined) {
                        return a.ticks.equals(b.ticks);
                    }

                    return a.valueOf() === b.valueOf();
                } else if (Bridge.isNull(a) && Bridge.isNull(b)) {
                    return true;
                } else if (Bridge.isNull(a) !== Bridge.isNull(b)) {
                    return false;
                }

                var eq = a === b;

                if (!eq && typeof a === "object" && typeof b === "object" && a !== null && b !== null && a.$kind === "struct" && b.$kind === "struct" && a.$$name === b.$$name) {
                    return Bridge.getHashCode(a) === Bridge.getHashCode(b) && Bridge.objectEquals(a, b);
                }

                if (!eq && a && b && a.hasOwnProperty("Item1") && Bridge.isPlainObject(a) && b.hasOwnProperty("Item1") && Bridge.isPlainObject(b)) {
                    return Bridge.objectEquals(a, b);
                }

                return eq;
            };

            var result = fn(a, b);
            Bridge.$equalsGuard.pop();

            return result;
        },

        objectEquals: function (a, b) {
            Bridge.$$leftChain = [];
            Bridge.$$rightChain = [];

            var result = Bridge.deepEquals(a, b);

            delete Bridge.$$leftChain;
            delete Bridge.$$rightChain;

            return result;
        },

        deepEquals: function (a, b) {
            if (typeof a === "object" && typeof b === "object") {
                if (a === b) {
                    return true;
                }

                if (Bridge.$$leftChain.indexOf(a) > -1 || Bridge.$$rightChain.indexOf(b) > -1) {
                    return false;
                }

                var p;

                for (p in b) {
                    if (b.hasOwnProperty(p) !== a.hasOwnProperty(p)) {
                        return false;
                    } else if (typeof b[p] !== typeof a[p]) {
                        return false;
                    }
                }

                for (p in a) {
                    if (b.hasOwnProperty(p) !== a.hasOwnProperty(p)) {
                        return false;
                    } else if (typeof a[p] !== typeof b[p]) {
                        return false;
                    }

                    if (a[p] === b[p]) {
                        continue;
                    } else if (typeof (a[p]) === "object") {
                        Bridge.$$leftChain.push(a);
                        Bridge.$$rightChain.push(b);

                        if (!Bridge.deepEquals(a[p], b[p])) {
                            return false;
                        }

                        Bridge.$$leftChain.pop();
                        Bridge.$$rightChain.pop();
                    } else {
                        if (!Bridge.equals(a[p], b[p])) {
                            return false;
                        }
                    }
                }

                return true;
            } else {
                return Bridge.equals(a, b);
            }
        },

        numberCompare : function (a, b) {
            if (a < b) {
                return -1;
            }

            if (a > b) {
                return 1;
            }

            if (a == b) {
                return 0;
            }

            if (!isNaN(a)) {
                return 1;
            }

            if (!isNaN(b)) {
                return -1;
            }

            return 0;
        },

        compare: function (a, b, safe, T) {
            if (a && a.$boxed) {
                a = Bridge.unbox(a, true);
            }

            if (b && b.$boxed) {
                b = Bridge.unbox(b, true);
            }

            if (typeof a === "number" && typeof b === "number") {
                return Bridge.numberCompare(a, b);
            }

            if (!Bridge.isDefined(a, true)) {
                if (safe) {
                    return 0;
                }

                throw new System.NullReferenceException();
            } else if (Bridge.isNumber(a) || Bridge.isString(a) || Bridge.isBoolean(a)) {
                if (Bridge.isString(a) && !Bridge.hasValue(b)) {
                    return 1;
                }

                return a < b ? -1 : (a > b ? 1 : 0);
            } else if (Bridge.isDate(a)) {
                if (a.kind !== undefined && a.ticks !== undefined) {
                    return Bridge.compare(a.ticks, b.ticks);
                }

                return Bridge.compare(a.valueOf(), b.valueOf());
            }

            var name;

            if (T && Bridge.isFunction(Bridge.getProperty(a, name = "System$IComparable$1$" + Bridge.getTypeAlias(T) + "$compareTo"))) {
                return a[name](b);
            }

            if (T && Bridge.isFunction(Bridge.getProperty(a, name = "System$IComparable$1$compareTo"))) {
                return a[name](b);
            }

            if (Bridge.isFunction(Bridge.getProperty(a, name = "System$IComparable$compareTo"))) {
                return a[name](b);
            }

            if (Bridge.isFunction(a.compareTo)) {
                return a.compareTo(b);
            }

            if (T && Bridge.isFunction(Bridge.getProperty(b, name = "System$IComparable$1$" + Bridge.getTypeAlias(T) + "$compareTo"))) {
                return -b[name](a);
            }

            if (T && Bridge.isFunction(Bridge.getProperty(b, name = "System$IComparable$1$compareTo"))) {
                return -b[name](a);
            }

            if (Bridge.isFunction(Bridge.getProperty(b, name = "System$IComparable$compareTo"))) {
                return -b[name](a);
            }

            if (Bridge.isFunction(b.compareTo)) {
                return -b.compareTo(a);
            }

            if (safe) {
                return 0;
            }

            throw new System.Exception("Cannot compare items");
        },

        equalsT: function (a, b, T) {
            if (a && a.$boxed && a.type.equalsT && a.type.equalsT.length === 2) {
                return a.type.equalsT(a, b);
            }

            if (b && b.$boxed && b.type.equalsT && b.type.equalsT.length === 2) {
                return b.type.equalsT(b, a);
            }

            if (!Bridge.isDefined(a, true)) {
                throw new System.NullReferenceException();
            } else if (Bridge.isNumber(a) || Bridge.isString(a) || Bridge.isBoolean(a)) {
                return a === b;
            } else if (Bridge.isDate(a)) {
                if (a.kind !== undefined && a.ticks !== undefined) {
                    return a.ticks.equals(b.ticks);
                }

                return a.valueOf() === b.valueOf();
            }

            var name;

            if (T && a != null && Bridge.isFunction(Bridge.getProperty(a, name = "System$IEquatable$1$" + Bridge.getTypeAlias(T) + "$equalsT"))) {
                return a[name](b);
            }

            if (T && b != null && Bridge.isFunction(Bridge.getProperty(b, name = "System$IEquatable$1$" + Bridge.getTypeAlias(T) + "$equalsT"))) {
                return b[name](a);
            }

            if (Bridge.isFunction(a) && Bridge.isFunction(b)) {
                return Bridge.fn.equals.call(a, b);
            }

            return a.equalsT ? a.equalsT(b) : b.equalsT(a);
        },

        format: function (obj, formatString, provider) {
            if (obj && obj.$boxed) {
                if (obj.type.$kind === "enum") {
                    return System.Enum.format(obj.type, obj.v, formatString);
                } else if (obj.type === System.Char) {
                    return System.Char.format(Bridge.unbox(obj, true), formatString, provider);
                } else if (obj.type.format) {
                    return obj.type.format(Bridge.unbox(obj, true), formatString, provider);
                }
            }

            if (Bridge.isNumber(obj)) {
                return Bridge.Int.format(obj, formatString, provider);
            } else if (Bridge.isDate(obj)) {
                return System.DateTime.format(obj, formatString, provider);
            }

            var name;

            if (Bridge.isFunction(Bridge.getProperty(obj, name = "System$IFormattable$format"))) {
                return obj[name](formatString, provider);
            }

            return obj.format(formatString, provider);
        },

        getType: function (instance, T) {
            if (instance && instance.$boxed) {
                return instance.type;
            }

            if (instance == null) {
                throw new System.NullReferenceException.$ctor1("instance is null");
            }

            if (T) {               
                var type = Bridge.getType(instance);
                return Bridge.Reflection.isAssignableFrom(T, type) ? type : T;
            }

            if (typeof (instance) === "number") {
                if (!isNaN(instance) && isFinite(instance) && Math.floor(instance, 0) === instance) {
                    return System.Int32;
                } else {
                    return System.Double;
                }
            }

            if (instance.$type) {
                return instance.$type;
            }

            if (instance.$getType) {
                return instance.$getType();
            }

            var result = null;

            try {
                result = instance.constructor;
            } catch (ex) {
                result = Object;
            }

            if (result === Object) {
                var str = instance.toString(),
                    match = (/\[object (.{1,})\]/).exec(str),
                    name = (match && match.length > 1) ? match[1] : "Object";

                if (name != "Object") {
                    result = instance;
                }
            }

            return Bridge.Reflection.convertType(result);
        },

        isLower: function (c) {
            var s = String.fromCharCode(c);

            return s === s.toLowerCase() && s !== s.toUpperCase();
        },

        isUpper: function (c) {
            var s = String.fromCharCode(c);

            return s !== s.toLowerCase() && s === s.toUpperCase();
        },

        coalesce: function (a, b) {
            return Bridge.hasValue(a) ? a : b;
        },

        fn: {
            equals: function (fn) {
                if (this === fn) {
                    return true;
                }

                if (fn == null || (this.constructor !== fn.constructor)) {
                    return false;
                }

                return this.equals && (this.equals === fn.equals) && this.$method && (this.$method === fn.$method) && this.$scope && (this.$scope === fn.$scope);
            },

            call: function (obj, fnName) {
                var args = Array.prototype.slice.call(arguments, 2);

                obj = obj || Bridge.global;

                return obj[fnName].apply(obj, args);
            },

            makeFn: function (fn, length) {
                switch (length) {
                    case 0:
                        return function () {
                            return fn.apply(this, arguments);
                        };
                    case 1:
                        return function (a) {
                            return fn.apply(this, arguments);
                        };
                    case 2:
                        return function (a, b) {
                            return fn.apply(this, arguments);
                        };
                    case 3:
                        return function (a, b, c) {
                            return fn.apply(this, arguments);
                        };
                    case 4:
                        return function (a, b, c, d) {
                            return fn.apply(this, arguments);
                        };
                    case 5:
                        return function (a, b, c, d, e) {
                            return fn.apply(this, arguments);
                        };
                    case 6:
                        return function (a, b, c, d, e, f) {
                            return fn.apply(this, arguments);
                        };
                    case 7:
                        return function (a, b, c, d, e, f, g) {
                            return fn.apply(this, arguments);
                        };
                    case 8:
                        return function (a, b, c, d, e, f, g, h) {
                            return fn.apply(this, arguments);
                        };
                    case 9:
                        return function (a, b, c, d, e, f, g, h, i) {
                            return fn.apply(this, arguments);
                        };
                    case 10:
                        return function (a, b, c, d, e, f, g, h, i, j) {
                            return fn.apply(this, arguments);
                        };
                    case 11:
                        return function (a, b, c, d, e, f, g, h, i, j, k) {
                            return fn.apply(this, arguments);
                        };
                    case 12:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l) {
                            return fn.apply(this, arguments);
                        };
                    case 13:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m) {
                            return fn.apply(this, arguments);
                        };
                    case 14:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
                            return fn.apply(this, arguments);
                        };
                    case 15:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
                            return fn.apply(this, arguments);
                        };
                    case 16:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
                            return fn.apply(this, arguments);
                        };
                    case 17:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
                            return fn.apply(this, arguments);
                        };
                    case 18:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
                            return fn.apply(this, arguments);
                        };
                    case 19:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
                            return fn.apply(this, arguments);
                        };
                    default:
                        return function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
                            return fn.apply(this, arguments);
                        };
                }
            },

            cacheBind: function (obj, method, args, appendArgs) {
                return Bridge.fn.bind(obj, method, args, appendArgs, true);
            },

            bind: function (obj, method, args, appendArgs, cache) {
                if (method && method.$method === method && method.$scope === obj) {
                    return method;
                }

                if (obj && cache && obj.$$bind) {
                    for (var i = 0; i < obj.$$bind.length; i++) {
                        if (obj.$$bind[i].$method === method) {
                            return obj.$$bind[i];
                        }
                    }
                }

                var fn;

                if (arguments.length === 2) {
                    fn = Bridge.fn.makeFn(function () {
                        Bridge.caller.unshift(this);

                        var result = null;

                        try {
                            result = method.apply(obj, arguments);
                        } finally {
                            Bridge.caller.shift(this);
                        }

                        return result;
                    }, method.length);
                } else {
                    fn = Bridge.fn.makeFn(function () {
                        var callArgs = args || arguments;

                        if (appendArgs === true) {
                            callArgs = Array.prototype.slice.call(arguments, 0);
                            callArgs = callArgs.concat(args);
                        } else if (typeof appendArgs === "number") {
                            callArgs = Array.prototype.slice.call(arguments, 0);

                            if (appendArgs === 0) {
                                callArgs.unshift.apply(callArgs, args);
                            } else if (appendArgs < callArgs.length) {
                                callArgs.splice.apply(callArgs, [appendArgs, 0].concat(args));
                            } else {
                                callArgs.push.apply(callArgs, args);
                            }
                        }

                        Bridge.caller.unshift(this);

                        var result = null;

                        try {
                            result = method.apply(obj, callArgs);
                        } finally {
                            Bridge.caller.shift(this);
                        }

                        return result;
                    }, method.length);
                }

                if (obj && cache) {
                    obj.$$bind = obj.$$bind || [];
                    obj.$$bind.push(fn);
                }

                fn.$method = method;
                fn.$scope = obj;
                fn.equals = Bridge.fn.equals;

                return fn;
            },

            bindScope: function (obj, method) {
                var fn = Bridge.fn.makeFn(function () {
                    var callArgs = Array.prototype.slice.call(arguments, 0);

                    callArgs.unshift.apply(callArgs, [obj]);

                    Bridge.caller.unshift(this);

                    var result = null;

                    try {
                        result = method.apply(obj, callArgs);
                    } finally {
                        Bridge.caller.shift(this);
                    }

                    return result;
                }, method.length);

                fn.$method = method;
                fn.$scope = obj;
                fn.equals = Bridge.fn.equals;

                return fn;
            },

            $build: function (handlers) {
                if (!handlers || handlers.length === 0) {
                    return null;
                }

                var fn = function () {
                    var result = null,
                        i,
                        handler;

                    for (i = 0; i < handlers.length; i++) {
                        handler = handlers[i];
                        result = handler.apply(null, arguments);
                    }

                    return result;
                };

                fn.$invocationList = handlers ? Array.prototype.slice.call(handlers, 0) : [];
                handlers = fn.$invocationList.slice();

                return fn;
            },

            combine: function (fn1, fn2) {
                if (!fn1 || !fn2) {
                    var fn = fn1 || fn2;

                    return fn ? Bridge.fn.$build([fn]) : fn;
                }

                var list1 = fn1.$invocationList ? fn1.$invocationList : [fn1],
                    list2 = fn2.$invocationList ? fn2.$invocationList : [fn2];

                return Bridge.fn.$build(list1.concat(list2));
            },

            getInvocationList: function (fn) {
                if (fn == null) {
                    throw new System.ArgumentNullException();
                }

                if (!fn.$invocationList) {
                    fn.$invocationList = [fn];
                }

                return fn.$invocationList;
            },

            remove: function (fn1, fn2) {
                if (!fn1 || !fn2) {
                    return fn1 || null;
                }

                var list1 = fn1.$invocationList ? fn1.$invocationList : [fn1],
                    list2 = fn2.$invocationList ? fn2.$invocationList : [fn2],
                    result = [],
                    exclude,
                    i,
                    j;

                for (j = 0; j < list2.length; j++) {
                    exclude = -1;

                    for (i = list1.length - 1; i >= 0; i--) {
                        if (list1[i] === list2[j] ||
                            ((list1[i].$method && (list1[i].$method === list2[j].$method)) && (list1[i].$scope && (list1[i].$scope === list2[j].$scope)))) {
                            exclude = i;

                            break;
                        }
                    }

                    if (exclude > -1) {
                        list1.splice(exclude, 1);
                    }
                }

                return Bridge.fn.$build(list1);
            }
        },

        sleep: function (ms, timeout) {
            if (Bridge.hasValue(timeout)) {
                ms = timeout.getTotalMilliseconds();
            }

            if (isNaN(ms) || ms < -1 || ms > 2147483647) {
                throw new System.ArgumentOutOfRangeException.$ctor4("timeout", "Number must be either non-negative and less than or equal to Int32.MaxValue or -1");
            }

            if (ms == -1) {
                ms = 2147483647;
            }

            var start = new Date().getTime();

            while ((new Date().getTime() - start) < ms) {
                if ((new Date().getTime() - start) > 2147483647) {
                    break;
                }
            }
        },

        getMetadata: function (t) {
            var m = t.$getMetadata ? t.$getMetadata() : t.$metadata;

            return m;
        },

        loadModule: function (config, callback) {
            var amd = config.amd,
                cjs = config.cjs,
                fnName = config.fn;

            var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                fn = Bridge.global[fnName || "require"];

            if (amd && amd.length > 0) {
                fn(amd, function () {
                    var loads = Array.prototype.slice.call(arguments, 0);

                    if (cjs && cjs.length > 0) {
                        for (var i = 0; i < cjs.length; i++) {
                            loads.push(fn(cjs[i]));
                        }
                    }

                    callback.apply(Bridge.global, loads);
                    tcs.setResult();
                });
            } else if (cjs && cjs.length > 0) {
                var t = new System.Threading.Tasks.Task();
                t.status = System.Threading.Tasks.TaskStatus.ranToCompletion;

                var loads = [];

                for (var j = 0; j < cjs.length; j++) {
                    loads.push(fn(cjs[j]));
                }

                callback.apply(Bridge.global, loads);

                return t;
            } else {
                var t = new System.Threading.Tasks.Task();
                t.status = System.Threading.Tasks.TaskStatus.ranToCompletion;

                return t;
            }

            return tcs.task;
        }
    };

    if (!globals.setImmediate) {
        core.setImmediate = (function () {
            var head = {},
                tail = head;

            var id = Math.random();

            function onmessage (e) {
                if (e.data != id) {
                    return;
                }

                head = head.next;
                var func = head.func;
                delete head.func;
                func();
            }

            if (typeof window !== "undefined") {
                if (window.addEventListener) {
                    window.addEventListener("message", onmessage);
                } else {
                    window.attachEvent("onmessage", onmessage);
                }
            }

            return function (func) {
                tail = tail.next = { func: func };

                if (typeof window !== "undefined") {
                    window.postMessage(id, "*");
                }
            };
        }());
    } else {
        core.setImmediate = globals.setImmediate.bind(globals);
    }

    globals.Bridge = core;
    globals.Bridge.caller = [];
    globals.Bridge.$equalsGuard = [];
    globals.Bridge.$toStringGuard = [];

    if (globals.console) {
        globals.Bridge.Console = globals.console;
    }

    globals.System = {};
    globals.System.Diagnostics = {};
    globals.System.Diagnostics.Contracts = {};
    globals.System.Threading = {};

    // @source Browser.js

    var check = function (regex) {
        return Bridge.global.navigator && regex.test(Bridge.global.navigator.userAgent.toLowerCase());
    },

    isStrict = Bridge.global.document && Bridge.global.document.compatMode === "CSS1Compat",

    version = function (is, regex) {
        var m;

        return Bridge.global.navigator && (is && (m = regex.exec(navigator.userAgent.toLowerCase()))) ? parseFloat(m[1]) : 0;
    },

    docMode = Bridge.global.document ? Bridge.global.document.documentMode : null,
    isOpera = check(/opera/),
    isOpera10_5 = isOpera && check(/version\/10\.5/),
    isChrome = check(/\bchrome\b/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isSafari5_0 = isSafari && check(/version\/5\.0/),
    isSafari5 = isSafari && check(/version\/5/),
    isIE = !isOpera && (check(/msie/) || check(/trident/)),
    isIE7 = isIE && ((check(/msie 7/) && docMode !== 8 && docMode !== 9 && docMode !== 10) || docMode === 7),
    isIE8 = isIE && ((check(/msie 8/) && docMode !== 7 && docMode !== 9 && docMode !== 10) || docMode === 8),
    isIE9 = isIE && ((check(/msie 9/) && docMode !== 7 && docMode !== 8 && docMode !== 10) || docMode === 9),
    isIE10 = isIE && ((check(/msie 10/) && docMode !== 7 && docMode !== 8 && docMode !== 9) || docMode === 10),
    isIE11 = isIE && ((check(/trident\/7\.0/) && docMode !== 7 && docMode !== 8 && docMode !== 9 && docMode !== 10) || docMode === 11),
    isIE6 = isIE && check(/msie 6/),
    isGecko = !isWebKit && !isIE && check(/gecko/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isGecko4 = isGecko && check(/rv:2\.0/),
    isGecko5 = isGecko && check(/rv:5\./),
    isGecko10 = isGecko && check(/rv:10\./),
    isFF3_0 = isGecko3 && check(/rv:1\.9\.0/),
    isFF3_5 = isGecko3 && check(/rv:1\.9\.1/),
    isFF3_6 = isGecko3 && check(/rv:1\.9\.2/),
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isLinux = check(/linux/),
    scrollbarSize = null,
    chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/),
    firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/),
    ieVersion = version(isIE, /msie (\d+\.\d+)/),
    operaVersion = version(isOpera, /version\/(\d+\.\d+)/),
    safariVersion = version(isSafari, /version\/(\d+\.\d+)/),
    webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/),
    isSecure = Bridge.global.location ? /^https/i.test(Bridge.global.location.protocol) : false,
    isiPhone = Bridge.global.navigator && /iPhone/i.test(Bridge.global.navigator.platform),
    isiPod = Bridge.global.navigator && /iPod/i.test(Bridge.global.navigator.platform),
    isiPad = Bridge.global.navigator && /iPad/i.test(Bridge.global.navigator.userAgent),
    isBlackberry = Bridge.global.navigator && /Blackberry/i.test(Bridge.global.navigator.userAgent),
    isAndroid = Bridge.global.navigator && /Android/i.test(Bridge.global.navigator.userAgent),
    isDesktop = isMac || isWindows || (isLinux && !isAndroid),
    isTablet = isiPad,
    isPhone = !isDesktop && !isTablet;

    var browser = {
        isStrict: isStrict,
        isIEQuirks: isIE && (!isStrict && (isIE6 || isIE7 || isIE8 || isIE9)),
        isOpera: isOpera,
        isOpera10_5: isOpera10_5,
        isWebKit: isWebKit,
        isChrome: isChrome,
        isSafari: isSafari,
        isSafari3: isSafari3,
        isSafari4: isSafari4,
        isSafari5: isSafari5,
        isSafari5_0: isSafari5_0,
        isSafari2: isSafari2,
        isIE: isIE,
        isIE6: isIE6,
        isIE7: isIE7,
        isIE7m: isIE6 || isIE7,
        isIE7p: isIE && !isIE6,
        isIE8: isIE8,
        isIE8m: isIE6 || isIE7 || isIE8,
        isIE8p: isIE && !(isIE6 || isIE7),
        isIE9: isIE9,
        isIE9m: isIE6 || isIE7 || isIE8 || isIE9,
        isIE9p: isIE && !(isIE6 || isIE7 || isIE8),
        isIE10: isIE10,
        isIE10m: isIE6 || isIE7 || isIE8 || isIE9 || isIE10,
        isIE10p: isIE && !(isIE6 || isIE7 || isIE8 || isIE9),
        isIE11: isIE11,
        isIE11m: isIE6 || isIE7 || isIE8 || isIE9 || isIE10 || isIE11,
        isIE11p: isIE && !(isIE6 || isIE7 || isIE8 || isIE9 || isIE10),
        isGecko: isGecko,
        isGecko3: isGecko3,
        isGecko4: isGecko4,
        isGecko5: isGecko5,
        isGecko10: isGecko10,
        isFF3_0: isFF3_0,
        isFF3_5: isFF3_5,
        isFF3_6: isFF3_6,
        isFF4: 4 <= firefoxVersion && firefoxVersion < 5,
        isFF5: 5 <= firefoxVersion && firefoxVersion < 6,
        isFF10: 10 <= firefoxVersion && firefoxVersion < 11,
        isLinux: isLinux,
        isWindows: isWindows,
        isMac: isMac,
        chromeVersion: chromeVersion,
        firefoxVersion: firefoxVersion,
        ieVersion: ieVersion,
        operaVersion: operaVersion,
        safariVersion: safariVersion,
        webKitVersion: webKitVersion,
        isSecure: isSecure,
        isiPhone: isiPhone,
        isiPod: isiPod,
        isiPad: isiPad,
        isBlackberry: isBlackberry,
        isAndroid: isAndroid,
        isDesktop: isDesktop,
        isTablet: isTablet,
        isPhone: isPhone,
        iOS: isiPhone || isiPad || isiPod,
        standalone: Bridge.global.navigator ? !!Bridge.global.navigator.standalone : false
    };

    Bridge.Browser = browser;

    // @source Class.js

        var base = {
        _initialize: function () {
            if (this.$init) {
                return;
            }

            this.$init = {};

            if (this.$staticInit) {
                this.$staticInit();
            }

            if (this.$initMembers) {
                this.$initMembers();
            }
        },

        initConfig: function (extend, base, config, statics, scope, prototype) {
            var initFn,
                name,
                cls = (statics ? scope : scope.ctor),
                descriptors = cls.$descriptors,
                aliases = cls.$aliases;

            if (config.fields) {
                for (name in config.fields) {
                    scope[name] = config.fields[name];
                }
            }

            var props = config.properties;
            if (props) {
                for (name in props) {
                    var v = props[name],
                        d,
                        cfg;

                    if (v != null && Bridge.isPlainObject(v) && (!v.get || !v.set)) {
                        for (var k = 0; k < descriptors.length; k++) {
                            if (descriptors[k].name === name) {
                                d = descriptors[k];
                            }
                        }

                        if (d && d.get && !v.get) {
                            v.get = d.get;
                        }

                        if (d && d.set && !v.set) {
                            v.set = d.set;
                        }
                    }

                    cfg = Bridge.property(statics ? scope : prototype, name, v, statics, cls);
                    cfg.name = name;
                    cfg.cls = cls;

                    descriptors.push(cfg);
                }
            }

            if (config.events) {
                for (name in config.events) {
                    Bridge.event(scope, name, config.events[name], statics);
                }
            }

            if (config.alias) {
                for (var i = 0; i < config.alias.length; i++) {
                    (function (obj, name, alias, cls) {
                        var descriptor = null;

                        for (var i = descriptors.length - 1; i >= 0; i--) {
                            if (descriptors[i].name === name) {
                                descriptor = descriptors[i];

                                break;
                            }
                        }

                        var arr = Array.isArray(alias) ? alias : [alias];

                        for (var j = 0; j < arr.length; j++) {
                            alias = arr[j];

                            if (descriptor != null) {
                                Object.defineProperty(obj, alias, descriptor);
                                aliases.push({ alias: alias, descriptor: descriptor });
                            } else {
                                var m = scope[name];

                                if (m === undefined && prototype) {
                                    m = prototype[name];
                                }

                                if (!Bridge.isFunction(m)) {
                                    descriptor = {
                                        get: function () {
                                            return this[name];
                                        },

                                        set: function (value) {
                                            this[name] = value;
                                        }
                                    };
                                    Object.defineProperty(obj, alias, descriptor);
                                    aliases.push({ alias: alias, descriptor: descriptor });
                                } else {
                                    obj[alias] = m;
                                    aliases.push({ fn: name, alias: alias });
                                }
                            }
                        }
                    })(statics ? scope : prototype, config.alias[i], config.alias[i + 1], cls);

                    i++;
                }
            }

            if (config.init) {
                initFn = config.init;
            }

            if (initFn || (extend && !statics && base.$initMembers)) {
                scope.$initMembers = function () {
                    if (extend && !statics && base.$initMembers) {
                        base.$initMembers.call(this);
                    }

                    if (initFn) {
                        initFn.call(this);
                    }
                };
            }
        },

        convertScheme: function (obj) {
            var result = {},
                copy = function (obj, to) {

                var reserved = ["fields", "methods", "events", "props", "properties", "alias", "ctors"],
                    keys = Object.keys(obj);

                for (var i = 0; i < keys.length; i++) {
                    var name = keys[i];

                    if (reserved.indexOf(name) === -1) {
                        to[name] = obj[name];
                    }
                }

                if (obj.fields) {
                    Bridge.apply(to, obj.fields);
                }

                if (obj.methods) {
                    Bridge.apply(to, obj.methods);
                }

                var config = {},
                    write = false;

                if (obj.props) {
                    config.properties = obj.props;
                    write = true;
                } else if (obj.properties) {
                    config.properties = obj.properties;
                    write = true;
                }

                if (obj.events) {
                    config.events = obj.events;
                    write = true;
                }

                if (obj.alias) {
                    config.alias = obj.alias;
                    write = true;
                }

                if (obj.ctors) {
                    if (obj.ctors.init) {
                        config.init = obj.ctors.init;
                        write = true;
                        delete obj.ctors.init;
                    }

                    Bridge.apply(to, obj.ctors);
                }

                if (write) {
                    to.$config = config;
                }
            };

            if (obj.main) {
                result.$main = obj.main;
                delete obj.main;
            }

            copy(obj, result);

            if (obj.statics || obj.$statics) {
                result.$statics = {};
                copy(obj.statics || obj.$statics, result.$statics);
            }

            return result;
        },

        definei: function (className, gscope, prop) {
            if ((prop === true || !prop) && gscope) {
                gscope.$kind = "interface";
            } else if (prop) {
                prop.$kind = "interface";
            } else {
                gscope = { $kind: "interface" };
            }

            var c = Bridge.define(className, gscope, prop);

            c.$kind = "interface";
            c.$isInterface = true;

            return c;
        },

        // Create a new Class that inherits from this class
        define: function (className, gscope, prop, gCfg) {
            var isGenericInstance = false;

            if (prop === true) {
                isGenericInstance = true;
                prop = gscope;
                gscope = Bridge.global;
            } else if (!prop) {
                prop = gscope;
                gscope = Bridge.global;
            }

            var fn;

            if (Bridge.isFunction(prop)) {
                fn = function () {
                    var args,
                        key,
                        obj,
                        c;

                    key = Bridge.Class.getCachedType(fn, arguments);

                    if (key) {
                        return key.type;
                    }

                    args = Array.prototype.slice.call(arguments);
                    obj = prop.apply(null, args);
                    c = Bridge.define(Bridge.Class.genericName(className, args), obj, true, { fn: fn, args: args });

                    if (!Bridge.Class.staticInitAllow && !Bridge.Class.queueIsBlocked) {
                        Bridge.Class.$queue.push(c);
                    }

                    return Bridge.get(c);
                };

                fn.$cache = [];

                return Bridge.Class.generic(className, gscope, fn, prop);
            }

            if (!isGenericInstance) {
                Bridge.Class.staticInitAllow = false;
            }

            prop = prop || {};
            prop.$kind = prop.$kind || "class";

            var isNested = false;

            if (prop.$kind.match("^nested ") !== null) {
                isNested = true;
                prop.$kind = prop.$kind.substr(7);
            }

            if (prop.$kind === "enum" && !prop.inherits) {
                prop.inherits = [System.IComparable, System.IFormattable];
            }

            var rNames = ["fields", "events", "props", "ctors", "methods"],
                defaultScheme = Bridge.isFunction(prop.main) ? 0 : 1,
                check = function (scope) {
                    if (scope.config && Bridge.isPlainObject(scope.config) ||
                        scope.$main && Bridge.isFunction(scope.$main) ||
                        scope.hasOwnProperty("ctor") && Bridge.isFunction(scope.ctor)) {
                        defaultScheme = 1;

                        return false;
                    }

                    if (scope.alias && Bridge.isArray(scope.alias) && scope.alias.length > 0 && scope.alias.length % 2 === 0) {
                        return true;
                    }

                    for (var j = 0; j < rNames.length; j++) {
                        if (scope[rNames[j]] && Bridge.isPlainObject(scope[rNames[j]])) {
                            return true;
                        }
                    }

                    return false;
                },
                alternateScheme = check(prop);

            if (!alternateScheme && prop.statics) {
                alternateScheme = check(prop.statics);
            }

            if (!alternateScheme) {
                alternateScheme = defaultScheme == 0;
            }

            if (alternateScheme) {
                prop = Bridge.Class.convertScheme(prop);
            }

            var extend = prop.$inherits || prop.inherits,
                statics = prop.$statics || prop.statics,
                isEntryPoint = prop.$entryPoint,
                base,
                prototype,
                scope = prop.$scope || gscope || Bridge.global,
                objectType = Bridge.global.System && Bridge.global.System.Object || Object,
                i,
                v,
                isCtor,
                ctorName,
                name,
                registerT = true;

            if (prop.$kind === "enum") {
                extend = [System.Enum];
            }

            if (prop.$noRegister === true) {
                registerT = false;
                delete prop.$noRegister;
            }

            if (prop.$inherits) {
                delete prop.$inherits;
            } else {
                delete prop.inherits;
            }

            if (isEntryPoint) {
                delete prop.$entryPoint;
            }

            if (Bridge.isFunction(statics)) {
                statics = null;
            } else if (prop.$statics) {
                delete prop.$statics;
            } else {
                delete prop.statics;
            }

            var Class,
                cls = prop.hasOwnProperty("ctor") && prop.ctor;

            if (!cls) {
                if (prop.$literal) {
                    Class = function (obj) {
                        obj = obj || {};
                        obj.$getType = function () { return Class };

                        return obj;
                    };
                } else {
                    Class = function () {
                        this.$initialize();

                        if (Class.$base) {
                            if (Class.$$inherits && Class.$$inherits.length > 0 && Class.$$inherits[0].$staticInit) {
                                Class.$$inherits[0].$staticInit();
                            }

                            if (Class.$base.ctor) {
                                Class.$base.ctor.call(this);
                            } else if (Bridge.isFunction(Class.$base.constructor)) {
                                Class.$base.constructor.call(this);
                            }
                        }
                    };
                }

                prop.ctor = Class;
            } else {
                Class = cls;
            }

            if (prop.$literal) {
                if ((!statics || !statics.createInstance)) {
                    Class.createInstance = function () {
                        var obj = {};

                        obj.$getType = function () { return Class };

                        return obj;
                    };
                }

                Class.$literal = true;
                delete prop.$literal;
            }

            if (!isGenericInstance && registerT) {
                scope = Bridge.Class.set(scope, className, Class);
            }

            if (gCfg) {
                gCfg.fn.$cache.push({ type: Class, args: gCfg.args });
            }

            Class.$$name = className;

            if (isNested) {
                var lastIndex = Class.$$name.lastIndexOf(".");

                Class.$$name = Class.$$name.substr(0, lastIndex) + "+" + Class.$$name.substr(lastIndex + 1)
            }

            Class.$kind = prop.$kind;

            if (prop.$metadata) {
                Class.$metadata = prop.$metadata;
            }

            if (gCfg && isGenericInstance) {
                Class.$genericTypeDefinition = gCfg.fn;
                Class.$typeArguments = gCfg.args;
                Class.$assembly = gCfg.fn.$assembly || Bridge.$currentAssembly;

                var result = Bridge.Reflection.getTypeFullName(gCfg.fn);

                for (i = 0; i < gCfg.args.length; i++) {
                    result += (i === 0 ? "[" : ",") + "[" + Bridge.Reflection.getTypeQName(gCfg.args[i]) + "]";
                }

                result += "]";

                Class.$$fullname = result;
            } else {
                Class.$$fullname = Class.$$name;
            }

            if (extend && Bridge.isFunction(extend)) {
                extend = extend();
            }

            Bridge.Class.createInheritors(Class, extend);

            var noBase = extend ? extend[0].$kind === "interface" : true;

            if (noBase) {
                extend = null;
            }

            base = extend ? extend[0].prototype : this.prototype;
            Class.$base = base;

            if (extend && !extend[0].$$initCtor) {
                var cls = extend[0];
                var $$initCtor = function () { };
                $$initCtor.prototype = cls.prototype;
                $$initCtor.prototype.constructor = cls;
                $$initCtor.prototype.$$fullname = Bridge.Reflection.getTypeFullName(cls);

                prototype = new $$initCtor();
            }
            else {
                prototype = extend ? new extend[0].$$initCtor() : (objectType.$$initCtor ? new objectType.$$initCtor() : new objectType());
            }            

            Class.$$initCtor = function () { };
            Class.$$initCtor.prototype = prototype;
            Class.$$initCtor.prototype.constructor = Class;
            Class.$$initCtor.prototype.$$fullname = gCfg && isGenericInstance ? Class.$$fullname : Class.$$name;

            if (statics) {
                var staticsConfig = statics.$config || statics.config;

                if (staticsConfig && !Bridge.isFunction(staticsConfig)) {
                    Bridge.Class.initConfig(extend, base, staticsConfig, true, Class);

                    if (statics.$config) {
                        delete statics.$config;
                    } else {
                        delete statics.config;
                    }
                }
            }

            var instanceConfig = prop.$config || prop.config;

            if (instanceConfig && !Bridge.isFunction(instanceConfig)) {
                Bridge.Class.initConfig(extend, base, instanceConfig, false, prop, prototype);

                if (prop.$config) {
                    delete prop.$config;
                } else {
                    delete prop.config;
                }
            } else if (extend && base.$initMembers) {
                prop.$initMembers = function () {
                    base.$initMembers.call(this);
                };
            }

            prop.$initialize = Bridge.Class._initialize;

            var keys = [];

            for (name in prop) {
                keys.push(name);
            }

            for (i = 0; i < keys.length; i++) {
                name = keys[i];

                v = prop[name];
                isCtor = name === "ctor";
                ctorName = name;

                if (Bridge.isFunction(v) && (isCtor || name.match("^\\$ctor") !== null)) {
                    isCtor = true;
                }

                var member = prop[name];

                if (isCtor) {
                    Class[ctorName] = member;
                    Class[ctorName].prototype = prototype;
                    Class[ctorName].prototype.constructor = Class;
                    prototype[ctorName] = member;
                } else {
                    prototype[ctorName] = member;
                }
            }

            prototype.$$name = className;

            if (!prototype.toJSON) {
                prototype.toJSON = Bridge.Class.toJSON;
            }

            if (statics) {
                for (name in statics) {
                    var member = statics[name];

                    if (name === "ctor") {
                        Class["$ctor"] = member;
                    } else {
                        if (prop.$kind === "enum" && !Bridge.isFunction(member) && name.charAt(0) !== "$") {
                            Class.$names = Class.$names || [];
                            Class.$names.push({name: name, value: member});
                        }

                        Class[name] = member;
                    }
                }

                if (prop.$kind === "enum" && Class.$names) {
                    Class.$names = Class.$names.sort(function (i1, i2) {
                        if (Bridge.isFunction(i1.value.eq)) {
                            return i1.value.sub(i2.value).sign();
                        }

                        return i1.value - i2.value;
                    }).map(function (i) {
                        return i.name;
                    });
                }
            }

            if (!extend) {
                extend = [objectType].concat(Class.$interfaces);
            }

            Bridge.Class.setInheritors(Class, extend);

            fn = function () {
                if (Bridge.Class.staticInitAllow && !Class.$isGenericTypeDefinition) {
                    Class.$staticInit = null;

                    if (Class.$initMembers) {
                        Class.$initMembers();
                    }

                    if (Class.$ctor) {
                        Class.$ctor();
                    }
                }
            };

            if (isEntryPoint || Bridge.isFunction(prototype.$main)) {
                if (prototype.$main) {
                    var entryName = prototype.$main.name || "Main";

                    if (!Class[entryName]) {
                        Class[entryName] = prototype.$main;
                    }
                }

                Bridge.Class.$queueEntry.push(Class);
            }

            Class.$staticInit = fn;

            if (!isGenericInstance && registerT) {
                Bridge.Class.registerType(className, Class);
            }

            if (Bridge.Reflection) {
                Class.$getMetadata = Bridge.Reflection.getMetadata;
            }

            if (Class.$kind === "enum") {
                if (!Class.prototype.$utype) {
                    Class.prototype.$utype = System.Int32;
                }
                Class.$is = function (instance) {
                    var utype = Class.prototype.$utype;

                    if (utype === String) {
                        return typeof (instance) == "string";
                    }

                    if (utype && utype.$is) {
                        return utype.$is(instance);
                    }

                    return typeof (instance) == "number";
                };

                Class.getDefaultValue = function () {
                    var utype = Class.prototype.$utype;

                    if (utype === String || utype === System.String) {
                        return null;
                    }

                    return 0;
                };
            }

            if (Class.$kind === "interface") {
                if (Class.prototype.$variance) {
                    Class.isAssignableFrom = Bridge.Class.varianceAssignable;
                }

                Class.$isInterface = true;
            }

            return Class;
        },

        toCtorString: function () {
            return Bridge.Reflection.getTypeName(this);
        },

        createInheritors: function (cls, extend) {
            var interfaces = [],
                baseInterfaces = [],
                descriptors = [],
                aliases = [];

            if (extend) {
                for (var j = 0; j < extend.length; j++) {
                    var baseType = extend[j],
                        baseI = (baseType.$interfaces || []).concat(baseType.$baseInterfaces || []),
                        baseDescriptors = baseType.$descriptors,
                        baseAliases = baseType.$aliases;

                    if (baseDescriptors && baseDescriptors.length > 0) {
                        for (var d = 0; d < baseDescriptors.length; d++) {
                            descriptors.push(baseDescriptors[d]);
                        }
                    }

                    if (baseAliases && baseAliases.length > 0) {
                        for (var d = 0; d < baseAliases.length; d++) {
                            aliases.push(baseAliases[d]);
                        }
                    }

                    if (baseI.length > 0) {
                        for (var k = 0; k < baseI.length; k++) {
                            if (baseInterfaces.indexOf(baseI[k]) < 0) {
                                baseInterfaces.push(baseI[k]);
                            }
                        }
                    }

                    if (baseType.$kind === "interface") {
                        interfaces.push(baseType);
                    }
                }
            }

            cls.$descriptors = descriptors;
            cls.$aliases = aliases;
            cls.$baseInterfaces = baseInterfaces;
            cls.$interfaces = interfaces;
            cls.$allInterfaces = interfaces.concat(baseInterfaces);
        },

        toJSON: function () {
            var obj = {},
                t = Bridge.getType(this),
                descriptors = t.$descriptors || [];

            for (var key in this) {
                var own = this.hasOwnProperty(key),
                    descriptor = null;

                if (!own) {
                    for (var i = descriptors.length - 1; i >= 0; i--) {
                        if (descriptors[i].name === key) {
                            descriptor = descriptors[i];

                            break;
                        }
                    }
                }

                var dcount = key.split("$").length;

                if ((own || descriptor != null) && (dcount === 1 || dcount === 2 && key.match("\$\d+$"))) {
                    obj[key] = this[key];
                }
            }

            return obj;
        },

        setInheritors: function (cls, extend) {
            cls.$$inherits = extend;

            for (var i = 0; i < extend.length; i++) {
                var scope = extend[i];

                if (!scope.$$inheritors) {
                    scope.$$inheritors = [];
                }

                scope.$$inheritors.push(cls);
            }
        },

        varianceAssignable: function (source) {
            var check = function (target, type) {
                if (type.$genericTypeDefinition === target.$genericTypeDefinition && type.$typeArguments.length === target.$typeArguments.length) {
                    for (var i = 0; i < target.$typeArguments.length; i++) {
                        var v = target.prototype.$variance[i], t = target.$typeArguments[i], s = type.$typeArguments[i];

                        switch (v) {
                            case 1: if (!Bridge.Reflection.isAssignableFrom(t, s))
                                return false;

                                break;
                            case 2: if (!Bridge.Reflection.isAssignableFrom(s, t))
                                return false;

                                break;
                            default: if (s !== t)
                                return false;
                        }
                    }

                    return true;
                }

                return false;
            };

            if (source.$kind === "interface" && check(this, source)) {
                return true;
            }

            var ifs = Bridge.Reflection.getInterfaces(source);

            for (var i = 0; i < ifs.length; i++) {
                if (ifs[i] === this || check(this, ifs[i])) {
                    return true;
                }
            }

            return false;
        },

        registerType: function (className, cls) {
            if (Bridge.$currentAssembly) {
                Bridge.$currentAssembly.$types[className] = cls;
                cls.$assembly = Bridge.$currentAssembly;
            }
        },

        addExtend: function (cls, extend) {
            var i,
                scope;

            Array.prototype.push.apply(cls.$$inherits, extend);
            cls.$interfaces = cls.$interfaces || [];
            cls.$baseInterfaces = cls.$baseInterfaces || [];

            for (i = 0; i < extend.length; i++) {
                scope = extend[i];

                if (!scope.$$inheritors) {
                    scope.$$inheritors = [];
                }

                scope.$$inheritors.push(cls);

                var baseI = (scope.$interfaces || []).concat(scope.$baseInterfaces || []);

                if (baseI.length > 0) {
                    for (var k = 0; k < baseI.length; k++) {
                        if (cls.$baseInterfaces.indexOf(baseI[k]) < 0) {
                            cls.$baseInterfaces.push(baseI[k]);
                        }
                    }
                }

                if (scope.$kind === "interface") {
                    cls.$interfaces.push(scope);
                }
            }

            cls.$allInterfaces = cls.$interfaces.concat(cls.$baseInterfaces);
        },

        set: function (scope, className, cls, noDefineProp) {
            var nameParts = className.split("."),
                name,
                key,
                exists,
                i;

            for (i = 0; i < (nameParts.length - 1) ; i++) {
                if (typeof scope[nameParts[i]] == "undefined") {
                    scope[nameParts[i]] = {};
                }

                scope = scope[nameParts[i]];
            }

            name = nameParts[nameParts.length - 1];
            exists = scope[name];

            if (exists) {
                if (exists.$$name === className) {
                    throw "Class '" + className + "' is already defined";
                }

                for (key in exists) {
                    var o = exists[key];

                    if (typeof o === "function" && o.$$name) {
                        (function (cls, key, o) {
                            Object.defineProperty(cls, key, {
                                get: function () {
                                    if (Bridge.Class.staticInitAllow) {
                                        if (o.$staticInit) {
                                            o.$staticInit();
                                        }

                                        Bridge.Class.defineProperty(cls, key, o);
                                    }

                                    return o;
                                },

                                set: function (newValue) {
                                    o = newValue;
                                },

                                enumerable: true,

                                configurable: true
                            });
                        })(cls, key, o);
                    }
                }
            }

            if (noDefineProp !== true) {
                (function (scope, name, cls) {
                    Object.defineProperty(scope, name, {
                        get: function () {
                            if (Bridge.Class.staticInitAllow) {
                                if (cls.$staticInit) {
                                    cls.$staticInit();
                                }

                                Bridge.Class.defineProperty(scope, name, cls);
                            }

                            return cls;
                        },

                        set: function (newValue) {
                            cls = newValue;
                        },

                        enumerable: true,

                        configurable: true
                    });
                })(scope, name, cls);
            } else {
                scope[name] = cls;
            }

            return scope;
        },

        defineProperty: function (scope, name, cls) {
            Object.defineProperty(scope, name, {
                value: cls,
                enumerable: true,
                configurable: true
            });
        },

        genericName: function (name, typeArguments) {
            var gName = name;

            for (var i = 0; i < typeArguments.length; i++) {
                var ta = typeArguments[i];

                gName += "$" + (ta.$$name || Bridge.getTypeName(ta));
            }

            return gName;
        },

        getCachedType: function (fn, args) {
            var arr = fn.$cache,
                len = arr.length,
                key,
                found,
                i, g;

            for (i = 0; i < len; i++) {
                key = arr[i];

                if (key.args.length === args.length) {
                    found = true;

                    for (g = 0; g < key.args.length; g++) {
                        if (key.args[g] !== args[g]) {
                            found = false;

                            break;
                        }
                    }

                    if (found) {
                        return key;
                    }
                }
            }

            return null;
        },

        generic: function (className, scope, fn, prop) {
            fn.$$name = className;
            fn.$kind = "class";

            Bridge.Class.set(scope, className, fn, true);
            Bridge.Class.registerType(className, fn);

            fn.$typeArgumentCount = prop.length;
            fn.$isGenericTypeDefinition = true;
            fn.$getMetadata = Bridge.Reflection.getMetadata;

            fn.$staticInit = function () {
                fn.$typeArguments = Bridge.Reflection.createTypeParams(prop);

                var old = Bridge.Class.staticInitAllow,
                    oldIsBlocked = Bridge.Class.queueIsBlocked;

                Bridge.Class.staticInitAllow = false;
                Bridge.Class.queueIsBlocked = true;

                var cfg = prop.apply(null, fn.$typeArguments),
                    extend = cfg.$inherits || cfg.inherits;

                Bridge.Class.staticInitAllow = old;
                Bridge.Class.queueIsBlocked = oldIsBlocked;

                if (extend && Bridge.isFunction(extend)) {
                    extend = extend();
                }

                Bridge.Class.createInheritors(fn, extend);

                var objectType = Bridge.global.System && Bridge.global.System.Object || Object;

                if (!extend) {
                    extend = [objectType].concat(fn.$interfaces);
                }

                Bridge.Class.setInheritors(fn, extend);

                var prototype = extend ? (extend[0].$$initCtor ? new extend[0].$$initCtor() : new extend[0]()) : new objectType();

                fn.prototype = prototype;
                fn.prototype.constructor = fn;
            };

            Bridge.Class.$queue.push(fn);

            return fn;
        },

        init: function (fn) {
            if (Bridge.Reflection) {
                var metas = Bridge.Reflection.deferredMeta,
                    len = metas.length;

                if (len > 0) {
                    Bridge.Reflection.deferredMeta = [];

                    for (var i = 0; i < len; i++) {
                        var item = metas[i];

                        Bridge.setMetadata(item.typeName, item.metadata, item.ns);
                    }
                }
            }

            if (fn) {
                var old = Bridge.Class.staticInitAllow;

                Bridge.Class.staticInitAllow = true;
                fn();
                Bridge.Class.staticInitAllow = old;

                return;
            }

            Bridge.Class.staticInitAllow = true;

            var queue = Bridge.Class.$queue.concat(Bridge.Class.$queueEntry);

            Bridge.Class.$queue.length = 0;
            Bridge.Class.$queueEntry.length = 0;

            for (var i = 0; i < queue.length; i++) {
                var t = queue[i];

                if (t.$staticInit) {
                    t.$staticInit();
                }

                if (t.prototype.$main) {
                    (function (cls, name) {
                        Bridge.ready(function () {
                            var task = cls[name]();

                            if (task && task.continueWith) {
                                task.continueWith(function () {
                                    setTimeout(function () {
                                        task.getAwaitedResult();
                                    }, 0);                                    
                                });
                            }
                        });
                    })(t, t.prototype.$main.name || "Main");

                    t.prototype.$main = null;
                }
            }
        }
    };

    Bridge.Class = base;
    Bridge.Class.$queue = [];
    Bridge.Class.$queueEntry = [];
    Bridge.define = Bridge.Class.define;
    Bridge.definei = Bridge.Class.definei;
    Bridge.init = Bridge.Class.init;

    // @source ReflectionAssembly.js

    Bridge.assembly = function (assemblyName, res, callback, restore) {
        if (!callback) {
            callback = res;
            res = {};
        }

        assemblyName = assemblyName || "Bridge.$Unknown";

        var asm = System.Reflection.Assembly.assemblies[assemblyName];

        if (!asm) {
            asm = new System.Reflection.Assembly(assemblyName, res);
        } else {
            Bridge.apply(asm.res, res || {});
        }

        var oldAssembly = Bridge.$currentAssembly;

        Bridge.$currentAssembly = asm;

        if (callback) {
            var old = Bridge.Class.staticInitAllow;
            Bridge.Class.staticInitAllow = false;

            callback.call(Bridge.global, asm, Bridge.global);

            Bridge.Class.staticInitAllow = old;
        }

        Bridge.init();

        if (restore) {
            Bridge.$currentAssembly = oldAssembly;
        }
    };

    Bridge.define("System.Reflection.Assembly", {
        statics: {
            assemblies: {}
        },

        ctor: function (name, res) {
            this.$initialize();
            this.name = name;
            this.res = res || {};
            this.$types = {};
            this.$ = {};

            System.Reflection.Assembly.assemblies[name] = this;
        },

        toString: function () {
            return this.name;
        },

        getManifestResourceNames: function () {
            return Object.keys(this.res);
        },

        getManifestResourceDataAsBase64: function (type, name) {
            if (arguments.length === 1) {
                name = type;
                type = null;
            }

            if (type) {
                name = Bridge.Reflection.getTypeNamespace(type) + "." + name;
            }

            return this.res[name] || null;
        },

        getManifestResourceData: function (type, name) {
            if (arguments.length === 1) {
                name = type;
                type = null;
            }

            if (type) {
                name = Bridge.Reflection.getTypeNamespace(type) + '.' + name;
            }

            var r = this.res[name];

            return r ? System.Convert.fromBase64String(r) : null;
        },

        getCustomAttributes: function (attributeType) {
            if (this.attr && attributeType && !Bridge.isBoolean(attributeType)) {
                return this.attr.filter(function (a) {
                    return Bridge.is(a, attributeType);
                });
            }

            return this.attr || [];
        }
    });

    Bridge.$currentAssembly = new System.Reflection.Assembly("mscorlib");
    Bridge.SystemAssembly = Bridge.$currentAssembly;
    Bridge.SystemAssembly.$types["System.Reflection.Assembly"] = System.Reflection.Assembly;
    System.Reflection.Assembly.$assembly = Bridge.SystemAssembly;

    var $asm = Bridge.$currentAssembly;

    // @source Object.js

    Bridge.define("System.Object", { });

    // @source Void.js

    Bridge.define("System.Void", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.Void(); }
            }
        },
        methods: {
            $clone: function (to) { return this; }
        }
    });

    // @source SystemAssemblyVersion.js

    Bridge.init(function () {
        Bridge.SystemAssembly.version = "17.2.0";
        Bridge.SystemAssembly.compiler = "17.2.0";
    });

    Bridge.define("Bridge.Utils.SystemAssemblyVersion");

    // @source Reflection.js

    Bridge.Reflection = {
        deferredMeta: [],

        setMetadata: function (type, metadata, ns) {
            if (Bridge.isString(type)) {
                var typeName = type;
                type = Bridge.unroll(typeName);

                if (type == null) {
                    Bridge.Reflection.deferredMeta.push({ typeName: typeName, metadata: metadata, ns: ns });
                    return;
                }
            }

            ns = Bridge.unroll(ns);
            type.$getMetadata = Bridge.Reflection.getMetadata;
            type.$metadata = metadata;
        },

        initMetaData: function (type, metadata) {
            if (metadata.m) {
                for (var i = 0; i < metadata.m.length; i++) {
                    var m = metadata.m[i];

                    m.td = type;

                    if (m.ad) {
                        m.ad.td = type;
                    }

                    if (m.r) {
                        m.r.td = type;
                    }

                    if (m.g) {
                        m.g.td = type;
                    }

                    if (m.s) {
                        m.s.td = type;
                    }

                    if (m.tprm && Bridge.isArray(m.tprm)) {
                        for (var j = 0; j < m.tprm.length; j++) {
                            m.tprm[j] = Bridge.Reflection.createTypeParam(m.tprm[j], type);
                        }
                    }
                }
            }

            type.$metadata = metadata;
            type.$initMetaData = true;
        },

        getMetadata: function () {
            if (!this.$metadata && this.$genericTypeDefinition) {
                this.$metadata = this.$genericTypeDefinition.$factoryMetadata || this.$genericTypeDefinition.$metadata;
            }

            var metadata = this.$metadata;

            if (typeof (metadata) === "function") {
                if (this.$isGenericTypeDefinition && !this.$factoryMetadata) {
                    this.$factoryMetadata = this.$metadata;
                }

                if (this.$typeArguments) {
                    metadata = this.$metadata.apply(null, this.$typeArguments);
                } else if (this.$isGenericTypeDefinition) {
                    var arr = Bridge.Reflection.createTypeParams(this.$metadata);
                    this.$typeArguments = arr;
                    metadata = this.$metadata.apply(null, arr);
                } else {
                    metadata = this.$metadata();
                }
            }

            if (!this.$initMetaData && metadata) {
                Bridge.Reflection.initMetaData(this, metadata);
            }

            return metadata;
        },

        createTypeParams: function (fn, t) {
            var args,
                names = [],
                fnStr = fn.toString();

            args = fnStr.slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")")).match(/([^\s,]+)/g) || [];

            for (var i = 0; i < args.length; i++) {
                names.push(Bridge.Reflection.createTypeParam(args[i], t));
            }

            return names;
        },

        createTypeParam: function (name, t) {
            var fn = function TypeParameter() { };

            fn.$$name = name;
            fn.$isTypeParameter = true;

            if (t) {
                fn.td = t;
            }

            return fn;
        },

        load: function (name) {
            return System.Reflection.Assembly.assemblies[name] || require(name);
        },

        getGenericTypeDefinition: function (type) {
            if (type.$isGenericTypeDefinition) {
                return type;
            }

            if (!type.$genericTypeDefinition) {
                throw new System.InvalidOperationException.$ctor1("This operation is only valid on generic types.");
            }

            return type.$genericTypeDefinition;
        },

        getGenericParameterCount: function (type) {
            return type.$typeArgumentCount || 0;
        },

        getGenericArguments: function (type) {
            return type.$typeArguments || [];
        },

        getMethodGenericArguments: function (m) {
            return m.tprm || [];
        },

        isGenericTypeDefinition: function (type) {
            return type.$isGenericTypeDefinition || false;
        },

        isGenericType: function (type) {
            return type.$genericTypeDefinition != null || Bridge.Reflection.isGenericTypeDefinition(type);
        },

        convertType: function (type) {
            if (type === Boolean) {
                return System.Boolean;
            }

            if (type === String) {
                return System.String;
            }

            if (type === Object) {
                return System.Object;
            }

            if (type === Date) {
                return System.DateTime;
            }

            return type;
        },

        getBaseType: function (type) {
            if (Bridge.isObject(type) || type.$kind === "interface" || type.prototype == null) {
                return null;
            } else if (Object.getPrototypeOf) {
                return Bridge.Reflection.convertType(Object.getPrototypeOf(type.prototype).constructor);
            } else {
                var p = type.prototype;

                if (Object.prototype.hasOwnProperty.call(p, "constructor")) {
                    var ownValue;

                    try {
                        ownValue = p.constructor;
                        delete p.constructor;
                        return Bridge.Reflection.convertType(p.constructor);
                    } finally {
                        p.constructor = ownValue;
                    }
                }

                return Bridge.Reflection.convertType(p.constructor);
            }
        },

        getTypeFullName: function (obj) {
            var str;

            if (obj.$$fullname) {
                str = obj.$$fullname;
            } else if (obj.$$name) {
                str = obj.$$name;
            }

            if (str) {
                var ns = Bridge.Reflection.getTypeNamespace(obj, str);

                if (ns) {
                    var idx = str.indexOf("[");
                    var name = str.substring(ns.length + 1, idx === -1 ? str.length : idx);

                    if (new RegExp(/[\.\$]/).test(name)) {
                        str = ns + "." + name.replace(/\.|\$/g, function (match) { return (match === ".") ? "+" : "`"; }) + (idx === -1 ? "" : str.substring(idx));
                    }
                }

                return str;
            }

            if (obj.constructor === Object) {
                str = obj.toString();

                var match = (/\[object (.{1,})\]/).exec(str);
                var name = (match && match.length > 1) ? match[1] : "Object";

                return name == "Object" ? "System.Object" : name;
            } else if (obj.constructor === Function) {
                str = obj.toString();
            } else {
                str = obj.constructor.toString();
            }

            var results = (/function (.{1,})\(/).exec(str);

            return (results && results.length > 1) ? results[1] : "System.Object";
        },

        _makeQName: function (name, asm) {
            return name + (asm ? ", " + asm.name : "");
        },

        getTypeQName: function (type) {
            return Bridge.Reflection._makeQName(Bridge.Reflection.getTypeFullName(type), type.$assembly);
        },

        getTypeName: function (type) {
            var fullName = Bridge.Reflection.getTypeFullName(type),
                bIndex = fullName.indexOf("["),
                pIndex = fullName.lastIndexOf("+", bIndex >= 0 ? bIndex : fullName.length),
                nsIndex = pIndex > -1 ? pIndex : fullName.lastIndexOf(".", bIndex >= 0 ? bIndex : fullName.length);

            var name = nsIndex > 0 ? (bIndex >= 0 ? fullName.substring(nsIndex + 1, bIndex) : fullName.substr(nsIndex + 1)) : fullName;

            return type.$isArray ? name + "[]" : name;
        },

        getTypeNamespace: function (type, name) {
            var fullName = name || Bridge.Reflection.getTypeFullName(type),
                bIndex = fullName.indexOf("["),
                nsIndex = fullName.lastIndexOf(".", bIndex >= 0 ? bIndex : fullName.length),
                ns = nsIndex > 0 ? fullName.substr(0, nsIndex) : "";

            if (type.$assembly) {
                var parentType = Bridge.Reflection._getAssemblyType(type.$assembly, ns);

                if (parentType) {
                    ns = Bridge.Reflection.getTypeNamespace(parentType);
                }
            }

            return ns;
        },

        getTypeAssembly: function (type) {
            if (System.Array.contains([Date, Number, Boolean, String, Function, Array], type) || type.$isArray) {
                return Bridge.SystemAssembly;
            } else {
                return type.$assembly || Bridge.SystemAssembly;
            }
        },

        _extractArrayRank: function (name) {
            var rank = -1,
                m = (/<(\d+)>$/g).exec(name);

            if (m) {
                name = name.substring(0, m.index);
                rank = parseInt(m[1]);
            }

            m = (/\[(,*)\]$/g).exec(name);

            if (m) {
                name = name.substring(0, m.index);
                rank = m[1].length + 1;
            }

            return {
                rank: rank,
                name: name
            };
        },

        _getAssemblyType: function (asm, name) {
            var noAsm = false,
                rank = -1;

            if (new RegExp(/[\+\`]/).test(name)) {
                name = name.replace(/\+|\`/g, function (match) { return match === "+" ? "." : "$"});
            }

            if (!asm) {
                asm = Bridge.SystemAssembly;
                noAsm = true;
            }

            var rankInfo = Bridge.Reflection._extractArrayRank(name);
            rank = rankInfo.rank;
            name = rankInfo.name;

            if (asm.$types) {
                var t = asm.$types[name] || null;

                if (t) {
                    return rank > -1 ? System.Array.type(t, rank) : t;
                }

                if (asm.name === "mscorlib") {
                    asm = Bridge.global;
                } else {
                    return null;
                }
            }

            var a = name.split("."),
                scope = asm;

            for (var i = 0; i < a.length; i++) {
                scope = scope[a[i]];

                if (!scope) {
                    return null;
                }
            }

            if (typeof scope !== "function" || !noAsm && scope.$assembly && asm.name !== scope.$assembly.name) {
                return null;
            }

            return rank > -1 ? System.Array.type(scope, rank) : scope;
        },

        getAssemblyTypes: function (asm) {
            var result = [];

            if (asm.$types) {
                for (var t in asm.$types) {
                    if (asm.$types.hasOwnProperty(t)) {
                        result.push(asm.$types[t]);
                    }
                }
            } else {
                var traverse = function (s, n) {
                    for (var c in s) {
                        if (s.hasOwnProperty(c)) {
                            traverse(s[c], c);
                        }
                    }

                    if (typeof (s) === "function" && Bridge.isUpper(n.charCodeAt(0))) {
                        result.push(s);
                    }
                };

                traverse(asm, "");
            }

            return result;
        },

        createAssemblyInstance: function (asm, typeName) {
            var t = Bridge.Reflection.getType(typeName, asm);

            return t ? Bridge.createInstance(t) : null;
        },

        getInterfaces: function (type) {
            var t;

            if (type.$allInterfaces) {
                return type.$allInterfaces;
            } else if (type === Date) {
                return [System.IComparable$1(Date), System.IEquatable$1(Date), System.IComparable, System.IFormattable];
            } else if (type === Number) {
                return [System.IComparable$1(Bridge.Int), System.IEquatable$1(Bridge.Int), System.IComparable, System.IFormattable];
            } else if (type === Boolean) {
                return [System.IComparable$1(Boolean), System.IEquatable$1(Boolean), System.IComparable];
            } else if (type === String) {
                return [System.IComparable$1(String), System.IEquatable$1(String), System.IComparable, System.ICloneable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable$1(System.Char)];
            } else if (type === Array || type.$isArray || (t = System.Array._typedArrays[Bridge.getTypeName(type)])) {
                t = t || type.$elementType || System.Object;
                return [System.Collections.IEnumerable, System.Collections.ICollection, System.ICloneable, System.Collections.IList, System.Collections.Generic.IEnumerable$1(t), System.Collections.Generic.ICollection$1(t), System.Collections.Generic.IList$1(t)];
            } else {
                return [];
            }
        },

        isInstanceOfType: function (instance, type) {
            return Bridge.is(instance, type);
        },

        isAssignableFrom: function (baseType, type) {
            if (baseType == null) {
                throw new System.NullReferenceException();
            }

            if (type == null) {
                return false;
            }

            if (baseType === type || Bridge.isObject(baseType)) {
                return true;
            }

            if (Bridge.isFunction(baseType.isAssignableFrom)) {
                return baseType.isAssignableFrom(type);
            }

            if (type === Array) {
                return System.Array.is([], baseType);
            }

            if (Bridge.Reflection.isInterface(baseType) && System.Array.contains(Bridge.Reflection.getInterfaces(type), baseType)) {
                return true;
            }

            var inheritors = type.$$inherits,
                i,
                r;

            if (inheritors) {
                for (i = 0; i < inheritors.length; i++) {
                    r = Bridge.Reflection.isAssignableFrom(baseType, inheritors[i]);

                    if (r) {
                        return true;
                    }
                }
            }

            return false;
        },

        isClass: function (type) {
            return (type.$kind === "class" || type === Array || type === Function || type === RegExp || type === String || type === Error || type === Object);
        },

        isEnum: function (type) {
            return type.$kind === "enum";
        },

        isFlags: function (type) {
            return !!(type.prototype && type.prototype.$flags);
        },

        isInterface: function (type) {
            return type.$kind === "interface";
        },

        _getType: function (typeName, asm, re, noinit) {
            var outer = !re;

            if (outer) {
                typeName = typeName.replace(/\[(,*)\]/g, function (match, g1) {
                    return "<" + (g1.length + 1) + ">"
                });
            }

            var next = function () {
                for (; ;) {
                    var m = re.exec(typeName);

                    if (m && m[0] == "[" && (typeName[m.index + 1] === "]" || typeName[m.index + 1] === ",")) {
                        continue;
                    }

                    if (m && m[0] == "]" && (typeName[m.index - 1] === "[" || typeName[m.index - 1] === ",")) {
                        continue;
                    }

                    if (m && m[0] == "," && (typeName[m.index + 1] === "]" || typeName[m.index + 1] === ",")) {
                        continue;
                    }

                    return m;
                }
            };

            re = re || /[[,\]]/g;

            var last = re.lastIndex,
                m = next(),
                tname,
                targs = [],
                t,
                noasm = !asm;

            //asm = asm || Bridge.$currentAssembly;

            if (m) {
                tname = typeName.substring(last, m.index);

                switch (m[0]) {
                    case "[":
                        if (typeName[m.index + 1] !== "[") {
                            return null;
                        }

                        for (; ;) {
                            next();
                            t = Bridge.Reflection._getType(typeName, null, re);

                            if (!t) {
                                return null;
                            }

                            targs.push(t);
                            m = next();

                            if (m[0] === "]") {
                                break;
                            } else if (m[0] !== ",") {
                                return null;
                            }
                        }

                        var arrMatch = (/^\s*<(\d+)>/g).exec(typeName.substring(m.index + 1));

                        if (arrMatch) {
                            tname = tname + "<" + parseInt(arrMatch[1]) + ">";
                        }

                        m = next();

                        if (m && m[0] === ",") {
                            next();

                            if (!(asm = System.Reflection.Assembly.assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()])) {
                                return null;
                            }
                        }
                        break;

                    case "]":
                        break;

                    case ",":
                        next();

                        if (!(asm = System.Reflection.Assembly.assemblies[(re.lastIndex > 0 ? typeName.substring(m.index + 1, re.lastIndex - 1) : typeName.substring(m.index + 1)).trim()])) {
                            return null;
                        }

                        break;
                }
            } else {
                tname = typeName.substring(last);
            }

            if (outer && re.lastIndex) {
                return null;
            }

            tname = tname.trim();

            var rankInfo = Bridge.Reflection._extractArrayRank(tname);
            var rank = rankInfo.rank;

            tname = rankInfo.name;

            t = Bridge.Reflection._getAssemblyType(asm, tname);

            if (noinit) {
                return t;
            }

            if (!t && noasm) {
                for (var asmName in System.Reflection.Assembly.assemblies) {
                    if (System.Reflection.Assembly.assemblies.hasOwnProperty(asmName) && System.Reflection.Assembly.assemblies[asmName] !== asm) {
                        t = Bridge.Reflection._getType(typeName, System.Reflection.Assembly.assemblies[asmName], null,true);

                        if (t) {
                            break;
                        }
                    }
                }
            }

            t = targs.length ? t.apply(null, targs) : t;

            if (t && t.$staticInit) {
                t.$staticInit();
            }

            if (rank > -1) {
                t = System.Array.type(t, rank);
            }

            return t;
        },

        getType: function (typeName, asm) {
            if (typeName == null) {
                throw new System.ArgumentNullException.$ctor1("typeName");
            }

            return typeName ? Bridge.Reflection._getType(typeName, asm) : null;
        },

        canAcceptNull: function (type) {
            if (type.$kind === "struct" ||
                type.$kind === "enum" ||
                type === System.Decimal ||
                type === System.Int64 ||
                type === System.UInt64 ||
                type === System.Double ||
                type === System.Single ||
                type === System.Byte ||
                type === System.SByte ||
                type === System.Int16 ||
                type === System.UInt16 ||
                type === System.Int32 ||
                type === System.UInt32 ||
                type === Bridge.Int ||
                type === System.Boolean ||
                type === System.DateTime ||
                type === Boolean ||
                type === Date ||
                type === Number) {
                return false;
            }

            return true;
        },

        applyConstructor: function (constructor, args) {
            if (!args || args.length === 0) {
                return new constructor();
            }

            if (constructor.$$initCtor && constructor.$kind !== "anonymous") {
                var md = Bridge.getMetadata(constructor),
                    count = 0;

                if (md) {
                    var ctors = Bridge.Reflection.getMembers(constructor, 1, 28),
                        found;

                    for (var j = 0; j < ctors.length; j++) {
                        var ctor = ctors[j];

                        if (ctor.p && ctor.p.length === args.length) {
                            found = true;

                            for (var k = 0; k < ctor.p.length; k++) {
                                var p = ctor.p[k];

                                if (!Bridge.is(args[k], p) || args[k] == null && !Bridge.Reflection.canAcceptNull(p)) {
                                    found = false;

                                    break;
                                }
                            }

                            if (found) {
                                constructor = constructor[ctor.sn];
                                count++;
                            }
                        }
                    }
                } else {
                    if (Bridge.isFunction(constructor.ctor) && constructor.ctor.length === args.length) {
                        constructor = constructor.ctor;
                    } else {
                        var name = "$ctor",
                            i = 1;

                        while (Bridge.isFunction(constructor[name + i])) {
                            if (constructor[name + i].length === args.length) {
                                constructor = constructor[name + i];
                                count++;
                            }

                            i++;
                        }
                    }
                }

                if (count > 1) {
                    throw new System.Exception("The ambiguous constructor call");
                }
            }

            var f = function () {
                constructor.apply(this, args);
            };

            f.prototype = constructor.prototype;

            return new f();
        },

        getAttributes: function (type, attrType, inherit) {
            var result = [],
                i,
                t,
                a,
                md,
                type_md;

            if (inherit) {
                var b = Bridge.Reflection.getBaseType(type);

                if (b) {
                    a = Bridge.Reflection.getAttributes(b, attrType, true);

                    for (i = 0; i < a.length; i++) {
                        t = Bridge.getType(a[i]);
                        md = Bridge.getMetadata(t);

                        if (!md || !md.ni) {
                            result.push(a[i]);
                        }
                    }
                }
            }

            type_md = Bridge.getMetadata(type);

            if (type_md && type_md.at) {
                for (i = 0; i < type_md.at.length; i++) {
                    a = type_md.at[i];

                    if (attrType == null || Bridge.Reflection.isInstanceOfType(a, attrType)) {
                        t = Bridge.getType(a);
                        md = Bridge.getMetadata(t);

                        if (!md || !md.am) {
                            for (var j = result.length - 1; j >= 0; j--) {
                                if (Bridge.Reflection.isInstanceOfType(result[j], t)) {
                                    result.splice(j, 1);
                                }
                            }
                        }

                        result.push(a);
                    }
                }
            }

            return result;
        },

        getMembers: function (type, memberTypes, bindingAttr, name, params) {
            var result = [];

            if ((bindingAttr & 72) === 72 || (bindingAttr & 6) === 4) {
                var b = Bridge.Reflection.getBaseType(type);

                if (b) {
                    result = Bridge.Reflection.getMembers(b, memberTypes & ~1, bindingAttr & (bindingAttr & 64 ? 255 : 247) & (bindingAttr & 2 ? 251 : 255), name, params);
                }
            }

            var f = function (m) {
                if ((memberTypes & m.t) && (((bindingAttr & 4) && !m.is) || ((bindingAttr & 8) && m.is)) && (!name || ((bindingAttr & 1) === 1 ? (m.n.toUpperCase() === name.toUpperCase()) : (m.n === name)))) {
                    if ((bindingAttr & 16) === 16 && m.a === 2 ||
                        (bindingAttr & 32) === 32 && m.a !== 2) {
                        if (params) {
                            if ((m.p || []).length !== params.length) {
                                return;
                            }

                            for (var i = 0; i < params.length; i++) {
                                if (params[i] !== m.p[i]) {
                                    return;
                                }
                            }
                        }

                        result.push(m);
                    }
                }
            };

            var type_md = Bridge.getMetadata(type);

            if (type_md && type_md.m) {
                var mNames = ["g", "s", "ad", "r"];

                for (var i = 0; i < type_md.m.length; i++) {
                    var m = type_md.m[i];

                    f(m);

                    for (var j = 0; j < 4; j++) {
                        var a = mNames[j];

                        if (m[a]) {
                            f(m[a]);
                        }
                    }
                }
            }

            if (bindingAttr & 256) {
                while (type) {
                    var r = [];

                    for (var i = 0; i < result.length; i++) {
                        if (result[i].td === type) {
                            r.push(result[i]);
                        }
                    }

                    if (r.length > 1) {
                        throw new System.Reflection.AmbiguousMatchException.$ctor1("Ambiguous match");
                    } else if (r.length === 1) {
                        return r[0];
                    }

                    type = Bridge.Reflection.getBaseType(type);
                }

                return null;
            }

            return result;
        },

        createDelegate: function (mi, firstArgument) {
            var isStatic = mi.is || mi.sm,
                bind = firstArgument != null && !isStatic,
                method = Bridge.Reflection.midel(mi, firstArgument, null, bind);

            if (!bind) {
                if (isStatic) {
                    return function () {
                        var args = firstArgument != null ? [firstArgument] : [];

                        return method.apply(mi.td, args.concat(Array.prototype.slice.call(arguments, 0)));
                    };
                } else {
                    return function (target) {
                        return method.apply(target, Array.prototype.slice.call(arguments, 1));
                    };
                }
            }

            return method;
        },

        midel: function (mi, target, typeArguments, bind) {
            if (bind !== false) {
                if (mi.is && !!target) {
                    throw new System.ArgumentException.$ctor1("Cannot specify target for static method");
                } else if (!mi.is && !target) {
                    throw new System.ArgumentException.$ctor1("Must specify target for instance method");
                }
            }

            var method;

            if (mi.fg) {
                method = function () { return (mi.is ? mi.td : this)[mi.fg]; };
            } else if (mi.fs) {
                method = function (v) { (mi.is ? mi.td : this)[mi.fs] = v; };
            } else {
                method = mi.def || (mi.is || mi.sm ? mi.td[mi.sn] : (target ? target[mi.sn] : mi.td.prototype[mi.sn]));

                if (mi.tpc) {
                    if (!typeArguments || typeArguments.length !== mi.tpc) {
                        throw new System.ArgumentException.$ctor1("Wrong number of type arguments");
                    }

                    var gMethod = method;

                    method = function () {
                        return gMethod.apply(this, typeArguments.concat(Array.prototype.slice.call(arguments)));
                    }
                } else {
                    if (typeArguments && typeArguments.length) {
                        throw new System.ArgumentException.$ctor1("Cannot specify type arguments for non-generic method");
                    }
                }

                if (mi.exp) {
                    var _m1 = method;

                    method = function () { return _m1.apply(this, Array.prototype.slice.call(arguments, 0, arguments.length - 1).concat(arguments[arguments.length - 1])); };
                }

                if (mi.sm) {
                    var _m2 = method;

                    method = function () { return _m2.apply(null, [this].concat(Array.prototype.slice.call(arguments))); };
                }
            }

            var orig = method;

            method = function () {
                var args = [],
                    params = mi.pi || [],
                    p;

                for (var i = 0; i < arguments.length; i++) {
                    p = params[i] || params[params.length - 1];
                    args[i] = p && p.pt === System.Object ? arguments[i] : Bridge.unbox(arguments[i]);
                }

                var v = orig.apply(this, args);

                return v != null && mi.box ? mi.box(v) : v;
            };

            return bind !== false ? Bridge.fn.bind(target, method) : method;
        },

        invokeCI: function (ci, args) {
            if (ci.exp) {
                args = args.slice(0, args.length - 1).concat(args[args.length - 1]);
            }

            if (ci.def) {
                return ci.def.apply(null, args);
            } else if (ci.sm) {
                return ci.td[ci.sn].apply(null, args);
            } else {
                if (ci.td.$literal) {
                    return (ci.sn ? ci.td[ci.sn] : ci.td).apply(ci.td, args);
                }

                return Bridge.Reflection.applyConstructor(ci.sn ? ci.td[ci.sn] : ci.td, args);
            }
        },

        fieldAccess: function (fi, obj) {
            if (fi.is && !!obj) {
                throw new System.ArgumentException.$ctor1("Cannot specify target for static field");
            } else if (!fi.is && !obj) {
                throw new System.ArgumentException.$ctor1("Must specify target for instance field");
            }

            obj = fi.is ? fi.td : obj;

            if (arguments.length === 3) {
                obj[fi.sn] = arguments[2];
            } else {
                return fi.box ? fi.box(obj[fi.sn]) : obj[fi.sn];
            }
        },

        getMetaValue: function (type, name, dv) {
            var md = type.$isTypeParameter ? type : Bridge.getMetadata(type);

            return md ? (md[name] || dv) : dv;
        },

        isArray: function (type) {
            return Bridge.arrayTypes.indexOf(type) >= 0;
        },

        hasGenericParameters: function (type) {
            if (type.$typeArguments) {
                for (var i = 0; i < type.$typeArguments.length; i++) {
                    if (type.$typeArguments[i].$isTypeParameter) {
                        return true;
                    }
                }
            }

            return false;
        },

        isValueType: function (type) {
            return !Bridge.Reflection.canAcceptNull(type);
        },

        getNestedTypes: function (type, flags) {
            var types = Bridge.Reflection.getMetaValue(type, "nested", []);

            if (flags) {
                var tmp = [];
                for (var i = 0; i < types.length; i++) {
                    var nestedType = types[i],
                        attrs = Bridge.Reflection.getMetaValue(nestedType, "att", 0),
                        access = attrs & 7,
                        isPublic = access === 1 || access === 2;

                    if ((flags & 16) === 16 && isPublic ||
                        (flags & 32) === 32 && !isPublic) {
                        tmp.push(nestedType);
                    }
                }

                types = tmp;
            }

            return types;
        },

        getNestedType: function (type, name, flags) {
            var types = Bridge.Reflection.getNestedTypes(type, flags);

            for (var i = 0; i < types.length; i++) {
                if (Bridge.Reflection.getTypeName(types[i]) === name) {
                    return types[i];
                }
            }

            return null;
        }
    };

    Bridge.setMetadata = Bridge.Reflection.setMetadata;

    System.Reflection.ConstructorInfo = {
        $is: function (obj) {
            return obj != null && obj.t === 1;
        }
    };

    System.Reflection.EventInfo = {
        $is: function (obj) {
            return obj != null && obj.t === 2;
        }
    };

    System.Reflection.FieldInfo = {
        $is: function (obj) {
            return obj != null && obj.t === 4;
        }
    };

    System.Reflection.MethodBase = {
        $is: function (obj) {
            return obj != null && (obj.t === 1 || obj.t === 8);
        }
    };

    System.Reflection.MethodInfo = {
        $is: function (obj) {
            return obj != null && obj.t === 8;
        }
    };

    System.Reflection.PropertyInfo = {
        $is: function (obj) {
            return obj != null && obj.t === 16;
        }
    };

    System.AppDomain = {
        getAssemblies: function () {
            return Object.keys(System.Reflection.Assembly.assemblies).map(function (n) { return System.Reflection.Assembly.assemblies[n]; });
        }
    };

    // @source Interfaces.js

    Bridge.define("System.IFormattable", {
        $kind: "interface",
        statics: {
            $is: function (obj) {
                if (Bridge.isNumber(obj) || Bridge.isDate(obj)) {
                    return true;
                }

                return Bridge.is(obj, System.IFormattable, true);
            }
        }
    });

    Bridge.define("System.IComparable", {
        $kind: "interface",

        statics: {
            $is: function (obj) {
                if (Bridge.isNumber(obj) || Bridge.isDate(obj) || Bridge.isBoolean(obj) || Bridge.isString(obj)) {
                    return true;
                }

                return Bridge.is(obj, System.IComparable, true);
            }
        }
    });

    Bridge.define("System.IFormatProvider", {
        $kind: "interface"
    });

    Bridge.define("System.ICloneable", {
        $kind: "interface"
    });

    Bridge.define("System.IComparable$1", function (T) {
        return {
            $kind: "interface",

            statics: {
                $is: function (obj) {
                    if (Bridge.isNumber(obj) && T.$number && T.$is(obj) || Bridge.isDate(obj) && (T === Date || T === System.DateTime) || Bridge.isBoolean(obj) && (T === Boolean || T === System.Boolean) || Bridge.isString(obj) && (T === String || T === System.String)) {
                        return true;
                    }

                    return Bridge.is(obj, System.IComparable$1(T), true);
                },

                isAssignableFrom: function (type) {
                    if (type === System.DateTime && T === Date) {
                        return true;
                    }

                    return Bridge.Reflection.getInterfaces(type).indexOf(System.IComparable$1(T)) >= 0;
                }
            }
        };
    });

    Bridge.define("System.IEquatable$1", function (T) {
        return {
            $kind: "interface",

            statics: {
                $is: function (obj) {
                    if (Bridge.isNumber(obj) && T.$number && T.$is(obj) || Bridge.isDate(obj) && (T === Date || T === System.DateTime) || Bridge.isBoolean(obj) && (T === Boolean || T === System.Boolean) || Bridge.isString(obj) && (T === String || T === System.String)) {
                        return true;
                    }

                    return Bridge.is(obj, System.IEquatable$1(T), true);
                },

                isAssignableFrom: function (type) {
                    if (type === System.DateTime && T === Date) {
                        return true;
                    }

                    return Bridge.Reflection.getInterfaces(type).indexOf(System.IEquatable$1(T)) >= 0;
                }
            }
        };
    });

    Bridge.define("Bridge.IPromise", {
        $kind: "interface"
    });

    Bridge.define("System.IDisposable", {
        $kind: "interface"
    });

    Bridge.define("System.IAsyncResult", {
        $kind: "interface"
    });

    // @source Enum.js

    var enumMethods = {
        nameEquals: function (n1, n2, ignoreCase) {
            if (ignoreCase) {
                return n1.toLowerCase() === n2.toLowerCase();
            }

            return (n1.charAt(0).toLowerCase() + n1.slice(1)) === (n2.charAt(0).toLowerCase() + n2.slice(1));
        },

        checkEnumType: function (enumType) {
            if (!enumType) {
                throw new System.ArgumentNullException.$ctor1("enumType");
            }

            if (enumType.prototype && enumType.$kind !== "enum") {
                throw new System.ArgumentException.$ctor1("", "enumType");
            }
        },

        getUnderlyingType: function (type) {
            System.Enum.checkEnumType(type);

            return type.prototype.$utype || System.Int32;
        },

        toName: function (name) {
            return name;
        },

        parse: function (enumType, s, ignoreCase, silent) {
            System.Enum.checkEnumType(enumType);

            if (s != null) {
                if (enumType === Number || enumType === System.String || enumType.$number) {
                    return s;
                }

                var intValue = {};

                if (System.Int32.tryParse(s, intValue)) {
                    return Bridge.box(intValue.v, enumType, function (obj) { return System.Enum.toString(enumType, obj); });
                }

                var names = System.Enum.getNames(enumType),
                    values = enumType;

                if (!enumType.prototype || !enumType.prototype.$flags) {
                    for (var i = 0; i < names.length; i++) {
                        var name = names[i];

                        if (enumMethods.nameEquals(name, s, ignoreCase)) {
                            return Bridge.box(values[name], enumType, function (obj) { return System.Enum.toString(enumType, obj); });
                        }
                    }
                } else {
                    var parts = s.split(","),
                        value = 0,
                        parsed = true;

                    for (var i = parts.length - 1; i >= 0; i--) {
                        var part = parts[i].trim(),
                            found = false;

                        for (var n = 0; n < names.length; n++) {
                            var name = names[n];

                            if (enumMethods.nameEquals(name, part, ignoreCase)) {
                                value |= values[name];
                                found = true;

                                break;
                            }
                        }

                        if (!found) {
                            parsed = false;

                            break;
                        }
                    }

                    if (parsed) {
                        return Bridge.box(value, enumType, function (obj) { return System.Enum.toString(enumType, obj); });
                    }
                }
            }

            if (silent !== true) {
                throw new System.ArgumentException.$ctor3("silent", "Invalid Enumeration Value");
            }

            return null;
        },

        toStringFn: function (type) {
            return function (value) {
                return System.Enum.toString(type, value);
            };
        },

        toString: function (enumType, value, forceFlags) {
            if (arguments.length === 0) {
                return "System.Enum";
            }

            if (value && value.$boxed && enumType === System.Enum) {
                enumType = value.type;
            }

            value = Bridge.unbox(value, true);

            if (enumType === Number || enumType === System.String || enumType.$number) {
                return value.toString();
            }

            System.Enum.checkEnumType(enumType);

            var values = enumType,
                names = System.Enum.getNames(enumType),
                isLong = System.Int64.is64Bit(value);

            if (((!enumType.prototype || !enumType.prototype.$flags) && forceFlags !== true) || (value === 0)) {
                for (var i = 0; i < names.length; i++) {
                    var name = names[i];

                    if (isLong && System.Int64.is64Bit(values[name]) ? (values[name].eq(value)) : (values[name] === value)) {
                        return enumMethods.toName(name);
                    }
                }
                
                return value.toString();
            } else {
                var parts = [],
                    entries = System.Enum.getValuesAndNames(enumType),
                    index = entries.length - 1,
                    saveResult = value;

                while (index >= 0) {
                    var entry = entries[index],
                        long = isLong && System.Int64.is64Bit(entry.value);

                    if ((index == 0) && (long ? entry.value.isZero() : entry.value == 0)) {
                        break;
                    }

                    if (long ? (value.and(entry.value).eq(entry.value)) : ((value & entry.value) == entry.value)) {
                        if (long) {
                            value = value.sub(entry.value);
                        } else {
                            value -= entry.value;
                        }

                        parts.unshift(entry.name);
                    }

                    index--;
                }

                if (isLong ? !value.isZero() : value !== 0) {
                    return saveResult.toString();
                }

                if (isLong ? saveResult.isZero() : saveResult === 0) {
                    var entry = entries[0];

                    if (entry && (System.Int64.is64Bit(entry.value) ? entry.value.isZero() : (entry.value == 0))) {
                        return entry.name;
                    }

                    return "0";
                }

                return parts.join(", ");
            }
        },

        getValuesAndNames: function (enumType) {
            System.Enum.checkEnumType(enumType);

            var parts = [],
                names = System.Enum.getNames(enumType),
                values = enumType;

            for (var i = 0; i < names.length; i++) {
                parts.push({ name: names[i], value: values[names[i]] });
            }

            return parts.sort(function (i1, i2) {
                return System.Int64.is64Bit(i1.value) ? i1.value.sub(i2.value).sign() : (i1.value - i2.value);
            });
        },

        getValues: function (enumType) {
            System.Enum.checkEnumType(enumType);

            var parts = [],
                names = System.Enum.getNames(enumType),
                values = enumType;

            for (var i = 0; i < names.length; i++) {
                parts.push(values[names[i]]);
            }

            return parts.sort(function (i1, i2) {
                return System.Int64.is64Bit(i1) ? i1.sub(i2).sign() : (i1 - i2);
            });
        },

        format: function (enumType, value, format) {
            System.Enum.checkEnumType(enumType);

            var name;

            if (!Bridge.hasValue(value) && (name = "value") || !Bridge.hasValue(format) && (name = "format")) {
                throw new System.ArgumentNullException.$ctor1(name);
            }

            value = Bridge.unbox(value, true);

            switch (format) {
                case "G":
                case "g":
                    return System.Enum.toString(enumType, value);
                case "x":
                case "X":
                    return value.toString(16);
                case "d":
                case "D":
                    return value.toString();
                case "f":
                case "F":
                    return System.Enum.toString(enumType, value, true);
                default:
                    throw new System.FormatException();
            }
        },

        getNames: function (enumType) {
            System.Enum.checkEnumType(enumType);

            var parts = [],
                values = enumType;

            if (enumType.$names) {
                return enumType.$names.slice(0);
            }

            for (var i in values) {
                if (values.hasOwnProperty(i) && i.indexOf("$") < 0 && typeof values[i] !== "function") {
                    parts.push([enumMethods.toName(i), values[i]]);
                }
            }

            return parts.sort(function (i1, i2) {
                return System.Int64.is64Bit(i1[1]) ? i1[1].sub(i2[1]).sign() : (i1[1] - i2[1]);
            }).map(function (i) {
                return i[0];
            });
        },

        getName: function (enumType, value) {
            value = Bridge.unbox(value, true);

            if (value == null) {
                throw new System.ArgumentNullException.$ctor1("value");
            }

            var isLong = System.Int64.is64Bit(value);

            if (!isLong && !(typeof (value) === "number" && Math.floor(value, 0) === value)) {
                throw new System.ArgumentException.$ctor1("Argument must be integer", "value");
            }

            System.Enum.checkEnumType(enumType);

            var names = System.Enum.getNames(enumType),
                values = enumType;

            for (var i = 0; i < names.length; i++) {
                var name = names[i];

                if (isLong ? value.eq(values[name]) : (values[name] === value)) {
                    return name;
                }
            }

            return null;
        },

        hasFlag: function (value, flag) {
            flag = Bridge.unbox(flag, true);
            var isLong = System.Int64.is64Bit(value);

            return flag === 0 || (isLong ? !value.and(flag).isZero() : !!(value & flag));
        },

        isDefined: function (enumType, value) {
            value = Bridge.unbox(value, true);

            System.Enum.checkEnumType(enumType);

            var values = enumType,
                names = System.Enum.getNames(enumType),
                isString = Bridge.isString(value),
                isLong = System.Int64.is64Bit(value);

            for (var i = 0; i < names.length; i++) {
                var name = names[i];

                if (isString ? enumMethods.nameEquals(name, value, false) : (isLong ? value.eq(values[name]) : (values[name] === value))) {
                    return true;
                }
            }

            return false;
        },

        tryParse: function (enumType, value, result, ignoreCase) {
            result.v = Bridge.unbox(enumMethods.parse(enumType, value, ignoreCase, true), true);

            if (result.v == null) {
                result.v = 0;

                return false;
            }

            return true;
        },

        equals: function (v1, v2, T) {
            if (v2 && v2.$boxed && (v1 && v1.$boxed || T)) {
                if (v2.type !== (v1.type || T)) {
                    return false;
                }
            }

            return System.Enum.equalsT(v1, v2);
        },

        equalsT: function (v1, v2) {
            return Bridge.equals(Bridge.unbox(v1, true), Bridge.unbox(v2, true));
        }
    };

    Bridge.define("System.Enum", {
        inherits: [System.IComparable, System.IFormattable],
        statics: {
            methods: enumMethods
        }
    });

    // @source Nullable.js

    var nullable = {
        hasValue: Bridge.hasValue,

        getValue: function (obj) {
            obj = Bridge.unbox(obj, true);

            if (!Bridge.hasValue(obj)) {
                throw new System.InvalidOperationException.$ctor1("Nullable instance doesn't have a value.");
            }

            return obj;
        },

        getValueOrDefault: function (obj, defValue) {
            return Bridge.hasValue(obj) ? obj : defValue;
        },

        add: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a + b : null;
        },

        band: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a & b : null;
        },

        bor: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a | b : null;
        },

        and: function (a, b) {
            if (a === true && b === true) {
                return true;
            } else if (a === false || b === false) {
                return false;
            }

            return null;
        },

        or: function (a, b) {
            if (a === true || b === true) {
                return true;
            } else if (a === false && b === false) {
                return false;
            }

            return null;
        },

        div: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a / b : null;
        },

        eq: function (a, b) {
            return !Bridge.hasValue(a) ? !Bridge.hasValue(b) : (a === b);
        },

        equals: function (a, b, fn) {
            return !Bridge.hasValue(a) ? !Bridge.hasValue(b) : (fn ? fn(a, b) : Bridge.equals(a, b));
        },

        toString: function (a, fn) {
            return !Bridge.hasValue(a) ? "" : (fn ? fn(a) : a.toString());
        },

        toStringFn: function (fn) {
            return function (v) {
                return System.Nullable.toString(v, fn);
            };
        },

        getHashCode: function (a, fn) {
            return !Bridge.hasValue(a) ? 0 : (fn ? fn(a) : Bridge.getHashCode(a));
        },

        getHashCodeFn: function (fn) {
            return function (v) {
                return System.Nullable.getHashCode(v, fn);
            };
        },

        xor: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a ^ b : null;
        },

        gt: function (a, b) {
            return Bridge.hasValue$1(a, b) && a > b;
        },

        gte: function (a, b) {
            return Bridge.hasValue$1(a, b) && a >= b;
        },

        neq: function (a, b) {
            return !Bridge.hasValue(a) ? Bridge.hasValue(b) : (a !== b);
        },

        lt: function (a, b) {
            return Bridge.hasValue$1(a, b) && a < b;
        },

        lte: function (a, b) {
            return Bridge.hasValue$1(a, b) && a <= b;
        },

        mod: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a % b : null;
        },

        mul: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a * b : null;
        },

        imul: function (a, b) {
            return Bridge.hasValue$1(a, b) ? Bridge.Int.mul(a, b) : null;
        },

        sl: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a << b : null;
        },

        sr: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a >> b : null;
        },

        srr: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a >>> b : null;
        },

        sub: function (a, b) {
            return Bridge.hasValue$1(a, b) ? a - b : null;
        },

        bnot: function (a) {
            return Bridge.hasValue(a) ? ~a : null;
        },

        neg: function (a) {
            return Bridge.hasValue(a) ? -a : null;
        },

        not: function (a) {
            return Bridge.hasValue(a) ? !a : null;
        },

        pos: function (a) {
            return Bridge.hasValue(a) ? +a : null;
        },

        lift: function () {
            for (var i = 1; i < arguments.length; i++) {
                if (!Bridge.hasValue(arguments[i])) {
                    return null;
                }
            }

            if (arguments[0] == null) {
                return null;
            }

            if (arguments[0].apply == undefined) {
                return arguments[0];
            }

            return arguments[0].apply(null, Array.prototype.slice.call(arguments, 1));
        },

        lift1: function (f, o) {
            return Bridge.hasValue(o) ? (typeof f === "function" ? f.apply(null, Array.prototype.slice.call(arguments, 1)) : o[f].apply(o, Array.prototype.slice.call(arguments, 2))) : null;
        },

        lift2: function (f, a, b) {
            return Bridge.hasValue$1(a, b) ? (typeof f === "function" ? f.apply(null, Array.prototype.slice.call(arguments, 1)) : a[f].apply(a, Array.prototype.slice.call(arguments, 2))) : null;
        },

        liftcmp: function (f, a, b) {
            return Bridge.hasValue$1(a, b) ? (typeof f === "function" ? f.apply(null, Array.prototype.slice.call(arguments, 1)) : a[f].apply(a, Array.prototype.slice.call(arguments, 2))) : false;
        },

        lifteq: function (f, a, b) {
            var va = Bridge.hasValue(a),
                vb = Bridge.hasValue(b);

            return (!va && !vb) || (va && vb && (typeof f === "function" ? f.apply(null, Array.prototype.slice.call(arguments, 1)) : a[f].apply(a, Array.prototype.slice.call(arguments, 2))));
        },

        liftne: function (f, a, b) {
            var va = Bridge.hasValue(a),
                vb = Bridge.hasValue(b);

            return (va !== vb) || (va && (typeof f === "function" ? f.apply(null, Array.prototype.slice.call(arguments, 1)) : a[f].apply(a, Array.prototype.slice.call(arguments, 2))));
        },

        getUnderlyingType: function (nullableType) {
            if (!nullableType) {
                throw new System.ArgumentNullException.$ctor1("nullableType");
            }

            if (Bridge.Reflection.isGenericType(nullableType) &&
                !Bridge.Reflection.isGenericTypeDefinition(nullableType)) {
                var genericType = Bridge.Reflection.getGenericTypeDefinition(nullableType);

                if (genericType === System.Nullable$1) {
                    return Bridge.Reflection.getGenericArguments(nullableType)[0];
                }
            }

            return null;
        },

        compare: function (n1, n2) {
            return System.Collections.Generic.Comparer$1.$default.compare(n1, n2);
        }
    };

    System.Nullable = nullable;

    Bridge.define("System.Nullable$1", function (T) {
        return {
            $kind: "struct",

            statics: {
                $nullable: true,
                $nullableType: T,
                getDefaultValue: function () {
                    return null;
                },

                $is: function (obj) {
                    return Bridge.is(obj, T);
                }
            }
        };
    });

    // @source Char.js

    Bridge.define("System.Char", {
        inherits: [System.IComparable, System.IFormattable],
        $kind: "struct",
        statics: {
            min: 0,

            max: 65535,

            $is: function (instance) {
                return typeof (instance) === "number" && Math.round(instance, 0) == instance && instance >= System.Char.min && instance <= System.Char.max;
            },

            getDefaultValue: function () {
                return 0;
            },

            parse: function (s) {
                if (!Bridge.hasValue(s)) {
                    throw new System.ArgumentNullException.$ctor1("s");
                }

                if (s.length !== 1) {
                    throw new System.FormatException();
                }

                return s.charCodeAt(0);
            },

            tryParse: function (s, result) {
                var b = s && s.length === 1;

                result.v = b ? s.charCodeAt(0) : 0;

                return b;
            },

            format: function (number, format, provider) {
                return Bridge.Int.format(number, format, provider);
            },

            charCodeAt: function (str, index) {
                if (str == null) {
                    throw new System.ArgumentNullException();
                }

                if (str.length != 1) {
                    throw new System.FormatException.$ctor1("String must be exactly one character long");
                }

                return str.charCodeAt(index);
            },

            isWhiteSpace: function (s) {
                return !/[^\s\x09-\x0D\x85\xA0]/.test(s);
            },

            isDigit: function (value) {
                if (value < 256) {
                    return (value >= 48 && value <= 57);
                }

                return new RegExp(/[0-9\u0030-\u0039\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/).test(String.fromCharCode(value));
            },

            isLetter: function (value) {
                if (value < 256) {
                    return (value >= 65 && value <= 90) || (value >= 97 && value <= 122);
                }

                return new RegExp(/[A-Za-z\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uAA70\uAADD\uAAF3\uAAF4\uFF70\uFF9E\uFF9F\u00AA\u00BA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/).test(String.fromCharCode(value));
            },

            isHighSurrogate: function (value) {
                return new RegExp(/[\uD800-\uDBFF]/).test(String.fromCharCode(value));
            },

            isLowSurrogate: function (value) {
                return new RegExp(/[\uDC00-\uDFFF]/).test(String.fromCharCode(value));
            },

            isSurrogate: function (value) {
                return new RegExp(/[\uD800-\uDFFF]/).test(String.fromCharCode(value));
            },

            isNull: function (value) {
                return new RegExp("\u0000").test(String.fromCharCode(value));
            },

            isSymbol: function (value) {
                if (value < 256) {
                    return ([36, 43, 60, 61, 62, 94, 96, 124, 126, 162, 163, 164, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 180, 182, 184, 215, 247].indexOf(value) != -1);
                }

                return new RegExp(/[\u20A0-\u20CF\u20D0-\u20FF\u2100-\u214F\u2150-\u218F\u2190-\u21FF\u2200-\u22FF\u2300-\u23FF\u25A0-\u25FF\u2600-\u26FF\u2700-\u27BF\u27C0-\u27EF\u27F0-\u27FF\u2800-\u28FF\u2900-\u297F\u2980-\u29FF\u2A00-\u2AFF\u2B00-\u2BFF]/).test(String.fromCharCode(value));
            },

            isSeparator: function (value) {
                if (value < 256) {
                    return (value == 32 || value == 160);
                }

                return new RegExp(/[\u2028\u2029\u0020\u00A0\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/).test(String.fromCharCode(value));
            },

            isPunctuation: function (value) {
                if (value < 256) {
                    return ([33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 58, 59, 63, 64, 91, 92, 93, 95, 123, 125, 161, 171, 173, 183, 187, 191].indexOf(value) != -1);
                }

                return new RegExp(/[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65\u002D\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D\u0028\u005B\u007B\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3E\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62\u0029\u005D\u007D\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3F\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63\u00AB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20\u00BB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21\u005F\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F\u0021-\u0023\u0025-\u0027\u002A\u002C\u002E\u002F\u003A\u003B\u003F\u0040\u005C\u00A1\u00A7\u00B6\u00B7\u00BF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65]/).test(String.fromCharCode(value));
            },

            isNumber: function (value) {
                if (value < 256) {
                    return ([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 178, 179, 185, 188, 189, 190].indexOf(value) != -1);
                }

                return new RegExp(/[\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19\u0030-\u0039\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF\u00B2\u00B3\u00B9\u00BC-\u00BE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D70-\u0D75\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835]/).test(String.fromCharCode(value));
            },

            isControl: function (value) {
                if (value < 256) {
                    return (value >= 0 && value <= 31) || (value >= 127 && value <= 159);
                }

                return new RegExp(/[\u0000-\u001F\u007F\u0080-\u009F]/).test(String.fromCharCode(value));
            },

            isLatin1: function (ch) {
                return (ch <= 255);
            },

            isAscii: function (ch) {
                return (ch <= 127);
            },

            isUpper: function (s, index) {
                if (s == null) {
                    throw new System.ArgumentNullException.$ctor1("s");
                }

                if ((index >>> 0) >= ((s.length) >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                var c = s.charCodeAt(index);

                if (System.Char.isLatin1(c)) {
                    if (System.Char.isAscii(c)) {
                        return (c >= 65 && c <= 90);
                    }
                }

                return Bridge.isUpper(c);
            },

            equals: function (v1, v2) {
                if (Bridge.is(v1, System.Char) && Bridge.is(v2, System.Char)) {
                    return Bridge.unbox(v1, true) === Bridge.unbox(v2, true);
                }

                return false;
            },

            equalsT: function (v1, v2) {
                return Bridge.unbox(v1, true) === Bridge.unbox(v2, true);
            },

            getHashCode: function (v) {
                return v | (v << 16);
            }
        }
    });

    Bridge.Class.addExtend(System.Char, [System.IComparable$1(System.Char), System.IEquatable$1(System.Char)]);

    // @source Ref.js

    Bridge.define("Bridge.Ref$1", function (T) { return {
        statics: {
            methods: {
                op_Implicit: function (reference) {
                    return reference.Value;
                }
            }
        },
        fields: {
            getter: null,
            setter: null
        },
        props: {
            Value: {
                get: function () {
                    return this.getter();
                },
                set: function (value) {
                    this.setter(value);
                }
            },
            v: {
                get: function () {
                    return this.Value;
                },
                set: function (value) {
                    this.Value = value;
                }
            }
        },
        ctors: {
            ctor: function (getter, setter) {
                this.$initialize();
                this.getter = getter;
                this.setter = setter;
            }
        },
        methods: {
            toString: function () {
                return Bridge.toString(this.Value);
            },
            valueOf: function () {
                return this.Value;
            }
        }
    }; });

    // @source IConvertible.js

    Bridge.define("System.IConvertible", {
        $kind: "interface"
    });

    // @source HResults.js

    Bridge.define("System.HResults");

    // @source Exception.js

    Bridge.define("System.Exception", {
        config: {
            properties: {
                Message: {
                    get: function () {
                        return this.message;
                    }
                },

                InnerException: {
                    get: function () {
                        return this.innerException;
                    }
                },

                StackTrace: {
                    get: function () {
                        return this.errorStack.stack;
                    }
                },

                Data: {
                    get: function () {
                        return this.data;
                    }
                },

                HResult: {
                    get: function () {
                        return this._HResult;
                    },
                    set: function (value) {
                        this._HResult = value;
                    }
                }
            }
        },

        ctor: function (message, innerException) {
            this.$initialize();
            this.message = message ? message : ("Exception of type '" + Bridge.getTypeName(this) + "' was thrown.");
            this.innerException = innerException ? innerException : null;
            this.errorStack = new Error(this.message);
            this.data = new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))();
        },

        getBaseException: function () {
            var inner = this.innerException;
            var back = this;

            while (inner != null) {
                back = inner;
                inner = inner.innerException;
            }

            return back;
        },

        toString: function () {
            var builder = Bridge.getTypeName(this);

            if (this.Message != null) {
                builder += ": " + this.Message + "\n";
            } else {
                builder += "\n";
            }

            if (this.StackTrace != null) {
                builder += this.StackTrace + "\n";
            }

            return builder;
        },

        statics: {
            create: function (error) {
                if (Bridge.is(error, System.Exception)) {
                    return error;
                }

                var ex;

                if (error instanceof TypeError) {
                    ex = new System.NullReferenceException.$ctor1(error.message);
                } else if (error instanceof RangeError) {
                    ex = new System.ArgumentOutOfRangeException.$ctor1(error.message);
                } else if (error instanceof Error) {
                    return new System.SystemException.$ctor1(error);
                } else if (error && error.error && error.error.stack) {
                    ex = new System.Exception(error.error.stack);
                } else {
                    ex = new System.Exception(error ? error.message ? error.message : error.toString() : null);
                }

                ex.errorStack = error;

                return ex;
            }
        }
    });

    // @source SystemException.js

    Bridge.define("System.SystemException", {
        inherits: [System.Exception],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this, "System error.");
                this.HResult = -2146233087;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
                this.HResult = -2146233087;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerException);
                this.HResult = -2146233087;
            }
        }
    });

    // @source OutOfMemoryException.js

    Bridge.define("System.OutOfMemoryException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Insufficient memory to continue the execution of the program.");
                this.HResult = -2147024362;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147024362;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2147024362;
            }
        }
    });

    // @source ArrayTypeMismatchException.js

    Bridge.define("System.ArrayTypeMismatchException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Attempted to access an element as a type incompatible with the array.");
                this.HResult = -2146233085;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233085;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233085;
            }
        }
    });

    // @source MissingManifestResourceException.js

    Bridge.define("System.Resources.MissingManifestResourceException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Unable to find manifest resource.");
                this.HResult = -2146233038;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233038;
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, inner);
                this.HResult = -2146233038;
            }
        }
    });

    // @source TextInfo.js

    Bridge.define("System.Globalization.TextInfo", {
        inherits: [System.ICloneable],
        fields: {
            listSeparator: null
        },
        props: {
            ANSICodePage: 0,
            CultureName: null,
            EBCDICCodePage: 0,
            IsReadOnly: false,
            IsRightToLeft: false,
            LCID: 0,
            ListSeparator: {
                get: function () {
                    return this.listSeparator;
                },
                set: function (value) {
                    this.VerifyWritable();

                    this.listSeparator = value;
                }
            },
            MacCodePage: 0,
            OEMCodePage: 0
        },
        alias: ["clone", "System$ICloneable$clone"],
        methods: {
            clone: function () {
                return Bridge.copy(new System.Globalization.TextInfo(), this, System.Array.init(["ANSICodePage", "CultureName", "EBCDICCodePage", "IsRightToLeft", "LCID", "listSeparator", "MacCodePage", "OEMCodePage", "IsReadOnly"], System.String));
            },
            VerifyWritable: function () {
                if (this.IsReadOnly) {
                    throw new System.InvalidOperationException.$ctor1("Instance is read-only.");
                }
            }
        }
    });

    // @source BidiCategory.js

    Bridge.define("System.Globalization.BidiCategory", {
        $kind: "enum",
        statics: {
            fields: {
                LeftToRight: 0,
                LeftToRightEmbedding: 1,
                LeftToRightOverride: 2,
                RightToLeft: 3,
                RightToLeftArabic: 4,
                RightToLeftEmbedding: 5,
                RightToLeftOverride: 6,
                PopDirectionalFormat: 7,
                EuropeanNumber: 8,
                EuropeanNumberSeparator: 9,
                EuropeanNumberTerminator: 10,
                ArabicNumber: 11,
                CommonNumberSeparator: 12,
                NonSpacingMark: 13,
                BoundaryNeutral: 14,
                ParagraphSeparator: 15,
                SegmentSeparator: 16,
                Whitespace: 17,
                OtherNeutrals: 18,
                LeftToRightIsolate: 19,
                RightToLeftIsolate: 20,
                FirstStrongIsolate: 21,
                PopDirectionIsolate: 22
            }
        }
    });

    // @source SortVersion.js

    Bridge.define("System.Globalization.SortVersion", {
        inherits: function () { return [System.IEquatable$1(System.Globalization.SortVersion)]; },
        statics: {
            methods: {
                op_Equality: function (left, right) {
                    if (left != null) {
                        return left.equalsT(right);
                    }

                    if (right != null) {
                        return right.equalsT(left);
                    }

                    return true;
                },
                op_Inequality: function (left, right) {
                    return !(System.Globalization.SortVersion.op_Equality(left, right));
                }
            }
        },
        fields: {
            m_NlsVersion: 0,
            m_SortId: null
        },
        props: {
            FullVersion: {
                get: function () {
                    return this.m_NlsVersion;
                }
            },
            SortId: {
                get: function () {
                    return this.m_SortId;
                }
            }
        },
        alias: ["equalsT", "System$IEquatable$1$System$Globalization$SortVersion$equalsT"],
        ctors: {
            init: function () {
                this.m_SortId = new System.Guid();
            },
            ctor: function (fullVersion, sortId) {
                this.$initialize();
                this.m_SortId = sortId;
                this.m_NlsVersion = fullVersion;
            },
            $ctor1: function (nlsVersion, effectiveId, customVersion) {
                this.$initialize();
                this.m_NlsVersion = nlsVersion;

                if (System.Guid.op_Equality(customVersion, System.Guid.Empty)) {
                    var b1 = (effectiveId >> 24) & 255;
                    var b2 = ((effectiveId & 16711680) >> 16) & 255;
                    var b3 = ((effectiveId & 65280) >> 8) & 255;
                    var b4 = (effectiveId & 255) & 255;
                    customVersion = new System.Guid.$ctor2(0, 0, 0, 0, 0, 0, 0, b1, b2, b3, b4);
                }

                this.m_SortId = customVersion;
            }
        },
        methods: {
            equals: function (obj) {
                var n = Bridge.as(obj, System.Globalization.SortVersion);
                if (System.Globalization.SortVersion.op_Inequality(n, null)) {
                    return this.equalsT(n);
                }

                return false;
            },
            equalsT: function (other) {
                if (System.Globalization.SortVersion.op_Equality(other, null)) {
                    return false;
                }

                return this.m_NlsVersion === other.m_NlsVersion && System.Guid.op_Equality(this.m_SortId, other.m_SortId);
            },
            getHashCode: function () {
                return Bridge.Int.mul(this.m_NlsVersion, 7) | this.m_SortId.getHashCode();
            }
        }
    });

    // @source UnicodeCategory.js

    Bridge.define("System.Globalization.UnicodeCategory", {
        $kind: "enum",
        statics: {
            fields: {
                UppercaseLetter: 0,
                LowercaseLetter: 1,
                TitlecaseLetter: 2,
                ModifierLetter: 3,
                OtherLetter: 4,
                NonSpacingMark: 5,
                SpacingCombiningMark: 6,
                EnclosingMark: 7,
                DecimalDigitNumber: 8,
                LetterNumber: 9,
                OtherNumber: 10,
                SpaceSeparator: 11,
                LineSeparator: 12,
                ParagraphSeparator: 13,
                Control: 14,
                Format: 15,
                Surrogate: 16,
                PrivateUse: 17,
                ConnectorPunctuation: 18,
                DashPunctuation: 19,
                OpenPunctuation: 20,
                ClosePunctuation: 21,
                InitialQuotePunctuation: 22,
                FinalQuotePunctuation: 23,
                OtherPunctuation: 24,
                MathSymbol: 25,
                CurrencySymbol: 26,
                ModifierSymbol: 27,
                OtherSymbol: 28,
                OtherNotAssigned: 29
            }
        }
    });

    // @source DaylightTimeStruct.js

    Bridge.define("System.Globalization.DaylightTimeStruct", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.Globalization.DaylightTimeStruct(); }
            }
        },
        fields: {
            Start: null,
            End: null,
            Delta: null
        },
        ctors: {
            init: function () {
                this.Start = System.DateTime.getDefaultValue();
                this.End = System.DateTime.getDefaultValue();
                this.Delta = new System.TimeSpan();
            },
            $ctor1: function (start, end, delta) {
                this.$initialize();
                this.Start = start;
                this.End = end;
                this.Delta = delta;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7445027511, this.Start, this.End, this.Delta]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Globalization.DaylightTimeStruct)) {
                    return false;
                }
                return Bridge.equals(this.Start, o.Start) && Bridge.equals(this.End, o.End) && Bridge.equals(this.Delta, o.Delta);
            },
            $clone: function (to) {
                var s = to || new System.Globalization.DaylightTimeStruct();
                s.Start = this.Start;
                s.End = this.End;
                s.Delta = this.Delta;
                return s;
            }
        }
    });

    // @source DaylightTime.js

    Bridge.define("System.Globalization.DaylightTime", {
        fields: {
            _start: null,
            _end: null,
            _delta: null
        },
        props: {
            Start: {
                get: function () {
                    return this._start;
                }
            },
            End: {
                get: function () {
                    return this._end;
                }
            },
            Delta: {
                get: function () {
                    return this._delta;
                }
            }
        },
        ctors: {
            init: function () {
                this._start = System.DateTime.getDefaultValue();
                this._end = System.DateTime.getDefaultValue();
                this._delta = new System.TimeSpan();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (start, end, delta) {
                this.$initialize();
                this._start = start;
                this._end = end;
                this._delta = delta;
            }
        }
    });

    // @source Globalization.js

    Bridge.define("System.Globalization.DateTimeFormatInfo", {
        inherits: [System.IFormatProvider, System.ICloneable],

        config: {
            alias: [
                "getFormat", "System$IFormatProvider$getFormat"
            ]
        },

        statics: {
            $allStandardFormats: {
                "d": "shortDatePattern",
                "D": "longDatePattern",
                "f": "longDatePattern shortTimePattern",
                "F": "longDatePattern longTimePattern",
                "g": "shortDatePattern shortTimePattern",
                "G": "shortDatePattern longTimePattern",
                "m": "monthDayPattern",
                "M": "monthDayPattern",
                "o": "roundtripFormat",
                "O": "roundtripFormat",
                "r": "rfc1123",
                "R": "rfc1123",
                "s": "sortableDateTimePattern",
                "S": "sortableDateTimePattern1",
                "t": "shortTimePattern",
                "T": "longTimePattern",
                "u": "universalSortableDateTimePattern",
                "U": "longDatePattern longTimePattern",
                "y": "yearMonthPattern",
                "Y": "yearMonthPattern"
            },

            ctor: function () {
                this.invariantInfo = Bridge.merge(new System.Globalization.DateTimeFormatInfo(), {
                    abbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                    abbreviatedMonthGenitiveNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
                    abbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
                    amDesignator: "AM",
                    dateSeparator: "/",
                    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    firstDayOfWeek: 0,
                    fullDateTimePattern: "dddd, dd MMMM yyyy HH:mm:ss",
                    longDatePattern: "dddd, dd MMMM yyyy",
                    longTimePattern: "HH:mm:ss",
                    monthDayPattern: "MMMM dd",
                    monthGenitiveNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                    pmDesignator: "PM",
                    rfc1123: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
                    shortDatePattern: "MM/dd/yyyy",
                    shortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                    shortTimePattern: "HH:mm",
                    sortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
                    sortableDateTimePattern1: "yyyy'-'MM'-'dd",
                    timeSeparator: ":",
                    universalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                    yearMonthPattern: "yyyy MMMM",
                    roundtripFormat: "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffzzz"
                });
            }
        },

        getFormat: function (type) {
            switch (type) {
                case System.Globalization.DateTimeFormatInfo:
                    return this;
                default:
                    return null;
            }
        },

        getAbbreviatedDayName: function (dayofweek) {
            if (dayofweek < 0 || dayofweek > 6) {
                throw new System.ArgumentOutOfRangeException$ctor1("dayofweek");
            }

            return this.abbreviatedDayNames[dayofweek];
        },

        getAbbreviatedMonthName: function (month) {
            if (month < 1 || month > 13) {
                throw new System.ArgumentOutOfRangeException.$ctor1("month");
            }

            return this.abbreviatedMonthNames[month - 1];
        },

        getAllDateTimePatterns: function (format, returnNull) {
            var f = System.Globalization.DateTimeFormatInfo.$allStandardFormats,
                formats,
                names,
                pattern,
                i,
                result = [];

            if (format) {
                if (!f[format]) {
                    if (returnNull) {
                        return null;
                    }

                    throw new System.ArgumentException.$ctor3("", "format");
                }

                formats = {};
                formats[format] = f[format];
            } else {
                formats = f;
            }

            for (f in formats) {
                names = formats[f].split(" ");
                pattern = "";

                for (i = 0; i < names.length; i++) {
                    pattern = (i === 0 ? "" : (pattern + " ")) + this[names[i]];
                }

                result.push(pattern);
            }

            return result;
        },

        getDayName: function (dayofweek) {
            if (dayofweek < 0 || dayofweek > 6) {
                throw new System.ArgumentOutOfRangeException.$ctor1("dayofweek");
            }

            return this.dayNames[dayofweek];
        },

        getMonthName: function (month) {
            if (month < 1 || month > 13) {
                throw new System.ArgumentOutOfRangeException.$ctor1("month");
            }

            return this.monthNames[month - 1];
        },

        getShortestDayName: function (dayOfWeek) {
            if (dayOfWeek < 0 || dayOfWeek > 6) {
                throw new System.ArgumentOutOfRangeException.$ctor1("dayOfWeek");
            }

            return this.shortestDayNames[dayOfWeek];
        },

        clone: function () {
            return Bridge.copy(new System.Globalization.DateTimeFormatInfo(), this, [
                "abbreviatedDayNames",
                "abbreviatedMonthGenitiveNames",
                "abbreviatedMonthNames",
                "amDesignator",
                "dateSeparator",
                "dayNames",
                "firstDayOfWeek",
                "fullDateTimePattern",
                "longDatePattern",
                "longTimePattern",
                "monthDayPattern",
                "monthGenitiveNames",
                "monthNames",
                "pmDesignator",
                "rfc1123",
                "shortDatePattern",
                "shortestDayNames",
                "shortTimePattern",
                "sortableDateTimePattern",
                "timeSeparator",
                "universalSortableDateTimePattern",
                "yearMonthPattern",
                "roundtripFormat"
            ]);
        }
    });

    Bridge.define("System.Globalization.NumberFormatInfo", {
        inherits: [System.IFormatProvider, System.ICloneable],

        config: {
            alias: [
                "getFormat", "System$IFormatProvider$getFormat"
            ]
        },

        statics: {
            ctor: function () {
                this.numberNegativePatterns = ["(n)", "-n", "- n", "n-", "n -"];
                this.currencyNegativePatterns = ["($n)", "-$n", "$-n", "$n-", "(n$)", "-n$", "n-$", "n$-", "-n $", "-$ n", "n $-", "$ n-", "$ -n", "n- $", "($ n)", "(n $)"];
                this.currencyPositivePatterns = ["$n", "n$", "$ n", "n $"];
                this.percentNegativePatterns = ["-n %", "-n%", "-%n", "%-n", "%n-", "n-%", "n%-", "-% n", "n %-", "% n-", "% -n", "n- %"];
                this.percentPositivePatterns = ["n %", "n%", "%n", "% n"];

                this.invariantInfo = Bridge.merge(new System.Globalization.NumberFormatInfo(), {
                    nanSymbol: "NaN",
                    negativeSign: "-",
                    positiveSign: "+",
                    negativeInfinitySymbol: "-Infinity",
                    positiveInfinitySymbol: "Infinity",

                    percentSymbol: "%",
                    percentGroupSizes: [3],
                    percentDecimalDigits: 2,
                    percentDecimalSeparator: ".",
                    percentGroupSeparator: ",",
                    percentPositivePattern: 0,
                    percentNegativePattern: 0,

                    currencySymbol: "¤",
                    currencyGroupSizes: [3],
                    currencyDecimalDigits: 2,
                    currencyDecimalSeparator: ".",
                    currencyGroupSeparator: ",",
                    currencyNegativePattern: 0,
                    currencyPositivePattern: 0,

                    numberGroupSizes: [3],
                    numberDecimalDigits: 2,
                    numberDecimalSeparator: ".",
                    numberGroupSeparator: ",",
                    numberNegativePattern: 1
                });
            }
        },

        getFormat: function (type) {
            switch (type) {
                case System.Globalization.NumberFormatInfo:
                    return this;
                default:
                    return null;
            }
        },

        clone: function () {
            return Bridge.copy(new System.Globalization.NumberFormatInfo(), this, [
                "nanSymbol",
                "negativeSign",
                "positiveSign",
                "negativeInfinitySymbol",
                "positiveInfinitySymbol",
                "percentSymbol",
                "percentGroupSizes",
                "percentDecimalDigits",
                "percentDecimalSeparator",
                "percentGroupSeparator",
                "percentPositivePattern",
                "percentNegativePattern",
                "currencySymbol",
                "currencyGroupSizes",
                "currencyDecimalDigits",
                "currencyDecimalSeparator",
                "currencyGroupSeparator",
                "currencyNegativePattern",
                "currencyPositivePattern",
                "numberGroupSizes",
                "numberDecimalDigits",
                "numberDecimalSeparator",
                "numberGroupSeparator",
                "numberNegativePattern"
            ]);
        }
    });

    Bridge.define("System.Globalization.CultureInfo", {
        inherits: [System.IFormatProvider, System.ICloneable],

        config: {
            alias: [
                "getFormat", "System$IFormatProvider$getFormat"
            ]
        },

        $entryPoint: true,

        statics: {
            ctor: function () {
                this.cultures = this.cultures || {};

                this.invariantCulture = Bridge.merge(new System.Globalization.CultureInfo("iv", true), {
                    englishName: "Invariant Language (Invariant Country)",
                    nativeName: "Invariant Language (Invariant Country)",
                    numberFormat: System.Globalization.NumberFormatInfo.invariantInfo,
                    dateTimeFormat: System.Globalization.DateTimeFormatInfo.invariantInfo,
                    TextInfo: Bridge.merge(new System.Globalization.TextInfo(), {
                        ANSICodePage: 1252,
                        CultureName: "",
                        EBCDICCodePage: 37,
                        listSeparator: ",",
                        IsRightToLeft: false,
                        LCID: 127,
                        MacCodePage: 10000,
                        OEMCodePage: 437,
                        IsReadOnly: true
                    })
                });

                this.setCurrentCulture(System.Globalization.CultureInfo.invariantCulture);
            },

            getCurrentCulture: function () {
                return this.currentCulture;
            },

            setCurrentCulture: function (culture) {
                this.currentCulture = culture;

                System.Globalization.DateTimeFormatInfo.currentInfo = culture.dateTimeFormat;
                System.Globalization.NumberFormatInfo.currentInfo = culture.numberFormat;
            },

            getCultureInfo: function (name) {
                if (name == null) {
                    throw new System.ArgumentNullException.$ctor1("name");
                } else if (name === "") {
                    return System.Globalization.CultureInfo.invariantCulture;
                }

                var c = this.cultures[name];

                if (c == null) {
                    throw new System.Globalization.CultureNotFoundException.$ctor5("name", name);
                }

                return c;
            },

            getCultures: function () {
                var names = Bridge.getPropertyNames(this.cultures),
                    result = [],
                    i;

                for (i = 0; i < names.length; i++) {
                    result.push(this.cultures[names[i]]);
                }

                return result;
            }
        },

        ctor: function (name, create) {
            this.$initialize();
            this.name = name;

            if (!System.Globalization.CultureInfo.cultures) {
                System.Globalization.CultureInfo.cultures = {};
            }

            if (name == null) {
                throw new System.ArgumentNullException.$ctor1("name");
            }

            var c;

            if (name === "") {
                c =  System.Globalization.CultureInfo.invariantCulture;
            } else {
                c = System.Globalization.CultureInfo.cultures[name];
            }

            if (c == null) {
                if (!create) {
                    throw new System.Globalization.CultureNotFoundException.$ctor5("name", name);
                }

                System.Globalization.CultureInfo.cultures[name] = this;
            } else {
                Bridge.copy(this, c, [
                            "englishName",
                            "nativeName",
                            "numberFormat",
                            "dateTimeFormat",
                            "TextInfo"
                ]);

                this.TextInfo.IsReadOnly = false;
            }
        },

        getFormat: function (type) {
            switch (type) {
                case System.Globalization.NumberFormatInfo:
                    return this.numberFormat;
                case System.Globalization.DateTimeFormatInfo:
                    return this.dateTimeFormat;
                default:
                    return null;
            }
        },

        clone: function () {
            return new System.Globalization.CultureInfo(this.name);
        }
    });

    // @source Environment.js

    Bridge.define("System.Environment", {
        statics: {
            fields: {
                Variables: null
            },
            props: {
                Location: {
                    get: function () {
                        var g = Bridge.global;

                        if (g && g.location) {
                            return g.location;
                        }

                        return null;
                    }
                },
                CommandLine: {
                    get: function () {
                        return System.Environment.GetCommandLineArgs().join(" ");
                    }
                },
                CurrentDirectory: {
                    get: function () {
                        var l = System.Environment.Location;

                        return l ? l.pathname : "";
                    },
                    set: function (value) {
                        var l = System.Environment.Location;

                        if (l) {
                            l.pathname = value;
                        }
                    }
                },
                ExitCode: 0,
                Is64BitOperatingSystem: {
                    get: function () {
                        var n = Bridge.global ? Bridge.global.navigator : null;

                        if (n && (!Bridge.referenceEquals(n.userAgent.indexOf("WOW64"), -1) || !Bridge.referenceEquals(n.userAgent.indexOf("Win64"), -1))) {
                            return true;
                        }

                        return false;
                    }
                },
                ProcessorCount: {
                    get: function () {
                        var n = Bridge.global ? Bridge.global.navigator : null;

                        if (n && n.hardwareConcurrency) {
                            return n.hardwareConcurrency;
                        }

                        return 1;
                    }
                },
                StackTrace: {
                    get: function () {
                        var err = new Error();
                        var s = err.stack;

                        if (!System.String.isNullOrEmpty(s)) {
                            if (System.String.indexOf(s, "at") >= 0) {
                                return s.substr(System.String.indexOf(s, "at"));
                            }
                        }

                        return "";
                    }
                },
                Version: {
                    get: function () {
                        var s = Bridge.SystemAssembly.compiler;

                        var v = { };

                        if (System.Version.tryParse(s, v)) {
                            return v.v;
                        }

                        return new System.Version.ctor();
                    }
                }
            },
            ctors: {
                init: function () {
                    this.ExitCode = 0;
                },
                ctor: function () {
                    System.Environment.Variables = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    System.Environment.PatchDictionary(System.Environment.Variables);
                }
            },
            methods: {
                GetResourceString: function (key) {
                    return key;
                },
                GetResourceString$1: function (key, values) {
                    if (values === void 0) { values = []; }
                    var s = System.Environment.GetResourceString(key);
                    return System.String.formatProvider.apply(System.String, [System.Globalization.CultureInfo.getCurrentCulture(), s].concat(values));
                },
                PatchDictionary: function (d) {
                    d.noKeyCheck = true;

                    return d;
                },
                Exit: function (exitCode) {
                    System.Environment.ExitCode = exitCode;
                },
                ExpandEnvironmentVariables: function (name) {
                    var $t;
                    if (name == null) {
                        throw new System.ArgumentNullException.$ctor1(name);
                    }

                    $t = Bridge.getEnumerator(System.Environment.Variables);
                    try {
                        while ($t.moveNext()) {
                            var pair = $t.Current;
                            name = System.String.replaceAll(name, "%" + (pair.key || "") + "%", pair.value);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return name;
                },
                FailFast: function (message) {
                    throw new System.Exception(message);
                },
                FailFast$1: function (message, exception) {
                    throw new System.Exception(message, exception);
                },
                GetCommandLineArgs: function () {
                    var l = System.Environment.Location;

                    if (l) {
                        var args = new (System.Collections.Generic.List$1(System.String)).ctor();

                        var path = l.pathname;

                        if (!System.String.isNullOrEmpty(path)) {
                            args.add(path);
                        }

                        var search = l.search;

                        if (!System.String.isNullOrEmpty(search) && search.length > 1) {
                            var query = System.String.split(search.substr(1), [38].map(function (i) {{ return String.fromCharCode(i); }}));

                            for (var i = 0; i < query.length; i = (i + 1) | 0) {
                                var param = System.String.split(query[System.Array.index(i, query)], [61].map(function (i) {{ return String.fromCharCode(i); }}));

                                for (var j = 0; j < param.length; j = (j + 1) | 0) {
                                    args.add(param[System.Array.index(j, param)]);
                                }
                            }
                        }

                        return args.ToArray();
                    }

                    return System.Array.init(0, null, System.String);
                },
                GetEnvironmentVariable: function (variable) {
                    if (variable == null) {
                        throw new System.ArgumentNullException.$ctor1("variable");
                    }

                    var r = { };

                    if (System.Environment.Variables.tryGetValue(variable.toLowerCase(), r)) {
                        return r.v;
                    }

                    return null;
                },
                GetEnvironmentVariable$1: function (variable, target) {
                    return System.Environment.GetEnvironmentVariable(variable);
                },
                GetEnvironmentVariables: function () {
                    return System.Environment.PatchDictionary(new (System.Collections.Generic.Dictionary$2(System.String,System.String))(System.Environment.Variables));
                },
                GetEnvironmentVariables$1: function (target) {
                    return System.Environment.GetEnvironmentVariables();
                },
                GetLogicalDrives: function () {
                    return System.Array.init(0, null, System.String);
                },
                SetEnvironmentVariable: function (variable, value) {
                    if (variable == null) {
                        throw new System.ArgumentNullException.$ctor1("variable");
                    }

                    if (System.String.isNullOrEmpty(variable) || System.String.startsWith(variable, String.fromCharCode(0)) || System.String.contains(variable,"=") || variable.length > 32767) {
                        throw new System.ArgumentException.$ctor1("Incorrect variable (cannot be empty, contain zero character nor equal sign, be longer than 32767).");
                    }

                    variable = variable.toLowerCase();

                    if (System.String.isNullOrEmpty(value)) {
                        if (System.Environment.Variables.containsKey(variable)) {
                            System.Environment.Variables.remove(variable);
                        }
                    } else {
                        System.Environment.Variables.set(variable, value);
                    }
                },
                SetEnvironmentVariable$1: function (variable, value, target) {
                    System.Environment.SetEnvironmentVariable(variable, value);
                }
            }
        }
    });

    // @source StringSplitOptions.js

    Bridge.define("System.StringSplitOptions", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                RemoveEmptyEntries: 1
            }
        },
        $flags: true
    });

    // @source Math.js

    Bridge.Math = {
        divRem: function (a, b, result) {
            var remainder = a % b;

            result.v = remainder;

            return (a - remainder) / b;
        },

        round: function (n, d, rounding) {
            var m = Math.pow(10, d || 0);

            n *= m;

            var sign = (n > 0) | -(n < 0);

            if (n % 1 === 0.5 * sign) {
                var f = Math.floor(n);

                return (f + (rounding === 4 ? (sign > 0) : (f % 2 * sign))) / m;
            }

            return Math.round(n) / m;
        },

        log10: Math.log10 || function (x) {
            return Math.log(x) / Math.LN10;
        },

        logWithBase: function (x, newBase) {
            if (isNaN(x)) {
                return x;
            }

            if (isNaN(newBase)) {
                return newBase;
            }

            if (newBase === 1) {
                return NaN
            }

            if (x !== 1 && (newBase === 0 || newBase === Number.POSITIVE_INFINITY)) {
                return NaN;
            }

            return Bridge.Math.log10(x) / Bridge.Math.log10(newBase);
        },

        log: function (x) {
            if (x === 0.0) {
                return Number.NEGATIVE_INFINITY;
            }

            if (x < 0.0 || isNaN(x)) {
                return NaN;
            }

            if (x === Number.POSITIVE_INFINITY) {
                return Number.POSITIVE_INFINITY;
            }

            if (x === Number.NEGATIVE_INFINITY) {
                return NaN;
            }

            return Math.log(x);
        },

        sinh: Math.sinh || function (x) {
            return (Math.exp(x) - Math.exp(-x)) / 2;
        },

        cosh: Math.cosh || function (x) {
            return (Math.exp(x) + Math.exp(-x)) / 2;
        },

        tanh: Math.tanh || function (x) {
            if (x === Infinity) {
                return 1;
            } else if (x === -Infinity) {
                return -1;
            } else {
                var y = Math.exp(2 * x);

                return (y - 1) / (y + 1);
            }
        }
    };

    // @source Bool.js

    Bridge.define("System.Boolean", {
        inherits: [System.IComparable],

        statics: {
            trueString: "True",
            falseString: "False",

            $is: function (instance) {
                return typeof (instance) === "boolean";
            },

            getDefaultValue: function () {
                return false;
            },

            createInstance: function () {
                return false;
            },

            toString: function (v) {
                return v ? System.Boolean.trueString : System.Boolean.falseString;
            },

            parse: function (value) {
                if (!Bridge.hasValue(value)) {
                    throw new System.ArgumentNullException.$ctor1("value");
                }

                var result = {
                    v: false
                };

                if (!System.Boolean.tryParse(value, result)) {
                    throw new System.FormatException.$ctor1("Bad format for Boolean value");
                }

                return result.v;
            },

            tryParse: function (value, result) {
                result.v = false;

                if (!Bridge.hasValue(value)) {
                    return false;
                }

                if (System.String.equals(System.Boolean.trueString, value, 5)) {
                    result.v = true;
                    return true;
                }

                if (System.String.equals(System.Boolean.falseString, value, 5)) {
                    result.v = false;
                    return true;
                }

                var start = 0,
                    end = value.length - 1;

                while (start < value.length) {
                    if (!System.Char.isWhiteSpace(value[start]) && !System.Char.isNull(value.charCodeAt(start))) {
                        break;
                    }

                    start++;
                }

                while (end >= start) {
                    if (!System.Char.isWhiteSpace(value[end]) && !System.Char.isNull(value.charCodeAt(end))) {
                        break;
                    }

                    end--;
                }

                value = value.substr(start, end - start + 1);

                if (System.String.equals(System.Boolean.trueString, value, 5)) {
                    result.v = true;

                    return true;
                }

                if (System.String.equals(System.Boolean.falseString, value, 5)) {
                    result.v = false;

                    return true;
                }

                return false;
            }
        }
    });

    System.Boolean.$kind = "";
    Bridge.Class.addExtend(System.Boolean, [System.IComparable$1(System.Boolean), System.IEquatable$1(System.Boolean)]);

    // @source Integer.js

    (function () {
        var createIntType = function (name, min, max, precision) {
            var type = Bridge.define(name, {
                inherits: [System.IComparable, System.IFormattable],

                statics: {
                    $number: true,
                    min: min,
                    max: max,
                    precision: precision,

                    $is: function (instance) {
                        return typeof (instance) === "number" && Math.floor(instance, 0) === instance && instance >= min && instance <= max;
                    },
                    getDefaultValue: function () {
                        return 0;
                    },
                    parse: function (s, radix) {
                        return Bridge.Int.parseInt(s, min, max, radix);
                    },
                    tryParse: function (s, result, radix) {
                        return Bridge.Int.tryParseInt(s, result, min, max, radix);
                    },
                    format: function (number, format, provider) {
                        return Bridge.Int.format(number, format, provider, type);
                    },
                    equals: function (v1, v2) {
                        if (Bridge.is(v1, type) && Bridge.is(v2, type)) {
                            return Bridge.unbox(v1, true) === Bridge.unbox(v2, true);
                        }

                        return false;
                    },
                    equalsT: function (v1, v2) {
                        return Bridge.unbox(v1, true) === Bridge.unbox(v2, true);
                    }
                }
            });

            type.$kind = "";
            Bridge.Class.addExtend(type, [System.IComparable$1(type), System.IEquatable$1(type)]);
        };

        createIntType("System.Byte", 0, 255, 3);
        createIntType("System.SByte", -128, 127, 3);
        createIntType("System.Int16", -32768, 32767, 5);
        createIntType("System.UInt16", 0, 65535, 5);
        createIntType("System.Int32", -2147483648, 2147483647, 10);
        createIntType("System.UInt32", 0, 4294967295, 10);
    })();

    Bridge.define("Bridge.Int", {
        inherits: [System.IComparable, System.IFormattable],
        statics: {
            $number: true,

            MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1,
            MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1),

            $is: function (instance) {
                return typeof (instance) === "number" && isFinite(instance) && Math.floor(instance, 0) === instance;
            },

            getDefaultValue: function () {
                return 0;
            },

            format: function (number, format, provider, T) {
                var nf = (provider || System.Globalization.CultureInfo.getCurrentCulture()).getFormat(System.Globalization.NumberFormatInfo),
                    decimalSeparator = nf.numberDecimalSeparator,
                    groupSeparator = nf.numberGroupSeparator,
                    isDecimal = number instanceof System.Decimal,
                    isLong = number instanceof System.Int64 || number instanceof System.UInt64,
                    isNeg = isDecimal || isLong ? (number.isZero() ? false : number.isNegative()) : number < 0,
                    match,
                    precision,
                    groups,
                    fs;

                if (!isLong && (isDecimal ? !number.isFinite() : !isFinite(number))) {
                    return Number.NEGATIVE_INFINITY === number || (isDecimal && isNeg) ? nf.negativeInfinitySymbol : (isNaN(number) ? nf.nanSymbol : nf.positiveInfinitySymbol);
                }

                if (!format) {
                    format = "G";
                }

                match = format.match(/^([a-zA-Z])(\d*)$/);

                if (match) {
                    fs = match[1].toUpperCase();
                    precision = parseInt(match[2], 10);
                    //precision = precision > 15 ? 15 : precision;

                    switch (fs) {
                        case "D":
                            return this.defaultFormat(number, isNaN(precision) ? 1 : precision, 0, 0, nf, true);
                        case "F":
                        case "N":
                            if (isNaN(precision)) {
                                precision = nf.numberDecimalDigits;
                            }

                            return this.defaultFormat(number, 1, precision, precision, nf, fs === "F");
                        case "G":
                        case "E":
                            var exponent = 0,
                                coefficient = isDecimal || isLong ? (isLong && number.eq(System.Int64.MinValue) ? System.Int64(number.value.toUnsigned()) : number.abs()) : Math.abs(number),
                                exponentPrefix = match[1],
                                exponentPrecision = 3,
                                minDecimals,
                                maxDecimals;

                            while (isDecimal || isLong ? coefficient.gte(10) : (coefficient >= 10)) {
                                if (isDecimal || isLong) {
                                    coefficient = coefficient.div(10);
                                } else {
                                    coefficient /= 10;
                                }

                                exponent++;
                            }

                            while (isDecimal || isLong ? (coefficient.ne(0) && coefficient.lt(1)) : (coefficient !== 0 && coefficient < 1)) {
                                if (isDecimal || isLong) {
                                    coefficient = coefficient.mul(10);
                                } else {
                                    coefficient *= 10;
                                }

                                exponent--;
                            }

                            if (fs === "G") {
                                var noPrecision = isNaN(precision);

                                if (noPrecision) {
                                    if (isDecimal) {
                                        precision = 29;
                                    } else if (isLong) {
                                        precision = number instanceof System.Int64 ? 19 : 20;
                                    } else if (T && T.precision) {
                                        precision = T.precision;
                                    } else {
                                        precision = 15;
                                    }
                                }

                                if ((exponent > -5 && exponent < precision) || isDecimal && noPrecision) {
                                    minDecimals = 0;
                                    maxDecimals = precision - (exponent > 0 ? exponent + 1 : 1);

                                    return this.defaultFormat(number, 1, minDecimals, maxDecimals, nf, true);
                                }

                                exponentPrefix = exponentPrefix === "G" ? "E" : "e";
                                exponentPrecision = 2;
                                minDecimals = 0;
                                maxDecimals = (precision || 15) - 1;
                            } else {
                                minDecimals = maxDecimals = isNaN(precision) ? 6 : precision;
                            }

                            if (exponent >= 0) {
                                exponentPrefix += nf.positiveSign;
                            } else {
                                exponentPrefix += nf.negativeSign;
                                exponent = -exponent;
                            }

                            if (isNeg) {
                                if (isDecimal || isLong) {
                                    coefficient = coefficient.mul(-1);
                                } else {
                                    coefficient *= -1;
                                }
                            }

                            return this.defaultFormat(coefficient, 1, minDecimals, maxDecimals, nf) + exponentPrefix + this.defaultFormat(exponent, exponentPrecision, 0, 0, nf, true);
                        case "P":
                            if (isNaN(precision)) {
                                precision = nf.percentDecimalDigits;
                            }

                            return this.defaultFormat(number * 100, 1, precision, precision, nf, false, "percent");
                        case "X":
                            var result = isDecimal ? number.round().value.toHex().substr(2) : (isLong ? number.toString(16) : Math.round(number).toString(16));

                            if (match[1] === "X") {
                                result = result.toUpperCase();
                            }

                            precision -= result.length;

                            while (precision-- > 0) {
                                result = "0" + result;
                            }

                            return result;
                        case "C":
                            if (isNaN(precision)) {
                                precision = nf.currencyDecimalDigits;
                            }

                            return this.defaultFormat(number, 1, precision, precision, nf, false, "currency");
                        case "R":
                            var r_result = isDecimal || isLong ? (number.toString()) : ("" + number);

                            if (decimalSeparator !== ".") {
                                r_result = r_result.replace(".", decimalSeparator);
                            }

                            r_result = r_result.replace("e", "E");

                            return r_result;
                    }
                }

                if (format.indexOf(",.") !== -1 || System.String.endsWith(format, ",")) {
                    var count = 0,
                        index = format.indexOf(",.");

                    if (index === -1) {
                        index = format.length - 1;
                    }

                    while (index > -1 && format.charAt(index) === ",") {
                        count++;
                        index--;
                    }

                    if (isDecimal || isLong) {
                        number = number.div(Math.pow(1000, count));
                    } else {
                        number /= Math.pow(1000, count);
                    }
                }

                if (format.indexOf("%") !== -1) {
                    if (isDecimal || isLong) {
                        number = number.mul(100);
                    } else {
                        number *= 100;
                    }
                }

                if (format.indexOf("‰") !== -1) {
                    if (isDecimal || isLong) {
                        number = number.mul(1000);
                    } else {
                        number *= 1000;
                    }
                }

                groups = format.split(";");

                if ((isDecimal || isLong ? number.lt(0) : (number < 0)) && groups.length > 1) {
                    if (isDecimal || isLong) {
                        number = number.mul(-1);
                    } else {
                        number *= -1;
                    }

                    format = groups[1];
                } else {
                    format = groups[(isDecimal || isLong ? number.ne(0) : !number) && groups.length > 2 ? 2 : 0];
                }

                return this.customFormat(number, format, nf, !format.match(/^[^\.]*[0#],[0#]/));
            },

            defaultFormat: function (number, minIntLen, minDecLen, maxDecLen, provider, noGroup, name) {
                name = name || "number";

                var nf = (provider || System.Globalization.CultureInfo.getCurrentCulture()).getFormat(System.Globalization.NumberFormatInfo),
                    str,
                    decimalIndex,
                    pattern,
                    roundingFactor,
                    groupIndex,
                    groupSize,
                    groups = nf[name + "GroupSizes"],
                    decimalPart,
                    index,
                    done,
                    startIndex,
                    length,
                    part,
                    sep,
                    buffer = "",
                    isDecimal = number instanceof System.Decimal,
                    isLong = number instanceof System.Int64 || number instanceof System.UInt64,
                    isNeg = isDecimal || isLong ? (number.isZero() ? false : number.isNegative()) : number < 0,
                    isZero = false;

                roundingFactor = Math.pow(10, maxDecLen);

                if (isDecimal) {
                    str = number.abs().toDecimalPlaces(maxDecLen).toFixed();
                } else if (isLong) {
                    str = number.eq(System.Int64.MinValue) ? number.value.toUnsigned().toString() : number.abs().toString();
                } else {
                    str = "" + (+Math.abs(number).toFixed(maxDecLen));
                }

                isZero = str.split("").every(function (s) { return s === "0" || s === "."; });

                decimalIndex = str.indexOf(".");

                if (decimalIndex > 0) {
                    decimalPart = nf[name + "DecimalSeparator"] + str.substr(decimalIndex + 1);
                    str = str.substr(0, decimalIndex);
                }

                if (str.length < minIntLen) {
                    str = Array(minIntLen - str.length + 1).join("0") + str;
                }

                if (decimalPart) {
                    if ((decimalPart.length - 1) < minDecLen) {
                        decimalPart += Array(minDecLen - decimalPart.length + 2).join("0");
                    }

                    if (maxDecLen === 0) {
                        decimalPart = null;
                    } else if ((decimalPart.length - 1) > maxDecLen) {
                        decimalPart = decimalPart.substr(0, maxDecLen + 1);
                    }
                } else if (minDecLen > 0) {
                    decimalPart = nf[name + "DecimalSeparator"] + Array(minDecLen + 1).join("0");
                }

                groupIndex = 0;
                groupSize = groups[groupIndex];

                if (str.length < groupSize) {
                    buffer = str;

                    if (decimalPart) {
                        buffer += decimalPart;
                    }
                } else {
                    index = str.length;
                    done = false;
                    sep = noGroup ? "" : nf[name + "GroupSeparator"];

                    while (!done) {
                        length = groupSize;
                        startIndex = index - length;

                        if (startIndex < 0) {
                            groupSize += startIndex;
                            length += startIndex;
                            startIndex = 0;
                            done = true;
                        }

                        if (!length) {
                            break;
                        }

                        part = str.substr(startIndex, length);

                        if (buffer.length) {
                            buffer = part + sep + buffer;
                        } else {
                            buffer = part;
                        }

                        index -= length;

                        if (groupIndex < groups.length - 1) {
                            groupIndex++;
                            groupSize = groups[groupIndex];
                        }
                    }

                    if (decimalPart) {
                        buffer += decimalPart;
                    }
                }

                if (isNeg && !isZero) {
                    pattern = System.Globalization.NumberFormatInfo[name + "NegativePatterns"][nf[name + "NegativePattern"]];

                    return pattern.replace("-", nf.negativeSign).replace("%", nf.percentSymbol).replace("$", nf.currencySymbol).replace("n", buffer);
                } else if (System.Globalization.NumberFormatInfo[name + "PositivePatterns"]) {
                    pattern = System.Globalization.NumberFormatInfo[name + "PositivePatterns"][nf[name + "PositivePattern"]];

                    return pattern.replace("%", nf.percentSymbol).replace("$", nf.currencySymbol).replace("n", buffer);
                }

                return buffer;
            },

            customFormat: function (number, format, nf, noGroup) {
                var digits = 0,
                    forcedDigits = -1,
                    integralDigits = -1,
                    decimals = 0,
                    forcedDecimals = -1,
                    atDecimals = 0,
                    unused = 1,
                    c, i, f,
                    endIndex,
                    roundingFactor,
                    decimalIndex,
                    isNegative = false,
                    isZero = false,
                    name,
                    groupCfg,
                    buffer = "",
                    isZeroInt = false,
                    wasSeparator = false,
                    wasIntPart = false,
                    isDecimal = number instanceof System.Decimal,
                    isLong = number instanceof System.Int64 || number instanceof System.UInt64,
                    isNeg = isDecimal || isLong ? (number.isZero() ? false : number.isNegative()) : number < 0;

                name = "number";

                if (format.indexOf("%") !== -1) {
                    name = "percent";
                } else if (format.indexOf("$") !== -1) {
                    name = "currency";
                }

                for (i = 0; i < format.length; i++) {
                    c = format.charAt(i);

                    if (c === "'" || c === '"') {
                        i = format.indexOf(c, i + 1);

                        if (i < 0) {
                            break;
                        }
                    } else if (c === "\\") {
                        i++;
                    } else {
                        if (c === "0" || c === "#") {
                            decimals += atDecimals;

                            if (c === "0") {
                                if (atDecimals) {
                                    forcedDecimals = decimals;
                                } else if (forcedDigits < 0) {
                                    forcedDigits = digits;
                                }
                            }

                            digits += !atDecimals;
                        }

                        atDecimals = atDecimals || c === ".";
                    }
                }
                forcedDigits = forcedDigits < 0 ? 1 : digits - forcedDigits;

                if (isNeg) {
                    isNegative = true;
                }

                roundingFactor = Math.pow(10, decimals);

                if (isDecimal) {
                    number = System.Decimal.round(number.abs().mul(roundingFactor), 4).div(roundingFactor).toString();
                } else if (isLong) {
                    number = (number.eq(System.Int64.MinValue) ? System.Int64(number.value.toUnsigned()) : number.abs()).mul(roundingFactor).div(roundingFactor).toString();
                } else {
                    number = "" + (Math.round(Math.abs(number) * roundingFactor) / roundingFactor);
                }

                isZero = number.split("").every(function (s) { return s === "0" || s === "."; });

                decimalIndex = number.indexOf(".");
                integralDigits = decimalIndex < 0 ? number.length : decimalIndex;
                i = integralDigits - digits;

                groupCfg = {
                    groupIndex: Math.max(integralDigits, forcedDigits),
                    sep: noGroup ? "" : nf[name + "GroupSeparator"]
                };

                if (integralDigits === 1 && number.charAt(0) === "0") {
                    isZeroInt = true;
                }

                for (f = 0; f < format.length; f++) {
                    c = format.charAt(f);

                    if (c === "'" || c === '"') {
                        endIndex = format.indexOf(c, f + 1);

                        buffer += format.substring(f + 1, endIndex < 0 ? format.length : endIndex);

                        if (endIndex < 0) {
                            break;
                        }

                        f = endIndex;
                    } else if (c === "\\") {
                        buffer += format.charAt(f + 1);
                        f++;
                    } else if (c === "#" || c === "0") {
                        wasIntPart = true;

                        if (!wasSeparator && isZeroInt && c === "#") {
                            i++;
                        } else {
                            groupCfg.buffer = buffer;

                            if (i < integralDigits) {
                                if (i >= 0) {
                                    if (unused) {
                                        this.addGroup(number.substr(0, i), groupCfg);
                                    }

                                    this.addGroup(number.charAt(i), groupCfg);
                                } else if (i >= integralDigits - forcedDigits) {
                                    this.addGroup("0", groupCfg);
                                }

                                unused = 0;
                            } else if (forcedDecimals-- > 0 || i < number.length) {
                                this.addGroup(i >= number.length ? "0" : number.charAt(i), groupCfg);
                            }

                            buffer = groupCfg.buffer;

                            i++;
                        }
                    } else if (c === ".") {
                        if (!wasIntPart && !isZeroInt) {
                            buffer += number.substr(0, integralDigits);
                            wasIntPart = true;
                        }

                        if (number.length > ++i || forcedDecimals > 0) {
                            wasSeparator = true;
                            buffer += nf[name + "DecimalSeparator"];
                        }
                    } else if (c !== ",") {
                        buffer += c;
                    }
                }

                if (isNegative && !isZero) {
                    buffer = "-" + buffer;
                }

                return buffer;
            },

            addGroup: function (value, cfg) {
                var buffer = cfg.buffer,
                    sep = cfg.sep,
                    groupIndex = cfg.groupIndex;

                for (var i = 0, length = value.length; i < length; i++) {
                    buffer += value.charAt(i);

                    if (sep && groupIndex > 1 && groupIndex-- % 3 === 1) {
                        buffer += sep;
                    }
                }

                cfg.buffer = buffer;
                cfg.groupIndex = groupIndex;
            },

            parseFloat: function (s, provider) {
                var res = { };

                Bridge.Int.tryParseFloat(s, provider, res, false);

                return res.v;
            },

            tryParseFloat: function (s, provider, result, safe) {
                result.v = 0;

                if (safe == null) {
                    safe = true;
                }

                if (s == null) {
                    if (safe) {
                        return false;
                    }

                    throw new System.ArgumentNullException.$ctor1("s");
                }

                s = s.trim();

                var nfInfo = (provider || System.Globalization.CultureInfo.getCurrentCulture()).getFormat(System.Globalization.NumberFormatInfo),
                    point = nfInfo.numberDecimalSeparator,
                    thousands = nfInfo.numberGroupSeparator;

                var errMsg = "Input string was not in a correct format.";

                var pointIndex = s.indexOf(point);
                var thousandIndex = thousands ? s.indexOf(thousands) : -1;

                if (pointIndex > -1) {
                    // point before thousands is not allowed
                    // "10.2,5" -> FormatException
                    // "1,0.2,5" -> FormatException
                    if (((pointIndex < thousandIndex) || ((thousandIndex > -1) && (pointIndex < s.indexOf(thousands, pointIndex))))
                        // only one point is allowed
                        || (s.indexOf(point, pointIndex + 1) > -1)) {
                        if (safe) {
                            return false;
                        }

                        throw new System.FormatException.$ctor1(errMsg);
                    }
                }

                if ((point !== ".") && (thousands !== ".") && (s.indexOf(".") > -1)) {
                    if (safe) {
                        return false;
                    }

                    throw new System.FormatException.$ctor1(errMsg);
                }

                if (thousandIndex > -1) {
                    // mutiple thousands are allowed, so we remove them before going further
                    var tmpStr = "";

                    for (var i = 0; i < s.length; i++) {
                        if (s[i] !== thousands) {
                            tmpStr += s[i];
                        }
                    }

                    s = tmpStr;
                }

                if (s === nfInfo.negativeInfinitySymbol) {
                    result.v = Number.NEGATIVE_INFINITY;

                    return true;
                } else if (s === nfInfo.positiveInfinitySymbol) {
                    result.v = Number.POSITIVE_INFINITY;

                    return true;
                } else if (s === nfInfo.nanSymbol) {
                    result.v = Number.NaN;

                    return true;
                }

                var countExp = 0;

                for (var i = 0; i < s.length; i++) {
                    if (!System.Char.isNumber(s[i].charCodeAt(0)) &&
                        s[i] !== "." &&
                        s[i] !== "," &&
                        s[i] !== nfInfo.positiveSign &&
                        s[i] !== nfInfo.negativeSign &&
                        s[i] !== point &&
                        s[i] !== thousands) {
                        if (s[i].toLowerCase() === "e") {
                            countExp++;

                            if (countExp > 1) {
                                if (safe) {
                                    return false;
                                }

                                throw new System.FormatException.$ctor1(errMsg);
                            }
                        } else {
                            if (safe) {
                                return false;
                            }

                            throw new System.FormatException.$ctor1(errMsg);
                        }
                    }
                }

                var r = parseFloat(s.replace(point, "."));

                if (isNaN(r)) {
                    if (safe) {
                        return false;
                    }

                    throw new System.FormatException.$ctor1(errMsg);
                }

                result.v = r;

                return true;
            },

            parseInt: function (str, min, max, radix) {
                radix = radix || 10;

                if (str == null) {
                    throw new System.ArgumentNullException.$ctor1("str");
                }

                if ((radix <= 10 && !/^[+-]?[0-9]+$/.test(str))
                    || (radix == 16 && !/^[+-]?[0-9A-F]+$/gi.test(str))) {
                    throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                }

                var result = parseInt(str, radix);

                if (isNaN(result)) {
                    throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                }

                if (result < min || result > max) {
                    throw new System.OverflowException();
                }

                return result;
            },

            tryParseInt: function (str, result, min, max, radix) {
                result.v = 0;
                radix = radix || 10;

                if ((radix <= 10 && !/^[+-]?[0-9]+$/.test(str))
                    || (radix == 16 && !/^[+-]?[0-9A-F]+$/gi.test(str))) {
                    return false;
                }

                result.v = parseInt(str, radix);

                if (result.v < min || result.v > max) {
                    result.v = 0;

                    return false;
                }

                return true;
            },

            isInfinite: function (x) {
                return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;
            },

            trunc: function (num) {
                if (!Bridge.isNumber(num)) {
                    return Bridge.Int.isInfinite(num) ? num : null;
                }

                return num > 0 ? Math.floor(num) : Math.ceil(num);
            },

            div: function (x, y) {
                if (x == null || y == null) {
                    return null;
                }

                if (y === 0) {
                    throw new System.DivideByZeroException();
                }

                return this.trunc(x / y);
            },

            mod: function (x, y) {
                if (x == null || y == null) {
                    return null;
                }

                if (y === 0) {
                    throw new System.DivideByZeroException();
                }

                return x % y;
            },

            check: function (x, type) {
                if (System.Int64.is64Bit(x)) {
                    return System.Int64.check(x, type);
                } else if (x instanceof System.Decimal) {
                    return System.Decimal.toInt(x, type);
                }

                if (Bridge.isNumber(x)) {
                    if (System.Int64.is64BitType(type)) {
                        if (type === System.UInt64 && x < 0) {
                            throw new System.OverflowException();
                        }

                        return type === System.Int64 ? System.Int64(x) : System.UInt64(x);
                    } else if (!type.$is(x)) {
                        throw new System.OverflowException();
                    }
                }

                if (Bridge.Int.isInfinite(x)) {
                    if (System.Int64.is64BitType(type)) {
                        return type.MinValue;
                    }

                    return type.min;
                }

                return x;
            },

            sxb: function (x) {
                return Bridge.isNumber(x) ? (x | (x & 0x80 ? 0xffffff00 : 0)) : (Bridge.Int.isInfinite(x) ? System.SByte.min : null);
            },

            sxs: function (x) {
                return Bridge.isNumber(x) ? (x | (x & 0x8000 ? 0xffff0000 : 0)) : (Bridge.Int.isInfinite(x) ? System.Int16.min : null);
            },

            clip8: function (x) {
                return Bridge.isNumber(x) ? Bridge.Int.sxb(x & 0xff) : (Bridge.Int.isInfinite(x) ? System.SByte.min : null);
            },

            clipu8: function (x) {
                return Bridge.isNumber(x) ? x & 0xff : (Bridge.Int.isInfinite(x) ? System.Byte.min : null);
            },

            clip16: function (x) {
                return Bridge.isNumber(x) ? Bridge.Int.sxs(x & 0xffff) : (Bridge.Int.isInfinite(x) ? System.Int16.min : null);
            },

            clipu16: function (x) {
                return Bridge.isNumber(x) ? x & 0xffff : (Bridge.Int.isInfinite(x) ? System.UInt16.min : null);
            },

            clip32: function (x) {
                return Bridge.isNumber(x) ? x | 0 : (Bridge.Int.isInfinite(x) ? System.Int32.min : null);
            },

            clipu32: function (x) {
                return Bridge.isNumber(x) ? x >>> 0 : (Bridge.Int.isInfinite(x) ? System.UInt32.min : null);
            },

            clip64: function (x) {
                return Bridge.isNumber(x) ? System.Int64(Bridge.Int.trunc(x)) : (Bridge.Int.isInfinite(x) ? System.Int64.MinValue : null);
            },

            clipu64: function (x) {
                return Bridge.isNumber(x) ? System.UInt64(Bridge.Int.trunc(x)) : (Bridge.Int.isInfinite(x) ? System.UInt64.MinValue : null);
            },

            sign: function (x) {
                return Bridge.isNumber(x) ? (x === 0 ? 0 : (x < 0 ? -1 : 1)) : null;
            },

            $mul: Math.imul || function (a, b) {
                var ah = (a >>> 16) & 0xffff,
                    al = a & 0xffff,
                    bh = (b >>> 16) & 0xffff,
                    bl = b & 0xffff;

                return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
            },

            mul: function (a, b, overflow) {
                if (a == null || b == null) {
                    return null;
                }

                if (overflow) {
                    Bridge.Int.check(a * b, System.Int32)
                }

                return Bridge.Int.$mul(a, b);
            },

            umul: function (a, b, overflow) {
                if (a == null || b == null) {
                    return null;
                }

                if (overflow) {
                    Bridge.Int.check(a * b, System.UInt32)
                }

                return Bridge.Int.$mul(a, b) >>> 0;
            }
        }
    });

    Bridge.Int.$kind = "";
    Bridge.Class.addExtend(Bridge.Int, [System.IComparable$1(Bridge.Int), System.IEquatable$1(Bridge.Int)]);

    // @source Double.js

    Bridge.define("System.Double", {
        inherits: [System.IComparable, System.IFormattable],
        statics: {
            min: -Number.MAX_VALUE,

            max: Number.MAX_VALUE,

            precision: 15,

            $number: true,

            $is: function (instance) {
                return typeof (instance) === "number";
            },

            getDefaultValue: function () {
                return 0;
            },

            parse: function (s, provider) {
                return Bridge.Int.parseFloat(s, provider);
            },

            tryParse: function (s, provider, result) {
                return Bridge.Int.tryParseFloat(s, provider, result);
            },

            format: function (number, format, provider) {
                return Bridge.Int.format(number, format || 'G', provider, System.Double);
            },

            equals: function (v1, v2) {
                if (Bridge.is(v1, System.Double) && Bridge.is(v2, System.Double)) {
                    v1 = Bridge.unbox(v1, true);
                    v2 = Bridge.unbox(v2, true);

                    if (isNaN(v1) && isNaN(v2)) {
                        return true;
                    }

                    return v1 === v2;
                }

                return false;
            },

            equalsT: function (v1, v2) {
                return Bridge.unbox(v1, true) === Bridge.unbox(v2, true);
            },

            getHashCode: function (v) {
                var value = Bridge.unbox(v, true);

                if (value === 0) {
                    return 0;
                }

                if (value === Number.POSITIVE_INFINITY) {
                    return 0x7FF00000;
                }

                if (value === Number.NEGATIVE_INFINITY) {
                    return 0xFFF00000;
                }

                return Bridge.getHashCode(value.toExponential());
            }
        }
    });

    System.Double.$kind = "";
    Bridge.Class.addExtend(System.Double, [System.IComparable$1(System.Double), System.IEquatable$1(System.Double)]);

    Bridge.define("System.Single", {
        inherits: [System.IComparable, System.IFormattable],
        statics: {
            min: -3.40282346638528859e+38,

            max: 3.40282346638528859e+38,

            precision: 7,

            $number: true,

            $is: System.Double.$is,

            getDefaultValue: System.Double.getDefaultValue,

            parse: System.Double.parse,

            tryParse: System.Double.tryParse,

            format: function (number, format, provider) {
                return Bridge.Int.format(number, format || 'G', provider, System.Single);
            },

            equals: function (v1, v2) {
                if (Bridge.is(v1, System.Single) && Bridge.is(v2, System.Single)) {
                    v1 = Bridge.unbox(v1, true);
                    v2 = Bridge.unbox(v2, true);

                    if (isNaN(v1) && isNaN(v2)) {
                        return true;
                    }

                    return v1 === v2;
                }

                return false;
            },

            equalsT: function (v1, v2) {
                return Bridge.unbox(v1, true) === Bridge.unbox(v2, true);
            },

            getHashCode: System.Double.getHashCode
        }
    });

    System.Single.$kind = "";
    Bridge.Class.addExtend(System.Single, [System.IComparable$1(System.Single), System.IEquatable$1(System.Single)]);

    // @source Long.js

    /* long.js https://github.com/dcodeIO/long.js/blob/master/LICENSE */
    (function (b) {
        function d(a, b, c) { this.low = a | 0; this.high = b | 0; this.unsigned = !!c } function g(a) { return !0 === (a && a.__isLong__) } function m(a, b) { var c, u; if (b) { a >>>= 0; if (u = 0 <= a && 256 > a) if (c = A[a]) return c; c = e(a, 0 > (a | 0) ? -1 : 0, !0); u && (A[a] = c) } else { a |= 0; if (u = -128 <= a && 128 > a) if (c = B[a]) return c; c = e(a, 0 > a ? -1 : 0, !1); u && (B[a] = c) } return c } function n(a, b) {
            if (isNaN(a) || !isFinite(a)) return b ? p : k; if (b) { if (0 > a) return p; if (a >= C) return D } else { if (a <= -E) return l; if (a + 1 >= E) return F } return 0 > a ? n(-a, b).neg() : e(a % 4294967296 | 0, a / 4294967296 |
            0, b)
        } function e(a, b, c) { return new d(a, b, c) } function y(a, b, c) {
            if (0 === a.length) throw Error("empty string"); if ("NaN" === a || "Infinity" === a || "+Infinity" === a || "-Infinity" === a) return k; "number" === typeof b ? (c = b, b = !1) : b = !!b; c = c || 10; if (2 > c || 36 < c) throw RangeError("radix"); var u; if (0 < (u = a.indexOf("-"))) throw Error("interior hyphen"); if (0 === u) return y(a.substring(1), b, c).neg(); u = n(w(c, 8)); for (var e = k, f = 0; f < a.length; f += 8) {
                var d = Math.min(8, a.length - f), g = parseInt(a.substring(f, f + d), c); 8 > d ? (d = n(w(c, d)), e = e.mul(d).add(n(g))) :
                (e = e.mul(u), e = e.add(n(g)))
            } e.unsigned = b; return e
        } function q(a) { return a instanceof d ? a : "number" === typeof a ? n(a) : "string" === typeof a ? y(a) : e(a.low, a.high, a.unsigned) } b.Bridge.$Long = d; d.__isLong__; Object.defineProperty(d.prototype, "__isLong__", { value: !0, enumerable: !1, configurable: !1 }); d.isLong = g; var B = {}, A = {}; d.fromInt = m; d.fromNumber = n; d.fromBits = e; var w = Math.pow; d.fromString = y; d.fromValue = q; var C = 4294967296 * 4294967296, E = C / 2, G = m(16777216), k = m(0); d.ZERO = k; var p = m(0, !0); d.UZERO = p; var r = m(1); d.ONE = r; var H =
        m(1, !0); d.UONE = H; var z = m(-1); d.NEG_ONE = z; var F = e(-1, 2147483647, !1); d.MAX_VALUE = F; var D = e(-1, -1, !0); d.MAX_UNSIGNED_VALUE = D; var l = e(0, -2147483648, !1); d.MIN_VALUE = l; b = d.prototype; b.toInt = function () { return this.unsigned ? this.low >>> 0 : this.low }; b.toNumber = function () { return this.unsigned ? 4294967296 * (this.high >>> 0) + (this.low >>> 0) : 4294967296 * this.high + (this.low >>> 0) }; b.toString = function (a) {
            a = a || 10; if (2 > a || 36 < a) throw RangeError("radix"); if (this.isZero()) return "0"; if (this.isNegative()) {
                if (this.eq(l)) {
                    var b =
                    n(a), c = this.div(b), b = c.mul(b).sub(this); return c.toString(a) + b.toInt().toString(a)
                } return ("undefined" === typeof a || 10 === a ? "-" : "") + this.neg().toString(a)
            } for (var c = n(w(a, 6), this.unsigned), b = this, e = ""; ;) { var d = b.div(c), f = (b.sub(d.mul(c)).toInt() >>> 0).toString(a), b = d; if (b.isZero()) return f + e; for (; 6 > f.length;) f = "0" + f; e = "" + f + e }
        }; b.getHighBits = function () { return this.high }; b.getHighBitsUnsigned = function () { return this.high >>> 0 }; b.getLowBits = function () { return this.low }; b.getLowBitsUnsigned = function () {
            return this.low >>>
            0
        }; b.getNumBitsAbs = function () { if (this.isNegative()) return this.eq(l) ? 64 : this.neg().getNumBitsAbs(); for (var a = 0 != this.high ? this.high : this.low, b = 31; 0 < b && 0 == (a & 1 << b) ; b--); return 0 != this.high ? b + 33 : b + 1 }; b.isZero = function () { return 0 === this.high && 0 === this.low }; b.isNegative = function () { return !this.unsigned && 0 > this.high }; b.isPositive = function () { return this.unsigned || 0 <= this.high }; b.isOdd = function () { return 1 === (this.low & 1) }; b.isEven = function () { return 0 === (this.low & 1) }; b.equals = function (a) {
            g(a) || (a = q(a)); return this.unsigned !==
            a.unsigned && 1 === this.high >>> 31 && 1 === a.high >>> 31 ? !1 : this.high === a.high && this.low === a.low
        }; b.eq = b.equals; b.notEquals = function (a) { return !this.eq(a) }; b.neq = b.notEquals; b.lessThan = function (a) { return 0 > this.comp(a) }; b.lt = b.lessThan; b.lessThanOrEqual = function (a) { return 0 >= this.comp(a) }; b.lte = b.lessThanOrEqual; b.greaterThan = function (a) { return 0 < this.comp(a) }; b.gt = b.greaterThan; b.greaterThanOrEqual = function (a) { return 0 <= this.comp(a) }; b.gte = b.greaterThanOrEqual; b.compare = function (a) {
            g(a) || (a = q(a)); if (this.eq(a)) return 0;
            var b = this.isNegative(), c = a.isNegative(); return b && !c ? -1 : !b && c ? 1 : this.unsigned ? a.high >>> 0 > this.high >>> 0 || a.high === this.high && a.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(a).isNegative() ? -1 : 1
        }; b.comp = b.compare; b.negate = function () { return !this.unsigned && this.eq(l) ? l : this.not().add(r) }; b.neg = b.negate; b.add = function (a) {
            g(a) || (a = q(a)); var b = this.high >>> 16, c = this.high & 65535, d = this.low >>> 16, l = a.high >>> 16, f = a.high & 65535, n = a.low >>> 16, k; k = 0 + ((this.low & 65535) + (a.low & 65535)); a = 0 + (k >>> 16); a += d + n; d = 0 + (a >>> 16); d += c + f; c =
            0 + (d >>> 16); c = c + (b + l) & 65535; return e((a & 65535) << 16 | k & 65535, c << 16 | d & 65535, this.unsigned)
        }; b.subtract = function (a) { g(a) || (a = q(a)); return this.add(a.neg()) }; b.sub = b.subtract; b.multiply = function (a) {
            if (this.isZero()) return k; g(a) || (a = q(a)); if (a.isZero()) return k; if (this.eq(l)) return a.isOdd() ? l : k; if (a.eq(l)) return this.isOdd() ? l : k; if (this.isNegative()) return a.isNegative() ? this.neg().mul(a.neg()) : this.neg().mul(a).neg(); if (a.isNegative()) return this.mul(a.neg()).neg(); if (this.lt(G) && a.lt(G)) return n(this.toNumber() *
            a.toNumber(), this.unsigned); var b = this.high >>> 16, c = this.high & 65535, d = this.low >>> 16, x = this.low & 65535, f = a.high >>> 16, m = a.high & 65535, p = a.low >>> 16; a = a.low & 65535; var v, h, t, r; r = 0 + x * a; t = 0 + (r >>> 16); t += d * a; h = 0 + (t >>> 16); t = (t & 65535) + x * p; h += t >>> 16; t &= 65535; h += c * a; v = 0 + (h >>> 16); h = (h & 65535) + d * p; v += h >>> 16; h &= 65535; h += x * m; v += h >>> 16; h &= 65535; v = v + (b * a + c * p + d * m + x * f) & 65535; return e(t << 16 | r & 65535, v << 16 | h, this.unsigned)
        }; b.mul = b.multiply; b.divide = function (a) {
            g(a) || (a = q(a)); if (a.isZero()) throw Error("division by zero"); if (this.isZero()) return this.unsigned ?
                    p : k; var b, c, d; if (this.unsigned) a.unsigned || (a = a.toUnsigned()); else { if (this.eq(l)) { if (a.eq(r) || a.eq(z)) return l; if (a.eq(l)) return r; b = this.shr(1).div(a).shl(1); if (b.eq(k)) return a.isNegative() ? r : z; c = this.sub(a.mul(b)); return d = b.add(c.div(a)) } if (a.eq(l)) return this.unsigned ? p : k; if (this.isNegative()) return a.isNegative() ? this.neg().div(a.neg()) : this.neg().div(a).neg(); if (a.isNegative()) return this.div(a.neg()).neg() } if (this.unsigned) { if (a.gt(this)) return p; if (a.gt(this.shru(1))) return H; d = p } else d =
                    k; for (c = this; c.gte(a) ;) { b = Math.max(1, Math.floor(c.toNumber() / a.toNumber())); for (var e = Math.ceil(Math.log(b) / Math.LN2), e = 48 >= e ? 1 : w(2, e - 48), f = n(b), m = f.mul(a) ; m.isNegative() || m.gt(c) ;) b -= e, f = n(b, this.unsigned), m = f.mul(a); f.isZero() && (f = r); d = d.add(f); c = c.sub(m) } return d
        }; b.div = b.divide; b.modulo = function (a) { g(a) || (a = q(a)); return this.sub(this.div(a).mul(a)) }; b.mod = b.modulo; b.not = function () { return e(~this.low, ~this.high, this.unsigned) }; b.and = function (a) {
            g(a) || (a = q(a)); return e(this.low & a.low, this.high &
            a.high, this.unsigned)
        }; b.or = function (a) { g(a) || (a = q(a)); return e(this.low | a.low, this.high | a.high, this.unsigned) }; b.xor = function (a) { g(a) || (a = q(a)); return e(this.low ^ a.low, this.high ^ a.high, this.unsigned) }; b.shiftLeft = function (a) { g(a) && (a = a.toInt()); return 0 === (a &= 63) ? this : 32 > a ? e(this.low << a, this.high << a | this.low >>> 32 - a, this.unsigned) : e(0, this.low << a - 32, this.unsigned) }; b.shl = b.shiftLeft; b.shiftRight = function (a) {
            g(a) && (a = a.toInt()); return 0 === (a &= 63) ? this : 32 > a ? e(this.low >>> a | this.high << 32 - a, this.high >>
            a, this.unsigned) : e(this.high >> a - 32, 0 <= this.high ? 0 : -1, this.unsigned)
        }; b.shr = b.shiftRight; b.shiftRightUnsigned = function (a) { g(a) && (a = a.toInt()); a &= 63; if (0 === a) return this; var b = this.high; return 32 > a ? e(this.low >>> a | b << 32 - a, b >>> a, this.unsigned) : 32 === a ? e(b, 0, this.unsigned) : e(b >>> a - 32, 0, this.unsigned) }; b.shru = b.shiftRightUnsigned; b.toSigned = function () { return this.unsigned ? e(this.low, this.high, !1) : this }; b.toUnsigned = function () { return this.unsigned ? this : e(this.low, this.high, !0) }
    })(Bridge.global);

    System.Int64 = function (l) {
        if (this.constructor !== System.Int64) {
            return new System.Int64(l);
        }

        if (!Bridge.hasValue(l)) {
            l = 0;
        }

        this.T = System.Int64;
        this.unsigned = false;
        this.value = System.Int64.getValue(l);
    }

    System.Int64.$number = true;
    System.Int64.TWO_PWR_16_DBL = 1 << 16;
    System.Int64.TWO_PWR_32_DBL = System.Int64.TWO_PWR_16_DBL * System.Int64.TWO_PWR_16_DBL;
    System.Int64.TWO_PWR_64_DBL = System.Int64.TWO_PWR_32_DBL * System.Int64.TWO_PWR_32_DBL;
    System.Int64.TWO_PWR_63_DBL = System.Int64.TWO_PWR_64_DBL / 2;

    System.Int64.$$name = "System.Int64";
    System.Int64.prototype.$$name = "System.Int64";
    System.Int64.$kind = "struct";
    System.Int64.prototype.$kind = "struct";

    System.Int64.$$inherits = [];
    Bridge.Class.addExtend(System.Int64, [System.IComparable, System.IFormattable, System.IComparable$1(System.Int64), System.IEquatable$1(System.Int64)]);

    System.Int64.$is = function (instance) {
        return instance instanceof System.Int64;
    };

    System.Int64.is64Bit = function (instance) {
        return instance instanceof System.Int64 || instance instanceof System.UInt64;
    };

    System.Int64.is64BitType = function (type) {
        return type === System.Int64 || type === System.UInt64;
    };

    System.Int64.getDefaultValue = function () {
        return System.Int64.Zero;
    };

    System.Int64.getValue = function (l) {
        if (!Bridge.hasValue(l)) {
            return null;
        }

        if (l instanceof Bridge.$Long) {
            return l;
        }

        if (l instanceof System.Int64) {
            return l.value;
        }

        if (l instanceof System.UInt64) {
            return l.value.toSigned();
        }

        if (Bridge.isArray(l)) {
            return new Bridge.$Long(l[0], l[1]);
        }

        if (Bridge.isString(l)) {
            return Bridge.$Long.fromString(l);
        }

        if (Bridge.isNumber(l)) {
            if (l + 1 >= System.Int64.TWO_PWR_63_DBL) {
                return (new System.UInt64(l)).value.toSigned();
            }
            return Bridge.$Long.fromNumber(l);
        }

        if (l instanceof System.Decimal) {
            return Bridge.$Long.fromString(l.toString());
        }

        return Bridge.$Long.fromValue(l);
    };

    System.Int64.create = function (l) {
        if (!Bridge.hasValue(l)) {
            return null;
        }

        if (l instanceof System.Int64) {
            return l;
        }

        return new System.Int64(l);
    };

    System.Int64.lift = function (l) {
        if (!Bridge.hasValue(l)) {
            return null;
        }
        return System.Int64.create(l);
    };

    System.Int64.toNumber = function (value) {
        if (!value) {
            return null;
        }

        return value.toNumber();
    };

    System.Int64.prototype.toNumberDivided = function (divisor) {
        var integral = this.div(divisor),
            remainder = this.mod(divisor),
            scaledRemainder = remainder.toNumber() / divisor;

        return integral.toNumber() + scaledRemainder;
    };

    System.Int64.prototype.toJSON = function () {
        return this.gt(Bridge.Int.MAX_SAFE_INTEGER) || this.lt(Bridge.Int.MIN_SAFE_INTEGER) ? this.toString() : this.toNumber();
    };

    System.Int64.prototype.toString = function (format, provider) {
        if (!format && !provider) {
            return this.value.toString();
        }

        if (Bridge.isNumber(format) && !provider) {
            return this.value.toString(format);
        }

        return Bridge.Int.format(this, format, provider);
    };

    System.Int64.prototype.format = function (format, provider) {
        return Bridge.Int.format(this, format, provider);
    };

    System.Int64.prototype.isNegative = function () {
        return this.value.isNegative();
    };

    System.Int64.prototype.abs = function () {
        if (this.T === System.Int64 && this.eq(System.Int64.MinValue)) {
            throw new System.OverflowException();
        }
        return new this.T(this.value.isNegative() ? this.value.neg() : this.value);
    };

    System.Int64.prototype.compareTo = function (l) {
        return this.value.compare(this.T.getValue(l));
    };

    System.Int64.prototype.add = function (l, overflow) {
        var addl = this.T.getValue(l),
            r = new this.T(this.value.add(addl));

        if (overflow) {
            var neg1 = this.value.isNegative(),
                neg2 = addl.isNegative(),
                rneg = r.value.isNegative();

            if ((neg1 && neg2 && !rneg) ||
                (!neg1 && !neg2 && rneg) ||
                (this.T === System.UInt64 && r.lt(System.UInt64.max(this, addl)))) {
                throw new System.OverflowException();
            }
        }

        return r;
    };

    System.Int64.prototype.sub = function (l, overflow) {
        var subl = this.T.getValue(l),
            r = new this.T(this.value.sub(subl));

        if (overflow) {
            var neg1 = this.value.isNegative(),
                neg2 = subl.isNegative(),
                rneg = r.value.isNegative();

            if ((neg1 && !neg2 && !rneg) ||
                (!neg1 && neg2 && rneg) ||
                (this.T === System.UInt64 && this.value.lt(subl))) {
                throw new System.OverflowException();
            }
        }

        return r;
    };

    System.Int64.prototype.isZero = function () {
        return this.value.isZero();
    };

    System.Int64.prototype.mul = function (l, overflow) {
        var arg = this.T.getValue(l),
            r = new this.T(this.value.mul(arg));

        if (overflow) {
            var s1 = this.sign(),
                s2 = arg.isZero() ? 0 : (arg.isNegative() ? -1 : 1),
                rs = r.sign();

            if (this.T === System.Int64) {
                if (this.eq(System.Int64.MinValue) || this.eq(System.Int64.MaxValue)) {
                    if (arg.neq(1) && arg.neq(0)) {
                        throw new System.OverflowException();
                    }

                    return r;
                }

                if (arg.eq(Bridge.$Long.MIN_VALUE) || arg.eq(Bridge.$Long.MAX_VALUE)) {
                    if (this.neq(1) && this.neq(0)) {
                        throw new System.OverflowException();
                    }

                    return r;
                }

                if ((s1 === -1 && s2 === -1 && rs !== 1) ||
                    (s1 === 1 && s2 === 1 && rs !== 1) ||
                    (s1 === -1 && s2 === 1 && rs !== -1) ||
                    (s1 === 1 && s2 === -1 && rs !== -1)) {
                    throw new System.OverflowException();
                }

                var r_abs = r.abs();

                if (r_abs.lt(this.abs()) || r_abs.lt(System.Int64(arg).abs())) {
                    throw new System.OverflowException();
                }
            } else {
                if (this.eq(System.UInt64.MaxValue)) {
                    if (arg.neq(1) && arg.neq(0)) {
                        throw new System.OverflowException();
                    }

                    return r;
                }

                if (arg.eq(Bridge.$Long.MAX_UNSIGNED_VALUE)) {
                    if (this.neq(1) && this.neq(0)) {
                        throw new System.OverflowException();
                    }

                    return r;
                }

                var r_abs = r.abs();

                if (r_abs.lt(this.abs()) || r_abs.lt(System.Int64(arg).abs())) {
                    throw new System.OverflowException();
                }
            }
        }

        return r;
    };

    System.Int64.prototype.div = function (l) {
        return new this.T(this.value.div(this.T.getValue(l)));
    };

    System.Int64.prototype.mod = function (l) {
        return new this.T(this.value.mod(this.T.getValue(l)));
    };

    System.Int64.prototype.neg = function (overflow) {
        if (overflow && this.T === System.Int64 && this.eq(System.Int64.MinValue)) {
            throw new System.OverflowException();
        }
        return new this.T(this.value.neg());
    };

    System.Int64.prototype.inc = function (overflow) {
        return this.add(1, overflow);
    };

    System.Int64.prototype.dec = function (overflow) {
        return this.sub(1, overflow);
    };

    System.Int64.prototype.sign = function () {
        return this.value.isZero() ? 0 : (this.value.isNegative() ? -1 : 1);
    };

    System.Int64.prototype.clone = function () {
        return new this.T(this);
    };

    System.Int64.prototype.ne = function (l) {
        return this.value.neq(this.T.getValue(l));
    };

    System.Int64.prototype.neq = function (l) {
        return this.value.neq(this.T.getValue(l));
    };

    System.Int64.prototype.eq = function (l) {
        return this.value.eq(this.T.getValue(l));
    };

    System.Int64.prototype.lt = function (l) {
        return this.value.lt(this.T.getValue(l));
    };

    System.Int64.prototype.lte = function (l) {
        return this.value.lte(this.T.getValue(l));
    };

    System.Int64.prototype.gt = function (l) {
        return this.value.gt(this.T.getValue(l));
    };

    System.Int64.prototype.gte = function (l) {
        return this.value.gte(this.T.getValue(l));
    };

    System.Int64.prototype.equals = function (l) {
        return this.value.eq(this.T.getValue(l));
    };

    System.Int64.prototype.equalsT = function (l) {
        return this.equals(l);
    };

    System.Int64.prototype.getHashCode = function () {
        var n = (this.sign() * 397 + this.value.high) | 0;
        n = (n * 397 + this.value.low) | 0;

        return n;
    };

    System.Int64.prototype.toNumber = function () {
        return this.value.toNumber();
    };

    System.Int64.parse = function (str) {
        if (str == null) {
            throw new System.ArgumentNullException.$ctor1("str");
        }

        if (!/^[+-]?[0-9]+$/.test(str)) {
            throw new System.FormatException.$ctor1("Input string was not in a correct format.");
        }

        var result = new System.Int64(str);

        if (System.String.trimStartZeros(str) !== result.toString()) {
            throw new System.OverflowException();
        }

        return result;
    };

    System.Int64.tryParse = function (str, v) {
        try {
            if (str == null || !/^[+-]?[0-9]+$/.test(str)) {
                v.v = System.Int64(Bridge.$Long.ZERO);
                return false;
            }

            v.v = new System.Int64(str);

            if (System.String.trimStartZeros(str) !== v.v.toString()) {
                v.v = System.Int64(Bridge.$Long.ZERO);
                return false;
            }

            return true;
        } catch (e) {
            v.v = System.Int64(Bridge.$Long.ZERO);
            return false;
        }
    };

    System.Int64.divRem = function (a, b, result) {
        a = System.Int64(a);
        b = System.Int64(b);
        var remainder = a.mod(b);
        result.v = remainder;
        return a.sub(remainder).div(b);
    };

    System.Int64.min = function () {
        var values = [],
            min, i, len;

        for (i = 0, len = arguments.length; i < len; i++) {
            values.push(System.Int64.getValue(arguments[i]));
        }

        i = 0;
        min = values[0];
        for (; ++i < values.length;) {
            if (values[i].lt(min)) {
                min = values[i];
            }
        }

        return new System.Int64(min);
    };

    System.Int64.max = function () {
        var values = [],
            max, i, len;

        for (i = 0, len = arguments.length; i < len; i++) {
            values.push(System.Int64.getValue(arguments[i]));
        }

        i = 0;
        max = values[0];
        for (; ++i < values.length;) {
            if (values[i].gt(max)) {
                max = values[i];
            }
        }

        return new System.Int64(max);
    };

    System.Int64.prototype.and = function (l) {
        return new this.T(this.value.and(this.T.getValue(l)));
    };

    System.Int64.prototype.not = function () {
        return new this.T(this.value.not());
    };

    System.Int64.prototype.or = function (l) {
        return new this.T(this.value.or(this.T.getValue(l)));
    };

    System.Int64.prototype.shl = function (l) {
        return new this.T(this.value.shl(l));
    };

    System.Int64.prototype.shr = function (l) {
        return new this.T(this.value.shr(l));
    };

    System.Int64.prototype.shru = function (l) {
        return new this.T(this.value.shru(l));
    };

    System.Int64.prototype.xor = function (l) {
        return new this.T(this.value.xor(this.T.getValue(l)));
    };

    System.Int64.check = function (v, tp) {
        if (Bridge.Int.isInfinite(v)) {
            if (tp === System.Int64 || tp === System.UInt64) {
                return tp.MinValue;
            }
            return tp.min;
        }

        if (!v) {
            return null;
        }

        var str, r;
        if (tp === System.Int64) {
            if (v instanceof System.Int64) {
                return v;
            }

            str = v.value.toString();
            r = new System.Int64(str);

            if (str !== r.value.toString()) {
                throw new System.OverflowException();
            }

            return r;
        }

        if (tp === System.UInt64) {
            if (v instanceof System.UInt64) {
                return v;
            }

            if (v.value.isNegative()) {
                throw new System.OverflowException();
            }
            str = v.value.toString();
            r = new System.UInt64(str);

            if (str !== r.value.toString()) {
                throw new System.OverflowException();
            }

            return r;
        }

        return Bridge.Int.check(v.toNumber(), tp);
    };

    System.Int64.clip8 = function (x) {
        return x ? Bridge.Int.sxb(x.value.low & 0xff) : (Bridge.Int.isInfinite(x) ? System.SByte.min : null);
    };

    System.Int64.clipu8 = function (x) {
        return x ? x.value.low & 0xff : (Bridge.Int.isInfinite(x) ? System.Byte.min : null);
    };

    System.Int64.clip16 = function (x) {
        return x ? Bridge.Int.sxs(x.value.low & 0xffff) : (Bridge.Int.isInfinite(x) ? System.Int16.min : null);
    };

    System.Int64.clipu16 = function (x) {
        return x ? x.value.low & 0xffff : (Bridge.Int.isInfinite(x) ? System.UInt16.min : null);
    };

    System.Int64.clip32 = function (x) {
        return x ? x.value.low | 0 : (Bridge.Int.isInfinite(x) ? System.Int32.min : null);
    };

    System.Int64.clipu32 = function (x) {
        return x ? x.value.low >>> 0 : (Bridge.Int.isInfinite(x) ? System.UInt32.min : null);
    };

    System.Int64.clip64 = function (x) {
        return x ? new System.Int64(x.value.toSigned()) : (Bridge.Int.isInfinite(x) ? System.Int64.MinValue : null);
    };

    System.Int64.clipu64 = function (x) {
        return x ? new System.UInt64(x.value.toUnsigned()) : (Bridge.Int.isInfinite(x) ? System.UInt64.MinValue : null);
    };

    System.Int64.Zero = System.Int64(Bridge.$Long.ZERO);
    System.Int64.MinValue = System.Int64(Bridge.$Long.MIN_VALUE);
    System.Int64.MaxValue = System.Int64(Bridge.$Long.MAX_VALUE);
    System.Int64.precision = 19;

    /* ULONG */

    System.UInt64 = function (l) {
        if (this.constructor !== System.UInt64) {
            return new System.UInt64(l);
        }

        if (!Bridge.hasValue(l)) {
            l = 0;
        }

        this.T = System.UInt64;
        this.unsigned = true;
        this.value = System.UInt64.getValue(l, true);
    }

    System.UInt64.$number = true;
    System.UInt64.$$name = "System.UInt64";
    System.UInt64.prototype.$$name = "System.UInt64";
    System.UInt64.$kind = "struct";
    System.UInt64.prototype.$kind = "struct";
    System.UInt64.$$inherits = [];
    Bridge.Class.addExtend(System.UInt64, [System.IComparable, System.IFormattable, System.IComparable$1(System.UInt64), System.IEquatable$1(System.UInt64)]);

    System.UInt64.$is = function (instance) {
        return instance instanceof System.UInt64;
    };

    System.UInt64.getDefaultValue = function () {
        return System.UInt64.Zero;
    };

    System.UInt64.getValue = function (l) {
        if (!Bridge.hasValue(l)) {
            return null;
        }

        if (l instanceof Bridge.$Long) {
            return l;
        }

        if (l instanceof System.UInt64) {
            return l.value;
        }

        if (l instanceof System.Int64) {
            return l.value.toUnsigned();
        }

        if (Bridge.isArray(l)) {
            return new Bridge.$Long(l[0], l[1], true);
        }

        if (Bridge.isString(l)) {
            return Bridge.$Long.fromString(l, true);
        }

        if (Bridge.isNumber(l)) {
            if (l < 0) {
                return (new System.Int64(l)).value.toUnsigned();
            }

            return Bridge.$Long.fromNumber(l, true);
        }

        if (l instanceof System.Decimal) {
            return Bridge.$Long.fromString(l.toString(), true);
        }

        return Bridge.$Long.fromValue(l);
    };

    System.UInt64.create = function (l) {
        if (!Bridge.hasValue(l)) {
            return null;
        }

        if (l instanceof System.UInt64) {
            return l;
        }

        return new System.UInt64(l);
    };

    System.UInt64.lift = function (l) {
        if (!Bridge.hasValue(l)) {
            return null;
        }
        return System.UInt64.create(l);
    };

    System.UInt64.prototype.toString = System.Int64.prototype.toString;
    System.UInt64.prototype.format = System.Int64.prototype.format;
    System.UInt64.prototype.isNegative = System.Int64.prototype.isNegative;
    System.UInt64.prototype.abs = System.Int64.prototype.abs;
    System.UInt64.prototype.compareTo = System.Int64.prototype.compareTo;
    System.UInt64.prototype.add = System.Int64.prototype.add;
    System.UInt64.prototype.sub = System.Int64.prototype.sub;
    System.UInt64.prototype.isZero = System.Int64.prototype.isZero;
    System.UInt64.prototype.mul = System.Int64.prototype.mul;
    System.UInt64.prototype.div = System.Int64.prototype.div;
    System.UInt64.prototype.toNumberDivided = System.Int64.prototype.toNumberDivided;
    System.UInt64.prototype.mod = System.Int64.prototype.mod;
    System.UInt64.prototype.neg = System.Int64.prototype.neg;
    System.UInt64.prototype.inc = System.Int64.prototype.inc;
    System.UInt64.prototype.dec = System.Int64.prototype.dec;
    System.UInt64.prototype.sign = System.Int64.prototype.sign;
    System.UInt64.prototype.clone = System.Int64.prototype.clone;
    System.UInt64.prototype.ne = System.Int64.prototype.ne;
    System.UInt64.prototype.neq = System.Int64.prototype.neq;
    System.UInt64.prototype.eq = System.Int64.prototype.eq;
    System.UInt64.prototype.lt = System.Int64.prototype.lt;
    System.UInt64.prototype.lte = System.Int64.prototype.lte;
    System.UInt64.prototype.gt = System.Int64.prototype.gt;
    System.UInt64.prototype.gte = System.Int64.prototype.gte;
    System.UInt64.prototype.equals = System.Int64.prototype.equals;
    System.UInt64.prototype.equalsT = System.Int64.prototype.equalsT;
    System.UInt64.prototype.getHashCode = System.Int64.prototype.getHashCode;
    System.UInt64.prototype.toNumber = System.Int64.prototype.toNumber;

    System.UInt64.parse = function (str) {
        if (str == null) {
            throw new System.ArgumentNullException.$ctor1("str");
        }

        if (!/^[+-]?[0-9]+$/.test(str)) {
            throw new System.FormatException.$ctor1("Input string was not in a correct format.");
        }

        var result = new System.UInt64(str);

        if (result.value.isNegative()) {
            throw new System.OverflowException();
        }

        if (System.String.trimStartZeros(str) !== result.toString()) {
            throw new System.OverflowException();
        }

        return result;
    };

    System.UInt64.tryParse = function (str, v) {
        try {
            if (str == null || !/^[+-]?[0-9]+$/.test(str)) {
                v.v = System.UInt64(Bridge.$Long.UZERO);
                return false;
            }

            v.v = new System.UInt64(str);

            if (v.v.isNegative()) {
                v.v = System.UInt64(Bridge.$Long.UZERO);
                return false;
            }

            if (System.String.trimStartZeros(str) !== v.v.toString()) {
                v.v = System.UInt64(Bridge.$Long.UZERO);
                return false;
            }

            return true;
        } catch (e) {
            v.v = System.UInt64(Bridge.$Long.UZERO);
            return false;
        }
    };

    System.UInt64.min = function () {
        var values = [],
            min, i, len;

        for (i = 0, len = arguments.length; i < len; i++) {
            values.push(System.UInt64.getValue(arguments[i]));
        }

        i = 0;
        min = values[0];
        for (; ++i < values.length;) {
            if (values[i].lt(min)) {
                min = values[i];
            }
        }

        return new System.UInt64(min);
    };

    System.UInt64.max = function () {
        var values = [],
            max, i, len;

        for (i = 0, len = arguments.length; i < len; i++) {
            values.push(System.UInt64.getValue(arguments[i]));
        }

        i = 0;
        max = values[0];
        for (; ++i < values.length;) {
            if (values[i].gt(max)) {
                max = values[i];
            }
        }

        return new System.UInt64(max);
    };

    System.UInt64.divRem = function (a, b, result) {
        a = System.UInt64(a);
        b = System.UInt64(b);
        var remainder = a.mod(b);
        result.v = remainder;
        return a.sub(remainder).div(b);
    };

    System.UInt64.prototype.toJSON = function () {
        return this.gt(Bridge.Int.MAX_SAFE_INTEGER) ? this.toString() : this.toNumber();
    };

    System.UInt64.prototype.and = System.Int64.prototype.and;
    System.UInt64.prototype.not = System.Int64.prototype.not;
    System.UInt64.prototype.or = System.Int64.prototype.or;
    System.UInt64.prototype.shl = System.Int64.prototype.shl;
    System.UInt64.prototype.shr = System.Int64.prototype.shr;
    System.UInt64.prototype.shru = System.Int64.prototype.shru;
    System.UInt64.prototype.xor = System.Int64.prototype.xor;

    System.UInt64.Zero = System.UInt64(Bridge.$Long.UZERO);
    System.UInt64.MinValue = System.UInt64.Zero;
    System.UInt64.MaxValue = System.UInt64(Bridge.$Long.MAX_UNSIGNED_VALUE);
    System.UInt64.precision = 20;

    // @source Decimal.js

    /* decimal.js v7.1.0 https://github.com/MikeMcl/decimal.js/LICENCE */
    !function (n) { "use strict"; function e(n) { var e, i, t, r = n.length - 1, s = "", o = n[0]; if (r > 0) { for (s += o, e = 1; r > e; e++) t = n[e] + "", i = Rn - t.length, i && (s += l(i)), s += t; o = n[e], t = o + "", i = Rn - t.length, i && (s += l(i)) } else if (0 === o) return "0"; for (; o % 10 === 0;) o /= 10; return s + o } function i(n, e, i) { if (n !== ~~n || e > n || n > i) throw Error(En + n) } function t(n, e, i, t) { var r, s, o, u; for (s = n[0]; s >= 10; s /= 10)--e; return --e < 0 ? (e += Rn, r = 0) : (r = Math.ceil((e + 1) / Rn), e %= Rn), s = On(10, Rn - e), u = n[r] % s | 0, null == t ? 3 > e ? (0 == e ? u = u / 100 | 0 : 1 == e && (u = u / 10 | 0), o = 4 > i && 99999 == u || i > 3 && 49999 == u || 5e4 == u || 0 == u) : o = (4 > i && u + 1 == s || i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 100 | 0) == On(10, e - 2) - 1 || (u == s / 2 || 0 == u) && 0 == (n[r + 1] / s / 100 | 0) : 4 > e ? (0 == e ? u = u / 1e3 | 0 : 1 == e ? u = u / 100 | 0 : 2 == e && (u = u / 10 | 0), o = (t || 4 > i) && 9999 == u || !t && i > 3 && 4999 == u) : o = ((t || 4 > i) && u + 1 == s || !t && i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 1e3 | 0) == On(10, e - 3) - 1, o } function r(n, e, i) { for (var t, r, s = [0], o = 0, u = n.length; u > o;) { for (r = s.length; r--;) s[r] *= e; for (s[0] += wn.indexOf(n.charAt(o++)), t = 0; t < s.length; t++) s[t] > i - 1 && (void 0 === s[t + 1] && (s[t + 1] = 0), s[t + 1] += s[t] / i | 0, s[t] %= i) } return s.reverse() } function s(n, e) { var i, t, r = e.d.length; 32 > r ? (i = Math.ceil(r / 3), t = Math.pow(4, -i).toString()) : (i = 16, t = "2.3283064365386962890625e-10"), n.precision += i, e = E(n, 1, e.times(t), new n(1)); for (var s = i; s--;) { var o = e.times(e); e = o.times(o).minus(o).times(8).plus(1) } return n.precision -= i, e } function o(n, e, i, t) { var r, s, o, u, c, f, a, h, l, d = n.constructor; n: if (null != e) { if (h = n.d, !h) return n; for (r = 1, u = h[0]; u >= 10; u /= 10) r++; if (s = e - r, 0 > s) s += Rn, o = e, a = h[l = 0], c = a / On(10, r - o - 1) % 10 | 0; else if (l = Math.ceil((s + 1) / Rn), u = h.length, l >= u) { if (!t) break n; for (; u++ <= l;) h.push(0); a = c = 0, r = 1, s %= Rn, o = s - Rn + 1 } else { for (a = u = h[l], r = 1; u >= 10; u /= 10) r++; s %= Rn, o = s - Rn + r, c = 0 > o ? 0 : a / On(10, r - o - 1) % 10 | 0 } if (t = t || 0 > e || void 0 !== h[l + 1] || (0 > o ? a : a % On(10, r - o - 1)), f = 4 > i ? (c || t) && (0 == i || i == (n.s < 0 ? 3 : 2)) : c > 5 || 5 == c && (4 == i || t || 6 == i && (s > 0 ? o > 0 ? a / On(10, r - o) : 0 : h[l - 1]) % 10 & 1 || i == (n.s < 0 ? 8 : 7)), 1 > e || !h[0]) return h.length = 0, f ? (e -= n.e + 1, h[0] = On(10, (Rn - e % Rn) % Rn), n.e = -e || 0) : h[0] = n.e = 0, n; if (0 == s ? (h.length = l, u = 1, l--) : (h.length = l + 1, u = On(10, Rn - s), h[l] = o > 0 ? (a / On(10, r - o) % On(10, o) | 0) * u : 0), f) for (; ;) { if (0 == l) { for (s = 1, o = h[0]; o >= 10; o /= 10) s++; for (o = h[0] += u, u = 1; o >= 10; o /= 10) u++; s != u && (n.e++, h[0] == Pn && (h[0] = 1)); break } if (h[l] += u, h[l] != Pn) break; h[l--] = 0, u = 1 } for (s = h.length; 0 === h[--s];) h.pop() } return bn && (n.e > d.maxE ? (n.d = null, n.e = NaN) : n.e < d.minE && (n.e = 0, n.d = [0])), n } function u(n, i, t) { if (!n.isFinite()) return v(n); var r, s = n.e, o = e(n.d), u = o.length; return i ? (t && (r = t - u) > 0 ? o = o.charAt(0) + "." + o.slice(1) + l(r) : u > 1 && (o = o.charAt(0) + "." + o.slice(1)), o = o + (n.e < 0 ? "e" : "e+") + n.e) : 0 > s ? (o = "0." + l(-s - 1) + o, t && (r = t - u) > 0 && (o += l(r))) : s >= u ? (o += l(s + 1 - u), t && (r = t - s - 1) > 0 && (o = o + "." + l(r))) : ((r = s + 1) < u && (o = o.slice(0, r) + "." + o.slice(r)), t && (r = t - u) > 0 && (s + 1 === u && (o += "."), o += l(r))), o } function c(n, e) { for (var i = 1, t = n[0]; t >= 10; t /= 10) i++; return i + e * Rn - 1 } function f(n, e, i) { if (e > Un) throw bn = !0, i && (n.precision = i), Error(Mn); return o(new n(mn), e, 1, !0) } function a(n, e, i) { if (e > _n) throw Error(Mn); return o(new n(vn), e, i, !0) } function h(n) { var e = n.length - 1, i = e * Rn + 1; if (e = n[e]) { for (; e % 10 == 0; e /= 10) i--; for (e = n[0]; e >= 10; e /= 10) i++ } return i } function l(n) { for (var e = ""; n--;) e += "0"; return e } function d(n, e, i, t) { var r, s = new n(1), o = Math.ceil(t / Rn + 4); for (bn = !1; ;) { if (i % 2 && (s = s.times(e), q(s.d, o) && (r = !0)), i = qn(i / 2), 0 === i) { i = s.d.length - 1, r && 0 === s.d[i] && ++s.d[i]; break } e = e.times(e), q(e.d, o) } return bn = !0, s } function p(n) { return 1 & n.d[n.d.length - 1] } function g(n, e, i) { for (var t, r = new n(e[0]), s = 0; ++s < e.length;) { if (t = new n(e[s]), !t.s) { r = t; break } r[i](t) && (r = t) } return r } function w(n, i) { var r, s, u, c, f, a, h, l = 0, d = 0, p = 0, g = n.constructor, w = g.rounding, m = g.precision; if (!n.d || !n.d[0] || n.e > 17) return new g(n.d ? n.d[0] ? n.s < 0 ? 0 : 1 / 0 : 1 : n.s ? n.s < 0 ? 0 : n : NaN); for (null == i ? (bn = !1, h = m) : h = i, a = new g(.03125) ; n.e > -2;) n = n.times(a), p += 5; for (s = Math.log(On(2, p)) / Math.LN10 * 2 + 5 | 0, h += s, r = c = f = new g(1), g.precision = h; ;) { if (c = o(c.times(n), h, 1), r = r.times(++d), a = f.plus(Sn(c, r, h, 1)), e(a.d).slice(0, h) === e(f.d).slice(0, h)) { for (u = p; u--;) f = o(f.times(f), h, 1); if (null != i) return g.precision = m, f; if (!(3 > l && t(f.d, h - s, w, l))) return o(f, g.precision = m, w, bn = !0); g.precision = h += 10, r = c = a = new g(1), d = 0, l++ } f = a } } function m(n, i) { var r, s, u, c, a, h, l, d, p, g, w, v = 1, N = 10, b = n, x = b.d, E = b.constructor, M = E.rounding, y = E.precision; if (b.s < 0 || !x || !x[0] || !b.e && 1 == x[0] && 1 == x.length) return new E(x && !x[0] ? -1 / 0 : 1 != b.s ? NaN : x ? 0 : b); if (null == i ? (bn = !1, p = y) : p = i, E.precision = p += N, r = e(x), s = r.charAt(0), !(Math.abs(c = b.e) < 15e14)) return d = f(E, p + 2, y).times(c + ""), b = m(new E(s + "." + r.slice(1)), p - N).plus(d), E.precision = y, null == i ? o(b, y, M, bn = !0) : b; for (; 7 > s && 1 != s || 1 == s && r.charAt(1) > 3;) b = b.times(n), r = e(b.d), s = r.charAt(0), v++; for (c = b.e, s > 1 ? (b = new E("0." + r), c++) : b = new E(s + "." + r.slice(1)), g = b, l = a = b = Sn(b.minus(1), b.plus(1), p, 1), w = o(b.times(b), p, 1), u = 3; ;) { if (a = o(a.times(w), p, 1), d = l.plus(Sn(a, new E(u), p, 1)), e(d.d).slice(0, p) === e(l.d).slice(0, p)) { if (l = l.times(2), 0 !== c && (l = l.plus(f(E, p + 2, y).times(c + ""))), l = Sn(l, new E(v), p, 1), null != i) return E.precision = y, l; if (!t(l.d, p - N, M, h)) return o(l, E.precision = y, M, bn = !0); E.precision = p += N, d = a = b = Sn(g.minus(1), g.plus(1), p, 1), w = o(b.times(b), p, 1), u = h = 1 } l = d, u += 2 } } function v(n) { return String(n.s * n.s / 0) } function N(n, e) { var i, t, r; for ((i = e.indexOf(".")) > -1 && (e = e.replace(".", "")), (t = e.search(/e/i)) > 0 ? (0 > i && (i = t), i += +e.slice(t + 1), e = e.substring(0, t)) : 0 > i && (i = e.length), t = 0; 48 === e.charCodeAt(t) ; t++); for (r = e.length; 48 === e.charCodeAt(r - 1) ; --r); if (e = e.slice(t, r)) { if (r -= t, n.e = i = i - t - 1, n.d = [], t = (i + 1) % Rn, 0 > i && (t += Rn), r > t) { for (t && n.d.push(+e.slice(0, t)), r -= Rn; r > t;) n.d.push(+e.slice(t, t += Rn)); e = e.slice(t), t = Rn - e.length } else t -= r; for (; t--;) e += "0"; n.d.push(+e), bn && (n.e > n.constructor.maxE ? (n.d = null, n.e = NaN) : n.e < n.constructor.minE && (n.e = 0, n.d = [0])) } else n.e = 0, n.d = [0]; return n } function b(n, e) { var i, t, s, o, u, f, a, h, l; if ("Infinity" === e || "NaN" === e) return +e || (n.s = NaN), n.e = NaN, n.d = null, n; if (An.test(e)) i = 16, e = e.toLowerCase(); else if (Fn.test(e)) i = 2; else { if (!Dn.test(e)) throw Error(En + e); i = 8 } for (o = e.search(/p/i), o > 0 ? (a = +e.slice(o + 1), e = e.substring(2, o)) : e = e.slice(2), o = e.indexOf("."), u = o >= 0, t = n.constructor, u && (e = e.replace(".", ""), f = e.length, o = f - o, s = d(t, new t(i), o, 2 * o)), h = r(e, i, Pn), l = h.length - 1, o = l; 0 === h[o]; --o) h.pop(); return 0 > o ? new t(0 * n.s) : (n.e = c(h, l), n.d = h, bn = !1, u && (n = Sn(n, s, 4 * f)), a && (n = n.times(Math.abs(a) < 54 ? Math.pow(2, a) : Nn.pow(2, a))), bn = !0, n) } function x(n, e) { var i, t = e.d.length; if (3 > t) return E(n, 2, e, e); i = 1.4 * Math.sqrt(t), i = i > 16 ? 16 : 0 | i, e = e.times(Math.pow(5, -i)), e = E(n, 2, e, e); for (var r, s = new n(5), o = new n(16), u = new n(20) ; i--;) r = e.times(e), e = e.times(s.plus(r.times(o.times(r).minus(u)))); return e } function E(n, e, i, t, r) { var s, o, u, c, f = 1, a = n.precision, h = Math.ceil(a / Rn); for (bn = !1, c = i.times(i), u = new n(t) ; ;) { if (o = Sn(u.times(c), new n(e++ * e++), a, 1), u = r ? t.plus(o) : t.minus(o), t = Sn(o.times(c), new n(e++ * e++), a, 1), o = u.plus(t), void 0 !== o.d[h]) { for (s = h; o.d[s] === u.d[s] && s--;); if (-1 == s) break } s = u, u = t, t = o, o = s, f++ } return bn = !0, o.d.length = h + 1, o } function M(n, e) { var i, t = e.s < 0, r = a(n, n.precision, 1), s = r.times(.5); if (e = e.abs(), e.lte(s)) return dn = t ? 4 : 1, e; if (i = e.divToInt(r), i.isZero()) dn = t ? 3 : 2; else { if (e = e.minus(i.times(r)), e.lte(s)) return dn = p(i) ? t ? 2 : 3 : t ? 4 : 1, e; dn = p(i) ? t ? 1 : 4 : t ? 3 : 2 } return e.minus(r).abs() } function y(n, e, t, s) { var o, c, f, a, h, l, d, p, g, w = n.constructor, m = void 0 !== t; if (m ? (i(t, 1, gn), void 0 === s ? s = w.rounding : i(s, 0, 8)) : (t = w.precision, s = w.rounding), n.isFinite()) { for (d = u(n), f = d.indexOf("."), m ? (o = 2, 16 == e ? t = 4 * t - 3 : 8 == e && (t = 3 * t - 2)) : o = e, f >= 0 && (d = d.replace(".", ""), g = new w(1), g.e = d.length - f, g.d = r(u(g), 10, o), g.e = g.d.length), p = r(d, 10, o), c = h = p.length; 0 == p[--h];) p.pop(); if (p[0]) { if (0 > f ? c-- : (n = new w(n), n.d = p, n.e = c, n = Sn(n, g, t, s, 0, o), p = n.d, c = n.e, l = hn), f = p[t], a = o / 2, l = l || void 0 !== p[t + 1], l = 4 > s ? (void 0 !== f || l) && (0 === s || s === (n.s < 0 ? 3 : 2)) : f > a || f === a && (4 === s || l || 6 === s && 1 & p[t - 1] || s === (n.s < 0 ? 8 : 7)), p.length = t, l) for (; ++p[--t] > o - 1;) p[t] = 0, t || (++c, p.unshift(1)); for (h = p.length; !p[h - 1]; --h); for (f = 0, d = ""; h > f; f++) d += wn.charAt(p[f]); if (m) { if (h > 1) if (16 == e || 8 == e) { for (f = 16 == e ? 4 : 3, --h; h % f; h++) d += "0"; for (p = r(d, o, e), h = p.length; !p[h - 1]; --h); for (f = 1, d = "1."; h > f; f++) d += wn.charAt(p[f]) } else d = d.charAt(0) + "." + d.slice(1); d = d + (0 > c ? "p" : "p+") + c } else if (0 > c) { for (; ++c;) d = "0" + d; d = "0." + d } else if (++c > h) for (c -= h; c--;) d += "0"; else h > c && (d = d.slice(0, c) + "." + d.slice(c)) } else d = m ? "0p+0" : "0"; d = (16 == e ? "0x" : 2 == e ? "0b" : 8 == e ? "0o" : "") + d } else d = v(n); return n.s < 0 ? "-" + d : d } function q(n, e) { return n.length > e ? (n.length = e, !0) : void 0 } function O(n) { return new this(n).abs() } function F(n) { return new this(n).acos() } function A(n) { return new this(n).acosh() } function D(n, e) { return new this(n).plus(e) } function Z(n) { return new this(n).asin() } function P(n) { return new this(n).asinh() } function R(n) { return new this(n).atan() } function L(n) { return new this(n).atanh() } function U(n, e) { n = new this(n), e = new this(e); var i, t = this.precision, r = this.rounding, s = t + 4; return n.s && e.s ? n.d || e.d ? !e.d || n.isZero() ? (i = e.s < 0 ? a(this, t, r) : new this(0), i.s = n.s) : !n.d || e.isZero() ? (i = a(this, s, 1).times(.5), i.s = n.s) : e.s < 0 ? (this.precision = s, this.rounding = 1, i = this.atan(Sn(n, e, s, 1)), e = a(this, s, 1), this.precision = t, this.rounding = r, i = n.s < 0 ? i.minus(e) : i.plus(e)) : i = this.atan(Sn(n, e, s, 1)) : (i = a(this, s, 1).times(e.s > 0 ? .25 : .75), i.s = n.s) : i = new this(NaN), i } function _(n) { return new this(n).cbrt() } function k(n) { return o(n = new this(n), n.e + 1, 2) } function S(n) { if (!n || "object" != typeof n) throw Error(xn + "Object expected"); var e, i, t, r = ["precision", 1, gn, "rounding", 0, 8, "toExpNeg", -pn, 0, "toExpPos", 0, pn, "maxE", 0, pn, "minE", -pn, 0, "modulo", 0, 9]; for (e = 0; e < r.length; e += 3) if (void 0 !== (t = n[i = r[e]])) { if (!(qn(t) === t && t >= r[e + 1] && t <= r[e + 2])) throw Error(En + i + ": " + t); this[i] = t } if (void 0 !== (t = n[i = "crypto"])) { if (t !== !0 && t !== !1 && 0 !== t && 1 !== t) throw Error(En + i + ": " + t); if (t) { if ("undefined" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw Error(yn); this[i] = !0 } else this[i] = !1 } return this } function T(n) { return new this(n).cos() } function C(n) { return new this(n).cosh() } function I(n) { function e(n) { var i, t, r, s = this; if (!(s instanceof e)) return new e(n); if (s.constructor = e, n instanceof e) return s.s = n.s, s.e = n.e, void (s.d = (n = n.d) ? n.slice() : n); if (r = typeof n, "number" === r) { if (0 === n) return s.s = 0 > 1 / n ? -1 : 1, s.e = 0, void (s.d = [0]); if (0 > n ? (n = -n, s.s = -1) : s.s = 1, n === ~~n && 1e7 > n) { for (i = 0, t = n; t >= 10; t /= 10) i++; return s.e = i, void (s.d = [n]) } return 0 * n !== 0 ? (n || (s.s = NaN), s.e = NaN, void (s.d = null)) : N(s, n.toString()) } if ("string" !== r) throw Error(En + n); return 45 === n.charCodeAt(0) ? (n = n.slice(1), s.s = -1) : s.s = 1, Zn.test(n) ? N(s, n) : b(s, n) } var i, t, r; if (e.prototype = kn, e.ROUND_UP = 0, e.ROUND_DOWN = 1, e.ROUND_CEIL = 2, e.ROUND_FLOOR = 3, e.ROUND_HALF_UP = 4, e.ROUND_HALF_DOWN = 5, e.ROUND_HALF_EVEN = 6, e.ROUND_HALF_CEIL = 7, e.ROUND_HALF_FLOOR = 8, e.EUCLID = 9, e.config = e.set = S, e.clone = I, e.abs = O, e.acos = F, e.acosh = A, e.add = D, e.asin = Z, e.asinh = P, e.atan = R, e.atanh = L, e.atan2 = U, e.cbrt = _, e.ceil = k, e.cos = T, e.cosh = C, e.div = H, e.exp = B, e.floor = V, e.hypot = $, e.ln = j, e.log = W, e.log10 = z, e.log2 = J, e.max = G, e.min = K, e.mod = Q, e.mul = X, e.pow = Y, e.random = nn, e.round = en, e.sign = tn, e.sin = rn, e.sinh = sn, e.sqrt = on, e.sub = un, e.tan = cn, e.tanh = fn, e.trunc = an, void 0 === n && (n = {}), n) for (r = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], i = 0; i < r.length;) n.hasOwnProperty(t = r[i++]) || (n[t] = this[t]); return e.config(n), e } function H(n, e) { return new this(n).div(e) } function B(n) { return new this(n).exp() } function V(n) { return o(n = new this(n), n.e + 1, 3) } function $() { var n, e, i = new this(0); for (bn = !1, n = 0; n < arguments.length;) if (e = new this(arguments[n++]), e.d) i.d && (i = i.plus(e.times(e))); else { if (e.s) return bn = !0, new this(1 / 0); i = e } return bn = !0, i.sqrt() } function j(n) { return new this(n).ln() } function W(n, e) { return new this(n).log(e) } function J(n) { return new this(n).log(2) } function z(n) { return new this(n).log(10) } function G() { return g(this, arguments, "lt") } function K() { return g(this, arguments, "gt") } function Q(n, e) { return new this(n).mod(e) } function X(n, e) { return new this(n).mul(e) } function Y(n, e) { return new this(n).pow(e) } function nn(n) { var e, t, r, s, o = 0, u = new this(1), c = []; if (void 0 === n ? n = this.precision : i(n, 1, gn), r = Math.ceil(n / Rn), this.crypto) if (crypto.getRandomValues) for (e = crypto.getRandomValues(new Uint32Array(r)) ; r > o;) s = e[o], s >= 429e7 ? e[o] = crypto.getRandomValues(new Uint32Array(1))[0] : c[o++] = s % 1e7; else { if (!crypto.randomBytes) throw Error(yn); for (e = crypto.randomBytes(r *= 4) ; r > o;) s = e[o] + (e[o + 1] << 8) + (e[o + 2] << 16) + ((127 & e[o + 3]) << 24), s >= 214e7 ? crypto.randomBytes(4).copy(e, o) : (c.push(s % 1e7), o += 4); o = r / 4 } else for (; r > o;) c[o++] = 1e7 * Math.random() | 0; for (r = c[--o], n %= Rn, r && n && (s = On(10, Rn - n), c[o] = (r / s | 0) * s) ; 0 === c[o]; o--) c.pop(); if (0 > o) t = 0, c = [0]; else { for (t = -1; 0 === c[0]; t -= Rn) c.shift(); for (r = 1, s = c[0]; s >= 10; s /= 10) r++; Rn > r && (t -= Rn - r) } return u.e = t, u.d = c, u } function en(n) { return o(n = new this(n), n.e + 1, this.rounding) } function tn(n) { return n = new this(n), n.d ? n.d[0] ? n.s : 0 * n.s : n.s || NaN } function rn(n) { return new this(n).sin() } function sn(n) { return new this(n).sinh() } function on(n) { return new this(n).sqrt() } function un(n, e) { return new this(n).sub(e) } function cn(n) { return new this(n).tan() } function fn(n) { return new this(n).tanh() } function an(n) { return o(n = new this(n), n.e + 1, 1) } var hn, ln, dn, pn = 9e15, gn = 1e9, wn = "0123456789abcdef", mn = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", vn = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", Nn = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -pn, maxE: pn, crypto: !1 }, bn = !0, xn = "[DecimalError] ", En = xn + "Invalid argument: ", Mn = xn + "Precision limit exceeded", yn = xn + "crypto unavailable", qn = Math.floor, On = Math.pow, Fn = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, An = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, Dn = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, Zn = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, Pn = 1e7, Rn = 7, Ln = 9007199254740991, Un = mn.length - 1, _n = vn.length - 1, kn = {}; kn.absoluteValue = kn.abs = function () { var n = new this.constructor(this); return n.s < 0 && (n.s = 1), o(n) }, kn.ceil = function () { return o(new this.constructor(this), this.e + 1, 2) }, kn.comparedTo = kn.cmp = function (n) { var e, i, t, r, s = this, o = s.d, u = (n = new s.constructor(n)).d, c = s.s, f = n.s; if (!o || !u) return c && f ? c !== f ? c : o === u ? 0 : !o ^ 0 > c ? 1 : -1 : NaN; if (!o[0] || !u[0]) return o[0] ? c : u[0] ? -f : 0; if (c !== f) return c; if (s.e !== n.e) return s.e > n.e ^ 0 > c ? 1 : -1; for (t = o.length, r = u.length, e = 0, i = r > t ? t : r; i > e; ++e) if (o[e] !== u[e]) return o[e] > u[e] ^ 0 > c ? 1 : -1; return t === r ? 0 : t > r ^ 0 > c ? 1 : -1 }, kn.cosine = kn.cos = function () { var n, e, i = this, t = i.constructor; return i.d ? i.d[0] ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(i.e, i.sd()) + Rn, t.rounding = 1, i = s(t, M(t, i)), t.precision = n, t.rounding = e, o(2 == dn || 3 == dn ? i.neg() : i, n, e, !0)) : new t(1) : new t(NaN) }, kn.cubeRoot = kn.cbrt = function () { var n, i, t, r, s, u, c, f, a, h, l = this, d = l.constructor; if (!l.isFinite() || l.isZero()) return new d(l); for (bn = !1, u = l.s * Math.pow(l.s * l, 1 / 3), u && Math.abs(u) != 1 / 0 ? r = new d(u.toString()) : (t = e(l.d), n = l.e, (u = (n - t.length + 1) % 3) && (t += 1 == u || -2 == u ? "0" : "00"), u = Math.pow(t, 1 / 3), n = qn((n + 1) / 3) - (n % 3 == (0 > n ? -1 : 2)), u == 1 / 0 ? t = "5e" + n : (t = u.toExponential(), t = t.slice(0, t.indexOf("e") + 1) + n), r = new d(t), r.s = l.s), c = (n = d.precision) + 3; ;) if (f = r, a = f.times(f).times(f), h = a.plus(l), r = Sn(h.plus(l).times(f), h.plus(a), c + 2, 1), e(f.d).slice(0, c) === (t = e(r.d)).slice(0, c)) { if (t = t.slice(c - 3, c + 1), "9999" != t && (s || "4999" != t)) { (!+t || !+t.slice(1) && "5" == t.charAt(0)) && (o(r, n + 1, 1), i = !r.times(r).times(r).eq(l)); break } if (!s && (o(f, n + 1, 0), f.times(f).times(f).eq(l))) { r = f; break } c += 4, s = 1 } return bn = !0, o(r, n, d.rounding, i) }, kn.decimalPlaces = kn.dp = function () { var n, e = this.d, i = NaN; if (e) { if (n = e.length - 1, i = (n - qn(this.e / Rn)) * Rn, n = e[n]) for (; n % 10 == 0; n /= 10) i--; 0 > i && (i = 0) } return i }, kn.dividedBy = kn.div = function (n) { return Sn(this, new this.constructor(n)) }, kn.dividedToIntegerBy = kn.divToInt = function (n) { var e = this, i = e.constructor; return o(Sn(e, new i(n), 0, 1, 1), i.precision, i.rounding) }, kn.equals = kn.eq = function (n) { return 0 === this.cmp(n) }, kn.floor = function () { return o(new this.constructor(this), this.e + 1, 3) }, kn.greaterThan = kn.gt = function (n) { return this.cmp(n) > 0 }, kn.greaterThanOrEqualTo = kn.gte = function (n) { var e = this.cmp(n); return 1 == e || 0 === e }, kn.hyperbolicCosine = kn.cosh = function () { var n, e, i, t, r, s = this, u = s.constructor, c = new u(1); if (!s.isFinite()) return new u(s.s ? 1 / 0 : NaN); if (s.isZero()) return c; i = u.precision, t = u.rounding, u.precision = i + Math.max(s.e, s.sd()) + 4, u.rounding = 1, r = s.d.length, 32 > r ? (n = Math.ceil(r / 3), e = Math.pow(4, -n).toString()) : (n = 16, e = "2.3283064365386962890625e-10"), s = E(u, 1, s.times(e), new u(1), !0); for (var f, a = n, h = new u(8) ; a--;) f = s.times(s), s = c.minus(f.times(h.minus(f.times(h)))); return o(s, u.precision = i, u.rounding = t, !0) }, kn.hyperbolicSine = kn.sinh = function () { var n, e, i, t, r = this, s = r.constructor; if (!r.isFinite() || r.isZero()) return new s(r); if (e = s.precision, i = s.rounding, s.precision = e + Math.max(r.e, r.sd()) + 4, s.rounding = 1, t = r.d.length, 3 > t) r = E(s, 2, r, r, !0); else { n = 1.4 * Math.sqrt(t), n = n > 16 ? 16 : 0 | n, r = r.times(Math.pow(5, -n)), r = E(s, 2, r, r, !0); for (var u, c = new s(5), f = new s(16), a = new s(20) ; n--;) u = r.times(r), r = r.times(c.plus(u.times(f.times(u).plus(a)))) } return s.precision = e, s.rounding = i, o(r, e, i, !0) }, kn.hyperbolicTangent = kn.tanh = function () { var n, e, i = this, t = i.constructor; return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 7, t.rounding = 1, Sn(i.sinh(), i.cosh(), t.precision = n, t.rounding = e)) : new t(i.s) }, kn.inverseCosine = kn.acos = function () { var n, e = this, i = e.constructor, t = e.abs().cmp(1), r = i.precision, s = i.rounding; return -1 !== t ? 0 === t ? e.isNeg() ? a(i, r, s) : new i(0) : new i(NaN) : e.isZero() ? a(i, r + 4, s).times(.5) : (i.precision = r + 6, i.rounding = 1, e = e.asin(), n = a(i, r + 4, s).times(.5), i.precision = r, i.rounding = s, n.minus(e)) }, kn.inverseHyperbolicCosine = kn.acosh = function () { var n, e, i = this, t = i.constructor; return i.lte(1) ? new t(i.eq(1) ? 0 : NaN) : i.isFinite() ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(Math.abs(i.e), i.sd()) + 4, t.rounding = 1, bn = !1, i = i.times(i).minus(1).sqrt().plus(i), bn = !0, t.precision = n, t.rounding = e, i.ln()) : new t(i) }, kn.inverseHyperbolicSine = kn.asinh = function () { var n, e, i = this, t = i.constructor; return !i.isFinite() || i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 2 * Math.max(Math.abs(i.e), i.sd()) + 6, t.rounding = 1, bn = !1, i = i.times(i).plus(1).sqrt().plus(i), bn = !0, t.precision = n, t.rounding = e, i.ln()) }, kn.inverseHyperbolicTangent = kn.atanh = function () { var n, e, i, t, r = this, s = r.constructor; return r.isFinite() ? r.e >= 0 ? new s(r.abs().eq(1) ? r.s / 0 : r.isZero() ? r : NaN) : (n = s.precision, e = s.rounding, t = r.sd(), Math.max(t, n) < 2 * -r.e - 1 ? o(new s(r), n, e, !0) : (s.precision = i = t - r.e, r = Sn(r.plus(1), new s(1).minus(r), i + n, 1), s.precision = n + 4, s.rounding = 1, r = r.ln(), s.precision = n, s.rounding = e, r.times(.5))) : new s(NaN) }, kn.inverseSine = kn.asin = function () { var n, e, i, t, r = this, s = r.constructor; return r.isZero() ? new s(r) : (e = r.abs().cmp(1), i = s.precision, t = s.rounding, -1 !== e ? 0 === e ? (n = a(s, i + 4, t).times(.5), n.s = r.s, n) : new s(NaN) : (s.precision = i + 6, s.rounding = 1, r = r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(), s.precision = i, s.rounding = t, r.times(2))) }, kn.inverseTangent = kn.atan = function () { var n, e, i, t, r, s, u, c, f, h = this, l = h.constructor, d = l.precision, p = l.rounding; if (h.isFinite()) { if (h.isZero()) return new l(h); if (h.abs().eq(1) && _n >= d + 4) return u = a(l, d + 4, p).times(.25), u.s = h.s, u } else { if (!h.s) return new l(NaN); if (_n >= d + 4) return u = a(l, d + 4, p).times(.5), u.s = h.s, u } for (l.precision = c = d + 10, l.rounding = 1, i = Math.min(28, c / Rn + 2 | 0), n = i; n; --n) h = h.div(h.times(h).plus(1).sqrt().plus(1)); for (bn = !1, e = Math.ceil(c / Rn), t = 1, f = h.times(h), u = new l(h), r = h; -1 !== n;) if (r = r.times(f), s = u.minus(r.div(t += 2)), r = r.times(f), u = s.plus(r.div(t += 2)), void 0 !== u.d[e]) for (n = e; u.d[n] === s.d[n] && n--;); return i && (u = u.times(2 << i - 1)), bn = !0, o(u, l.precision = d, l.rounding = p, !0) }, kn.isFinite = function () { return !!this.d }, kn.isInteger = kn.isInt = function () { return !!this.d && qn(this.e / Rn) > this.d.length - 2 }, kn.isNaN = function () { return !this.s }, kn.isNegative = kn.isNeg = function () { return this.s < 0 }, kn.isPositive = kn.isPos = function () { return this.s > 0 }, kn.isZero = function () { return !!this.d && 0 === this.d[0] }, kn.lessThan = kn.lt = function (n) { return this.cmp(n) < 0 }, kn.lessThanOrEqualTo = kn.lte = function (n) { return this.cmp(n) < 1 }, kn.logarithm = kn.log = function (n) { var i, r, s, u, c, a, h, l, d = this, p = d.constructor, g = p.precision, w = p.rounding, v = 5; if (null == n) n = new p(10), i = !0; else { if (n = new p(n), r = n.d, n.s < 0 || !r || !r[0] || n.eq(1)) return new p(NaN); i = n.eq(10) } if (r = d.d, d.s < 0 || !r || !r[0] || d.eq(1)) return new p(r && !r[0] ? -1 / 0 : 1 != d.s ? NaN : r ? 0 : 1 / 0); if (i) if (r.length > 1) c = !0; else { for (u = r[0]; u % 10 === 0;) u /= 10; c = 1 !== u } if (bn = !1, h = g + v, a = m(d, h), s = i ? f(p, h + 10) : m(n, h), l = Sn(a, s, h, 1), t(l.d, u = g, w)) do if (h += 10, a = m(d, h), s = i ? f(p, h + 10) : m(n, h), l = Sn(a, s, h, 1), !c) { +e(l.d).slice(u + 1, u + 15) + 1 == 1e14 && (l = o(l, g + 1, 0)); break } while (t(l.d, u += 10, w)); return bn = !0, o(l, g, w) }, kn.minus = kn.sub = function (n) { var e, i, t, r, s, u, f, a, h, l, d, p, g = this, w = g.constructor; if (n = new w(n), !g.d || !n.d) return g.s && n.s ? g.d ? n.s = -n.s : n = new w(n.d || g.s !== n.s ? g : NaN) : n = new w(NaN), n; if (g.s != n.s) return n.s = -n.s, g.plus(n); if (h = g.d, p = n.d, f = w.precision, a = w.rounding, !h[0] || !p[0]) { if (p[0]) n.s = -n.s; else { if (!h[0]) return new w(3 === a ? -0 : 0); n = new w(g) } return bn ? o(n, f, a) : n } if (i = qn(n.e / Rn), l = qn(g.e / Rn), h = h.slice(), s = l - i) { for (d = 0 > s, d ? (e = h, s = -s, u = p.length) : (e = p, i = l, u = h.length), t = Math.max(Math.ceil(f / Rn), u) + 2, s > t && (s = t, e.length = 1), e.reverse(), t = s; t--;) e.push(0); e.reverse() } else { for (t = h.length, u = p.length, d = u > t, d && (u = t), t = 0; u > t; t++) if (h[t] != p[t]) { d = h[t] < p[t]; break } s = 0 } for (d && (e = h, h = p, p = e, n.s = -n.s), u = h.length, t = p.length - u; t > 0; --t) h[u++] = 0; for (t = p.length; t > s;) { if (h[--t] < p[t]) { for (r = t; r && 0 === h[--r];) h[r] = Pn - 1; --h[r], h[t] += Pn } h[t] -= p[t] } for (; 0 === h[--u];) h.pop(); for (; 0 === h[0]; h.shift())--i; return h[0] ? (n.d = h, n.e = c(h, i), bn ? o(n, f, a) : n) : new w(3 === a ? -0 : 0) }, kn.modulo = kn.mod = function (n) { var e, i = this, t = i.constructor; return n = new t(n), !i.d || !n.s || n.d && !n.d[0] ? new t(NaN) : !n.d || i.d && !i.d[0] ? o(new t(i), t.precision, t.rounding) : (bn = !1, 9 == t.modulo ? (e = Sn(i, n.abs(), 0, 3, 1), e.s *= n.s) : e = Sn(i, n, 0, t.modulo, 1), e = e.times(n), bn = !0, i.minus(e)) }, kn.naturalExponential = kn.exp = function () { return w(this) }, kn.naturalLogarithm = kn.ln = function () { return m(this) }, kn.negated = kn.neg = function () { var n = new this.constructor(this); return n.s = -n.s, o(n) }, kn.plus = kn.add = function (n) { var e, i, t, r, s, u, f, a, h, l, d = this, p = d.constructor; if (n = new p(n), !d.d || !n.d) return d.s && n.s ? d.d || (n = new p(n.d || d.s === n.s ? d : NaN)) : n = new p(NaN), n; if (d.s != n.s) return n.s = -n.s, d.minus(n); if (h = d.d, l = n.d, f = p.precision, a = p.rounding, !h[0] || !l[0]) return l[0] || (n = new p(d)), bn ? o(n, f, a) : n; if (s = qn(d.e / Rn), t = qn(n.e / Rn), h = h.slice(), r = s - t) { for (0 > r ? (i = h, r = -r, u = l.length) : (i = l, t = s, u = h.length), s = Math.ceil(f / Rn), u = s > u ? s + 1 : u + 1, r > u && (r = u, i.length = 1), i.reverse() ; r--;) i.push(0); i.reverse() } for (u = h.length, r = l.length, 0 > u - r && (r = u, i = l, l = h, h = i), e = 0; r;) e = (h[--r] = h[r] + l[r] + e) / Pn | 0, h[r] %= Pn; for (e && (h.unshift(e), ++t), u = h.length; 0 == h[--u];) h.pop(); return n.d = h, n.e = c(h, t), bn ? o(n, f, a) : n }, kn.precision = kn.sd = function (n) { var e, i = this; if (void 0 !== n && n !== !!n && 1 !== n && 0 !== n) throw Error(En + n); return i.d ? (e = h(i.d), n && i.e + 1 > e && (e = i.e + 1)) : e = NaN, e }, kn.round = function () { var n = this, e = n.constructor; return o(new e(n), n.e + 1, e.rounding) }, kn.sine = kn.sin = function () { var n, e, i = this, t = i.constructor; return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + Math.max(i.e, i.sd()) + Rn, t.rounding = 1, i = x(t, M(t, i)), t.precision = n, t.rounding = e, o(dn > 2 ? i.neg() : i, n, e, !0)) : new t(NaN) }, kn.squareRoot = kn.sqrt = function () { var n, i, t, r, s, u, c = this, f = c.d, a = c.e, h = c.s, l = c.constructor; if (1 !== h || !f || !f[0]) return new l(!h || 0 > h && (!f || f[0]) ? NaN : f ? c : 1 / 0); for (bn = !1, h = Math.sqrt(+c), 0 == h || h == 1 / 0 ? (i = e(f), (i.length + a) % 2 == 0 && (i += "0"), h = Math.sqrt(i), a = qn((a + 1) / 2) - (0 > a || a % 2), h == 1 / 0 ? i = "1e" + a : (i = h.toExponential(), i = i.slice(0, i.indexOf("e") + 1) + a), r = new l(i)) : r = new l(h.toString()), t = (a = l.precision) + 3; ;) if (u = r, r = u.plus(Sn(c, u, t + 2, 1)).times(.5), e(u.d).slice(0, t) === (i = e(r.d)).slice(0, t)) { if (i = i.slice(t - 3, t + 1), "9999" != i && (s || "4999" != i)) { (!+i || !+i.slice(1) && "5" == i.charAt(0)) && (o(r, a + 1, 1), n = !r.times(r).eq(c)); break } if (!s && (o(u, a + 1, 0), u.times(u).eq(c))) { r = u; break } t += 4, s = 1 } return bn = !0, o(r, a, l.rounding, n) }, kn.tangent = kn.tan = function () { var n, e, i = this, t = i.constructor; return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 10, t.rounding = 1, i = i.sin(), i.s = 1, i = Sn(i, new t(1).minus(i.times(i)).sqrt(), n + 10, 0), t.precision = n, t.rounding = e, o(2 == dn || 4 == dn ? i.neg() : i, n, e, !0)) : new t(NaN) }, kn.times = kn.mul = function (n) { var e, i, t, r, s, u, f, a, h, l = this, d = l.constructor, p = l.d, g = (n = new d(n)).d; if (n.s *= l.s, !(p && p[0] && g && g[0])) return new d(!n.s || p && !p[0] && !g || g && !g[0] && !p ? NaN : p && g ? 0 * n.s : n.s / 0); for (i = qn(l.e / Rn) + qn(n.e / Rn), a = p.length, h = g.length, h > a && (s = p, p = g, g = s, u = a, a = h, h = u), s = [], u = a + h, t = u; t--;) s.push(0); for (t = h; --t >= 0;) { for (e = 0, r = a + t; r > t;) f = s[r] + g[t] * p[r - t - 1] + e, s[r--] = f % Pn | 0, e = f / Pn | 0; s[r] = (s[r] + e) % Pn | 0 } for (; !s[--u];) s.pop(); for (e ? ++i : s.shift(), t = s.length; !s[--t];) s.pop(); return n.d = s, n.e = c(s, i), bn ? o(n, d.precision, d.rounding) : n }, kn.toBinary = function (n, e) { return y(this, 2, n, e) }, kn.toDecimalPlaces = kn.toDP = function (n, e) { var t = this, r = t.constructor; return t = new r(t), void 0 === n ? t : (i(n, 0, gn), void 0 === e ? e = r.rounding : i(e, 0, 8), o(t, n + t.e + 1, e)) }, kn.toExponential = function (n, e) { var t, r = this, s = r.constructor; return void 0 === n ? t = u(r, !0) : (i(n, 0, gn), void 0 === e ? e = s.rounding : i(e, 0, 8), r = o(new s(r), n + 1, e), t = u(r, !0, n + 1)), r.isNeg() && !r.isZero() ? "-" + t : t }, kn.toFixed = function (n, e) { var t, r, s = this, c = s.constructor; return void 0 === n ? t = u(s) : (i(n, 0, gn), void 0 === e ? e = c.rounding : i(e, 0, 8), r = o(new c(s), n + s.e + 1, e), t = u(r, !1, n + r.e + 1)), s.isNeg() && !s.isZero() ? "-" + t : t }, kn.toFraction = function (n) { var i, t, r, s, o, u, c, f, a, l, d, p, g = this, w = g.d, m = g.constructor; if (!w) return new m(g); if (a = t = new m(1), r = f = new m(0), i = new m(r), o = i.e = h(w) - g.e - 1, u = o % Rn, i.d[0] = On(10, 0 > u ? Rn + u : u), null == n) n = o > 0 ? i : a; else { if (c = new m(n), !c.isInt() || c.lt(a)) throw Error(En + c); n = c.gt(i) ? o > 0 ? i : a : c } for (bn = !1, c = new m(e(w)), l = m.precision, m.precision = o = w.length * Rn * 2; d = Sn(c, i, 0, 1, 1), s = t.plus(d.times(r)), 1 != s.cmp(n) ;) t = r, r = s, s = a, a = f.plus(d.times(s)), f = s, s = i, i = c.minus(d.times(s)), c = s; return s = Sn(n.minus(t), r, 0, 1, 1), f = f.plus(s.times(a)), t = t.plus(s.times(r)), f.s = a.s = g.s, p = Sn(a, r, o, 1).minus(g).abs().cmp(Sn(f, t, o, 1).minus(g).abs()) < 1 ? [a, r] : [f, t], m.precision = l, bn = !0, p }, kn.toHexadecimal = kn.toHex = function (n, e) { return y(this, 16, n, e) }, kn.toNearest = function (n, e) { var t = this, r = t.constructor; if (t = new r(t), null == n) { if (!t.d) return t; n = new r(1), e = r.rounding } else { if (n = new r(n), void 0 !== e && i(e, 0, 8), !t.d) return n.s ? t : n; if (!n.d) return n.s && (n.s = t.s), n } return n.d[0] ? (bn = !1, 4 > e && (e = [4, 5, 7, 8][e]), t = Sn(t, n, 0, e, 1).times(n), bn = !0, o(t)) : (n.s = t.s, t = n), t }, kn.toNumber = function () { return +this }, kn.toOctal = function (n, e) { return y(this, 8, n, e) }, kn.toPower = kn.pow = function (n) { var i, r, s, u, c, f, a, h = this, l = h.constructor, p = +(n = new l(n)); if (!(h.d && n.d && h.d[0] && n.d[0])) return new l(On(+h, p)); if (h = new l(h), h.eq(1)) return h; if (s = l.precision, c = l.rounding, n.eq(1)) return o(h, s, c); if (i = qn(n.e / Rn), r = n.d.length - 1, a = i >= r, f = h.s, a) { if ((r = 0 > p ? -p : p) <= Ln) return u = d(l, h, r, s), n.s < 0 ? new l(1).div(u) : o(u, s, c) } else if (0 > f) return new l(NaN); return f = 0 > f && 1 & n.d[Math.max(i, r)] ? -1 : 1, r = On(+h, p), i = 0 != r && isFinite(r) ? new l(r + "").e : qn(p * (Math.log("0." + e(h.d)) / Math.LN10 + h.e + 1)), i > l.maxE + 1 || i < l.minE - 1 ? new l(i > 0 ? f / 0 : 0) : (bn = !1, l.rounding = h.s = 1, r = Math.min(12, (i + "").length), u = w(n.times(m(h, s + r)), s), u = o(u, s + 5, 1), t(u.d, s, c) && (i = s + 10, u = o(w(n.times(m(h, i + r)), i), i + 5, 1), +e(u.d).slice(s + 1, s + 15) + 1 == 1e14 && (u = o(u, s + 1, 0))), u.s = f, bn = !0, l.rounding = c, o(u, s, c)) }, kn.toPrecision = function (n, e) { var t, r = this, s = r.constructor; return void 0 === n ? t = u(r, r.e <= s.toExpNeg || r.e >= s.toExpPos) : (i(n, 1, gn), void 0 === e ? e = s.rounding : i(e, 0, 8), r = o(new s(r), n, e), t = u(r, n <= r.e || r.e <= s.toExpNeg, n)), r.isNeg() && !r.isZero() ? "-" + t : t }, kn.toSignificantDigits = kn.toSD = function (n, e) { var t = this, r = t.constructor; return void 0 === n ? (n = r.precision, e = r.rounding) : (i(n, 1, gn), void 0 === e ? e = r.rounding : i(e, 0, 8)), o(new r(t), n, e) }, kn.toString = function () { var n = this, e = n.constructor, i = u(n, n.e <= e.toExpNeg || n.e >= e.toExpPos); return n.isNeg() && !n.isZero() ? "-" + i : i }, kn.truncated = kn.trunc = function () { return o(new this.constructor(this), this.e + 1, 1) }, kn.valueOf = kn.toJSON = function () { var n = this, e = n.constructor, i = u(n, n.e <= e.toExpNeg || n.e >= e.toExpPos); return n.isNeg() ? "-" + i : i }; var Sn = function () { function n(n, e, i) { var t, r = 0, s = n.length; for (n = n.slice() ; s--;) t = n[s] * e + r, n[s] = t % i | 0, r = t / i | 0; return r && n.unshift(r), n } function e(n, e, i, t) { var r, s; if (i != t) s = i > t ? 1 : -1; else for (r = s = 0; i > r; r++) if (n[r] != e[r]) { s = n[r] > e[r] ? 1 : -1; break } return s } function i(n, e, i, t) { for (var r = 0; i--;) n[i] -= r, r = n[i] < e[i] ? 1 : 0, n[i] = r * t + n[i] - e[i]; for (; !n[0] && n.length > 1;) n.shift() } return function (t, r, s, u, c, f) { var a, h, l, d, p, g, w, m, v, N, b, x, E, M, y, q, O, F, A, D, Z = t.constructor, P = t.s == r.s ? 1 : -1, R = t.d, L = r.d; if (!(R && R[0] && L && L[0])) return new Z(t.s && r.s && (R ? !L || R[0] != L[0] : L) ? R && 0 == R[0] || !L ? 0 * P : P / 0 : NaN); for (f ? (p = 1, h = t.e - r.e) : (f = Pn, p = Rn, h = qn(t.e / p) - qn(r.e / p)), A = L.length, O = R.length, v = new Z(P), N = v.d = [], l = 0; L[l] == (R[l] || 0) ; l++); if (L[l] > (R[l] || 0) && h--, null == s ? (M = s = Z.precision, u = Z.rounding) : M = c ? s + (t.e - r.e) + 1 : s, 0 > M) N.push(1), g = !0; else { if (M = M / p + 2 | 0, l = 0, 1 == A) { for (d = 0, L = L[0], M++; (O > l || d) && M--; l++) y = d * f + (R[l] || 0), N[l] = y / L | 0, d = y % L | 0; g = d || O > l } else { for (d = f / (L[0] + 1) | 0, d > 1 && (L = n(L, d, f), R = n(R, d, f), A = L.length, O = R.length), q = A, b = R.slice(0, A), x = b.length; A > x;) b[x++] = 0; D = L.slice(), D.unshift(0), F = L[0], L[1] >= f / 2 && ++F; do d = 0, a = e(L, b, A, x), 0 > a ? (E = b[0], A != x && (E = E * f + (b[1] || 0)), d = E / F | 0, d > 1 ? (d >= f && (d = f - 1), w = n(L, d, f), m = w.length, x = b.length, a = e(w, b, m, x), 1 == a && (d--, i(w, m > A ? D : L, m, f))) : (0 == d && (a = d = 1), w = L.slice()), m = w.length, x > m && w.unshift(0), i(b, w, x, f), -1 == a && (x = b.length, a = e(L, b, A, x), 1 > a && (d++, i(b, x > A ? D : L, x, f))), x = b.length) : 0 === a && (d++, b = [0]), N[l++] = d, a && b[0] ? b[x++] = R[q] || 0 : (b = [R[q]], x = 1); while ((q++ < O || void 0 !== b[0]) && M--); g = void 0 !== b[0] } N[0] || N.shift() } if (1 == p) v.e = h, hn = g; else { for (l = 1, d = N[0]; d >= 10; d /= 10) l++; v.e = l + h * p - 1, o(v, c ? s + v.e + 1 : s, u, g) } return v } }(); Nn = I(Nn), mn = new Nn(mn), vn = new Nn(vn), Bridge.$Decimal = Nn, "function" == typeof define && define.amd ? define("decimal.js", function () { return Nn }) : "undefined" != typeof module && module.exports ? module.exports = Nn["default"] = Nn.Decimal = Nn : (n || (n = "undefined" != typeof self && self && self.self == self ? self : Function("return this")()), ln = n.Decimal, Nn.noConflict = function () { return n.Decimal = ln, Nn }/*, n.Decimal = Nn*/) }(Bridge.global);

    System.Decimal = function (v, provider, T) {
        if (this.constructor !== System.Decimal) {
            return new System.Decimal(v, provider, T);
        }

        if (v == null) {
            v = 0;
        }

        if (typeof v === "string") {
            provider = provider || System.Globalization.CultureInfo.getCurrentCulture();

            var nfInfo = provider && provider.getFormat(System.Globalization.NumberFormatInfo);

            if (nfInfo && nfInfo.numberDecimalSeparator !== ".") {
                v = v.replace(nfInfo.numberDecimalSeparator, ".");
            }

            if (!/^\s*[+-]?(\d+|\d+.|\d*\.\d+)((e|E)[+-]?\d+)?\s*$/.test(v)) {
                throw new System.FormatException();
            }

            v = v.replace(/\s/g, "");
        }

        if (T && T.precision && typeof v === "number") {
            var i = Bridge.Int.trunc(v);
            var length = (i + "").length;
            var p = T.precision - length;
            if (p < 0) {
                p = 0;
            }
            v = v.toFixed(p);
        }

        this.value = System.Decimal.getValue(v);
    }

    System.Decimal.$number = true;
    System.Decimal.$$name = "System.Decimal";
    System.Decimal.prototype.$$name = "System.Decimal";
    System.Decimal.$kind = "struct";
    System.Decimal.prototype.$kind = "struct";
    System.Decimal.$$inherits = [];
    Bridge.Class.addExtend(System.Decimal, [System.IComparable, System.IFormattable, System.IComparable$1(System.Decimal), System.IEquatable$1(System.Decimal)]);

    System.Decimal.$is = function (instance) {
        return instance instanceof System.Decimal;
    };

    System.Decimal.getDefaultValue = function () {
        return new System.Decimal(0);
    };

    System.Decimal.getValue = function (d) {
        if (!Bridge.hasValue(d)) {
            return this.getDefaultValue();
        }

        if (d instanceof System.Decimal) {
            return d.value;
        }

        if (d instanceof System.Int64 || d instanceof System.UInt64) {
            return new Bridge.$Decimal(d.toString());
        }

        return new Bridge.$Decimal(d);
    };

    System.Decimal.create = function (d) {
        if (!Bridge.hasValue(d)) {
            return null;
        }

        if (d instanceof System.Decimal) {
            return d;
        }

        return new System.Decimal(d);
    };

    System.Decimal.lift = function (d) {
        return d == null ? null : System.Decimal.create(d);
    };

    System.Decimal.prototype.toString = function (format, provider) {
        return Bridge.Int.format(this, format || "G", provider);
    };

    System.Decimal.prototype.toFloat = function () {
        return this.value.toNumber();
    };

    System.Decimal.prototype.toJSON = function () {
        return this.value.toNumber();
    };

    System.Decimal.prototype.format = function (format, provider) {
        return Bridge.Int.format(this, format, provider);
    };

    System.Decimal.prototype.decimalPlaces = function () {
        return this.value.decimalPlaces();
    };

    System.Decimal.prototype.dividedToIntegerBy = function (d) {
        return new System.Decimal(this.value.dividedToIntegerBy(System.Decimal.getValue(d)));
    };

    System.Decimal.prototype.exponential = function () {
        return new System.Decimal(this.value.exponential());
    };

    System.Decimal.prototype.abs = function () {
        return new System.Decimal(this.value.abs());
    };

    System.Decimal.prototype.floor = function () {
        return new System.Decimal(this.value.floor());
    };

    System.Decimal.prototype.ceil = function () {
        return new System.Decimal(this.value.ceil());
    };

    System.Decimal.prototype.trunc = function () {
        return new System.Decimal(this.value.trunc());
    };

    System.Decimal.round = function (obj, mode) {
        obj = System.Decimal.create(obj);

        var old = Bridge.$Decimal.rounding;

        Bridge.$Decimal.rounding = mode;

        var d = new System.Decimal(obj.value.round());

        Bridge.$Decimal.rounding = old;

        return d;
    };

    System.Decimal.toDecimalPlaces = function (obj, decimals, mode) {
        obj = System.Decimal.create(obj);
        var d = new System.Decimal(obj.value.toDecimalPlaces(decimals, mode));
        return d;
    };

    System.Decimal.prototype.compareTo = function (another) {
        return this.value.comparedTo(System.Decimal.getValue(another));
    };

    System.Decimal.prototype.add = function (another) {
        return new System.Decimal(this.value.plus(System.Decimal.getValue(another)));
    };

    System.Decimal.prototype.sub = function (another) {
        return new System.Decimal(this.value.minus(System.Decimal.getValue(another)));
    };

    System.Decimal.prototype.isZero = function () {
        return this.value.isZero;
    };

    System.Decimal.prototype.mul = function (another) {
        return new System.Decimal(this.value.times(System.Decimal.getValue(another)));
    };

    System.Decimal.prototype.div = function (another) {
        return new System.Decimal(this.value.dividedBy(System.Decimal.getValue(another)));
    };

    System.Decimal.prototype.mod = function (another) {
        return new System.Decimal(this.value.modulo(System.Decimal.getValue(another)));
    };

    System.Decimal.prototype.neg = function () {
        return new System.Decimal(this.value.negated());
    };

    System.Decimal.prototype.inc = function () {
        return new System.Decimal(this.value.plus(System.Decimal.getValue(1)));
    };

    System.Decimal.prototype.dec = function () {
        return new System.Decimal(this.value.minus(System.Decimal.getValue(1)));
    };

    System.Decimal.prototype.sign = function () {
        return this.value.isZero() ? 0 : (this.value.isNegative() ? -1 : 1);
    };

    System.Decimal.prototype.clone = function () {
        return new System.Decimal(this);
    };

    System.Decimal.prototype.ne = function (v) {
        return !!this.compareTo(v);
    };

    System.Decimal.prototype.lt = function (v) {
        return this.compareTo(v) < 0;
    };

    System.Decimal.prototype.lte = function (v) {
        return this.compareTo(v) <= 0;
    };

    System.Decimal.prototype.gt = function (v) {
        return this.compareTo(v) > 0;
    };

    System.Decimal.prototype.gte = function (v) {
        return this.compareTo(v) >= 0;
    };

    System.Decimal.prototype.equals = function (v) {
        if (v instanceof System.Decimal || typeof v === "number") {
            return !this.compareTo(v);
        }

        return false;
    };

    System.Decimal.prototype.equalsT = function (v) {
        return !this.compareTo(v);
    };

    System.Decimal.prototype.getHashCode = function () {
        var n = (this.sign() * 397 + this.value.e) | 0;

        for (var i = 0; i < this.value.d.length; i++) {
            n = (n * 397 + this.value.d[i]) | 0;
        }

        return n;
    };

    System.Decimal.toInt = function (v, tp) {
        if (!v) {
            return null;
        }

        if (tp) {
            var str,
                r;

            if (tp === System.Int64) {
                str = v.value.trunc().toString();
                r = new System.Int64(str);

                if (str !== r.value.toString()) {
                    throw new System.OverflowException();
                }

                return r;
            }

            if (tp === System.UInt64) {
                if (v.value.isNegative()) {
                    throw new System.OverflowException();
                }

                str = v.value.trunc().toString();
                r = new System.UInt64(str);

                if (str !== r.value.toString()) {
                    throw new System.OverflowException();
                }

                return r;
            }

            return Bridge.Int.check(Bridge.Int.trunc(v.value.toNumber()), tp);
        }

        var i = Bridge.Int.trunc(System.Decimal.getValue(v).toNumber());

        if (!Bridge.Int.$is(i)) {
            throw new System.OverflowException();
        }

        return i;
    };

    System.Decimal.tryParse = function (s, provider, v) {
        try {
            v.v = new System.Decimal(s, provider);

            return true;
        } catch (e) {
            v.v = new System.Decimal(0);

            return false;
        }
    };

    System.Decimal.toFloat = function (v) {
        if (!v) {
            return null;
        }

        return System.Decimal.getValue(v).toNumber();
    };

    System.Decimal.setConfig = function (config) {
        Bridge.$Decimal.config(config);
    };

    System.Decimal.min = function () {
        var values = [];

        for (var i = 0, len = arguments.length; i < len; i++) {
            values.push(System.Decimal.getValue(arguments[i]));
        }

        return new System.Decimal(Bridge.$Decimal.min.apply(Bridge.$Decimal, values));
    };

    System.Decimal.max = function () {
        var values = [];

        for (var i = 0, len = arguments.length; i < len; i++) {
            values.push(System.Decimal.getValue(arguments[i]));
        }

        return new System.Decimal(Bridge.$Decimal.max.apply(Bridge.$Decimal, values));
    };

    System.Decimal.random = function (dp) {
        return new System.Decimal(Bridge.$Decimal.random(dp));
    };

    System.Decimal.exp = function (d) {
        return new System.Decimal(System.Decimal.getValue(d).exp());
    };

    System.Decimal.exp = function (d) {
        return new System.Decimal(System.Decimal.getValue(d).exp());
    };

    System.Decimal.ln = function (d) {
        return new System.Decimal(System.Decimal.getValue(d).ln());
    };

    System.Decimal.log = function (d, logBase) {
        return new System.Decimal(System.Decimal.getValue(d).log(logBase));
    };

    System.Decimal.pow = function (d, exponent) {
        return new System.Decimal(System.Decimal.getValue(d).pow(exponent));
    };

    System.Decimal.sqrt = function (d) {
        return new System.Decimal(System.Decimal.getValue(d).sqrt());
    };

    System.Decimal.prototype.isFinite = function () {
        return this.value.isFinite();
    };

    System.Decimal.prototype.isInteger = function () {
        return this.value.isInteger();
    };

    System.Decimal.prototype.isNaN = function () {
        return this.value.isNaN();
    };

    System.Decimal.prototype.isNegative = function () {
        return this.value.isNegative();
    };

    System.Decimal.prototype.isZero = function () {
        return this.value.isZero();
    };

    System.Decimal.prototype.log = function (logBase) {
        return new System.Decimal(this.value.log(logBase));
    };

    System.Decimal.prototype.ln = function () {
        return new System.Decimal(this.value.ln());
    };

    System.Decimal.prototype.precision = function () {
        return this.value.precision();
    };

    System.Decimal.prototype.round = function () {
        var old = Bridge.$Decimal.rounding,
            r;

        Bridge.$Decimal.rounding = 6;
        r = new System.Decimal(this.value.round());
        Bridge.$Decimal.rounding = old;

        return r;
    };

    System.Decimal.prototype.sqrt = function () {
        return new System.Decimal(this.value.sqrt());
    };

    System.Decimal.prototype.toDecimalPlaces = function (dp, rm) {
        return new System.Decimal(this.value.toDecimalPlaces(dp, rm));
    };

    System.Decimal.prototype.toExponential = function (dp, rm) {
        return this.value.toExponential(dp, rm);
    };

    System.Decimal.prototype.toFixed = function (dp, rm) {
        return this.value.toFixed(dp, rm);
    };

    System.Decimal.prototype.pow = function (n) {
        return new System.Decimal(this.value.pow(n));
    };

    System.Decimal.prototype.toPrecision = function (dp, rm) {
        return this.value.toPrecision(dp, rm);
    };

    System.Decimal.prototype.toSignificantDigits = function (dp, rm) {
        return new System.Decimal(this.value.toSignificantDigits(dp, rm));
    };

    System.Decimal.prototype.valueOf = function () {
        return this.value.valueOf();
    };

    System.Decimal.prototype._toFormat = function (dp, rm, f) {
        var x = this.value;

        if (!x.isFinite()) {
            return x.toString();
        }

        var i,
            isNeg = x.isNeg(),
            groupSeparator = f.groupSeparator,
            g1 = +f.groupSize,
            g2 = +f.secondaryGroupSize,
            arr = x.toFixed(dp, rm).split("."),
            intPart = arr[0],
            fractionPart = arr[1],
            intDigits = isNeg ? intPart.slice(1) : intPart,
            len = intDigits.length;

        if (g2) {
            len -= (i = g1, g1 = g2, g2 = i);
        }

        if (g1 > 0 && len > 0) {
            i = len % g1 || g1;
            intPart = intDigits.substr(0, i);

            for (; i < len; i += g1) {
                intPart += groupSeparator + intDigits.substr(i, g1);
            }

            if (g2 > 0) {
                intPart += groupSeparator + intDigits.slice(i);
            }

            if (isNeg) {
                intPart = "-" + intPart;
            }
        }

        return fractionPart
            ? intPart + f.decimalSeparator + ((g2 = +f.fractionGroupSize)
                ? fractionPart.replace(new RegExp("\\d{" + g2 + "}\\B", "g"),
                    "$&" + f.fractionGroupSeparator)
                : fractionPart)
            : intPart;
    };

    System.Decimal.prototype.toFormat = function (dp, rm, provider) {
        var config = {
                decimalSeparator : ".",
                groupSeparator : ",",
                groupSize : 3,
                secondaryGroupSize : 0,
                fractionGroupSeparator : "\xA0",
                fractionGroupSize : 0
            },
            d;

        if (provider && !provider.getFormat) {
            config = Bridge.merge(config, provider);
            d = this._toFormat(dp, rm, config);
        } else {
            provider = provider || System.Globalization.CultureInfo.getCurrentCulture();

            var nfInfo = provider && provider.getFormat(System.Globalization.NumberFormatInfo);

            if (nfInfo) {
                config.decimalSeparator = nfInfo.numberDecimalSeparator;
                config.groupSeparator = nfInfo.numberGroupSeparator;
                config.groupSize = nfInfo.numberGroupSizes[0];
            }

            d = this._toFormat(dp, rm, config);
        }

        return d;
    };

    System.Decimal.prototype.getBytes = function () {
        var s = this.value.s,
            e = this.value.e,
            d = this.value.d,
            bytes = System.Array.init(23, 0, System.Byte);

        bytes[0] = s & 255;
        bytes[1] = e;

        if (d && d.length > 0) {
            bytes[2] = d.length * 4;

            for (var i = 0; i < d.length; i++) {
                bytes[i*4 + 3] = d[i] & 255;
                bytes[i*4 + 4] = (d[i] >> 8) & 255;
                bytes[i*4 + 5] = (d[i] >> 16) & 255;
                bytes[i*4 + 6] = (d[i] >> 24) & 255;
            }
        } else {
            bytes[2] = 0;
        }

        return bytes;
    };

    System.Decimal.fromBytes = function (bytes) {
        var value = new System.Decimal(0),
            s = Bridge.Int.sxb(bytes[0] & 255),
            e = bytes[1],
            ln = bytes[2],
            d = [];

        value.value.s = s;
        value.value.e = e;

        if (ln > 0) {
            for (var i = 3; i < (ln + 3);) {
                d.push(bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24);
                i = i + 4;
            }
        }

        value.value.d = d;

        return value;
    };

    Bridge.$Decimal.config({ precision: 29 });

    System.Decimal.Zero = System.Decimal(0);
    System.Decimal.One = System.Decimal(1);
    System.Decimal.MinusOne = System.Decimal(-1);
    System.Decimal.MinValue = System.Decimal("-79228162514264337593543950335");
    System.Decimal.MaxValue = System.Decimal("79228162514264337593543950335");
    System.Decimal.precision = 29;

    // @source Date.js

    Bridge.define("System.DateTime", {
        inherits: function () { return [System.IComparable, System.IComparable$1(System.DateTime), System.IEquatable$1(System.DateTime), System.IFormattable]; },
        $kind: "struct",
        fields: {
            kind: 0
        },
        methods: {
            $clone: function (to) { return this; }
        },
        statics: {
            TicksPerDay: System.Int64("864000000000"),

            DaysTo1970: 719162,
            YearDaysByMonth: [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],

            MinTicks: System.Int64("0"),
            MaxTicks: System.Int64("3652059").mul(System.Int64("864000000000")).sub(1),

            // Difference in Ticks from 1-Jan-0001 to 1-Jan-1970 at UTC
            $minOffset: System.Int64("621355968000000000"),

            $is: function (instance) {
                return Bridge.isDate(instance);
            },

            $default: null,

            getDefaultValue: function () {
                if (this.$default === null) {
                    this.$default = this.create(1, 1, 1, 0, 0, 0, 0, 0);
                }

                return this.$default;
            },

            $min: null,

            // UTC Min Value
            getMinValue: function () {
                if (this.$min === null) {
                    this.$min = this.create$2(0, 0);
                }

                return this.$min;
            },

            $max: null,

            // UTC Max Value
            getMaxValue: function () {
                if (this.$max === null) {
                    this.$max = this.create$2(this.MaxTicks, 0);
                    this.$max.ticks = this.MaxTicks;
                }

                return this.$max;
            },

            $getTzOffset: function (d) {
                return d.getTimezoneOffset() * 60 * 1000;
            },

            // Get the number of ticks since 0001-01-01T00:00:00.0000000 UTC
            getTicks: function (d) {
                d.kind = (d.kind !== undefined) ? d.kind : 0

                if (d.ticks === undefined) {
                    if (d.kind === 1) {
                        d.ticks = System.Int64(d.getTime()).mul(10000).add(this.$minOffset);
                    } else {
                        d.ticks = System.Int64(d.getTime() - this.$getTzOffset(d)).mul(10000).add(this.$minOffset);
                    }
                }

                return d.ticks;
            },

            toLocalTime: function (d, throwOnOverflow) {
                var d1,
                    ticks = this.getTicks(d);

                if (d.kind !== 2) {
                    ticks = d.ticks.sub(System.Int64(this.$getTzOffset(d)).mul(10000));
                }

                d1 = this.create$2(ticks, 2);

                // Check if Ticks are out of range
                if (ticks.gt(this.MaxTicks) || ticks.lt(0)) {
                    if (throwOnOverflow && throwOnOverflow === true) {
                        throw new System.ArgumentException.$ctor1("Specified argument was out of the range of valid values.");
                    } else {
                        ticks = ticks.add(System.Int64(this.$getTzOffset(d1)).mul(10000));
                        d1 = this.create$2(ticks, 2);
                    }
                }
                
                return d1;
            },

            toUniversalTime: function (d) {
                var ticks = this.getTicks(d),
                    d1;

                // Assuming d is Local time, so adjust to UTC
                if (d.kind !== 1) {
                    ticks = ticks.add(System.Int64(this.$getTzOffset(d)).mul(10000));
                }

                d1 = this.create$2(ticks, 1);

                // Check if Ticks are out of range
                if (ticks.gt(this.MaxTicks) || ticks.lt(0)) {
                    ticks = ticks.sub(System.Int64(this.$getTzOffset(d1)).mul(10000));
                    d1 = this.create$2(ticks, 1);
                }

                return d1;
            },

            create: function (year, month, day, hour, minute, second, millisecond, kind) {
                year = (year !== undefined) ? year : new Date().getFullYear();
                month = (month !== undefined) ? month : new Date().getMonth() + 1;
                day = (day !== undefined) ? day : 1;
                hour = (hour !== undefined) ? hour : 0;
                minute = (minute !== undefined) ? minute : 0;
                second = (second !== undefined) ? second : 0;
                millisecond = (millisecond !== undefined) ? millisecond : 0;
                kind = (kind !== undefined) ? kind : 0;

                var d,
                    ticks;

                d = new Date(year, month - 1, day, hour, minute, second, millisecond);
                d.setFullYear(year);

                ticks = this.getTicks(d);

                if (kind === 1) {
                    d = new Date(d.getTime() - this.$getTzOffset(d))
                }

                d.kind = kind;
                d.ticks = ticks;

                return d;
            },

            create$1: function (date, kind) {
                kind = (kind !== undefined) ? kind : 0;

                var d;

                if (kind === 1) {
                    d = this.create(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds(), kind);
                } else {
                    d = this.create(date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds(), kind);
                }

                d.ticks = this.getTicks(d)

                return d;
            },

            create$2: function (ticks, kind) {
                ticks = System.Int64.is64Bit(ticks) ? ticks : System.Int64(ticks);
                kind = (kind !== undefined) ? kind : 0

                var d = new Date(ticks.sub(this.$minOffset).div(10000).toNumber());

                if (kind !== 1) {
                    d = new Date(d.getTime() + this.$getTzOffset(d));
                }

                d.ticks = ticks;
                d.kind = kind;

                return d;
            },

            getToday: function () {
                var d = new Date();

                return this.create(d.getFullYear(), d.getMonth() + 1, d.getDate(), 0, 0, 0, 0, 2);
            },

            getNow: function () {
                return this.create$1(new Date(), 2);
            },

            getUtcNow: function () {
                return this.create$1(new Date(), 1);
            },

            getTimeOfDay: function (d) {
                var d1 = this.getDate(d);

                return new System.TimeSpan((d - d1) * 10000);
            },

            getKind: function (d) {
                d.kind = (d.kind !== undefined) ? d.kind : 0

                return d.kind;
            },

            specifyKind: function (d, kind) {
                return this.create$2(this.getTicks(d), kind);
            },

            $FileTimeOffset: System.Int64("584388").mul(System.Int64("864000000000")),

            FromFileTime: function (fileTime) {
                return this.toLocalTime(this.FromFileTimeUtc(fileTime));
            },

            FromFileTimeUtc: function (fileTime) {
                fileTime = System.Int64.is64Bit(fileTime) ? fileTime : System.Int64(fileTime);

                return this.create$2(fileTime.add(this.$FileTimeOffset), 1);
            },

            ToFileTime: function (d) {
                return this.ToFileTimeUtc(this.toUniversalTime(d));
            },

            ToFileTimeUtc: function (d) {
                return (this.getKind(d) !== 0) ? this.getTicks(this.toUniversalTime(d)) : this.getTicks(d); 
            },
 
            isUseGenitiveForm: function (format, index, tokenLen, patternToMatch) {
                var i,
                    repeat = 0;

                for (i = index - 1; i >= 0 && format[i] !== patternToMatch; i--) { }

                if (i >= 0) {
                    while (--i >= 0 && format[i] === patternToMatch) {
                        repeat++;
                    }

                    if (repeat <= 1) {
                        return true;
                    }
                }

                for (i = index + tokenLen; i < format.length && format[i] !== patternToMatch; i++) { }

                if (i < format.length) {
                    repeat = 0;

                    while (++i < format.length && format[i] === patternToMatch) {
                        repeat++;
                    }

                    if (repeat <= 1) {
                        return true;
                    }
                }

                return false;
            },

            format: function (d, f, p) {
                var me = this,
                    kind = d.kind || 0,
                    isUtc = (kind === 1),
                    df = (p || System.Globalization.CultureInfo.getCurrentCulture()).getFormat(System.Globalization.DateTimeFormatInfo),
                    year = isUtc ? d.getUTCFullYear() : d.getFullYear(),
                    month = isUtc ? d.getUTCMonth() : d.getMonth(),
                    dayOfMonth = isUtc ? d.getUTCDate() : d.getDate(),
                    dayOfWeek = isUtc ? d.getUTCDay() : d.getDay(),
                    hour = isUtc ? d.getUTCHours() : d.getHours(),
                    minute = isUtc ? d.getUTCMinutes() : d.getMinutes(),
                    second = isUtc ? d.getUTCSeconds() : d.getSeconds(),
                    millisecond = isUtc ? d.getUTCMilliseconds() : d.getMilliseconds(),
                    timezoneOffset = d.getTimezoneOffset(),
                    formats;

                f = f || "G";

                if (f.length === 1) {
                    formats = df.getAllDateTimePatterns(f, true);
                    f = formats ? formats[0] : f;
                } else if (f.length === 2 && f.charAt(0) === "%") {
                    f = f.charAt(1);
                }

                var removeDot = false;

                f = f.replace(/(\\.|'[^']*'|"[^"]*"|d{1,4}|M{1,4}|yyyy|yy|y|HH?|hh?|mm?|ss?|tt?|u|f{1,7}|F{1,7}|K|z{1,3}|\:|\/)/g,
                    function (match, group, index) {
                        var part = match;

                        switch (match) {
                            case "dddd":
                                part = df.dayNames[dayOfWeek];

                                break;
                            case "ddd":
                                part = df.abbreviatedDayNames[dayOfWeek];

                                break;
                            case "dd":
                                part = dayOfMonth < 10 ? "0" + dayOfMonth : dayOfMonth;

                                break;
                            case "d":
                                part = dayOfMonth;

                                break;
                            case "MMMM":
                                if (me.isUseGenitiveForm(f, index, 4, "d")) {
                                    part = df.monthGenitiveNames[month];
                                } else {
                                    part = df.monthNames[month];
                                }

                                break;
                            case "MMM":
                                if (me.isUseGenitiveForm(f, index, 3, "d")) {
                                    part = df.abbreviatedMonthGenitiveNames[month];
                                } else {
                                    part = df.abbreviatedMonthNames[month];
                                }

                                break;
                            case "MM":
                                part = (month + 1) < 10 ? "0" + (month + 1) : (month + 1);

                                break;
                            case "M":
                                part = month + 1;

                                break;
                            case "yyyy":
                                part = ("0000" + year).substring(year.toString().length);

                                break;
                            case "yy":
                                part = (year % 100).toString();

                                if (part.length === 1) {
                                    part = "0" + part;
                                }

                                break;
                            case "y":
                                part = year % 100;

                                break;
                            case "h":
                            case "hh":
                                part = hour % 12;

                                if (!part) {
                                    part = "12";
                                } else if (match === "hh" && part.length === 1) {
                                    part = "0" + part;
                                }

                                break;
                            case "HH":
                                part = hour.toString();

                                if (part.length === 1) {
                                    part = "0" + part;
                                }

                                break;
                            case "H":
                                part = hour;
                                break;
                            case "mm":
                                part = minute.toString();

                                if (part.length === 1) {
                                    part = "0" + part;
                                }

                                break;
                            case "m":
                                part = minute;

                                break;
                            case "ss":
                                part = second.toString();

                                if (part.length === 1) {
                                    part = "0" + part;
                                }

                                break;
                            case "s":
                                part = second;
                                break;
                            case "t":
                            case "tt":
                                part = (hour < 12) ? df.amDesignator : df.pmDesignator;

                                if (match === "t") {
                                    part = part.charAt(0);
                                }

                                break;
                            case "F":
                            case "FF":
                            case "FFF":
                            case "FFFF":
                            case "FFFFF":
                            case "FFFFFF":
                            case "FFFFFFF":
                                part = millisecond.toString();

                                if (part.length < 3) {
                                    part = Array(4 - part.length).join("0") + part;
                                }

                                part = part.substr(0, match.length);

                                var c = '0',
                                    i = part.length - 1;

                                for (; i >= 0 && part.charAt(i) === c; i--);
                                part = part.substring(0, i + 1);

                                removeDot = part.length == 0;

                                break;
                            case "f":
                            case "ff":
                            case "fff":
                            case "ffff":
                            case "fffff":
                            case "ffffff":
                            case "fffffff":
                                part = millisecond.toString();

                                if (part.length < 3) {
                                    part = Array(4 - part.length).join("0") + part;
                                }

                                var ln = match === "u" ? 7 : match.length;
                                if (part.length < ln) {
                                    part = part + Array(8 - part.length).join("0");
                                }

                                part = part.substr(0, ln);

                                break;
                            case "z":
                                part = timezoneOffset / 60;
                                part = ((part >= 0) ? "-" : "+") + Math.floor(Math.abs(part));

                                break;
                            case "K":
                            case "zz":
                            case "zzz":
                                if (kind === 0) {
                                    part = "";
                                } else if (kind === 1) {
                                    part = "Z";
                                } else {
                                    part = timezoneOffset / 60;
                                    part = ((part > 0) ? "-" : "+") + System.String.alignString(Math.floor(Math.abs(part)).toString(), 2, "0", 2);

                                    if (match === "zzz" || match === "K") {
                                        part += df.timeSeparator + System.String.alignString(Math.floor(Math.abs(timezoneOffset % 60)).toString(), 2, "0", 2);
                                    }
                                }

                                break;
                            case ":":
                                part = df.timeSeparator;

                                break;
                            case "/":
                                part = df.dateSeparator;

                                break;
                            default:
                                part = match.substr(1, match.length - 1 - (match.charAt(0) !== "\\"));

                                break;
                        }

                        return part;
                    });

                if (removeDot) {
                    if (System.String.endsWith(f, ".")) {
                        f = f.substring(0, f.length - 1);
                    } else if (System.String.endsWith(f, ".Z")) {
                        f = f.substring(0, f.length - 2) + "Z";
                    } else if (kind === 2 && f.match(/\.([+-])/g) !== null) {
                        f = f.replace(/\.([+-])/g, '$1');
                    }
                }

                return f;
            },

            parse: function (value, provider, utc, silent) {
                var d = this.parseExact(value, null, provider, utc, true);

                if (d !== null) {
                    return d;
                }

                d = Date.parse(value);

                if (!isNaN(d)) {
                    return new Date(d);
                } else if (!silent) {
                    throw new System.FormatException.$ctor1("String does not contain a valid string representation of a date and time.");
                }
            },

            parseExact: function (str, format, provider, utc, silent) {
                if (!format) {
                    format = ["G", "g", "F", "f", "D", "d", "R", "r", "s", "S", "U", "u", "O", "o", "Y", "y", "M", "m", "T", "t"];
                }

                if (Bridge.isArray(format)) {
                    var j = 0,
                        d;

                    for (j; j < format.length; j++) {
                        d = this.parseExact(str, format[j], provider, utc, true);

                        if (d != null) {
                            return d;
                        }
                    }

                    if (silent) {
                        return null;
                    }

                    throw new System.FormatException.$ctor1("String does not contain a valid string representation of a date and time.");
                } else {
                    // TODO: The code below assumes that there are no quotation marks around the UTC/Z format token (the format patterns
                    // used by Bridge appear to use quotation marks throughout (see universalSortableDateTimePattern), including
                    // in the recent Newtonsoft.Json.JsonConvert release).
                    // Until the above is sorted out, manually remove quotation marks to get UTC times parsed correctly.
                    format = format.replace("'Z'", "Z");
                }

                var now = new Date(),
                    df = (provider || System.Globalization.CultureInfo.getCurrentCulture()).getFormat(System.Globalization.DateTimeFormatInfo),
                    am = df.amDesignator,
                    pm = df.pmDesignator,
                    idx = 0,
                    index = 0,
                    i = 0,
                    c,
                    token,
                    year = now.getFullYear(),
                    month = now.getMonth() + 1,
                    date = now.getDate(),
                    hh = 0,
                    mm = 0,
                    ss = 0,
                    ff = 0,
                    tt = "",
                    zzh = 0,
                    zzm = 0,
                    zzi,
                    sign,
                    neg,
                    names,
                    name,
                    invalid = false,
                    inQuotes = false,
                    tokenMatched,
                    formats,
                    kind = 0,
                    adjust = false,
                    offset = 0;

                if (str == null) {
                    throw new System.ArgumentNullException.$ctor1("str");
                }

                format = format || "G";

                if (format.length === 1) {
                    formats = df.getAllDateTimePatterns(format, true);
                    format = formats ? formats[0] : format;
                } else if (format.length === 2 && format.charAt(0) === "%") {
                    format = format.charAt(1);
                }

                while (index < format.length) {
                    c = format.charAt(index);
                    token = "";

                    if (inQuotes === "\\") {
                        token += c;
                        index++;
                    } else {
                        var nextChar = format.charAt(index + 1);
                        if (c === '.' && str.charAt(idx) !== c && (nextChar === 'F' || nextChar === 'f')) {
                            index++;
                            c = nextChar;
                        }

                        while ((format.charAt(index) === c) && (index < format.length)) {
                            token += c;
                            index++;
                        }
                    }

                    tokenMatched = true;

                    if (!inQuotes) {
                        if (token === "yyyy" || token === "yy" || token === "y") {
                            if (token === "yyyy") {
                                year = this.subparseInt(str, idx, 4, 4);
                            } else if (token === "yy") {
                                year = this.subparseInt(str, idx, 2, 2);
                            } else if (token === "y") {
                                year = this.subparseInt(str, idx, 2, 4);
                            }

                            if (year == null) {
                                invalid = true;
                                break;
                            }

                            idx += year.length;

                            if (year.length === 2) {
                                year = ~~year;
                                year = (year > 30 ? 1900 : 2000) + year;
                            }
                        } else if (token === "MMM" || token === "MMMM") {
                            month = 0;

                            if (token === "MMM") {
                                if (this.isUseGenitiveForm(format, index, 3, "d")) {
                                    names = df.abbreviatedMonthGenitiveNames;
                                } else {
                                    names = df.abbreviatedMonthNames;
                                }
                            } else {
                                if (this.isUseGenitiveForm(format, index, 4, "d")) {
                                    names = df.monthGenitiveNames;
                                } else {
                                    names = df.monthNames;
                                }
                            }

                            for (i = 0; i < names.length; i++) {
                                name = names[i];

                                if (str.substring(idx, idx + name.length).toLowerCase() === name.toLowerCase()) {
                                    month = (i % 12) + 1;
                                    idx += name.length;

                                    break;
                                }
                            }

                            if ((month < 1) || (month > 12)) {
                                invalid = true;

                                break;
                            }
                        } else if (token === "MM" || token === "M") {
                            month = this.subparseInt(str, idx, token.length, 2);

                            if (month == null || month < 1 || month > 12) {
                                invalid = true;

                                break;
                            }

                            idx += month.length;
                        } else if (token === "dddd" || token === "ddd") {
                            names = token === "ddd" ? df.abbreviatedDayNames : df.dayNames;

                            for (i = 0; i < names.length; i++) {
                                name = names[i];

                                if (str.substring(idx, idx + name.length).toLowerCase() === name.toLowerCase()) {
                                    idx += name.length;

                                    break;
                                }
                            }
                        } else if (token === "dd" || token === "d") {
                            date = this.subparseInt(str, idx, token.length, 2);

                            if (date == null || date < 1 || date > 31) {
                                invalid = true;

                                break;
                            }

                            idx += date.length;
                        } else if (token === "hh" || token === "h") {
                            hh = this.subparseInt(str, idx, token.length, 2);

                            if (hh == null || hh < 1 || hh > 12) {
                                invalid = true;

                                break;
                            }

                            idx += hh.length;
                        } else if (token === "HH" || token === "H") {
                            hh = this.subparseInt(str, idx, token.length, 2);

                            if (hh == null || hh < 0 || hh > 23) {
                                invalid = true;

                                break;
                            }

                            idx += hh.length;
                        } else if (token === "mm" || token === "m") {
                            mm = this.subparseInt(str, idx, token.length, 2);

                            if (mm == null || mm < 0 || mm > 59) {
                                return null;
                            }

                            idx += mm.length;
                        } else if (token === "ss" || token === "s") {
                            ss = this.subparseInt(str, idx, token.length, 2);

                            if (ss == null || ss < 0 || ss > 59) {
                                invalid = true;

                                break;
                            }

                            idx += ss.length;
                        } else if (token === "u") {
                            ff = this.subparseInt(str, idx, 1, 7);

                            if (ff == null) {
                                invalid = true;

                                break;
                            }

                            idx += ff.length;

                            if (ff.length > 3) {
                                ff = ff.substring(0, 3);
                            }
                        } else if (token.match(/f{1,7}/) !== null) {
                            ff = this.subparseInt(str, idx, token.length, 7);

                            if (ff == null) {
                                invalid = true;

                                break;
                            }

                            idx += ff.length;

                            if (ff.length > 3) {
                                ff = ff.substring(0, 3);
                            }
                        } else if (token.match(/F{1,7}/) !== null) {
                            ff = this.subparseInt(str, idx, 0, 7);

                            if (ff !== null) {
                                idx += ff.length;

                                if (ff.length > 3) {
                                    ff = ff.substring(0, 3);
                                }
                            }
                        } else if (token === "t") {
                            if (str.substring(idx, idx + 1).toLowerCase() === am.charAt(0).toLowerCase()) {
                                tt = am;
                            } else if (str.substring(idx, idx + 1).toLowerCase() === pm.charAt(0).toLowerCase()) {
                                tt = pm;
                            } else {
                                invalid = true;

                                break;
                            }

                            idx += 1;
                        } else if (token === "tt") {
                            if (str.substring(idx, idx + 2).toLowerCase() === am.toLowerCase()) {
                                tt = am;
                            } else if (str.substring(idx, idx + 2).toLowerCase() === pm.toLowerCase()) {
                                tt = pm;
                            } else {
                                invalid = true;

                                break;
                            }

                            idx += 2;
                        } else if (token === "z" || token === "zz") {
                            sign = str.charAt(idx);

                            if (sign === "-") {
                                neg = true;
                            } else if (sign === "+") {
                                neg = false;
                            } else {
                                invalid = true;

                                break;
                            }

                            idx++;

                            zzh = this.subparseInt(str, idx, 1, 2);

                            if (zzh == null || zzh > 14) {
                                invalid = true;

                                break;
                            }

                            idx += zzh.length;

                            offset = zzh * 60 * 60 * 1000;

                            if (neg) {
                                offset = -offset;
                            }
                        } else if (token === "Z") {
                            var ch = str.substring(idx, idx + 1);
                            if (ch === "Z" || ch === "z") {
                                kind = 1;
                                idx += 1;
                            } else {
                                invalid = true;
                            }

                            break;

                        } else if (token === "zzz" || token === "K") {
                            if (str.substring(idx, idx + 1) === "Z") {
                                kind = 2;
                                adjust = true;
                                idx += 1;

                                break;
                            }

                            name = str.substring(idx, idx + 6);

                            if (name === "") {
                                kind = 0;

                                break;
                            }

                            idx += name.length;

                            if (name.length !== 6 && name.length !== 5) {
                                invalid = true;

                                break;
                            }

                            sign = name.charAt(0);

                            if (sign === "-") {
                                neg = true;
                            } else if (sign === "+") {
                                neg = false;
                            } else {
                                invalid = true;

                                break;
                            }

                            zzi = 1;
                            zzh = this.subparseInt(name, zzi, 1, name.length === 6 ? 2 : 1);

                            if (zzh == null || zzh > 14) {
                                invalid = true;

                                break;
                            }

                            zzi += zzh.length;

                            if (name.charAt(zzi) !== df.timeSeparator) {
                                invalid = true;

                                break;
                            }

                            zzi++;

                            zzm = this.subparseInt(name, zzi, 1, 2);

                            if (zzm == null || zzh > 59) {
                                invalid = true;

                                break;
                            }

                            offset = zzh * 60 * 60 * 1000 + zzm * 60 * 1000;

                            if (neg) {
                                offset = -offset;
                            }

                            kind = 2;
                        } else {
                            tokenMatched = false;
                        }
                    }

                    if (inQuotes || !tokenMatched) {
                        name = str.substring(idx, idx + token.length);

                        if (!inQuotes && name === ":" && (token === df.timeSeparator || token === ":")) {

                        } else if ((!inQuotes && ((token === ":" && name !== df.timeSeparator) || (token === "/" && name !== df.dateSeparator))) || (name !== token && token !== "'" && token !== '"' && token !== "\\")) {
                            invalid = true;

                            break;
                        }

                        if (inQuotes === "\\") {
                            inQuotes = false;
                        }

                        if (token !== "'" && token !== '"' && token !== "\\") {
                            idx += token.length;
                        } else {
                            if (inQuotes === false) {
                                inQuotes = token;
                            } else {
                                if (inQuotes !== token) {
                                    invalid = true;
                                    break;
                                }

                                inQuotes = false;
                            }
                        }
                    }
                }

                if (inQuotes) {
                    invalid = true;
                }

                if (!invalid) {
                    if (idx !== str.length) {
                        invalid = true;
                    } else if (month === 2) {
                        if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) {
                            if (date > 29) {
                                invalid = true;
                            }
                        } else if (date > 28) {
                            invalid = true;
                        }
                    } else if ((month === 4) || (month === 6) || (month === 9) || (month === 11)) {
                        if (date > 30) {
                            invalid = true;
                        }
                    }
                }

                if (invalid) {
                    if (silent) {
                        return null;
                    }

                    throw new System.FormatException.$ctor1("String does not contain a valid string representation of a date and time.");
                }

                if (tt) {
                    if (hh < 12 && tt === pm) {
                        hh = hh - 0 + 12;
                    } else if (hh > 11 && tt === am) {
                        hh -= 12;
                    }
                }

                var d = this.create(year, month, date, hh, mm, ss, ff, kind);

                if (kind === 2) {
                    if (adjust === true) {
                        d = new Date(d.getTime() - this.$getTzOffset(d));
                        d.kind = kind;
                    } else if (offset !== 0) {
                        d = new Date(d.getTime() - this.$getTzOffset(d));
                        d = this.addMilliseconds(d, -offset);
                        d.kind = kind;
                    }
                }

                return d;
            },

            subparseInt: function (str, index, min, max) {
                var x,
                    token;

                for (x = max; x >= min; x--) {
                    token = str.substring(index, index + x);

                    if (token.length < min) {
                        return null;
                    }

                    if (/^\d+$/.test(token)) {
                        return token;
                    }
                }

                return null;
            },

            tryParse: function (value, provider, result, utc) {
                result.v = this.parse(value, provider, utc, true);

                if (result.v == null) {
                    result.v = this.getMinValue();

                    return false;
                }

                return true;
            },

            tryParseExact: function (v, f, p, r, utc) {
                r.v = this.parseExact(v, f, p, utc, true);

                if (r.v == null) {
                    r.v = this.getMinValue();

                    return false;
                }

                return true;
            },

            isDaylightSavingTime: function (d) {
                if (d.kind !== undefined && d.kind === 1) {
                    return false;
                }

                var tmp = new Date(d.getTime());

                tmp.setMonth(0);
                tmp.setDate(1);

                return tmp.getTimezoneOffset() !== d.getTimezoneOffset();
            },

            dateAddSubTimeSpan: function (d, t, direction) {
                return Bridge.hasValue$1(d, t) ? this.create$2(this.getTicks(d).add(t.getTicks().mul(direction)), d.kind) : null;
            },

            subdt: function (d, t) {
                return this.dateAddSubTimeSpan(d, t, -1);
            },

            adddt: function (d, t) {
                return this.dateAddSubTimeSpan(d, t, 1);
            },

            subdd: function (a, b) {
                return Bridge.hasValue$1(a, b) ? (new System.TimeSpan((this.getTicks(a).sub(this.getTicks(b))))) : null;
            },

            addYears: function (d, v) {
                return this.addMonths(d, v * 12);
            },

            addMonths: function (d, v) {
                var dt = new Date(d.getTime()),
                    day = d.getDate();

                dt.setDate(1);
                dt.setMonth(dt.getMonth() + v * 1);
                dt.setDate(Math.min(day, this.getDaysInMonth(dt.getFullYear(), dt.getMonth() + 1)));
                dt.kind = (d.kind !== undefined) ? d.kind : 0;

                return dt;
            },

            addDays: function (d, v) {
                var d1 = new Date(d.getTime());

                d1.setDate(d1.getDate() + Math.floor(v));
                d1.kind = (d.kind !== undefined) ? d.kind : 0;

                return v % 1 !== 0 ? this.addMilliseconds(d1, Math.round((v % 1) * 864e5)) : d1;
            },

            addHours: function (d, v) {
                return this.addMilliseconds(d, Math.round(v * 36e5));
            },

            addMinutes: function (d, v) {
                return this.addMilliseconds(d, Math.round(v * 6e4));
            },

            addSeconds: function (d, v) {
                return this.addMilliseconds(d, Math.round(v * 1e3));
            },

            addMilliseconds: function (d, v) {
                v = System.Int64.is64Bit(v) ? v : System.Int64(v);

                return System.DateTime.addTicks(d, v.mul(10000));
            },

            addTicks: function (d, v) {
                v = System.Int64.is64Bit(v) ? v : System.Int64(v);

                return this.create$2(this.getTicks(d).add(v), d.kind);
            },

            add: function (d, value) {
                return this.addTicks(d, value.getTicks());
            },

            subtract: function (d, value) {
                return this.addTicks(d, value.getTicks().mul(-1));
            },

            // Replaced leap year calculation for performance:
            // https://jsperf.com/leapyear-calculation/1
            getIsLeapYear: function (year) {
                if ((year & 3) != 0) {
                    return false;
                }

                return ((year % 100) != 0 || (year % 400) == 0);
            },

            getDaysInMonth: function (year, month) {
                return [31, (this.getIsLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];
            },

            $clearTime: function (d, isUTC) {
                var dt = new Date(d.getTime());

                if (isUTC === true) {
                    dt.setUTCHours(0);
                    dt.setUTCMinutes(0);
                    dt.setUTCSeconds(0);
                    dt.setUTCMilliseconds(0);
                } else {
                    dt.setHours(0);
                    dt.setMinutes(0);
                    dt.setSeconds(0);
                    dt.setMilliseconds(0);
                }

                return dt;
            },

            // Optimized as per: https://jsperf.com/get-day-of-year
            getDayOfYear: function (d) {
                var dt = this.getDate(d),
                    mn = dt.getMonth(),
                    dn = dt.getDate(),
                    dayOfYear = this.YearDaysByMonth[mn] + dn;

                if (mn > 1 && this.getIsLeapYear(dt.getFullYear())) {
                    dayOfYear++;
                }

                return dayOfYear;
            },

            getDate: function (d) {
                d.kind = (d.kind !== undefined) ? d.kind : 0

                var d1 = this.$clearTime(d, d.kind === 1);

                d1.kind = d.kind;

                return d1;
            },

            getDayOfWeek: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCDay() : d.getDay();
            },

            getYear: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCFullYear() : d.getFullYear();
            },

            getMonth: function (d) {
                return ((this.getKind(d) === 1) ? d.getUTCMonth() : d.getMonth()) + 1;
            },

            getDay: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCDate() : d.getDate();
            },

            getHour: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCHours() : d.getHours();
            },

            getMinute: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCMinutes() : d.getMinutes();
            },

            getSecond: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCSeconds() : d.getSeconds();
            },

            getMillisecond: function (d) {
                return (this.getKind(d) === 1) ? d.getUTCMilliseconds() : d.getMilliseconds();
            },

            gt: function (a, b) {
                return (a != null && b != null) ? (this.getTicks(a).gt(this.getTicks(b))) : false;
            },

            gte: function (a, b) {
                return (a != null && b != null) ? (this.getTicks(a).gte(this.getTicks(b))) : false;
            },

            lt: function (a, b) {
                return (a != null && b != null) ? (this.getTicks(a).lt(this.getTicks(b))) : false;
            },

            lte: function (a, b) {
                return (a != null && b != null) ? (this.getTicks(a).lte(this.getTicks(b))) : false;
            }
        }
    });

    // @source TimeSpan.js

    Bridge.define("System.TimeSpan", {
        inherits: [System.IComparable],

        config: {
            alias: [
                "compareTo", ["System$IComparable$compareTo", "System$IComparable$1$compareTo", "System$IComparable$1System$TimeSpan$compareTo"]
            ]
        },

        $kind: "struct",
        statics: {
            fromDays: function (value) {
                return new System.TimeSpan(value * 864e9);
            },

            fromHours: function (value) {
                return new System.TimeSpan(value * 36e9);
            },

            fromMilliseconds: function (value) {
                return new System.TimeSpan(value * 1e4);
            },

            fromMinutes: function (value) {
                return new System.TimeSpan(value * 6e8);
            },

            fromSeconds: function (value) {
                return new System.TimeSpan(value * 1e7);
            },

            fromTicks: function (value) {
                return new System.TimeSpan(value);
            },

            ctor: function () {
                this.zero = new System.TimeSpan(System.Int64.Zero);
                this.maxValue = new System.TimeSpan(System.Int64.MaxValue);
                this.minValue = new System.TimeSpan(System.Int64.MinValue);
            },

            getDefaultValue: function () {
                return new System.TimeSpan(System.Int64.Zero);
            },

            neg: function (t) {
                return Bridge.hasValue(t) ? (new System.TimeSpan(t.ticks.neg())) : null;
            },

            sub: function (t1, t2) {
                return Bridge.hasValue$1(t1, t2) ? (new System.TimeSpan(t1.ticks.sub(t2.ticks))) : null;
            },

            eq: function (t1, t2) {
                if (t1 === null && t2 === null) {
                    return true;
                }

                return Bridge.hasValue$1(t1, t2) ? (t1.ticks.eq(t2.ticks)) : false;
            },

            neq: function (t1, t2) {
                if (t1 === null && t2 === null) {
                    return false;
                }

                return Bridge.hasValue$1(t1, t2) ? (t1.ticks.ne(t2.ticks)) : true;
            },

            plus: function (t) {
                return Bridge.hasValue(t) ? (new System.TimeSpan(t.ticks)) : null;
            },

            add: function (t1, t2) {
                return Bridge.hasValue$1(t1, t2) ? (new System.TimeSpan(t1.ticks.add(t2.ticks))) : null;
            },

            gt: function (a, b) {
                return Bridge.hasValue$1(a, b) ? (a.ticks.gt(b.ticks)) : false;
            },

            gte: function (a, b) {
                return Bridge.hasValue$1(a, b) ? (a.ticks.gte(b.ticks)) : false;
            },

            lt: function (a, b) {
                return Bridge.hasValue$1(a, b) ? (a.ticks.lt(b.ticks)) : false;
            },

            lte: function (a, b) {
                return Bridge.hasValue$1(a, b) ? (a.ticks.lte(b.ticks)) : false;
            },

            timeSpanWithDays: /^(\-)?(\d+)[\.|:](\d+):(\d+):(\d+)(\.\d+)?/,
            timeSpanNoDays: /^(\-)?(\d+):(\d+):(\d+)(\.\d+)?/,

            parse: function(value) {
                var match,
                    milliseconds;

                function parseMilliseconds(value) {
                    return value ? parseFloat('0' + value) * 1000 : 0;
                }

                if ((match = value.match(System.TimeSpan.timeSpanWithDays))) {
                    var ts = new System.TimeSpan(match[2], match[3], match[4], match[5], parseMilliseconds(match[6]));

                    return match[1] ? new System.TimeSpan(ts.ticks.neg()) : ts;
                }

                if ((match = value.match(System.TimeSpan.timeSpanNoDays))) {
                    var ts = new System.TimeSpan(0, match[2], match[3], match[4], parseMilliseconds(match[5]));

                    return match[1] ? new System.TimeSpan(ts.ticks.neg()) : ts;
                }

                return null;
            },

            tryParse: function (value, provider, result) {
                result.v = this.parse(value);

                if (result.v == null) {
                    result.v = this.minValue;

                    return false;
                }

                return true;
            }
        },

        ctor: function () {
            this.$initialize();
            this.ticks = System.Int64.Zero;

            if (arguments.length === 1) {
                this.ticks = arguments[0] instanceof System.Int64 ? arguments[0] : new System.Int64(arguments[0]);
            } else if (arguments.length === 3) {
                this.ticks = new System.Int64(arguments[0]).mul(60).add(arguments[1]).mul(60).add(arguments[2]).mul(1e7);
            } else if (arguments.length === 4) {
                this.ticks = new System.Int64(arguments[0]).mul(24).add(arguments[1]).mul(60).add(arguments[2]).mul(60).add(arguments[3]).mul(1e7);
            } else if (arguments.length === 5) {
                this.ticks = new System.Int64(arguments[0]).mul(24).add(arguments[1]).mul(60).add(arguments[2]).mul(60).add(arguments[3]).mul(1e3).add(arguments[4]).mul(1e4);
            }
        },

        TimeToTicks: function (hour, minute, second) {
            var totalSeconds = System.Int64(hour).mul("3600").add(System.Int64(minute).mul("60")).add(System.Int64(second));
            return totalSeconds.mul("10000000");
        },

        getTicks: function () {
            return this.ticks;
        },

        getDays: function () {
            return this.ticks.div(864e9).toNumber();
        },

        getHours: function () {
            return this.ticks.div(36e9).mod(24).toNumber();
        },

        getMilliseconds: function () {
            return this.ticks.div(1e4).mod(1e3).toNumber();
        },

        getMinutes: function () {
            return this.ticks.div(6e8).mod(60).toNumber();
        },

        getSeconds: function () {
            return this.ticks.div(1e7).mod(60).toNumber();
        },

        getTotalDays: function () {
            return this.ticks.toNumberDivided(864e9);
        },

        getTotalHours: function () {
            return this.ticks.toNumberDivided(36e9);
        },

        getTotalMilliseconds: function () {
            return this.ticks.toNumberDivided(1e4);
        },

        getTotalMinutes: function () {
            return this.ticks.toNumberDivided(6e8);
        },

        getTotalSeconds: function () {
            return this.ticks.toNumberDivided(1e7);
        },

        get12HourHour: function () {
            return (this.getHours() > 12) ? this.getHours() - 12 : (this.getHours() === 0) ? 12 : this.getHours();
        },

        add: function (ts) {
            return new System.TimeSpan(this.ticks.add(ts.ticks));
        },

        subtract: function (ts) {
            return new System.TimeSpan(this.ticks.sub(ts.ticks));
        },

        duration: function () {
            return new System.TimeSpan(this.ticks.abs());
        },

        negate: function () {
            return new System.TimeSpan(this.ticks.neg());
        },

        compareTo: function (other) {
            return this.ticks.compareTo(other.ticks);
        },

        equals: function (other) {
            return Bridge.is(other, System.TimeSpan) ? other.ticks.eq(this.ticks) : false;
        },

        equalsT: function (other) {
            return other.ticks.eq(this.ticks);
        },

        format: function (formatStr, provider) {
            return this.toString(formatStr, provider);
        },

        getHashCode: function () {
            return this.ticks.getHashCode();
        },

        toString: function (formatStr, provider) {
            var ticks = this.ticks,
                result = "",
                me = this,
                dtInfo = (provider || System.Globalization.CultureInfo.getCurrentCulture()).getFormat(System.Globalization.DateTimeFormatInfo),
                format = function (t, n, dir, cut) {
                    return System.String.alignString(Math.abs(t | 0).toString(), n || 2, "0", dir || 2, cut || false);
                },
                isNeg = ticks < 0;

            if (formatStr) {
                return formatStr.replace(/(\\.|'[^']*'|"[^"]*"|dd?|HH?|hh?|mm?|ss?|tt?|f{1,7}|\:|\/)/g,
                    function (match, group, index) {
                        var part = match;

                        switch (match) {
                            case "d":
                                return me.getDays();
                            case "dd":
                                return format(me.getDays());
                            case "H":
                                return me.getHours();
                            case "HH":
                                return format(me.getHours());
                            case "h":
                                return me.get12HourHour();
                            case "hh":
                                return format(me.get12HourHour());
                            case "m":
                                return me.getMinutes();
                            case "mm":
                                return format(me.getMinutes());
                            case "s":
                                return me.getSeconds();
                            case "ss":
                                return format(me.getSeconds());
                            case "t":
                                return ((me.getHours() < 12) ? dtInfo.amDesignator : dtInfo.pmDesignator).substring(0, 1);
                            case "tt":
                                return (me.getHours() < 12) ? dtInfo.amDesignator : dtInfo.pmDesignator;
                            case "f":
                            case "ff":
                            case "fff":
                            case "ffff":
                            case "fffff":
                            case "ffffff":
                            case "fffffff":
                                return format(me.getMilliseconds(), match.length, 1, true);
                            default:
                                return match.substr(1, match.length - 1 - (match.charAt(0) !== "\\"));
                        }
                    }
                );
            }

            if (ticks.abs().gte(864e9)) {
                result += format(ticks.toNumberDivided(864e9), 1) + ".";
                ticks = ticks.mod(864e9);
            }

            result += format(ticks.toNumberDivided(36e9)) + ":";
            ticks = ticks.mod(36e9);
            result += format(ticks.toNumberDivided(6e8) | 0) + ":";
            ticks = ticks.mod(6e8);
            result += format(ticks.toNumberDivided(1e7));
            ticks = ticks.mod(1e7);

            if (ticks.gt(0)) {
                result += "." + format(ticks.toNumber(), 7);
            }

            return (isNeg ? "-" : "") + result;
        }
    });

    Bridge.Class.addExtend(System.TimeSpan, [System.IComparable$1(System.TimeSpan), System.IEquatable$1(System.TimeSpan)]);

    // @source StringBuilder.js

    Bridge.define("System.Text.StringBuilder", {
        ctor: function () {
            this.$initialize();
            this.buffer = [],
            this.capacity = 16;

            if (arguments.length === 1) {
                this.append(arguments[0]);
            } else if (arguments.length === 2) {
                this.append(arguments[0]);
                this.setCapacity(arguments[1]);
            } else if (arguments.length >= 3) {
                this.append(arguments[0], arguments[1], arguments[2]);
                if (arguments.length === 4) {
                    this.setCapacity(arguments[3]);
                }
            }
        },

        getLength: function () {
            if (this.buffer.length < 2) {
                return this.buffer[0] ? this.buffer[0].length : 0;
            }

            var s = this.getString();

            return s.length;
        },

        setLength: function (value) {
            if (value === 0) {
                this.clear();
            } else if (value < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("value", "Length cannot be less than zero");
            } else {
                var l = this.getLength();

                if (value === l) {
                    return;
                }

                var delta = value - l;

                if (delta > 0) {
                    this.append("\0", delta);
                } else {
                    this.remove(l + delta, -delta);
                }
            }
        },

        getCapacity: function () {
            var length = this.getLength();

            return (this.capacity > length) ? this.capacity : length;
        },

        setCapacity: function (value) {
            var length = this.getLength();

            if (value > length) {
                this.capacity = value;
            }
        },

        toString: function () {
            var s = this.getString();

            if (arguments.length === 2) {
                var startIndex = arguments[0],
                    length = arguments[1];

                this.checkLimits(s, startIndex, length);

                return s.substr(startIndex, length);
            }

            return s;
        },

        append: function (value) {
            if (value == null) {
                return this;
            }

            if (arguments.length === 2) {
                // append a char repeated count times
                var count = arguments[1];

                if (count === 0) {
                    return this;
                } else if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "cannot be less than zero");
                }

                value = Array(count + 1).join(value).toString();
            } else if (arguments.length === 3) {
                // append a (startIndex, count) substring of value
                var startIndex = arguments[1],
                    count = arguments[2];

                if (count === 0) {
                    return this;
                }

                this.checkLimits(value, startIndex, count);
                value = value.substr(startIndex, count);
            }

            this.buffer[this.buffer.length] = value;
            this.clearString();

            return this;
        },

        appendFormat: function (format) {
            return this.append(System.String.format.apply(System.String, arguments));
        },

        clear: function () {
            this.buffer = [];
            this.clearString();

            return this;
        },

        appendLine: function () {
            if (arguments.length === 1) {
                this.append(arguments[0]);
            }

            return this.append("\r\n");
        },

        equals: function (sb) {
            if (sb == null) {
                return false;
            }

            if (sb === this) {
                return true;
            }

            return this.toString() === sb.toString();
        },

        remove: function (startIndex, length) {
            var s = this.getString();

            this.checkLimits(s, startIndex, length);

            if (s.length === length && startIndex === 0) {
                // Optimization.  If we are deleting everything
                return this.clear();
            }

            if (length > 0) {
                this.buffer = [];
                this.buffer[0] = s.substring(0, startIndex);
                this.buffer[1] = s.substring(startIndex + length, s.length);
                this.clearString();
            }

            return this;
        },

        insert: function (index, value) {
            if (value == null) {
                return this;
            }

            if (arguments.length === 3) {
                // insert value repeated count times
                var count = arguments[2];

                if (count === 0) {
                    return this;
                } else if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "cannot be less than zero");
                }

                value = Array(count + 1).join(value).toString();
            }

            var s = this.getString();

            this.buffer = [];

            if (index < 1) {
                this.buffer[0] = value;
                this.buffer[1] = s;
            } else if (index >= s.length) {
                this.buffer[0] = s;
                this.buffer[1] = value;
            } else {
                this.buffer[0] = s.substring(0, index);
                this.buffer[1] = value;
                this.buffer[2] = s.substring(index, s.length);
            }

            this.clearString();

            return this;
        },

        replace: function (oldValue, newValue) {
            var r = new RegExp(oldValue, "g"),
                s = this.buffer.join("");

            this.buffer = [];

            if (arguments.length === 4) {
                var startIndex = arguments[2],
                    count = arguments[3],
                    b = s.substr(startIndex, count);

                this.checkLimits(s, startIndex, count);

                this.buffer[0] = s.substring(0, startIndex);
                this.buffer[1] = b.replace(r, newValue);
                this.buffer[2] = s.substring(startIndex + count, s.length);
            } else {
                this.buffer[0] = s.replace(r, newValue);
            }

            this.clearString();
            return this;
        },

        checkLimits: function (value, startIndex, length) {
            if (length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("length", "must be non-negative");
            }

            if (startIndex < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "startIndex cannot be less than zero");
            }

            if (length > value.length - startIndex) {
                throw new System.ArgumentOutOfRangeException.$ctor4("Index and length must refer to a location within the string");
            }
        },

        clearString: function () {
            this.$str = null;
        },

        getString: function () {
            if (!this.$str) {
                this.$str = this.buffer.join("");
                this.buffer = [];
                this.buffer[0] = this.$str;
            }

            return this.$str;
        },

        getChar: function (index) {
            var str = this.getString();

            if (index < 0 || index >= str.length) {
                throw new System.IndexOutOfRangeException();
            }

            return str.charCodeAt(index);
        },

        setChar: function (index, value) {
            var str = this.getString();

            if (index < 0 || index >= str.length) {
                throw new System.ArgumentOutOfRangeException();
            }

            value = String.fromCharCode(value);
            this.buffer = [];
            this.buffer[0] = str.substring(0, index);
            this.buffer[1] = value;
            this.buffer[2] = str.substring(index + 1, str.length);
            this.clearString();
        }
    });

    // @source BridgeRegex.js

    (function () {
        var specials = [
                // order matters for these
                  "-"
                , "["
                , "]"
                // order doesn't matter for any of these
                , "/"
                , "{"
                , "}"
                , "("
                , ")"
                , "*"
                , "+"
                , "?"
                , "."
                , "\\"
                , "^"
                , "$"
                , "|"
        ],

        regex = RegExp("[" + specials.join("\\") + "]", "g"),

        regexpEscape = function (s) {
            return s.replace(regex, "\\$&");
        };

        Bridge.regexpEscape = regexpEscape;
    })();

    // @source DebugAssertException.js

    Bridge.define("System.Diagnostics.Debug.DebugAssertException", {
        inherits: [System.Exception],
        $kind: "nested class",
        ctors: {
            ctor: function (message, detailMessage, stackTrace) {
                this.$initialize();
                System.Exception.ctor.call(this, (message || "") + ("\n" || "") + (detailMessage || "") + ("\n" || "") + (stackTrace || ""));
            }
        }
    });

    // @source Debug.js

    Bridge.define("System.Diagnostics.Debug", {
        statics: {
            fields: {
                s_lock: null,
                s_indentLevel: 0,
                s_indentSize: 0,
                s_needIndent: false,
                s_indentString: null,
                s_ShowAssertDialog: null,
                s_WriteCore: null,
                s_shouldWriteToStdErr: false
            },
            props: {
                AutoFlush: {
                    get: function () {
                        return true;
                    },
                    set: function (value) { }
                },
                IndentLevel: {
                    get: function () {
                        return System.Diagnostics.Debug.s_indentLevel;
                    },
                    set: function (value) {
                        System.Diagnostics.Debug.s_indentLevel = value < 0 ? 0 : value;
                    }
                },
                IndentSize: {
                    get: function () {
                        return System.Diagnostics.Debug.s_indentSize;
                    },
                    set: function (value) {
                        System.Diagnostics.Debug.s_indentSize = value < 0 ? 0 : value;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.s_lock = { };
                    this.s_indentSize = 4;
                    this.s_ShowAssertDialog = System.Diagnostics.Debug.ShowAssertDialog;
                    this.s_WriteCore = System.Diagnostics.Debug.WriteCore;
                    this.s_shouldWriteToStdErr = Bridge.referenceEquals(System.Environment.GetEnvironmentVariable("COMPlus_DebugWriteToStdErr"), "1");
                }
            },
            methods: {
                Close: function () { },
                Flush: function () { },
                Indent: function () {
                    System.Diagnostics.Debug.IndentLevel = (System.Diagnostics.Debug.IndentLevel + 1) | 0;
                },
                Unindent: function () {
                    System.Diagnostics.Debug.IndentLevel = (System.Diagnostics.Debug.IndentLevel - 1) | 0;
                },
                Print: function (message) {
                    System.Diagnostics.Debug.Write$2(message);
                },
                Print$1: function (format, args) {
                    if (args === void 0) { args = []; }
                    System.Diagnostics.Debug.Write$2(System.String.formatProvider.apply(System.String, [null, format].concat(args)));
                },
                Assert: function (condition) {
                    System.Diagnostics.Debug.Assert$2(condition, "", "");
                },
                Assert$1: function (condition, message) {
                    System.Diagnostics.Debug.Assert$2(condition, message, "");
                },
                Assert$2: function (condition, message, detailMessage) {
                    if (!condition) {
                        var stackTrace;

                        try {
                            throw System.NotImplemented.ByDesign;
                        }
                        catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            stackTrace = "";
                        }

                        System.Diagnostics.Debug.WriteLine$2(System.Diagnostics.Debug.FormatAssert(stackTrace, message, detailMessage));
                        System.Diagnostics.Debug.s_ShowAssertDialog(stackTrace, message, detailMessage);
                    }
                },
                Assert$3: function (condition, message, detailMessageFormat, args) {
                    if (args === void 0) { args = []; }
                    System.Diagnostics.Debug.Assert$2(condition, message, System.String.format.apply(System.String, [detailMessageFormat].concat(args)));
                },
                Fail: function (message) {
                    System.Diagnostics.Debug.Assert$2(false, message, "");
                },
                Fail$1: function (message, detailMessage) {
                    System.Diagnostics.Debug.Assert$2(false, message, detailMessage);
                },
                FormatAssert: function (stackTrace, message, detailMessage) {
                    var newLine = (System.Diagnostics.Debug.GetIndentString() || "") + ("\n" || "");
                    return "---- DEBUG ASSERTION FAILED ----" + (newLine || "") + "---- Assert Short Message ----" + (newLine || "") + (message || "") + (newLine || "") + "---- Assert Long Message ----" + (newLine || "") + (detailMessage || "") + (newLine || "") + (stackTrace || "");
                },
                WriteLine$2: function (message) {
                    System.Diagnostics.Debug.Write$2((message || "") + ("\n" || ""));
                },
                WriteLine: function (value) {
                    System.Diagnostics.Debug.WriteLine$2(value != null ? Bridge.toString(value) : null);
                },
                WriteLine$1: function (value, category) {
                    System.Diagnostics.Debug.WriteLine$4(value != null ? Bridge.toString(value) : null, category);
                },
                WriteLine$3: function (format, args) {
                    if (args === void 0) { args = []; }
                    System.Diagnostics.Debug.WriteLine$2(System.String.formatProvider.apply(System.String, [null, format].concat(args)));
                },
                WriteLine$4: function (message, category) {
                    if (category == null) {
                        System.Diagnostics.Debug.WriteLine$2(message);
                    } else {
                        System.Diagnostics.Debug.WriteLine$2((category || "") + ":" + (message || ""));
                    }
                },
                Write$2: function (message) {
                    System.Diagnostics.Debug.s_lock;
                    {
                        if (message == null) {
                            System.Diagnostics.Debug.s_WriteCore("");
                            return;
                        }
                        if (System.Diagnostics.Debug.s_needIndent) {
                            message = (System.Diagnostics.Debug.GetIndentString() || "") + (message || "");
                            System.Diagnostics.Debug.s_needIndent = false;
                        }
                        System.Diagnostics.Debug.s_WriteCore(message);
                        if (System.String.endsWith(message, "\n")) {
                            System.Diagnostics.Debug.s_needIndent = true;
                        }
                    }
                },
                Write: function (value) {
                    System.Diagnostics.Debug.Write$2(value != null ? Bridge.toString(value) : null);
                },
                Write$3: function (message, category) {
                    if (category == null) {
                        System.Diagnostics.Debug.Write$2(message);
                    } else {
                        System.Diagnostics.Debug.Write$2((category || "") + ":" + (message || ""));
                    }
                },
                Write$1: function (value, category) {
                    System.Diagnostics.Debug.Write$3(value != null ? Bridge.toString(value) : null, category);
                },
                WriteIf$2: function (condition, message) {
                    if (condition) {
                        System.Diagnostics.Debug.Write$2(message);
                    }
                },
                WriteIf: function (condition, value) {
                    if (condition) {
                        System.Diagnostics.Debug.Write(value);
                    }
                },
                WriteIf$3: function (condition, message, category) {
                    if (condition) {
                        System.Diagnostics.Debug.Write$3(message, category);
                    }
                },
                WriteIf$1: function (condition, value, category) {
                    if (condition) {
                        System.Diagnostics.Debug.Write$1(value, category);
                    }
                },
                WriteLineIf: function (condition, value) {
                    if (condition) {
                        System.Diagnostics.Debug.WriteLine(value);
                    }
                },
                WriteLineIf$1: function (condition, value, category) {
                    if (condition) {
                        System.Diagnostics.Debug.WriteLine$1(value, category);
                    }
                },
                WriteLineIf$2: function (condition, message) {
                    if (condition) {
                        System.Diagnostics.Debug.WriteLine$2(message);
                    }
                },
                WriteLineIf$3: function (condition, message, category) {
                    if (condition) {
                        System.Diagnostics.Debug.WriteLine$4(message, category);
                    }
                },
                GetIndentString: function () {
                    var $t;
                    var indentCount = Bridge.Int.mul(System.Diagnostics.Debug.IndentSize, System.Diagnostics.Debug.IndentLevel);
                    if (System.Nullable.eq((System.Diagnostics.Debug.s_indentString != null ? System.Diagnostics.Debug.s_indentString.length : null), indentCount)) {
                        return System.Diagnostics.Debug.s_indentString;
                    }
                    return ($t = System.String.fromCharCount(32, indentCount), System.Diagnostics.Debug.s_indentString = $t, $t);
                },
                ShowAssertDialog: function (stackTrace, message, detailMessage) {
                    if (System.Diagnostics.Debugger.IsAttached) {
                        debugger;
                    } else {
                        var ex = new System.Diagnostics.Debug.DebugAssertException(message, detailMessage, stackTrace);
                        System.Environment.FailFast$1(ex.Message, ex);
                    }
                },
                WriteCore: function (message) {
                    System.Diagnostics.Debug.WriteToDebugger(message);

                    if (System.Diagnostics.Debug.s_shouldWriteToStdErr) {
                        System.Diagnostics.Debug.WriteToStderr(message);
                    }
                },
                WriteToDebugger: function (message) {
                    if (System.Diagnostics.Debugger.IsLogging()) {
                        System.Diagnostics.Debugger.Log(0, null, message);
                    } else {
                        System.Console.WriteLine(message);

                    }
                },
                WriteToStderr: function (message) {
                    System.Console.WriteLine(message);







                }
            }
        }
    });

    // @source Debugger.js

    Bridge.define("System.Diagnostics.Debugger", {
        statics: {
            fields: {
                DefaultCategory: null
            },
            props: {
                IsAttached: {
                    get: function () {
                        return true;
                    }
                }
            },
            methods: {
                IsLogging: function () {
                    return true;
                },
                Launch: function () {
                    return true;
                },
                Log: function (level, category, message) { },
                NotifyOfCrossThreadDependency: function () { }
            }
        }
    });

    // @source Diagnostics.js

    Bridge.define("System.Diagnostics.Stopwatch", {
        ctor: function () {
            this.$initialize();
            this.reset();
        },

        start: function () {
            if (this.isRunning) {
                return;
            }

            this._startTime = System.Diagnostics.Stopwatch.getTimestamp();
            this.isRunning = true;
        },

        stop: function () {
            if (!this.isRunning) {
                return;
            }

            var endTimeStamp = System.Diagnostics.Stopwatch.getTimestamp();
            var elapsedThisPeriod = endTimeStamp.sub(this._startTime);
            this._elapsed = this._elapsed.add(elapsedThisPeriod);
            this.isRunning = false;
        },

        reset: function () {
            this._startTime = System.Int64.Zero;
            this._elapsed = System.Int64.Zero;
            this.isRunning = false;
        },

        restart: function () {
            this.isRunning = false;
            this._elapsed = System.Int64.Zero;
            this._startTime = System.Diagnostics.Stopwatch.getTimestamp();
            this.start();
        },

        ticks: function () {
            var timeElapsed = this._elapsed;

            if (this.isRunning)
            {
                var currentTimeStamp = System.Diagnostics.Stopwatch.getTimestamp();
                var elapsedUntilNow = currentTimeStamp.sub(this._startTime);

                timeElapsed = timeElapsed.add(elapsedUntilNow);
            }

            return timeElapsed;
        },

        milliseconds: function () {
            return this.ticks().mul(1000).div(System.Diagnostics.Stopwatch.frequency);
        },

        timeSpan: function () {
            return new System.TimeSpan(this.milliseconds().mul(10000));
        },

        statics: {
            startNew: function () {
                var s = new System.Diagnostics.Stopwatch();
                s.start();

                return s;
            }
        }
    });

if (typeof window !== 'undefined' && window.performance && window.performance.now) {
        System.Diagnostics.Stopwatch.frequency = new System.Int64(1e6);
        System.Diagnostics.Stopwatch.isHighResolution = true;
        System.Diagnostics.Stopwatch.getTimestamp = function () {
            return new System.Int64(Math.round(window.performance.now() * 1000));
        };
    } else if (typeof (process) !== "undefined" && process.hrtime) {
        System.Diagnostics.Stopwatch.frequency = new System.Int64(1e9);
        System.Diagnostics.Stopwatch.isHighResolution = true;
        System.Diagnostics.Stopwatch.getTimestamp = function () {
            var hr = process.hrtime();
            return new System.Int64(hr[0]).mul(1e9).add(hr[1]);
        };
    } else {
        System.Diagnostics.Stopwatch.frequency = new System.Int64(1e3);
        System.Diagnostics.Stopwatch.isHighResolution = false;
        System.Diagnostics.Stopwatch.getTimestamp = function () {
            return new System.Int64(new Date().valueOf());
        };
    }

    System.Diagnostics.Contracts.Contract = {
        reportFailure: function (failureKind, userMessage, condition, innerException, TException) {
            var conditionText = condition.toString();

            conditionText = conditionText.substring(conditionText.indexOf("return") + 7);
            conditionText = conditionText.substr(0, conditionText.lastIndexOf(";"));

            var failureMessage = (conditionText) ? "Contract '" + conditionText + "' failed" : "Contract failed",
                displayMessage = (userMessage) ? failureMessage + ": " + userMessage : failureMessage;

            if (TException) {
                throw new TException(conditionText, userMessage);
            } else {
                throw new System.Diagnostics.Contracts.ContractException(failureKind, displayMessage, userMessage, conditionText, innerException);
            }
        },
        assert: function (failureKind, scope, condition, message) {
            if (!condition.call(scope)) {
                System.Diagnostics.Contracts.Contract.reportFailure(failureKind, message, condition, null);
            }
        },
        requires: function (TException, scope, condition, message) {
            if (!condition.call(scope)) {
                System.Diagnostics.Contracts.Contract.reportFailure(0, message, condition, null, TException);
            }
        },
        forAll: function (fromInclusive, toExclusive, predicate) {
            if (!predicate) {
                throw new System.ArgumentNullException.$ctor1("predicate");
            }

            for (; fromInclusive < toExclusive; fromInclusive++) {
                if (!predicate(fromInclusive)) {
                    return false;
                }
            }

            return true;
        },
        forAll$1: function (collection, predicate) {
            if (!collection) {
                throw new System.ArgumentNullException.$ctor1("collection");
            }

            if (!predicate) {
                throw new System.ArgumentNullException.$ctor1("predicate");
            }

            var enumerator = Bridge.getEnumerator(collection);

            try {
                while (enumerator.moveNext()) {
                    if (!predicate(enumerator.Current)) {
                        return false;
                    }
                }

                return true;
            } finally {
                enumerator.Dispose();
            }
        },
        exists: function (fromInclusive, toExclusive, predicate) {
            if (!predicate) {
                throw new System.ArgumentNullException.$ctor1("predicate");
            }

            for (; fromInclusive < toExclusive; fromInclusive++) {
                if (predicate(fromInclusive)) {
                    return true;
                }
            }

            return false;
        },
        exists$1: function (collection, predicate) {
            if (!collection) {
                throw new System.ArgumentNullException.$ctor1("collection");
            }

            if (!predicate) {
                throw new System.ArgumentNullException.$ctor1("predicate");
            }

            var enumerator = Bridge.getEnumerator(collection);

            try {
                while (enumerator.moveNext()) {
                    if (predicate(enumerator.Current)) {
                        return true;
                    }
                }

                return false;
            } finally {
                enumerator.Dispose();
            }
        }
    };

    Bridge.define("System.Diagnostics.Contracts.ContractFailureKind", {
        $kind: "enum",
        $statics: {
            precondition: 0,
            postcondition: 1,
            postconditionOnException: 2,
            invarian: 3,
            assert: 4,
            assume: 5
        }
    });

    Bridge.define("System.Diagnostics.Contracts.ContractException", {
        inherits: [System.Exception],

        config: {
            properties: {
                Kind: {
                    get: function () {
                        return this._kind;
                    }
                },

                Failure: {
                    get: function () {
                        return this._failureMessage;
                    }
                },

                UserMessage: {
                    get: function () {
                        return this._userMessage;
                    }
                },

                Condition: {
                    get: function () {
                        return this._condition;
                    }
                }
            }
        },

        ctor: function (failureKind, failureMessage, userMessage, condition, innerException) {
            this.$initialize();
            System.Exception.ctor.call(this, failureMessage, innerException);
            this._kind = failureKind;
            this._failureMessage = failureMessage || null;
            this._userMessage = userMessage || null;
            this._condition = condition || null;
        }
    });

    // @source Array.js

    var array = {
        toIndex: function (arr, indices) {
            if (indices.length !== (arr.$s ? arr.$s.length : 1)) {
                throw new System.ArgumentException.$ctor1("Invalid number of indices");
            }

            if (indices[0] < 0 || indices[0] >= (arr.$s ? arr.$s[0] : arr.length)) {
                throw new System.IndexOutOfRangeException.$ctor1("Index 0 out of range");
            }

            var idx = indices[0],
                i;

            if (arr.$s) {
                for (i = 1; i < arr.$s.length; i++) {
                    if (indices[i] < 0 || indices[i] >= arr.$s[i]) {
                        throw new System.IndexOutOfRangeException.$ctor1("Index " + i + " out of range");
                    }

                    idx = idx * arr.$s[i] + indices[i];
                }
            }

            return idx;
        },

        index: function (index, arr) {
            if (index < 0 || index >= arr.length) {
                throw new System.IndexOutOfRangeException();
            }
            return index;
        },

        $get: function (indices) {
            var r = this[System.Array.toIndex(this, indices)];

            return typeof r !== "undefined" ? r : this.$v;
        },

        get: function (arr) {
            if (arguments.length < 2) {
                throw new System.ArgumentNullException.$ctor1("indices");
            }

            var idx = Array.prototype.slice.call(arguments, 1);

            for (var i = 0; i < idx.length; i++) {
                if (!Bridge.hasValue(idx[i])) {
                    throw new System.ArgumentNullException.$ctor1("indices");
                }
            }

            var r = arr[System.Array.toIndex(arr, idx)];

            return typeof r !== "undefined" ? r : arr.$v;
        },

        $set: function (indices, value) {
            this[System.Array.toIndex(this, indices)] = value;
        },

        set: function (arr, value) {
            var indices = Array.prototype.slice.call(arguments, 2);

            arr[System.Array.toIndex(arr, indices)] = value;
        },

        getLength: function (arr, dimension) {
            if (dimension < 0 || dimension >= (arr.$s ? arr.$s.length : 1)) {
                throw new System.IndexOutOfRangeException();
            }

            return arr.$s ? arr.$s[dimension] : arr.length;
        },

        getRank: function (arr) {
            return arr.$type ? arr.$type.$rank : (arr.$s ? arr.$s.length : 1);
        },

        getLower: function (arr, d) {
            System.Array.getLength(arr, d);

            return 0;
        },

        create: function (defvalue, initValues, T, sizes) {
            if (sizes === null) {
                throw new System.ArgumentNullException.$ctor1("length");
            }

            var arr = [],
                length = arguments.length > 3 ? 1 : 0,
                i, s, v, j,
                idx,
                indices,
                flatIdx;

            arr.$v = defvalue;
            arr.$s = [];
            arr.get = System.Array.$get;
            arr.set = System.Array.$set;

            if (sizes && Bridge.isArray(sizes)) {
                for (i = 0; i < sizes.length; i++) {
                    j = sizes[i];

                    if (isNaN(j) || j < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("length");
                    }

                    length *= j;
                    arr.$s[i] = j;
                }
            } else {
                for (i = 3; i < arguments.length; i++) {
                    j = arguments[i];

                    if (isNaN(j) || j < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("length");
                    }

                    length *= j;
                    arr.$s[i - 3] = j;
                }
            }

            arr.length = length;
            var isFn = Bridge.isFunction(defvalue);

            for (var k = 0; k < length; k++) {
                arr[k] = isFn ? defvalue() : defvalue;
            }

            if (initValues) {
                for (i = 0; i < arr.length; i++) {
                    indices = [];
                    flatIdx = i;

                    for (s = arr.$s.length - 1; s >= 0; s--) {
                        idx = flatIdx % arr.$s[s];
                        indices.unshift(idx);
                        flatIdx = Bridge.Int.div(flatIdx - idx, arr.$s[s]);
                    }

                    v = initValues;

                    for (idx = 0; idx < indices.length; idx++) {
                        v = v[indices[idx]];
                    }

                    arr[i] = v;
                }
            }

            System.Array.init(arr, T, arr.$s.length);

            return arr;
        },

        init: function (length, value, T, addFn) {
            if (length == null) {
                throw new System.ArgumentNullException.$ctor1("length");
            }

            if (Bridge.isArray(length)) {
                var elementType = value,
                    rank = T || 1;

                System.Array.type(elementType, rank, length);

                return length;
            }

            if (isNaN(length) || length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor1("length");
            }

            var arr = new Array(length),
                isFn = addFn !== true && Bridge.isFunction(value);

            for (var i = 0; i < length; i++) {
                arr[i] = isFn ? value() : value;
            }

            return System.Array.init(arr, T, 1);
        },

        toEnumerable: function (array) {
            return new Bridge.ArrayEnumerable(array);
        },

        toEnumerator: function (array, T) {
            return new Bridge.ArrayEnumerator(array, T);
        },

        _typedArrays: {
            Float32Array: System.Single,
            Float64Array: System.Double,
            Int8Array: System.SByte,
            Int16Array: System.Int16,
            Int32Array: System.Int32,
            Uint8Array: System.Byte,
            Uint8ClampedArray: System.Byte,
            Uint16Array: System.UInt16,
            Uint32Array: System.UInt32
        },

        is: function (obj, type) {
            if (obj instanceof Bridge.ArrayEnumerator) {
                if ((obj.constructor === type) || (obj instanceof type) ||
                    type === Bridge.ArrayEnumerator ||
                    type.$$name && System.String.startsWith(type.$$name, "System.Collections.IEnumerator") ||
                    type.$$name && System.String.startsWith(type.$$name, "System.Collections.Generic.IEnumerator")) {
                    return true;
                }

                return false;
            }

            if (!Bridge.isArray(obj)) {
                return false;
            }

            if (type.$elementType && type.$isArray) {
                var et = Bridge.getType(obj).$elementType;

                if (et) {
                    return System.Array.getRank(obj) === type.$rank && Bridge.Reflection.isAssignableFrom(type.$elementType, et);
                }

                type = Array;
            }

            if ((obj.constructor === type) || (obj instanceof type)) {
                return true;
            }

            if (type === System.Collections.IEnumerable ||
                type === System.Collections.ICollection ||
                type === System.ICloneable ||
                type === System.Collections.IList ||
                type.$$name && System.String.startsWith(type.$$name, "System.Collections.Generic.IEnumerable$1") ||
                type.$$name && System.String.startsWith(type.$$name, "System.Collections.Generic.ICollection$1") ||
                type.$$name && System.String.startsWith(type.$$name, "System.Collections.Generic.IList$1") ||
                type.$$name && System.String.startsWith(type.$$name, "System.Collections.Generic.IReadOnlyCollection$1") ||
                type.$$name && System.String.startsWith(type.$$name, "System.Collections.Generic.IReadOnlyList$1")) {
                return true;
            }

            return !!System.Array._typedArrays[String.prototype.slice.call(Object.prototype.toString.call(obj), 8, -1)];
        },

        clone: function (arr) {
            var newArr;

            if (arr.length === 1) {
                newArr = [arr[0]];
            } else {
                newArr = arr.slice(0);
            }

            newArr.$type = arr.$type;
            newArr.$v = arr.$v;
            newArr.$s = arr.$s;
            newArr.get = System.Array.$get;
            newArr.set = System.Array.$set;

            return newArr;
        },

        getCount: function (obj, T) {
            var name,
                v;

            if (Bridge.isArray(obj)) {
                return obj.length;
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$getCount"])) {
                return obj[name]();
            } else if (Bridge.isFunction(obj[name = "System$Collections$ICollection$getCount"])) {
                return obj[name]();
            } else if (T && (v = obj["System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count"]) !== undefined) {
                return v;
            } else if ((v = obj["System$Collections$ICollection$Count"]) !== undefined) {
                return v;
            } else if ((v = obj.Count) !== undefined) {
                return v;
            } else if (Bridge.isFunction(obj.getCount)) {
                return obj.getCount();
            }

            return 0;
        },

        getIsReadOnly: function (obj, T) {
            var name,
                v;

            if (Bridge.isArray(obj)) {
                return T ? true : false;
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$getIsReadOnly"])) {
                return obj[name]();
            } else if (T && (v = obj["System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly"]) !== undefined) {
                return v;
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$getIsReadOnly"])) {
                return obj[name]();
            } else if ((v = obj["System$Collections$IList$IsReadOnly"]) !== undefined) {
                return v;
            } else if ((v = obj.IsReadOnly) !== undefined) {
                return v;
            } else if (Bridge.isFunction(obj.getIsReadOnly)) {
                return obj.getIsReadOnly();
            }

            return false;
        },

        checkReadOnly: function (obj, T, msg) {
            if (Bridge.isArray(obj)) {
                if (T) {
                    throw new System.NotSupportedException.$ctor1(msg || "Collection was of a fixed size.");
                }
            } else if (System.Array.getIsReadOnly(obj, T)) {
                throw new System.NotSupportedException.$ctor1(msg || "Collection is read-only.");
            }
        },

        add: function (obj, item, T) {
            var name;

            System.Array.checkReadOnly(obj, T);

            if (T) {
                item = System.Array.checkNewElementType(item, T);
            }

            if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add"])) {
                return obj[name](item);
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$add"])) {
                return obj[name](item);
            } else if (Bridge.isFunction(obj.add)) {
                return obj.add(item);
            }

            return -1;
        },

        checkNewElementType: function (v, type) {
            var unboxed = Bridge.unbox(v, true);

            if (Bridge.isNumber(unboxed)) {
                if (type === System.Decimal) {
                    return new System.Decimal(unboxed);
                }

                if (type === System.Int64) {
                    return new System.Int64(unboxed);
                }

                if (type === System.UInt64) {
                    return new System.UInt64(unboxed);
                }
            }

            var is = Bridge.is(v, type);

            if (!is) {
                if (v == null && Bridge.getDefaultValue(type) == null) {
                    return null;
                }

                throw new System.ArgumentException.$ctor1("The value " + unboxed + "is not of type " + Bridge.getTypeName(type) + " and cannot be used in this generic collection.");
            }

            return unboxed;
        },

        clear: function (obj, T) {
            var name;

            System.Array.checkReadOnly(obj, T, "Collection is read-only.");

            if (Bridge.isArray(obj)) {
                System.Array.fill(obj, T ? (T.getDefaultValue || Bridge.getDefaultValue(T)) : null, 0, obj.length);
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear"])) {
                obj[name]();
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$clear"])) {
                obj[name]();
            } else if (Bridge.isFunction(obj.clear)) {
                obj.clear();
            }
        },

        fill: function (dst, val, index, count) {
            if (!Bridge.hasValue(dst)) {
                throw new System.ArgumentNullException.$ctor1("dst");
            }

            if (index < 0 || count < 0 || (index + count) > dst.length) {
                throw new System.IndexOutOfRangeException();
            }

            var isFn = Bridge.isFunction(val);

            while (--count >= 0) {
                dst[index + count] = isFn ? val() : val;
            }
        },

        copy: function (src, spos, dest, dpos, len) {
            if (!dest) {
                throw new System.ArgumentNullException.$ctor3("dest", "Value cannot be null");
            }

            if (!src) {
                throw new System.ArgumentNullException.$ctor3("src", "Value cannot be null");
            }

            if (spos < 0 || dpos < 0 || len < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor1("bound", "Number was less than the array's lower bound in the first dimension");
            }

            if (len > (src.length - spos) || len > (dest.length - dpos)) {
                throw new System.ArgumentException.$ctor1("Destination array was not long enough. Check destIndex and length, and the array's lower bounds");
            }

            if (spos < dpos && src === dest) {
                while (--len >= 0) {
                    dest[dpos + len] = src[spos + len];
                }
            } else {
                for (var i = 0; i < len; i++) {
                    dest[dpos + i] = src[spos + i];
                }
            }
        },

        copyTo: function (obj, dest, index, T) {
            var name;

            if (Bridge.isArray(obj)) {
                System.Array.copy(obj, 0, dest, index, obj ? obj.length : 0);
            } else if (Bridge.isFunction(obj.copyTo)) {
                obj.copyTo(dest, index);
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo"])) {
                obj[name](dest, index);
            } else if (Bridge.isFunction(obj[name = "System$Collections$ICollection$copyTo"])) {
                obj[name](dest, index);
            } else {
                throw new System.NotImplementedException.$ctor1("copyTo");
            }
        },

        indexOf: function (arr, item, startIndex, count, T) {
            var name;

            if (Bridge.isArray(arr)) {
                var i,
                    el,
                    endIndex;

                startIndex = startIndex || 0;
                count = Bridge.isNumber(count) ? count : arr.length;
                endIndex = startIndex + count;

                for (i = startIndex; i < endIndex; i++) {
                    el = arr[i];

                    if (el === item || System.Collections.Generic.EqualityComparer$1.$default.equals2(el, item)) {
                        return i;
                    }
                }
            } else if (T && Bridge.isFunction(arr[name = "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf"])) {
                return arr[name](item);
            } else if (Bridge.isFunction(arr[name = "System$Collections$IList$indexOf"])) {
                return arr[name](item);
            } else if (Bridge.isFunction(arr.indexOf)) {
                return arr.indexOf(item);
            }

            return -1;
        },

        contains: function (obj, item, T) {
            var name;

            if (Bridge.isArray(obj)) {
                return System.Array.indexOf(obj, item) > -1;
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains"])) {
                return obj[name](item);
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$contains"])) {
                return obj[name](item);
            } else if (Bridge.isFunction(obj.contains)) {
                return obj.contains(item);
            }

            return false;
        },

        remove: function (obj, item, T) {
            var name;

            System.Array.checkReadOnly(obj, T);

            if (Bridge.isArray(obj)) {
                var index = System.Array.indexOf(obj, item);

                if (index > -1) {
                    obj.splice(index, 1);

                    return true;
                }
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove"])) {
                return obj[name](item);
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$remove"])) {
                return obj[name](item);
            } else if (Bridge.isFunction(obj.remove)) {
                return obj.remove(item);
            }

            return false;
        },

        insert: function (obj, index, item, T) {
            var name;

            System.Array.checkReadOnly(obj, T);

            if (T) {
                item = System.Array.checkNewElementType(item, T);
            }

            if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert"])) {
                obj[name](index, item);
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$insert"])) {
                obj[name](index, item);
            } else if (Bridge.isFunction(obj.insert)) {
                obj.insert(index, item);
            }
        },

        removeAt: function (obj, index, T) {
            var name;

            System.Array.checkReadOnly(obj, T);

            if (Bridge.isArray(obj)) {
                obj.splice(index, 1);
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt"])) {
                obj[name](index);
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$removeAt"])) {
                obj[name](index);
            } else if (Bridge.isFunction(obj.removeAt)) {
                obj.removeAt(index);
            }
        },

        getItem: function (obj, idx, T) {
            var name,
                v;

            if (Bridge.isArray(obj)) {
                return obj.$type && Bridge.getDefaultValue(obj.$type.$elementType) != null ? Bridge.box(obj[idx], obj.$type.$elementType) : obj[idx];
            } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem"])) {
                v = obj[name](idx);
                return v;
            } else if (Bridge.isFunction(obj.get)) {
                v = obj.get(idx);
            } else if (Bridge.isFunction(obj.getItem)) {
                v = obj.getItem(idx);
            } else if (Bridge.isFunction(obj[name = "System$Collections$IList$$getItem"])) {
                v = obj[name](idx);
            } else if (Bridge.isFunction(obj.get_Item)) {
                v = obj.get_Item(idx);
            }

            return T && Bridge.getDefaultValue(T) != null ? Bridge.box(v, T) : v;
        },

        setItem: function (obj, idx, value, T) {
            var name;

            if (Bridge.isArray(obj)) {
                if (obj.$type) {
                    value = System.Array.checkElementType(value, obj.$type.$elementType);
                }

                obj[idx] = value;
            } else {
                if (T) {
                    value = System.Array.checkElementType(value, T);
                }

                if (Bridge.isFunction(obj.set)) {
                    obj.set(idx, value);
                } else if (Bridge.isFunction(obj.setItem)) {
                    obj.setItem(idx, value);
                } else if (T && Bridge.isFunction(obj[name = "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem"])) {
                    return obj[name](idx, value);
                } else if (T && Bridge.isFunction(obj[name = "System$Collections$IList$setItem"])) {
                    return obj[name](idx, value);
                } else if (Bridge.isFunction(obj.set_Item)) {
                    obj.set_Item(idx, value);
                }
            }
        },

        checkElementType: function (v, type) {
            var unboxed = Bridge.unbox(v, true);

            if (Bridge.isNumber(unboxed)) {
                if (type === System.Decimal) {
                    return new System.Decimal(unboxed);
                }

                if (type === System.Int64) {
                    return new System.Int64(unboxed);
                }

                if (type === System.UInt64) {
                    return new System.UInt64(unboxed);
                }
            }

            var is = Bridge.is(v, type);

            if (!is) {
                if (v == null) {
                    return Bridge.getDefaultValue(type);
                }

                throw new System.ArgumentException.$ctor1("Cannot widen from source type to target type either because the source type is a not a primitive type or the conversion cannot be accomplished.");
            }

            return unboxed;
        },

        resize: function (arr, newSize, val) {
            if (newSize < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor3("newSize", newSize, "newSize cannot be less than 0.");
            }

            var oldSize = 0,
                isFn = Bridge.isFunction(val),
                ref = arr.v;

            if (!ref) {
                ref = new Array(newSize);
            } else {
                oldSize = ref.length;
                ref.length = newSize;
            }

            for (var i = oldSize; i < newSize; i++) {
                ref[i] = isFn ? val() : val;
            }

            arr.v = ref;
        },

        reverse: function (arr, index, length) {
            if (!array) {
                throw new System.ArgumentNullException.$ctor1("arr");
            }

            if (!index && index !== 0) {
                index = 0;
                length = arr.length;
            }

            if (index < 0 || length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4((index < 0 ? "index" : "length"), "Non-negative number required.");
            }

            if ((array.length - index) < length) {
                throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
            }

            if (System.Array.getRank(arr) !== 1) {
                throw new System.Exception("Only single dimension arrays are supported here.");
            }

            var i = index,
                j = index + length - 1;

            while (i < j) {
                var temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        },

        binarySearch: function (array, index, length, value, comparer) {
            if (!array) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            var lb = 0;

            if (index < lb || length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4(index < lb ? "index" : "length", "Non-negative number required.");
            }

            if (array.length - (index - lb) < length) {
                throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
            }

            if (System.Array.getRank(array) !== 1) {
                throw new System.RankException.$ctor1("Only single dimensional arrays are supported for the requested action.");
            }

            if (!comparer) {
                comparer = System.Collections.Generic.Comparer$1.$default;
            }

            var lo = index,
                hi = index + length - 1,
                i,
                c;

            while (lo <= hi) {
                i = lo + ((hi - lo) >> 1);

                try {
                    c = System.Collections.Generic.Comparer$1.get(comparer)(array[i], value);
                } catch (e) {
                    throw new System.InvalidOperationException.$ctor2("Failed to compare two elements in the array.", e);
                }

                if (c === 0) {
                    return i;
                }

                if (c < 0) {
                    lo = i + 1;
                } else {
                    hi = i - 1;
                }
            }

            return ~lo;
        },

        sort: function (array, index, length, comparer) {
            if (!array) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (arguments.length === 2 && typeof index === "function") {
                array.sort(index);
                return;
            }

            if (arguments.length === 2 && typeof index === "object") {
                comparer = index;
                index = null;
            }

            if (!Bridge.isNumber(index)) {
                index = 0;
            }

            if (!Bridge.isNumber(length)) {
                length = array.length;
            }

            if (!comparer) {
                comparer = System.Collections.Generic.Comparer$1.$default;
            }

            if (index === 0 && length === array.length) {
                array.sort(Bridge.fn.bind(comparer, System.Collections.Generic.Comparer$1.get(comparer)));
            } else {
                var newarray = array.slice(index, index + length);

                newarray.sort(Bridge.fn.bind(comparer, System.Collections.Generic.Comparer$1.get(comparer)));

                for (var i = index; i < (index + length) ; i++) {
                    array[i] = newarray[i - index];
                }
            }
        },

        min: function (arr, minValue) {
            var min = arr[0],
                len = arr.length;

            for (var i = 0; i < len; i++) {
                if ((arr[i] < min || min < minValue) && !(arr[i] < minValue)) {
                    min = arr[i];
                }
            }

            return min;
        },

        max: function (arr, maxValue) {
            var max = arr[0],
                len = arr.length;

            for (var i = 0; i < len; i++) {
                if ((arr[i] > max || max > maxValue) && !(arr[i] > maxValue)) {
                    max = arr[i];
                }
            }

            return max;
        },

        addRange: function (arr, items) {
            if (Bridge.isArray(items)) {
                arr.push.apply(arr, items);
            } else {
                var e = Bridge.getEnumerator(items);

                try {
                    while (e.moveNext()) {
                        arr.push(e.Current);
                    }
                } finally {
                    if (Bridge.is(e, System.IDisposable)) {
                        e.Dispose();
                    }
                }
            }
        },

        convertAll: function (array, converter) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (!Bridge.hasValue(converter)) {
                throw new System.ArgumentNullException.$ctor1("converter");
            }

            var array2 = array.map(converter);

            return array2;
        },

        find: function (T, array, match) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (!Bridge.hasValue(match)) {
                throw new System.ArgumentNullException.$ctor1("match");
            }

            for (var i = 0; i < array.length; i++) {
                if (match(array[i])) {
                    return array[i];
                }
            }

            return Bridge.getDefaultValue(T);
        },

        findAll: function (array, match) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (!Bridge.hasValue(match)) {
                throw new System.ArgumentNullException.$ctor1("match");
            }

            var list = [];

            for (var i = 0; i < array.length; i++) {
                if (match(array[i])) {
                    list.push(array[i]);
                }
            }

            return list;
        },

        findIndex: function (array, startIndex, count, match) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (arguments.length === 2) {
                match = startIndex;
                startIndex = 0;
                count = array.length;
            } else if (arguments.length === 3) {
                match = count;
                count = array.length - startIndex;
            }

            if (startIndex < 0 || startIndex > array.length) {
                throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
            }

            if (count < 0 || startIndex > array.length - count) {
                throw new System.ArgumentOutOfRangeException.$ctor1("count");
            }

            if (!Bridge.hasValue(match)) {
                throw new System.ArgumentNullException.$ctor1("match");
            }

            var endIndex = startIndex + count;

            for (var i = startIndex; i < endIndex; i++) {
                if (match(array[i])) {
                    return i;
                }
            }

            return -1;
        },

        findLast: function (T, array, match) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (!Bridge.hasValue(match)) {
                throw new System.ArgumentNullException.$ctor1("match");
            }

            for (var i = array.length - 1; i >= 0; i--) {
                if (match(array[i])) {
                    return array[i];
                }
            }

            return Bridge.getDefaultValue(T);
        },

        findLastIndex: function (array, startIndex, count, match) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (arguments.length === 2) {
                match = startIndex;
                startIndex = array.length - 1;
                count = array.length;
            } else if (arguments.length === 3) {
                match = count;
                count = startIndex + 1;
            }

            if (!Bridge.hasValue(match)) {
                throw new System.ArgumentNullException.$ctor1("match");
            }

            if (array.length === 0) {
                if (startIndex !== -1) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                }
            } else {
                if (startIndex < 0 || startIndex >= array.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                }
            }

            if (count < 0 || startIndex - count + 1 < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor1("count");
            }

            var endIndex = startIndex - count;

            for (var i = startIndex; i > endIndex; i--) {
                if (match(array[i])) {
                    return i;
                }
            }

            return -1;
        },

        forEach: function (array, action) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (!Bridge.hasValue(action)) {
                throw new System.ArgumentNullException.$ctor1("action");
            }

            for (var i = 0; i < array.length; i++) {
                action(array[i], i, array);
            }
        },

        indexOfT: function (array, value, startIndex, count) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (arguments.length === 2) {
                startIndex = 0;
                count = array.length;
            } else if (arguments.length === 3) {
                count = array.length - startIndex;
            }

            if (startIndex < 0 || (startIndex >= array.length && array.length > 0)) {
                throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "out of range");
            }

            if (count < 0 || count > array.length - startIndex) {
                throw new System.ArgumentOutOfRangeException.$ctor4("count", "out of range");
            }

            return System.Array.indexOf(array, value, startIndex, count);
        },

        isFixedSize: function (array) {
            return true;
        },

        isSynchronized: function (array) {
            return false;
        },

        lastIndexOfT: function (array, value, startIndex, count) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (arguments.length === 2) {
                startIndex = array.length - 1;
                count = array.length;
            } else if (arguments.length === 3) {
                count = (array.length === 0) ? 0 : (startIndex + 1);
            }

            if (startIndex < 0 || (startIndex >= array.length && array.length > 0)) {
                throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "out of range");
            }

            if (count < 0 || startIndex - count + 1 < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("count", "out of range");
            }

            var endIndex = startIndex - count + 1;

            for (var i = startIndex; i >= endIndex; i--) {
                var el = array[i];

                if (el === value || System.Collections.Generic.EqualityComparer$1.$default.equals2(el, value)) {
                    return i;
                }
            }

            return -1;
        },

        syncRoot: function (array) {
            return array;
        },

        trueForAll: function (array, match) {
            if (!Bridge.hasValue(array)) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (!Bridge.hasValue(match)) {
                throw new System.ArgumentNullException.$ctor1("match");
            }

            for (var i = 0; i < array.length; i++) {
                if (!match(array[i])) {
                    return false;
                }
            }

            return true;
        },

        type: function (t, rank, arr) {
            rank = rank || 1;

            var typeCache = System.Array.$cache[rank],
                result,
                name;

            if (!typeCache) {
                typeCache = [];
                System.Array.$cache[rank] = typeCache;
            }

            for (var i = 0; i < typeCache.length; i++) {
                if (typeCache[i].$elementType === t) {
                    result = typeCache[i];
                    break;
                }
            }

            if (!result) {
                name = Bridge.getTypeName(t) + "[" + System.String.fromCharCount(",".charCodeAt(0), rank - 1) + "]";

                var old = Bridge.Class.staticInitAllow;

                result = Bridge.define(name, {
                    $inherits: [Array, System.Collections.ICollection, System.ICloneable, System.Collections.Generic.IList$1(t), System.Collections.Generic.IReadOnlyCollection$1(t)],
                    $noRegister: true,
                    statics: {
                        $elementType: t,
                        $rank: rank,
                        $isArray: true,
                        $is: function (obj) {
                            return System.Array.is(obj, this);
                        },
                        getDefaultValue: function () {
                            return null;
                        },
                        createInstance: function () {
                            var arr;

                            if (this.$rank === 1) {
                                arr = [];
                            } else {
                                var args = [Bridge.getDefaultValue(this.$elementType), null, this.$elementType];

                                for (var j = 0; j < this.$rank; j++) {
                                    args.push(0);
                                }

                                arr = System.Array.create.apply(System.Array, args);
                            }

                            arr.$type = this;

                            return arr;
                        }
                    }
                });

                typeCache.push(result);

                Bridge.Class.staticInitAllow = true;

                if (result.$staticInit) {
                    result.$staticInit();
                }

                Bridge.Class.staticInitAllow = old;
            }

            if (arr) {
                arr.$type = result;
            }

            return arr || result;
        }
    };

    System.Array = array;
    System.Array.$cache = {};

    // @source ArraySegment.js

    Bridge.define("System.ArraySegment", {
        $kind: "struct",

        statics: {
            getDefaultValue: function () {
                return new System.ArraySegment();
            }
        },

        ctor: function (array, offset, count) {
            this.$initialize();

            if (arguments.length === 0) {
                this.array = null;
                this.offset = 0;
                this.count = 0;

                return;
            }

            if (array == null) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            this.array = array;

            if (Bridge.isNumber(offset)) {
                if (offset < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("offset");
                }

                this.offset = offset;
            } else {
                this.offset = 0;
            }

            if (Bridge.isNumber(count)) {
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                this.count = count;
            } else {
                this.count = array.length;
            }

            if (array.length - this.offset < this.count) {
                throw new ArgumentException();
            }
        },

        getArray: function () {
            return this.array;
        },

        getCount: function () {
            return this.count;
        },

        getOffset: function () {
            return this.offset;
        },

        getHashCode: function () {
            var h = Bridge.addHash([5322976039, this.array, this.count, this.offset]);

            return h;
        },

        equals: function (o) {
            if (!Bridge.is(o, System.ArraySegment)) {
                return false;
            }

            return Bridge.equals(this.array, o.array) && Bridge.equals(this.count, o.count) && Bridge.equals(this.offset, o.offset);
        },

        $clone: function (to) { return this; }
    });

    // @source KeyValuePair.js

    Bridge.define("System.Collections.Generic.KeyValuePair$2", function (TKey, TValue) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.KeyValuePair$2(TKey,TValue))(); }
            }
        },
        fields: {
            key$1: Bridge.getDefaultValue(TKey),
            value$1: Bridge.getDefaultValue(TValue)
        },
        props: {
            key: {
                get: function () {
                    return this.key$1;
                }
            },
            value: {
                get: function () {
                    return this.value$1;
                }
            }
        },
        ctors: {
            $ctor1: function (key, value) {
                this.$initialize();
                this.key$1 = key;
                this.value$1 = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                var s = System.Text.StringBuilderCache.Acquire();
                s.append(String.fromCharCode(91));
                if (this.key != null) {
                    s.append(Bridge.toString(this.key));
                }
                s.append(", ");
                if (this.value != null) {
                    s.append(Bridge.toString(this.value));
                }
                s.append(String.fromCharCode(93));
                return System.Text.StringBuilderCache.GetStringAndRelease(s);
            },
            Deconstruct: function (key, value) {
                key.v = this.key;
                value.v = this.value;
            },
            getHashCode: function () {
                var h = Bridge.addHash([5072499452, this.key$1, this.value$1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.KeyValuePair$2(TKey,TValue))) {
                    return false;
                }
                return Bridge.equals(this.key$1, o.key$1) && Bridge.equals(this.value$1, o.value$1);
            },
            $clone: function (to) { return this; }
        }
    }; });

    // @source Interfaces.js

    Bridge.define("System.Collections.IEnumerable", {
        $kind: "interface"
    });
    Bridge.define("System.Collections.ICollection", {
        inherits: [System.Collections.IEnumerable],
        $kind: "interface"
    });
    Bridge.define("System.Collections.IList", {
        inherits: [System.Collections.ICollection],
        $kind: "interface"
    });
    Bridge.define("System.Collections.IDictionary", {
        inherits: [System.Collections.ICollection],
        $kind: "interface"
    });

    Bridge.define("System.Collections.Generic.IEnumerable$1", function (T) {
        return {
            inherits: [System.Collections.IEnumerable],
            $kind: "interface",
            $variance: [1]
        };
    });

    Bridge.define("System.Collections.Generic.ICollection$1", function (T) {
        return {
            inherits: [System.Collections.Generic.IEnumerable$1(T)],
            $kind: "interface"
        };
    });

    Bridge.define("System.Collections.Generic.IEqualityComparer$1", function (T) {
        return {
            $kind: "interface",
            $variance: [2]
        };
    });

    Bridge.define("System.Collections.Generic.IDictionary$2", function (TKey, TValue) {
        return {
            inherits: [System.Collections.Generic.ICollection$1(System.Collections.Generic.KeyValuePair$2(TKey, TValue))],
            $kind: "interface"
        };
    });

    Bridge.define("System.Collections.Generic.IList$1", function (T) {
        return {
            inherits: [System.Collections.Generic.ICollection$1(T)],
            $kind: "interface"
        };
    });

    Bridge.define("System.Collections.Generic.ISet$1", function (T) {
        return {
            inherits: [System.Collections.Generic.ICollection$1(T)],
            $kind: "interface"
        };
    });

    Bridge.define("System.Collections.Generic.IReadOnlyCollection$1", function (T) {
        return {
            inherits: [System.Collections.Generic.IEnumerable$1(T)],
            $kind: "interface"
        };
    });

    Bridge.define("System.Collections.Generic.IReadOnlyList$1", function (T) {
        return {
            inherits: [System.Collections.Generic.IReadOnlyCollection$1(T)],
            $kind: "interface",
            $variance: [1]
        };
    });

    Bridge.define("System.Collections.Generic.IReadOnlyDictionary$2", function (TKey, TValue) {
        return {
            inherits: [System.Collections.Generic.IReadOnlyCollection$1(System.Collections.Generic.KeyValuePair$2(TKey, TValue))],
            $kind: "interface"
        };
    });

    // @source IEnumerator.js

    Bridge.define("System.Collections.IEnumerator", {
        $kind: "interface"
    });

    // @source IComparer.js

    Bridge.define("System.Collections.IComparer", {
        $kind: "interface"
    });

    // @source IDictionaryEnumerator.js

    Bridge.define("System.Collections.IDictionaryEnumerator", {
        inherits: [System.Collections.IEnumerator],
        $kind: "interface"
    });

    // @source IEqualityComparer.js

    Bridge.define("System.Collections.IEqualityComparer", {
        $kind: "interface"
    });

    // @source IStructuralComparable.js

    Bridge.define("System.Collections.IStructuralComparable", {
        $kind: "interface"
    });

    // @source IStructuralEquatable.js

    Bridge.define("System.Collections.IStructuralEquatable", {
        $kind: "interface"
    });

    // @source IEnumerator.js

    Bridge.definei("System.Collections.Generic.IEnumerator$1", function (T) { return {
        inherits: [System.IDisposable,System.Collections.IEnumerator],
        $kind: "interface",
        $variance: [1]
    }; });

    // @source IComparer.js

    Bridge.definei("System.Collections.Generic.IComparer$1", function (T) { return {
        $kind: "interface",
        $variance: [2]
    }; });

    // @source CustomEnumerator.js

    Bridge.define("Bridge.CustomEnumerator", {
        inherits: [System.Collections.IEnumerator, System.IDisposable],

        config: {
            properties: {
                Current: {
                    get: function () {
                        return this.getCurrent();
                    }
                },

                Current$1: {
                    get: function () {
                        return this.getCurrent();
                    }
                }
            },

            alias: [
                "getCurrent", "System$Collections$IEnumerator$getCurrent",
                "moveNext", "System$Collections$IEnumerator$moveNext",
                "reset", "System$Collections$IEnumerator$reset",
                "Dispose", "System$IDisposable$Dispose",
                "Current", "System$Collections$IEnumerator$Current"
            ]
        },

        ctor: function (moveNext, getCurrent, reset, dispose, scope, T) {
            this.$initialize();
            this.$moveNext = moveNext;
            this.$getCurrent = getCurrent;
            this.$Dispose = dispose;
            this.$reset = reset;
            this.scope = scope;

            if (T) {
                this["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$getCurrent$1"] = this.getCurrent;
                this["System$Collections$Generic$IEnumerator$1$getCurrent$1"] = this.getCurrent;

                Object.defineProperty(this, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", {
                    get: this.getCurrent,
                    enumerable: true
                });

                Object.defineProperty(this, "System$Collections$Generic$IEnumerator$1$Current$1", {
                    get: this.getCurrent,
                    enumerable: true
                });
            }
        },

        moveNext: function () {
            try {
                return this.$moveNext.call(this.scope);
            }
            catch (ex) {
                this.Dispose.call(this.scope);

                throw ex;
            }
        },

        getCurrent: function () {
            return this.$getCurrent.call(this.scope);
        },

        getCurrent$1: function () {
            return this.$getCurrent.call(this.scope);
        },

        reset: function () {
            if (this.$reset) {
                this.$reset.call(this.scope);
            }
        },

        Dispose: function () {
            if (this.$Dispose) {
                this.$Dispose.call(this.scope);
            }
        }
    });

    // @source ArrayEnumerator.js

    Bridge.define("Bridge.ArrayEnumerator", {
        inherits: [System.Collections.IEnumerator, System.IDisposable],

        statics: {
            $isArrayEnumerator: true
        },

        config: {
            properties: {
                Current: {
                    get: function () {
                        return this.getCurrent();
                    }
                },

                Current$1: {
                    get: function () {
                        return this.getCurrent();
                    }
                }
            },

            alias: [
                "getCurrent", "System$Collections$IEnumerator$getCurrent",
                "moveNext", "System$Collections$IEnumerator$moveNext",
                "reset", "System$Collections$IEnumerator$reset",
                "Dispose", "System$IDisposable$Dispose",
                "Current", "System$Collections$IEnumerator$Current"
            ]
        },

        ctor: function (array, T) {
            this.$initialize();
            this.array = array;
            this.reset();

            if (T) {
                this["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$getCurrent$1"] = this.getCurrent;
                this["System$Collections$Generic$IEnumerator$1$getCurrent$1"] = this.getCurrent;

                Object.defineProperty(this, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", {
                    get: this.getCurrent,
                    enumerable: true
                });

                Object.defineProperty(this, "System$Collections$Generic$IEnumerator$1$Current$1", {
                    get: this.getCurrent,
                    enumerable: true
                });
            }
        },

        moveNext: function () {
            this.index++;

            return this.index < this.array.length;
        },

        getCurrent: function () {
            return this.array[this.index];
        },

        getCurrent$1: function () {
            return this.array[this.index];
        },

        reset: function () {
            this.index = -1;
        },

        Dispose: Bridge.emptyFn
    });

    Bridge.define("Bridge.ArrayEnumerable", {
        inherits: [System.Collections.IEnumerable],

        config: {
            alias: [
                "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"
            ]
        },

        ctor: function (array) {
            this.$initialize();
            this.array = array;
        },

        GetEnumerator: function () {
            return new Bridge.ArrayEnumerator(this.array);
        }
    });

    // @source EqualityComparer.js

    Bridge.define("System.Collections.Generic.EqualityComparer$1", function (T) {
        return {
            inherits: [System.Collections.Generic.IEqualityComparer$1(T)],

            statics: {
                config: {
                    init: function () {
                        this.def = new (System.Collections.Generic.EqualityComparer$1(T))();
                    }
                }
            },

            config: {
                alias: [
                    "equals2", ["System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
                    "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
                ]
            },

            equals2: function (x, y) {
                if (!Bridge.isDefined(x, true)) {
                    return !Bridge.isDefined(y, true);
                } else if (Bridge.isDefined(y, true)) {
                    var isBridge = x && x.$$name;

                    if (Bridge.isFunction(x) && Bridge.isFunction(y)) {
                        return Bridge.fn.equals.call(x, y);
                    } else if (!isBridge || x && x.$boxed || y && y.$boxed) {
                        return Bridge.equals(x, y);
                    } else if (Bridge.isFunction(x.equalsT)) {
                        return Bridge.equalsT(x, y);
                    } else if (Bridge.isFunction(x.equals)) {
                        return Bridge.equals(x, y);
                    }

                    return x === y;
                }

                return false;
            },

            getHashCode2: function (obj) {
                return Bridge.isDefined(obj, true) ? Bridge.getHashCode(obj) : 0;
            }
        };
    });

    System.Collections.Generic.EqualityComparer$1.$default = new (System.Collections.Generic.EqualityComparer$1(System.Object))();

    // @source Comparer.js

    Bridge.define("System.Collections.Generic.Comparer$1", function (T) {
        return {
            inherits: [System.Collections.Generic.IComparer$1(T)],

            ctor: function (fn) {
                this.$initialize();
                this.fn = fn;
                this.compare = fn;
                this["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare"] = fn;
                this["System$Collections$Generic$IComparer$1$compare"] = fn;
            }
        }
    });

    System.Collections.Generic.Comparer$1.$default = new (System.Collections.Generic.Comparer$1(System.Object))(function (x, y) {
        if (!Bridge.hasValue(x)) {
            return !Bridge.hasValue(y) ? 0 : -1;
        } else if (!Bridge.hasValue(y)) {
            return 1;
        }

        return Bridge.compare(x, y);
    });

    System.Collections.Generic.Comparer$1.get = function (obj, T) {
        var m;

        if (T && (m = obj["System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare"])) {
            return m;
        }

        if (m = obj["System$Collections$Generic$IComparer$1$compare"]) {
            return m;
        }

        return obj.compare;
    };

    // @source Dictionary.js

    Bridge.define("System.Collections.Generic.Dictionary$2", function (TKey, TValue) {
        return {
            inherits: [System.Collections.Generic.IDictionary$2(TKey, TValue),
                System.Collections.IDictionary,
                System.Collections.Generic.IReadOnlyDictionary$2(TKey, TValue)],

            config: {
                properties: {
                    Keys: {
                        get: function () {
                            return this.getKeys();
                        }
                    },

                    Values: {
                        get: function () {
                            return this.getValues();
                        }
                    },

                    IsReadOnly: {
                        get: function () {
                            return this.getIsReadOnly();
                        }
                    }
                },
                alias: [
                    "getCount", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$getCount",
                    "getKeys", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getKeys",
                    "getValues", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getValues",
                    "Keys", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$Keys",
                    "Values", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$Values",
                    "get", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getItem",
                    "set", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$setItem",
                    "add", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$add",
                    "containsKey", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$containsKey",
                    "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$System$Collections$Generic$KeyValuePair$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
                    "remove", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$remove",
                    "tryGetValue", "System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$tryGetValue",
                    "getIsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$getIsReadOnly",
                    "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$IsReadOnly",
                    "addPair", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$add",
                    "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$copyTo",
                    "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$clear",
                    "containsPair", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$contains",
                    "removePair", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(System.Collections.Generic.KeyValuePair$2(TKey, TValue)) + "$remove",
                    "copyTo", "System$Collections$ICollection$copyTo",
                    "get", "System$Collections$IDictionary$getItem",
                    "set", "System$Collections$IDictionary$setItem",
                    "containsKey", "System$Collections$IDictionary$containsKey",
                    "add", "System$Collections$IDictionary$add",
                    "remove", "System$Collections$IDictionary$remove",
                    "getIsReadOnly", "System$Collections$IDictionary$getIsReadOnly",
                    "getKeys", "System$Collections$IDictionary$getKeys",
                    "getValues", "System$Collections$IDictionary$getValues",
                    "IsReadOnly", "System$Collections$IDictionary$IsReadOnly",
                    "Keys", "System$Collections$IDictionary$Keys",
                    "Values", "System$Collections$IDictionary$Values",
                    "get", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getItem",
                    "Keys", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$Keys",
                    "getKeys", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getKeys",
                    "getValues", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getValues",
                    "Values", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$Values",
                    "containsKey", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$containsKey",
                    "tryGetValue", "System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$tryGetValue"
                ]
            },

            noKeyCheck: false,

            ctor: function (obj, comparer) {
                this.$initialize();
                this.comparer = comparer || System.Collections.Generic.EqualityComparer$1(TKey).def;
                this.clear();
                this.isSimpleKey = ((TKey === System.String) || (TKey.$number === true && TKey !== System.Int64 && TKey !== System.UInt64) || (TKey === System.Char)) && (this.comparer === System.Collections.Generic.EqualityComparer$1(TKey).def);

                if (Bridge.is(obj, System.Collections.Generic.Dictionary$2(TKey, TValue))) {
                    var e = Bridge.getEnumerator(obj),
                        c;

                    while (e.moveNext()) {
                        c = e.Current;
                        this.add(c.key, c.value);
                    }
                } else if (Object.prototype.toString.call(obj) === "[object Object]") {
                    var names = Object.keys(obj),
                        name;

                    for (var i = 0; i < names.length; i++) {
                        name = names[i];
                        this.add(name, obj[name]);
                    }
                }
            },

            containsPair: function (pair) {
                var entry = this.findEntry(pair.key);

                return entry && this.comparer.equals2(entry.value, pair.value);
            },

            removePair: function (pair) {
                var entry = this.findEntry(pair.key);

                if (entry && this.comparer.equals2(entry.value, pair.value)) {
                    this.remove(pair.key);

                    return true;
                }

                return false;
            },

            copyTo: function (array, arrayIndex) {
                var items = System.Linq.Enumerable.from(this).ToArray();

                System.Array.copy(items, 0, array, arrayIndex, items.length);
            },

            getIsReadOnly: function () {
                return !!this.readOnly;
            },

            getKeys: function () {
                var keys = [];
                var entry;

                if (this.isSimpleKey) {
                    keys = this.keys
                } else {
                    for (var i = 0; i < this.keys.length; i++) {
                        entry = this.entries[this.keys[i]];

                        for (var j = 0; j < entry.length; j++) {
                            keys.push(entry[j].key);
                        }                       
                    }
                }

                return System.Array.init(keys, TKey);
            },

            getValues: function () {
                var values = [];
                var entry;

                if (this.isSimpleKey) {
                    for (var i = 0; i < this.keys.length; i++) {
                        values.push(this.entries[this.keys[i]].value);
                    }
                } else {
                    for (var i = 0; i < this.keys.length; i++) {
                        entry = this.entries[this.keys[i]];

                        for (var j = 0; j < entry.length; j++) {
                            values.push(entry[j].value);
                        }                         
                    }
                }

                return System.Array.init(values, TValue);
            },

            clear: function () {
                this.entries = {};
                this.keys = [];
                this.count = 0;
            },

            findEntry: function (key) {
                var hash, entries, i;

                if (this.isSimpleKey) {
                    if (this.entries.hasOwnProperty(key)) {
                        return this.entries[key];
                    }

                    return;
                }

                hash = this.comparer.getHashCode2(key);

                if (Bridge.isDefined(this.entries[hash])) {
                    entries = this.entries[hash];

                    for (i = 0; i < entries.length; i++) {
                        if (this.comparer.equals2(entries[i].key, key)) {
                            return entries[i];
                        }
                    }
                }
            },

            containsKey: function (key) {
                return !!this.findEntry(key);
            },

            containsValue: function (value) {
                var e, i;

                for (e in this.entries) {
                    if (this.entries.hasOwnProperty(e)) {
                        var entries = this.isSimpleKey ? [this.entries[e]] : this.entries[e];

                        for (i = 0; i < entries.length; i++) {
                            if (this.comparer.equals2(entries[i].value, value)) {
                                return true;
                            }
                        }
                    }
                }

                return false;
            },

            get: function (key) {
                var entry = this.findEntry(key);

                if (!entry) {
                    if (this.noKeyCheck) {
                        return Bridge.getDefaultValue(TValue);
                    }

                    throw new System.Collections.Generic.KeyNotFoundException.$ctor1("Key " + key + " does not exist.");
                }

                return entry.value;
            },

            getItem: function (key) {
                return this.get(key);
            },

            set: function (key, value, add) {
                var entry = this.findEntry(key),
                    hash;

                if (entry) {
                    if (add) {
                        throw new System.ArgumentException.$ctor1("Key " + key + " already exists.");
                    }

                    entry.value$1 = value;
                    return;
                }

                entry = new (System.Collections.Generic.KeyValuePair$2(TKey, TValue)).$ctor1(key, value);

                if (this.isSimpleKey) {
                    this.entries[key] = entry;
                    this.keys.push(key);
                } else {
                    hash = this.comparer.getHashCode2(key);

                    if (this.entries[hash]) {
                        this.entries[hash].push(entry);
                    } else {
                        this.entries[hash] = [entry];
                        this.keys.push(hash);
                    }
                }

                this.count++;
            },

            setItem: function (key, value, add) {
                this.set(key, value, add);
            },

            add: function (key, value) {
                this.set(key, value, true);
            },

            addPair: function (pair) {
                this.set(pair.key, pair.value, true);
            },

            remove: function (key) {
                var hash, entries, i;

                if (this.isSimpleKey) {
                    if (this.entries.hasOwnProperty(key)) {
                        delete this.entries[key];
                        this.keys.splice(this.keys.indexOf(key), 1);
                        this.count--;
                        return true;
                    }

                    return false;
                }

                hash = this.comparer.getHashCode2(key);

                if (!this.entries[hash]) {
                    return false;
                }

                entries = this.entries[hash];

                for (i = 0; i < entries.length; i++) {
                    if (this.comparer.equals2(entries[i].key, key)) {
                        entries.splice(i, 1);

                        if (entries.length == 0) {
                            delete this.entries[hash];
                            this.keys.splice(this.keys.indexOf(hash), 1);
                        }

                        this.count--;

                        return true;
                    }
                }

                return false;
            },

            getCount: function () {
                return this.count;
            },

            getComparer: function () {
                return this.comparer;
            },

            tryGetValue: function (key, value) {
                var entry = this.findEntry(key);

                value.v = entry ? entry.value : Bridge.getDefaultValue(TValue);

                return !!entry;
            },

            getCustomEnumerator: function (fn) {
                var hashes = this.keys,
                    hashIndex = -1,
                    keyIndex;

                return new Bridge.CustomEnumerator(function () {
                    if (hashIndex < 0 || this.isSimpleKey || keyIndex >= (this.entries[hashes[hashIndex]].length - 1)) {
                        keyIndex = -1;
                        hashIndex++;
                    }

                    if (hashIndex >= hashes.length) {
                        return false;
                    }

                    keyIndex++;

                    return true;
                }, function () {
                    if (hashIndex < 0 || hashIndex >= hashes.length) {
                        return new (System.Collections.Generic.KeyValuePair$2(TKey, TValue))()
                    }

                    return fn(this.isSimpleKey ? this.entries[hashes[hashIndex]] : this.entries[hashes[hashIndex]][keyIndex]);
                }, function () {
                    hashIndex = -1;
                }, null, this, System.Collections.Generic.KeyValuePair$2(TKey, TValue));
            },

            GetEnumerator: function () {
                return this.getCustomEnumerator(function (e) {
                    return e;
                });
            }
        };
    });

    System.Collections.Generic.Dictionary$2.getTypeParameters = function (type) {
        var interfaceType;

        if (System.String.startsWith(type.$$name, "System.Collections.Generic.IDictionary")) {
            interfaceType = type;
        } else {
            var interfaces = Bridge.Reflection.getInterfaces(type);

            for (var j = 0; j < interfaces.length; j++) {
                if (System.String.startsWith(interfaces[j].$$name, "System.Collections.Generic.IDictionary")) {
                    interfaceType = interfaces[j];

                    break;
                }
            }
        }

        var typesGeneric = interfaceType ? Bridge.Reflection.getGenericArguments(interfaceType) : null;
        var typeKey = typesGeneric ? typesGeneric[0] : null;
        var typeValue = typesGeneric ? typesGeneric[1] : null;

        return [typeKey, typeValue];
    };

    Bridge.define("System.Collections.Generic.DictionaryCollection$1", function (T) {
        return {
            inherits: [System.Collections.Generic.ICollection$1(T)],

            config: {
                alias: [
                  "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
                  "getCount", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$getCount",
                  "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
                  "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
                  "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
                  "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove"
                ]
            },

            ctor: function (dictionary, keys) {
                this.$initialize();
                this.dictionary = dictionary;
                this.keys = keys;
            },

            getCount: function () {
                return this.dictionary.getCount();
            },

            GetEnumerator: function () {
                return this.dictionary.getCustomEnumerator(this.keys ? function (e) {
                    return e.key;
                } : function (e) {
                    return e.value;
                });
            },

            contains: function (value) {
                return this.keys ? this.dictionary.containsKey(value) : this.dictionary.containsValue(value);
            },

            add: function (v) {
                throw new System.NotSupportedException();
            },

            clear: function () {
                throw new System.NotSupportedException();
            },

            remove: function () {
                throw new System.NotSupportedException();
            }
        };
    });

    // @source List.js

    Bridge.define("System.Collections.Generic.List$1", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T),System.Collections.IList,System.Collections.Generic.IReadOnlyList$1(T)],
        statics: {
            fields: {
                _defaultCapacity: 0,
                _emptyArray: null
            },
            ctors: {
                init: function () {
                    this._defaultCapacity = 4;
                    this._emptyArray = System.Array.init(0, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
            },
            methods: {
                IsCompatibleObject: function (value) {
                    return ((Bridge.is(value, T)) || (value == null && Bridge.getDefaultValue(T) == null));
                }
            }
        },
        fields: {
            _items: null,
            _size: 0,
            _version: 0
        },
        props: {
            Capacity: {
                get: function () {
                    return this._items.length;
                },
                set: function (value) {
                    if (value < this._size) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("value");
                    }

                    if (value !== this._items.length) {
                        if (value > 0) {
                            var newItems = System.Array.init(value, function (){
                                return Bridge.getDefaultValue(T);
                            }, T);
                            if (this._size > 0) {
                                System.Array.copy(this._items, 0, newItems, 0, this._size);
                            }
                            this._items = newItems;
                        } else {
                            this._items = System.Collections.Generic.List$1(T)._emptyArray;
                        }
                    }
                }
            },
            Count: {
                get: function () {
                    return this._size;
                }
            },
            System$Collections$IList$IsFixedSize: {
                get: function () {
                    return false;
                }
            },
            System$Collections$Generic$ICollection$1$IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            System$Collections$IList$IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return this;
                }
            }
        },
        alias: [
            "Count", ["System$Collections$Generic$IReadOnlyCollection$1$" + Bridge.getTypeAlias(T) + "$Count", "System$Collections$Generic$IReadOnlyCollection$1$Count"],
            "Count", "System$Collections$ICollection$Count",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "System$Collections$Generic$ICollection$1$IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "getItem", ["System$Collections$Generic$IReadOnlyList$1$" + Bridge.getTypeAlias(T) + "$getItem", "System$Collections$Generic$IReadOnlyList$1$getItem"],
            "setItem", ["System$Collections$Generic$IReadOnlyList$1$" + Bridge.getTypeAlias(T) + "$setItem", "System$Collections$Generic$IReadOnlyList$1$setItem"],
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "clear", "System$Collections$IList$clear",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator",
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "removeAt", "System$Collections$IList$removeAt",
            "removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._items = System.Collections.Generic.List$1(T)._emptyArray;
            },
            $ctor2: function (capacity) {
                this.$initialize();
                if (capacity < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("capacity");
                }

                if (capacity === 0) {
                    this._items = System.Collections.Generic.List$1(T)._emptyArray;
                } else {
                    this._items = System.Array.init(capacity, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
            },
            $ctor1: function (collection) {
                this.$initialize();
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }

                var c = Bridge.as(collection, System.Collections.Generic.ICollection$1(T));
                if (c != null) {
                    var count = System.Array.getCount(c, T);
                    if (count === 0) {
                        this._items = System.Collections.Generic.List$1(T)._emptyArray;
                    } else {
                        this._items = System.Array.init(count, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        System.Array.copyTo(c, this._items, 0, T);
                        this._size = count;
                    }
                } else {
                    this._size = 0;
                    this._items = System.Collections.Generic.List$1(T)._emptyArray;

                    var en = Bridge.getEnumerator(collection, T);
                    try {
                        while (en.System$Collections$IEnumerator$moveNext()) {
                            this.add(en[Bridge.geti(en, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                        }
                    }
                    finally {
                        if (Bridge.hasValue(en)) {
                            en.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        methods: {
            getItem: function (index) {
                if ((index >>> 0) >= (this._size >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.ctor();
                }
                return this._items[System.Array.index(index, this._items)];
            },
            setItem: function (index, value) {
                if ((index >>> 0) >= (this._size >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.ctor();
                }
                this._items[System.Array.index(index, this._items)] = value;
                this._version = (this._version + 1) | 0;
            },
            System$Collections$IList$getItem: function (index) {
                return this.getItem(index);
            },
            System$Collections$IList$setItem: function (index, value) {
                if (value == null && !(Bridge.getDefaultValue(T) == null)) {
                    throw new System.ArgumentNullException.$ctor1("value");
                }

                try {
                    this.setItem(index, Bridge.cast(Bridge.unbox(value, T), T));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        throw new System.ArgumentException.$ctor1("value");
                    } else {
                        throw $e1;
                    }
                }
            },
            add: function (item) {
                if (this._size === this._items.length) {
                    this.EnsureCapacity(((this._size + 1) | 0));
                }
                this._items[System.Array.index(Bridge.identity(this._size, (this._size = (this._size + 1) | 0)), this._items)] = item;
                this._version = (this._version + 1) | 0;
            },
            System$Collections$IList$add: function (item) {
                if (item == null && !(Bridge.getDefaultValue(T) == null)) {
                    throw new System.ArgumentNullException.$ctor1("item");
                }

                try {
                    this.add(Bridge.cast(Bridge.unbox(item, T), T));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        throw new System.ArgumentException.$ctor1("item");
                    } else {
                        throw $e1;
                    }
                }

                return ((this.Count - 1) | 0);
            },
            AddRange: function (collection) {
                this.InsertRange(this._size, collection);
            },
            AsReadOnly: function () {
                return new (System.Collections.ObjectModel.ReadOnlyCollection$1(T))(this);
            },
            BinarySearch$2: function (index, count, item, comparer) {
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((this._size - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                return System.Array.binarySearch(this._items, index, count, item, comparer);
            },
            BinarySearch: function (item) {
                return this.BinarySearch$2(0, this.Count, item, null);
            },
            BinarySearch$1: function (item, comparer) {
                return this.BinarySearch$2(0, this.Count, item, comparer);
            },
            clear: function () {
                if (this._size > 0) {
                    System.Array.fill(this._items, Bridge.getDefaultValue(T), 0, this._size);
                    this._size = 0;
                }
                this._version = (this._version + 1) | 0;
            },
            contains: function (item) {
                if (item == null) {
                    for (var i = 0; i < this._size; i = (i + 1) | 0) {
                        if (this._items[System.Array.index(i, this._items)] == null) {
                            return true;
                        }
                    }
                    return false;
                } else {
                    var c = System.Collections.Generic.EqualityComparer$1(T).def;
                    for (var i1 = 0; i1 < this._size; i1 = (i1 + 1) | 0) {
                        if (c.equals2(this._items[System.Array.index(i1, this._items)], item)) {
                            return true;
                        }
                    }
                    return false;
                }
            },
            System$Collections$IList$contains: function (item) {
                if (System.Collections.Generic.List$1(T).IsCompatibleObject(item)) {
                    return this.contains(Bridge.cast(Bridge.unbox(item, T), T));
                }
                return false;
            },
            ConvertAll: function (TOutput, converter) {
                if (Bridge.staticEquals(converter, null)) {
                    throw new System.ArgumentNullException.$ctor1("converter");
                }

                var list = new (System.Collections.Generic.List$1(TOutput)).$ctor2(this._size);
                for (var i = 0; i < this._size; i = (i + 1) | 0) {
                    list._items[System.Array.index(i, list._items)] = converter(this._items[System.Array.index(i, this._items)]);
                }
                list._size = this._size;
                return list;
            },
            CopyTo: function (array) {
                this.copyTo(array, 0);
            },
            System$Collections$ICollection$copyTo: function (array, arrayIndex) {
                if ((array != null) && (System.Array.getRank(array) !== 1)) {
                    throw new System.ArgumentException.$ctor1("array");
                }

                System.Array.copy(this._items, 0, array, arrayIndex, this._size);
            },
            CopyTo$1: function (index, array, arrayIndex, count) {
                if (((this._size - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                System.Array.copy(this._items, index, array, arrayIndex, count);
            },
            copyTo: function (array, arrayIndex) {
                System.Array.copy(this._items, 0, array, arrayIndex, this._size);
            },
            EnsureCapacity: function (min) {
                if (this._items.length < min) {
                    var newCapacity = this._items.length === 0 ? System.Collections.Generic.List$1(T)._defaultCapacity : Bridge.Int.mul(this._items.length, 2);
                    if ((newCapacity >>> 0) > 2146435071) {
                        newCapacity = 2146435071;
                    }
                    if (newCapacity < min) {
                        newCapacity = min;
                    }
                    this.Capacity = newCapacity;
                }
            },
            Exists: function (match) {
                return this.FindIndex$2(match) !== -1;
            },
            Find: function (match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                for (var i = 0; i < this._size; i = (i + 1) | 0) {
                    if (match(this._items[System.Array.index(i, this._items)])) {
                        return this._items[System.Array.index(i, this._items)];
                    }
                }
                return Bridge.getDefaultValue(T);
            },
            FindAll: function (match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                var list = new (System.Collections.Generic.List$1(T)).ctor();
                for (var i = 0; i < this._size; i = (i + 1) | 0) {
                    if (match(this._items[System.Array.index(i, this._items)])) {
                        list.add(this._items[System.Array.index(i, this._items)]);
                    }
                }
                return list;
            },
            FindIndex$2: function (match) {
                return this.FindIndex(0, this._size, match);
            },
            FindIndex$1: function (startIndex, match) {
                return this.FindIndex(startIndex, ((this._size - startIndex) | 0), match);
            },
            FindIndex: function (startIndex, count, match) {
                if ((startIndex >>> 0) > (this._size >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                }

                if (count < 0 || startIndex > ((this._size - count) | 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                var endIndex = (startIndex + count) | 0;
                for (var i = startIndex; i < endIndex; i = (i + 1) | 0) {
                    if (match(this._items[System.Array.index(i, this._items)])) {
                        return i;
                    }
                }
                return -1;
            },
            FindLast: function (match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                for (var i = (this._size - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    if (match(this._items[System.Array.index(i, this._items)])) {
                        return this._items[System.Array.index(i, this._items)];
                    }
                }
                return Bridge.getDefaultValue(T);
            },
            FindLastIndex$2: function (match) {
                return this.FindLastIndex(((this._size - 1) | 0), this._size, match);
            },
            FindLastIndex$1: function (startIndex, match) {
                return this.FindLastIndex(startIndex, ((startIndex + 1) | 0), match);
            },
            FindLastIndex: function (startIndex, count, match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                if (this._size === 0) {
                    if (startIndex !== -1) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                    }
                } else {
                    if ((startIndex >>> 0) >= (this._size >>> 0)) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                    }
                }

                if (count < 0 || ((((startIndex - count) | 0) + 1) | 0) < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                var endIndex = (startIndex - count) | 0;
                for (var i = startIndex; i > endIndex; i = (i - 1) | 0) {
                    if (match(this._items[System.Array.index(i, this._items)])) {
                        return i;
                    }
                }
                return -1;
            },
            ForEach: function (action) {
                if (Bridge.staticEquals(action, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                var version = this._version;

                for (var i = 0; i < this._size; i = (i + 1) | 0) {
                    if (version !== this._version) {
                        break;
                    }
                    action(this._items[System.Array.index(i, this._items)]);
                }

                if (version !== this._version) {
                    throw new System.InvalidOperationException.ctor();
                }
            },
            GetEnumerator: function () {
                return new (System.Collections.Generic.List$1.Enumerator(T)).$ctor1(this);
            },
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                return new (System.Collections.Generic.List$1.Enumerator(T)).$ctor1(this).$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (System.Collections.Generic.List$1.Enumerator(T)).$ctor1(this).$clone();
            },
            GetRange: function (index, count) {
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (((this._size - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                var list = new (System.Collections.Generic.List$1(T)).$ctor2(count);
                System.Array.copy(this._items, index, list._items, 0, count);
                list._size = count;
                return list;
            },
            indexOf: function (item) {
                return System.Array.indexOfT(this._items, item, 0, this._size);
            },
            System$Collections$IList$indexOf: function (item) {
                if (System.Collections.Generic.List$1(T).IsCompatibleObject(item)) {
                    return this.indexOf(Bridge.cast(Bridge.unbox(item, T), T));
                }
                return -1;
            },
            IndexOf: function (item, index) {
                if (index > this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                return System.Array.indexOfT(this._items, item, index, ((this._size - index) | 0));
            },
            IndexOf$1: function (item, index, count) {
                if (index > this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (count < 0 || index > ((this._size - count) | 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                return System.Array.indexOfT(this._items, item, index, count);
            },
            insert: function (index, item) {
                if ((index >>> 0) > (this._size >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                if (this._size === this._items.length) {
                    this.EnsureCapacity(((this._size + 1) | 0));
                }
                if (index < this._size) {
                    System.Array.copy(this._items, index, this._items, ((index + 1) | 0), ((this._size - index) | 0));
                }
                this._items[System.Array.index(index, this._items)] = item;
                this._size = (this._size + 1) | 0;
                this._version = (this._version + 1) | 0;
            },
            System$Collections$IList$insert: function (index, item) {
                if (item == null && !(Bridge.getDefaultValue(T) == null)) {
                    throw new System.ArgumentNullException.$ctor1("item");
                }

                try {
                    this.insert(index, Bridge.cast(Bridge.unbox(item, T), T));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        throw new System.ArgumentException.$ctor1("item");
                    } else {
                        throw $e1;
                    }
                }
            },
            InsertRange: function (index, collection) {
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }

                if ((index >>> 0) > (this._size >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                var c = Bridge.as(collection, System.Collections.Generic.ICollection$1(T));
                if (c != null) {
                    var count = System.Array.getCount(c, T);
                    if (count > 0) {
                        this.EnsureCapacity(((this._size + count) | 0));
                        if (index < this._size) {
                            System.Array.copy(this._items, index, this._items, ((index + count) | 0), ((this._size - index) | 0));
                        }

                        if (Bridge.referenceEquals(this, c)) {
                            System.Array.copy(this._items, 0, this._items, index, index);
                            System.Array.copy(this._items, ((index + count) | 0), this._items, Bridge.Int.mul(index, 2), ((this._size - index) | 0));
                        } else {
                            var itemsToInsert = System.Array.init(count, function (){
                                return Bridge.getDefaultValue(T);
                            }, T);
                            System.Array.copyTo(c, itemsToInsert, 0, T);
                            System.Array.copy(itemsToInsert, 0, this._items, index, itemsToInsert.length);
                        }
                        this._size = (this._size + count) | 0;
                    }
                } else {
                    var en = Bridge.getEnumerator(collection, T);
                    try {
                        while (en.System$Collections$IEnumerator$moveNext()) {
                            this.insert(Bridge.identity(index, (index = (index + 1) | 0)), en[Bridge.geti(en, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                        }
                    }
                    finally {
                        if (Bridge.hasValue(en)) {
                            en.System$IDisposable$Dispose();
                        }
                    }
                }
                this._version = (this._version + 1) | 0;
            },
            LastIndexOf: function (item) {
                if (this._size === 0) {
                    return -1;
                } else {
                    return this.LastIndexOf$2(item, ((this._size - 1) | 0), this._size);
                }
            },
            LastIndexOf$1: function (item, index) {
                if (index >= this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                return this.LastIndexOf$2(item, index, ((index + 1) | 0));
            },
            LastIndexOf$2: function (item, index, count) {
                if ((this.Count !== 0) && (index < 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if ((this.Count !== 0) && (count < 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (this._size === 0) {
                    return -1;
                }

                if (index >= this._size) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (count > ((index + 1) | 0)) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                return System.Array.lastIndexOfT(this._items, item, index, count);
            },
            remove: function (item) {
                var index = this.indexOf(item);
                if (index >= 0) {
                    this.removeAt(index);
                    return true;
                }

                return false;
            },
            System$Collections$IList$remove: function (item) {
                if (System.Collections.Generic.List$1(T).IsCompatibleObject(item)) {
                    this.remove(Bridge.cast(Bridge.unbox(item, T), T));
                }
            },
            RemoveAll: function (match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                var freeIndex = 0;

                while (freeIndex < this._size && !match(this._items[System.Array.index(freeIndex, this._items)])) {
                    freeIndex = (freeIndex + 1) | 0;
                }
                if (freeIndex >= this._size) {
                    return 0;
                }

                var current = (freeIndex + 1) | 0;
                while (current < this._size) {
                    while (current < this._size && match(this._items[System.Array.index(current, this._items)])) {
                        current = (current + 1) | 0;
                    }

                    if (current < this._size) {
                        this._items[System.Array.index(Bridge.identity(freeIndex, (freeIndex = (freeIndex + 1) | 0)), this._items)] = this._items[System.Array.index(Bridge.identity(current, (current = (current + 1) | 0)), this._items)];
                    }
                }

                System.Array.fill(this._items, Bridge.getDefaultValue(T), freeIndex, ((this._size - freeIndex) | 0));
                var result = (this._size - freeIndex) | 0;
                this._size = freeIndex;
                this._version = (this._version + 1) | 0;
                return result;
            },
            removeAt: function (index) {
                if ((index >>> 0) >= (this._size >>> 0)) {
                    throw new System.ArgumentOutOfRangeException.ctor();
                }
                this._size = (this._size - 1) | 0;
                if (index < this._size) {
                    System.Array.copy(this._items, ((index + 1) | 0), this._items, index, ((this._size - index) | 0));
                }
                this._items[System.Array.index(this._size, this._items)] = Bridge.getDefaultValue(T);
                this._version = (this._version + 1) | 0;
            },
            RemoveRange: function (index, count) {
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (((this._size - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                if (count > 0) {
                    var i = this._size;
                    this._size = (this._size - count) | 0;
                    if (index < this._size) {
                        System.Array.copy(this._items, ((index + count) | 0), this._items, index, ((this._size - index) | 0));
                    }
                    System.Array.fill(this._items, Bridge.getDefaultValue(T), this._size, count);
                    this._version = (this._version + 1) | 0;
                }
            },
            Reverse: function () {
                this.Reverse$1(0, this.Count);
            },
            Reverse$1: function (index, count) {
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (((this._size - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }
                System.Array.reverse(this._items, index, count);
                this._version = (this._version + 1) | 0;
            },
            Sort: function () {
                this.Sort$3(0, this.Count, null);
            },
            Sort$1: function (comparer) {
                this.Sort$3(0, this.Count, comparer);
            },
            Sort$3: function (index, count, comparer) {
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (((this._size - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                System.Array.sort(this._items, index, count, comparer);
                this._version = (this._version + 1) | 0;
            },
            Sort$2: function (comparison) {
                if (Bridge.staticEquals(comparison, null)) {
                    throw new System.ArgumentNullException.$ctor1("comparison");
                }

                if (this._size > 0) {
                    if (this._items.length === this._size) {
                        System.Array.sort(this._items, comparison);
                    } else {
                        var newItems = System.Array.init(this._size, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        System.Array.copy(this._items, 0, newItems, 0, this._size);
                        System.Array.sort(newItems, comparison);
                        System.Array.copy(newItems, 0, this._items, 0, this._size);
                    }
                }
            },
            ToArray: function () {

                var array = System.Array.init(this._size, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                System.Array.copy(this._items, 0, array, 0, this._size);
                return array;
            },
            TrimExcess: function () {
                var threshold = Bridge.Int.clip32(this._items.length * 0.9);
                if (this._size < threshold) {
                    this.Capacity = this._size;
                }
            },
            TrueForAll: function (match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                for (var i = 0; i < this._size; i = (i + 1) | 0) {
                    if (!match(this._items[System.Array.index(i, this._items)])) {
                        return false;
                    }
                }
                return true;
            },
            toJSON: function () {
                var newItems = System.Array.init(this._size, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                if (this._size > 0) {
                    System.Array.copy(this._items, 0, newItems, 0, this._size);
                }

                return newItems;
            }
        }
    }; });

    // @source KeyNotFoundException.js

    Bridge.define("System.Collections.Generic.KeyNotFoundException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "The given key was not present in the dictionary.");
                this.HResult = -2146232969;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146232969;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146232969;
            }
        }
    });

    // @source List.js

    System.Collections.Generic.List$1.getElementType = function (type) {
        var interfaceType;

        if (System.String.startsWith(type.$$name, "System.Collections.Generic.IList")) {
            interfaceType = type;
        } else {
            var interfaces = Bridge.Reflection.getInterfaces(type);

            for (var j = 0; j < interfaces.length; j++) {
                if (System.String.startsWith(interfaces[j].$$name, "System.Collections.Generic.IList")) {
                    interfaceType = interfaces[j];

                    break;
                }
            }
        }

        return interfaceType ? Bridge.Reflection.getGenericArguments(interfaceType)[0] : null;
    };

    // @source CharEnumerator.js

    Bridge.define("System.CharEnumerator", {
        inherits: [System.Collections.IEnumerator,System.Collections.Generic.IEnumerator$1(System.Char),System.IDisposable,System.ICloneable],
        fields: {
            _str: null,
            _index: 0,
            _currentElement: 0
        },
        props: {
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return Bridge.box(this.Current, System.Char, String.fromCharCode, System.Char.getHashCode);
                }
            },
            Current: {
                get: function () {
                    if (this._index === -1) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has not started. Call MoveNext.");
                    }
                    if (this._index >= this._str.length) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration already finished.");
                    }
                    return this._currentElement;
                }
            }
        },
        alias: [
            "clone", "System$ICloneable$clone",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Dispose", "System$IDisposable$Dispose",
            "Current", ["System$Collections$Generic$IEnumerator$1$System$Char$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "reset", "System$Collections$IEnumerator$reset"
        ],
        ctors: {
            ctor: function (str) {
                this.$initialize();
                this._str = str;
                this._index = -1;
            }
        },
        methods: {
            clone: function () {
                return Bridge.clone(this);
            },
            moveNext: function () {
                if (this._index < (((this._str.length - 1) | 0))) {
                    this._index = (this._index + 1) | 0;
                    this._currentElement = this._str.charCodeAt(this._index);
                    return true;
                } else {
                    this._index = this._str.length;
                }
                return false;
            },
            Dispose: function () {
                if (this._str != null) {
                    this._index = this._str.length;
                }
                this._str = null;
            },
            reset: function () {
                this._currentElement = 0;
                this._index = -1;
            }
        }
    });

    // @source String.js

    Bridge.define("System.String", {
        inherits: [System.IComparable, System.ICloneable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable$1(System.Char)],

        statics: {
            $is: function (instance) {
                return typeof (instance) === "string";
            },

            charCodeAt: function (str, idx) {
                idx = idx || 0;

                var code = str.charCodeAt(idx),
                    hi,
                    low;

                if (0xD800 <= code && code <= 0xDBFF) {
                    hi = code;
                    low = str.charCodeAt(idx + 1);

                    if (isNaN(low)) {
                        throw new System.Exception("High surrogate not followed by low surrogate");
                    }

                    return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
                }

                if (0xDC00 <= code && code <= 0xDFFF) {
                    return false;
                }

                return code;
            },

            fromCharCode: function (codePt) {
                if (codePt > 0xFFFF) {
                    codePt -= 0x10000;

                    return String.fromCharCode(0xD800 + (codePt >> 10), 0xDC00 + (codePt & 0x3FF));
                }

                return String.fromCharCode(codePt);
            },

            fromCharArray: function (chars, startIndex, length) {
                if (chars == null) {
                    throw new System.ArgumentNullException.$ctor1("chars");
                }

                if (startIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                }

                if (length < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("length");
                }

                if (chars.length - startIndex < length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                }

                var result = "";

                startIndex = startIndex || 0;
                length = Bridge.isNumber(length) ? length : chars.length;

                if ((startIndex + length) > chars.length) {
                    length = chars.length - startIndex;
                }

                for (var i = 0; i < length; i++) {
                    var ch = chars[i + startIndex] | 0;

                    result += String.fromCharCode(ch);
                }

                return result;
            },

            lastIndexOf: function (s, search, startIndex, count) {
                var index = s.lastIndexOf(search, startIndex);

                return (index < (startIndex - count + 1)) ? -1 : index;
            },

            lastIndexOfAny: function (s, chars, startIndex, count) {
                var length = s.length;

                if (!length) {
                    return -1;
                }

                chars = String.fromCharCode.apply(null, chars);
                startIndex = startIndex || length - 1;
                count = count || length;

                var endIndex = startIndex - count + 1;

                if (endIndex < 0) {
                    endIndex = 0;
                }

                for (var i = startIndex; i >= endIndex; i--) {
                    if (chars.indexOf(s.charAt(i)) >= 0) {
                        return i;
                    }
                }

                return -1;
            },

            isNullOrWhiteSpace: function (s) {
                if (!s) {
                    return true;
                }

                return System.Char.isWhiteSpace(s);
            },

            isNullOrEmpty: function (s) {
                return !s;
            },

            fromCharCount: function (c, count) {
                if (count >= 0) {
                    return String(Array(count + 1).join(String.fromCharCode(c)));
                } else {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "cannot be less than zero");
                }
            },

            format: function (format, args) {
                return System.String._format(System.Globalization.CultureInfo.getCurrentCulture(), format, Array.isArray(args) && arguments.length == 2 ? args : Array.prototype.slice.call(arguments, 1));
            },

            formatProvider: function (provider, format, args) {
                return System.String._format(provider, format, Array.isArray(args) && arguments.length == 3 ? args : Array.prototype.slice.call(arguments, 2));
            },

            _format: function (provider, format, args) {
                if (format == null) {
                    throw new System.ArgumentNullException.$ctor1("format");
                }

                var reverse = function (s) {
                    return s.split("").reverse().join("");
                };

                format = reverse(reverse(format.replace(/\{\{/g, function (m) {
                    return String.fromCharCode(1, 1);
                })).replace(/\}\}/g, function (m) {
                    return String.fromCharCode(2, 2);
                }));

                var me = this,
                    _formatRe = /(\{+)((\d+|[a-zA-Z_$]\w+(?:\.[a-zA-Z_$]\w+|\[\d+\])*)(?:\,(-?\d*))?(?:\:([^\}]*))?)(\}+)|(\{+)|(\}+)/g,
                    fn = this.decodeBraceSequence;

                format = format.replace(_formatRe, function (m, openBrace, elementContent, index, align, format, closeBrace, repeatOpenBrace, repeatCloseBrace) {
                    if (repeatOpenBrace) {
                        return fn(repeatOpenBrace);
                    }

                    if (repeatCloseBrace) {
                        return fn(repeatCloseBrace);
                    }

                    if (openBrace.length % 2 === 0 || closeBrace.length % 2 === 0) {
                        return fn(openBrace) + elementContent + fn(closeBrace);
                    }

                    return fn(openBrace, true) + me.handleElement(provider, index, align, format, args) + fn(closeBrace, true);
                });

                return format.replace(/(\x01\x01)|(\x02\x02)/g, function (m) {
                    if (m == String.fromCharCode(1, 1)) {
                        return "{";
                    }

                    if (m == String.fromCharCode(2, 2)) {
                        return "}";
                    }
                });
            },

            handleElement: function (provider, index, alignment, formatStr, args) {
                var value;

                index = parseInt(index, 10);

                if (index > args.length - 1) {
                    throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                }

                value = args[index];

                if (value == null) {
                    value = "";
                }

                if (formatStr && value.$boxed && value.type.$kind === "enum") {
                    value = System.Enum.format(value.type, value.v, formatStr);
                } else if (formatStr && value.$boxed && value.type.format) {
                    value = value.type.format(Bridge.unbox(value, true), formatStr, provider);
                } else if (formatStr && Bridge.is(value, System.IFormattable)) {
                    value = Bridge.format(Bridge.unbox(value, true), formatStr, provider);
                } if (Bridge.isNumber(value)) {
                    value = Bridge.Int.format(value, formatStr, provider);
                } else if (Bridge.isDate(value)) {
                    value = System.DateTime.format(value, formatStr, provider);
                } else {
                    value = "" + Bridge.toString(value);
                }

                if (alignment) {
                    alignment = parseInt(alignment, 10);

                    if (!Bridge.isNumber(alignment)) {
                        alignment = null;
                    }
                }

                return System.String.alignString(Bridge.toString(value), alignment);
            },

            decodeBraceSequence: function (braces, remove) {
                return braces.substr(0, (braces.length + (remove ? 0 : 1)) / 2);
            },

            alignString: function (str, alignment, pad, dir, cut) {
                if (str == null || !alignment) {
                    return str;
                }

                if (!pad) {
                    pad = " ";
                }

                if (Bridge.isNumber(pad)) {
                    pad = String.fromCharCode(pad);
                }

                if (!dir) {
                    dir = alignment < 0 ? 1 : 2;
                }

                alignment = Math.abs(alignment);

                if (cut && (str.length > alignment)) {
                    str = str.substring(0, alignment);
                }

                if (alignment + 1 >= str.length) {
                    switch (dir) {
                        case 2:
                            str = Array(alignment + 1 - str.length).join(pad) + str;
                            break;

                        case 3:
                            var padlen = alignment - str.length,
                                right = Math.ceil(padlen / 2),
                                left = padlen - right;

                            str = Array(left + 1).join(pad) + str + Array(right + 1).join(pad);
                            break;

                        case 1:
                        default:
                            str = str + Array(alignment + 1 - str.length).join(pad);
                            break;
                    }
                }

                return str;
            },

            startsWith: function (str, prefix) {
                if (!prefix.length) {
                    return true;
                }

                if (prefix.length > str.length) {
                    return false;
                }

                return System.String.equals(str.slice(0, prefix.length), prefix, arguments[2]);
            },

            endsWith: function (str, suffix) {
                if (!suffix.length) {
                    return true;
                }

                if (suffix.length > str.length) {
                    return false;
                }

                return System.String.equals(str.slice(str.length - suffix.length, str.length), suffix, arguments[2]);
            },

            contains: function (str, value) {
                if (value == null) {
                    throw new System.ArgumentNullException();
                }

                if (str == null) {
                    return false;
                }

                return str.indexOf(value) > -1;
            },

            indexOfAny: function (str, anyOf) {
                if (anyOf == null) {
                    throw new System.ArgumentNullException();
                }

                if (str == null || str === "") {
                    return -1;
                }

                var startIndex = (arguments.length > 2) ? arguments[2] : 0;

                if (startIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "startIndex cannot be less than zero");
                }

                var length = (arguments.length > 3) ? arguments[3] : str.length - startIndex;

                if (length < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "must be non-negative");
                }

                if (length > str.length - startIndex) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index and length must refer to a location within the string");
                }

                var s = str.substr(startIndex, length);

                for (var i = 0; i < anyOf.length; i++) {
                    var c = String.fromCharCode(anyOf[i]),
                        index = s.indexOf(c);

                    if (index > -1) {
                        return index + startIndex;
                    }
                }

                return -1;
            },

            indexOf: function (str, value) {
                if (value == null) {
                    throw new System.ArgumentNullException();
                }

                if (str == null || str === "") {
                    return -1;
                }

                var startIndex = (arguments.length > 2) ? arguments[2] : 0;

                if (startIndex < 0 || startIndex > str.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "startIndex cannot be less than zero and must refer to a location within the string");
                }

                if (value === "") {
                    return (arguments.length > 2) ? startIndex : 0;
                }

                var length = (arguments.length > 3) ? arguments[3] : str.length - startIndex;

                if (length < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "must be non-negative");
                }

                if (length > str.length - startIndex) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index and length must refer to a location within the string");
                }

                var s = str.substr(startIndex, length),
                    index = (arguments.length === 5 && arguments[4] % 2 !== 0) ? s.toLocaleUpperCase().indexOf(value.toLocaleUpperCase()) : s.indexOf(value);

                if (index > -1) {
                    if (arguments.length === 5) {
                        // StringComparison
                        return (System.String.compare(value, s.substr(index, value.length), arguments[4]) === 0) ? index + startIndex : -1;
                    } else {
                        return index + startIndex;
                    }
                }

                return -1;
            },

            equals: function () {
                return System.String.compare.apply(this, arguments) === 0;
            },

            swapCase: function (letters) {
                return letters.replace(/\w/g, function (c) {
                    if (c === c.toLowerCase()) {
                        return c.toUpperCase();
                    } else {
                        return c.toLowerCase();
                    }
                });
            },

            compare: function (strA, strB) {
                if (strA == null) {
                    return (strB == null) ? 0 : -1;
                }

                if (strB == null) {
                    return 1;
                }

                if (arguments.length >= 3) {
                    if (!Bridge.isBoolean(arguments[2])) {
                        // StringComparison
                        switch (arguments[2]) {
                            case 1: // CurrentCultureIgnoreCase
                                return strA.localeCompare(strB, System.Globalization.CultureInfo.getCurrentCulture().name, {
                                    sensitivity: "accent"
                                });
                            case 2: // InvariantCulture
                                return strA.localeCompare(strB, System.Globalization.CultureInfo.invariantCulture.name);
                            case 3: // InvariantCultureIgnoreCase
                                return strA.localeCompare(strB, System.Globalization.CultureInfo.invariantCulture.name, {
                                    sensitivity: "accent"
                                });
                            case 4: // Ordinal
                                return (strA === strB) ? 0 : ((strA > strB) ? 1 : -1);
                            case 5: // OrdinalIgnoreCase
                                return (strA.toUpperCase() === strB.toUpperCase()) ? 0 : ((strA.toUpperCase() > strB.toUpperCase()) ? 1 : -1);
                            case 0: // CurrentCulture
                            default:
                                break;
                        }
                    } else {
                        // ignoreCase
                        if (arguments[2]) {
                            strA = strA.toLocaleUpperCase();
                            strB = strB.toLocaleUpperCase();
                        }

                        if (arguments.length === 4) {
                            // CultureInfo
                            return strA.localeCompare(strB, arguments[3].name);
                        }
                    }
                }

                return strA.localeCompare(strB);
            },

            toCharArray: function (str, startIndex, length) {
                if (startIndex < 0 || startIndex > str.length || startIndex > str.length - length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "startIndex cannot be less than zero and must refer to a location within the string");
                }

                if (length < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "must be non-negative");
                }

                if (!Bridge.hasValue(startIndex)) {
                    startIndex = 0;
                }

                if (!Bridge.hasValue(length)) {
                    length = str.length;
                }

                var arr = [];

                for (var i = startIndex; i < startIndex + length; i++) {
                    arr.push(str.charCodeAt(i));
                }

                return arr;
            },

            escape: function (str) {
                return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            },

            replaceAll: function (str, a, b) {
                var reg = new RegExp(System.String.escape(a), "g");

                return str.replace(reg, b);
            },

            insert: function (index, strA, strB) {
                return index > 0 ? (strA.substring(0, index) + strB + strA.substring(index, strA.length)) : (strB + strA);
            },

            remove: function (s, index, count) {
                if (s == null) {
                    throw new System.NullReferenceException();
                }

                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "StartIndex cannot be less than zero");
                }

                if (count != null) {
                    if (count < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("count", "Count cannot be less than zero");
                    }

                    if (count > s.length - index) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("count", "Index and count must refer to a location within the string");
                    }
                } else {
                    if (index >= s.length) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("startIndex", "startIndex must be less than length of string");
                    }
                }

                if (count == null || ((index + count) > s.length)) {
                    return s.substr(0, index);
                }

                return s.substr(0, index) + s.substr(index + count);
            },

            split: function (s, strings, limit, options) {
                var re = (!Bridge.hasValue(strings) || strings.length === 0) ? new RegExp("\\s", "g") : new RegExp(strings.map(System.String.escape).join("|"), "g"),
                    res = [],
                    m,
                    i;

                for (i = 0; ; i = re.lastIndex) {
                    if (m = re.exec(s)) {
                        if (options !== 1 || m.index > i) {
                            if (res.length === limit - 1) {
                                res.push(s.substr(i));

                                return res;
                            } else {
                                res.push(s.substring(i, m.index));
                            }
                        }
                    } else {
                        if (options !== 1 || i !== s.length) {
                            res.push(s.substr(i));
                        }

                        return res;
                    }
                }
            },

            trimEnd: function (str, chars) {
                return str.replace(chars ? new RegExp("[" + System.String.escape(String.fromCharCode.apply(null, chars)) + "]+$") : /\s*$/, "");
            },

            trimStart: function (str, chars) {
                return str.replace(chars ? new RegExp("^[" + System.String.escape(String.fromCharCode.apply(null, chars)) + "]+") : /^\s*/, "");
            },

            trim: function (str, chars) {
                return System.String.trimStart(System.String.trimEnd(str, chars), chars);
            },

            trimStartZeros: function (str) {
                return str.replace(new RegExp("^[ 0+]+(?=.)"), "");
            },

            concat: function (values) {
                var list = (arguments.length == 1 && Array.isArray(values)) ? values : [].slice.call(arguments),
                    s = "";

                for (var i = 0; i < list.length; i++) {
                    s += list[i] == null ? "" : Bridge.toString(list[i]);
                }

                return s;
            },

            copyTo: function (str, sourceIndex, destination, destinationIndex, count) {
                if (destination == null) {
                    throw new System.ArgumentNullException.$ctor1("destination");
                }

                if (str == null) {
                    throw new System.ArgumentNullException.$ctor1("str");
                }

                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if (sourceIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceIndex");
                }

                if (count > str.length - sourceIndex) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("sourceIndex");
                }

                if (destinationIndex > destination.length - count || destinationIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("destinationIndex");
                }

                if (count > 0) {
                    for (var i = 0; i < count; i++) {
                        destination[destinationIndex + i] = str.charCodeAt(sourceIndex + i);
                    }
                }
            }
        }
    });

    Bridge.Class.addExtend(System.String, [System.IComparable$1(System.String), System.IEquatable$1(System.String)]);

    // @source Task.js

    Bridge.define("System.Threading.Tasks.Task", {
        inherits: [System.IDisposable],

        config: {
            alias: [
                "dispose", "System$IDisposable$Dispose"
            ]
        },

        ctor: function (action, state) {
            this.$initialize();
            this.action = action;
            this.state = state;
            this.exception = null;
            this.status = System.Threading.Tasks.TaskStatus.created;
            this.callbacks = [];
            this.result = null;
        },

        statics: {
            queue: [],

            runQueue: function () {
                var queue = System.Threading.Tasks.Task.queue.slice(0);
                System.Threading.Tasks.Task.queue = [];

                for (var i = 0; i < queue.length; i++) {
                    queue[i]();
                }
            },

            schedule: function (fn) {
                System.Threading.Tasks.Task.queue.push(fn);
                Bridge.setImmediate(System.Threading.Tasks.Task.runQueue);
            },

            delay: function (delay, state) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource();

                setTimeout(function () {
                    tcs.setResult(state);
                }, delay);

                return tcs.task;
            },

            fromResult: function (result, T) {
                var t = new (System.Threading.Tasks.Task$1(T || System.Object))();

                t.status = System.Threading.Tasks.TaskStatus.ranToCompletion;
                t.result = result;

                return t;
            },

            run: function (fn) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource();

                System.Threading.Tasks.Task.schedule(function () {
                    try {
                        tcs.setResult(fn());
                    } catch (e) {
                        tcs.setException(System.Exception.create(e));
                    }
                });

                return tcs.task;
            },

            whenAll: function (tasks) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                    result,
                    executing,
                    cancelled = false,
                    exceptions = [],
                    i;

                if (Bridge.is(tasks, System.Collections.IEnumerable)) {
                    tasks = Bridge.toArray(tasks);
                } else if (!Bridge.isArray(tasks)) {
                    tasks = Array.prototype.slice.call(arguments, 0);
                }

                if (tasks.length === 0) {
                    tcs.setResult([]);

                    return tcs.task;
                }

                executing = tasks.length;
                result = new Array(tasks.length);

                for (i = 0; i < tasks.length; i++) {
                    (function (i) {
                        tasks[i].continueWith(function (t) {
                            switch (t.status) {
                                case System.Threading.Tasks.TaskStatus.ranToCompletion:
                                    result[i] = t.getResult();
                                    break;
                                case System.Threading.Tasks.TaskStatus.canceled:
                                    cancelled = true;
                                    break;
                                case System.Threading.Tasks.TaskStatus.faulted:
                                    System.Array.addRange(exceptions, t.exception.innerExceptions);
                                    break;
                                default:
                                    throw new System.InvalidOperationException.$ctor1("Invalid task status: " + t.status);
                            }

                            if (--executing === 0) {
                                if (exceptions.length > 0) {
                                    tcs.setException(exceptions);
                                } else if (cancelled) {
                                    tcs.setCanceled();
                                } else {
                                    tcs.setResult(result);
                                }
                            }
                        });
                    })(i);
                }

                return tcs.task;
            },

            whenAny: function (tasks) {
                if (Bridge.is(tasks, System.Collections.IEnumerable)) {
                    tasks = Bridge.toArray(tasks);
                } else if (!Bridge.isArray(tasks)) {
                    tasks = Array.prototype.slice.call(arguments, 0);
                }

                if (!tasks.length) {
                    throw new System.ArgumentException.$ctor1("At least one task is required");
                }

                var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                    i;

                for (i = 0; i < tasks.length; i++) {
                    tasks[i].continueWith(function (t) {
                        switch (t.status) {
                            case System.Threading.Tasks.TaskStatus.ranToCompletion:
                                tcs.trySetResult(t);
                                break;
                            case System.Threading.Tasks.TaskStatus.canceled:
                                tcs.trySetCanceled();
                                break;
                            case System.Threading.Tasks.TaskStatus.faulted:
                                tcs.trySetException(t.exception.innerExceptions);
                                break;
                            default:
                                throw new System.InvalidOperationException.$ctor1("Invalid task status: " + t.status);
                        }
                    });
                }

                return tcs.task;
            },

            fromCallback: function (target, method) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                    args = Array.prototype.slice.call(arguments, 2),
                    callback;

                callback = function (value) {
                    tcs.setResult(value);
                };

                args.push(callback);

                target[method].apply(target, args);

                return tcs.task;
            },

            fromCallbackResult: function (target, method, resultHandler) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                    args = Array.prototype.slice.call(arguments, 3),
                    callback;

                callback = function (value) {
                    tcs.setResult(value);
                };

                resultHandler(args, callback);

                target[method].apply(target, args);

                return tcs.task;
            },

            fromCallbackOptions: function (target, method, name) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                    args = Array.prototype.slice.call(arguments, 3),
                    callback;

                callback = function (value) {
                    tcs.setResult(value);
                };

                args[0] = args[0] || {};
                args[0][name] = callback;

                target[method].apply(target, args);

                return tcs.task;
            },

            fromPromise: function (promise, handler, errorHandler, progressHandler) {
                var tcs = new System.Threading.Tasks.TaskCompletionSource();

                if (!promise.then) {
                    promise = promise.promise();
                }

                if (typeof (handler) === 'number') {
                    handler = (function (i) {
                        return function () {
                            return arguments[i >= 0 ? i : (arguments.length + i)];
                        };
                    })(handler);
                } else if (typeof (handler) !== 'function') {
                    handler = function () {
                        return Array.prototype.slice.call(arguments, 0);
                    };
                }

                promise.then(function () {
                    tcs.setResult(handler ? handler.apply(null, arguments) : Array.prototype.slice.call(arguments, 0));
                }, function () {
                    tcs.setException(errorHandler ? errorHandler.apply(null, arguments) : new Bridge.PromiseException(Array.prototype.slice.call(arguments, 0)));
                }, progressHandler);

                return tcs.task;
            }
        },

        continueWith: function (continuationAction, raise) {
            var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                me = this,
                fn = raise ? function () {
                    tcs.setResult(continuationAction(me));
                } : function () {
                    try {
                        tcs.setResult(continuationAction(me));
                    } catch (e) {
                        tcs.setException(System.Exception.create(e));
                    }
                };

            if (this.isCompleted()) {
                //System.Threading.Tasks.Task.schedule(fn);
                System.Threading.Tasks.Task.queue.push(fn);
                System.Threading.Tasks.Task.runQueue();
            } else {
                this.callbacks.push(fn);
            }

            return tcs.task;
        },

        start: function () {
            if (this.status !== System.Threading.Tasks.TaskStatus.created) {
                throw new System.InvalidOperationException.$ctor1("Task was already started.");
            }

            var me = this;

            this.status = System.Threading.Tasks.TaskStatus.running;

            System.Threading.Tasks.Task.schedule(function () {
                try {
                    var result = me.action(me.state);

                    delete me.action;
                    delete me.state;

                    me.complete(result);
                } catch (e) {
                    me.fail(new System.AggregateException(null, [System.Exception.create(e)]));
                }
            });
        },

        runCallbacks: function () {
            var me = this;

            for (var i = 0; i < me.callbacks.length; i++) {
                me.callbacks[i](me);
            }

            delete me.callbacks;
        },

        complete: function (result) {
            if (this.isCompleted()) {
                return false;
            }

            this.result = result;
            this.status = System.Threading.Tasks.TaskStatus.ranToCompletion;
            this.runCallbacks();

            return true;
        },

        fail: function (error) {
            if (this.isCompleted()) {
                return false;
            }

            this.exception = error;
            this.status = System.Threading.Tasks.TaskStatus.faulted;
            this.runCallbacks();

            return true;
        },

        cancel: function () {
            if (this.isCompleted()) {
                return false;
            }

            this.status = System.Threading.Tasks.TaskStatus.canceled;
            this.runCallbacks();

            return true;
        },

        isCanceled: function () {
            return this.status === System.Threading.Tasks.TaskStatus.canceled;
        },

        isCompleted: function () {
            return this.status === System.Threading.Tasks.TaskStatus.ranToCompletion || this.status === System.Threading.Tasks.TaskStatus.canceled || this.status === System.Threading.Tasks.TaskStatus.faulted;
        },

        isFaulted: function () {
            return this.status === System.Threading.Tasks.TaskStatus.faulted;
        },

        _getResult: function (awaiting) {
            switch (this.status) {
                case System.Threading.Tasks.TaskStatus.ranToCompletion:
                    return this.result;
                case System.Threading.Tasks.TaskStatus.canceled:
                    var ex = new System.Threading.Tasks.TaskCanceledException.$ctor3(this);

                    throw awaiting ? ex : new System.AggregateException(null, [ex]);
                case System.Threading.Tasks.TaskStatus.faulted:
                    throw awaiting ? (this.exception.innerExceptions.Count > 0 ? this.exception.innerExceptions.getItem(0) : null) : this.exception;
                default:
                    throw new System.InvalidOperationException.$ctor1("Task is not yet completed.");
            }
        },

        getResult: function () {
            return this._getResult(false);
        },

        dispose: function () {},

        getAwaiter: function () {
            return this;
        },

        getAwaitedResult: function () {
            return this._getResult(true);
        }
    });

    Bridge.define("System.Threading.Tasks.Task$1", function (T) {
        return {
            inherits: [System.Threading.Tasks.Task],
            ctor: function (action, state) {
                this.$initialize();
                System.Threading.Tasks.Task.ctor.call(this, action, state);
            }
        };
    });

    Bridge.define("System.Threading.Tasks.TaskStatus", {
        $kind: "enum",
        $statics: {
            created: 0,
            waitingForActivation: 1,
            waitingToRun: 2,
            running: 3,
            waitingForChildrenToComplete: 4,
            ranToCompletion: 5,
            canceled: 6,
            faulted: 7
        }
    });

    Bridge.define("System.Threading.Tasks.TaskCompletionSource", {
        ctor: function () {
            this.$initialize();
            this.task = new System.Threading.Tasks.Task();
            this.task.status = System.Threading.Tasks.TaskStatus.running;
        },

        setCanceled: function () {
            if (!this.task.cancel()) {
                throw new System.InvalidOperationException.$ctor1("Task was already completed.");
            }
        },

        setResult: function (result) {
            if (!this.task.complete(result)) {
                throw new System.InvalidOperationException.$ctor1("Task was already completed.");
            }
        },

        setException: function (exception) {
            if (!this.trySetException(exception)) {
                throw new System.InvalidOperationException.$ctor1("Task was already completed.");
            }
        },

        trySetCanceled: function () {
            return this.task.cancel();
        },

        trySetResult: function (result) {
            return this.task.complete(result);
        },

        trySetException: function (exception) {
            if (Bridge.is(exception, System.Exception)) {
                exception = [exception];
            }

            return this.task.fail(new System.AggregateException(null, exception));
        }
    });

    Bridge.define("System.Threading.CancellationTokenSource", {
        inherits: [System.IDisposable],

        config: {
            alias: [
                "dispose", "System$IDisposable$Dispose"
            ]
        },

        ctor: function (delay) {
            this.$initialize();
            this.timeout = typeof delay === "number" && delay >= 0 ? setTimeout(Bridge.fn.bind(this, this.cancel), delay, -1) : null;
            this.isCancellationRequested = false;
            this.token = new System.Threading.CancellationToken(this);
            this.handlers = [];
        },

        cancel: function (throwFirst) {
            if (this.isCancellationRequested) {
                return;
            }

            this.isCancellationRequested = true;

            var x = [],
                h = this.handlers;

            this.clean();

            for (var i = 0; i < h.length; i++) {
                try {
                    h[i].f(h[i].s);
                } catch (ex) {
                    if (throwFirst && throwFirst !== -1) {
                        throw ex;
                    }

                    x.push(ex);
                }
            }

            if (x.length > 0 && throwFirst !== -1) {
                throw new System.AggregateException(null, x);
            }
        },

        cancelAfter: function (delay) {
            if (this.isCancellationRequested) {
                return;
            }

            if (this.timeout) {
                clearTimeout(this.timeout);
            }

            this.timeout = setTimeout(Bridge.fn.bind(this, this.cancel), delay, -1);
        },

        register: function (f, s) {
            if (this.isCancellationRequested) {
                f(s);

                return new System.Threading.CancellationTokenRegistration();
            } else {
                var o = {
                    f: f,
                    s: s
                };

                this.handlers.push(o);

                return new System.Threading.CancellationTokenRegistration(this, o);
            }
        },

        deregister: function (o) {
            var ix = this.handlers.indexOf(o);

            if (ix >= 0) {
                this.handlers.splice(ix, 1);
            }
        },

        dispose: function () {
            this.clean();
        },

        clean: function () {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }

            this.timeout = null;
            this.handlers = [];

            if (this.links) {
                for (var i = 0; i < this.links.length; i++) {
                    this.links[i].dispose();
                }

                this.links = null;
            }
        },

        statics: {
            createLinked: function () {
                var cts = new System.Threading.CancellationTokenSource();

                cts.links = [];

                var d = Bridge.fn.bind(cts, cts.cancel);

                for (var i = 0; i < arguments.length; i++) {
                    cts.links.push(arguments[i].register(d));
                }

                return cts;
            }
        }
    });

    Bridge.define("System.Threading.CancellationToken", {
         $kind: "struct",

        ctor: function (source) {
            this.$initialize();

            if (!Bridge.is(source, System.Threading.CancellationTokenSource)) {
                source = source ? System.Threading.CancellationToken.sourceTrue : System.Threading.CancellationToken.sourceFalse;
            }

            this.source = source;
        },

        getCanBeCanceled: function () {
            return !this.source.uncancellable;
        },

        getIsCancellationRequested: function () {
            return this.source.isCancellationRequested;
        },

        throwIfCancellationRequested: function () {
            if (this.source.isCancellationRequested) {
                throw new System.OperationCanceledException.$ctor1(this);
            }
        },

        register: function (cb, s) {
            return this.source.register(cb, s);
        },

        getHashCode: function () {
            return Bridge.getHashCode(this.source);
        },

        equals: function (other) {
            return other.source === this.source;
        },

        equalsT: function (other) {
            return other.source === this.source;
        },

        statics: {
            sourceTrue: {
                isCancellationRequested: true,
                register: function (f, s) {
                    f(s);

                    return new System.Threading.CancellationTokenRegistration();
                }
            },
            sourceFalse: {
                uncancellable: true,
                isCancellationRequested: false,
                register: function () {
                    return new System.Threading.CancellationTokenRegistration();
                }
            },
            getDefaultValue: function () {
                return new System.Threading.CancellationToken();
            }
        }
    });

    System.Threading.CancellationToken.none = new System.Threading.CancellationToken();

    Bridge.define("System.Threading.CancellationTokenRegistration", {
        inherits: function () {
            return [System.IDisposable, System.IEquatable$1(System.Threading.CancellationTokenRegistration)];
        },

        $kind: "struct",

        config: {
            alias: [
                "dispose", "System$IDisposable$Dispose"
            ]
        },

        ctor: function (cts, o) {
            this.$initialize();
            this.cts = cts;
            this.o = o;
        },

        dispose: function () {
            if (this.cts) {
                this.cts.deregister(this.o);
                this.cts = this.o = null;
            }
        },

        equalsT: function (o) {
            return this === o;
        },

        equals: function (o) {
            return this === o;
        },

        statics: {
            getDefaultValue: function () {
                return new System.Threading.CancellationTokenRegistration();
            }
        }
    });

    // @source Validation.js

    var validation = {
        isNull: function (value) {
            return !Bridge.isDefined(value, true);
        },

        isEmpty: function (value) {
            return value == null || value.length === 0 || Bridge.is(value, System.Collections.ICollection) ? value.getCount() === 0 : false;
        },

        isNotEmptyOrWhitespace: function (value) {
            return Bridge.isDefined(value, true) && !(/^$|\s+/.test(value));
        },

        isNotNull: function (value) {
            return Bridge.isDefined(value, true);
        },

        isNotEmpty: function (value) {
            return !Bridge.Validation.isEmpty(value);
        },

        email: function (value) {
            var re = /^(")?(?:[^\."])(?:(?:[\.])?(?:[\w\-!#$%&'*+/=?^_`{|}~]))*\1@(\w[\-\w]*\.){1,5}([A-Za-z]){2,6}$/;

            return re.test(value);
        },

        url: function (value) {
            var re = /(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:\.\d{1,3}){3})(?!(?:\.\d{1,3}){2})(?!\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/;

            return re.test(value);
        },

        alpha: function (value) {
            var re = /^[a-zA-Z_]+$/;

            return re.test(value);
        },

        alphaNum: function (value) {
            var re = /^[a-zA-Z_]+$/;

            return re.test(value);
        },

        creditCard: function (value, type) {
            var re,
                checksum,
                i,
                digit,
                notype = false;

            if (type === "Visa") {
                // Visa: length 16, prefix 4, dashes optional.
                re = /^4\d{3}[- ]?\d{4}[- ]?\d{4}[- ]?\d{4}$/;
            } else if (type === "MasterCard") {
                // Mastercard: length 16, prefix 51-55, dashes optional.
                re = /^5[1-5]\d{2}[- ]?\d{4}[- ]?\d{4}[- ]?\d{4}$/;
            } else if (type === "Discover") {
                // Discover: length 16, prefix 6011, dashes optional.
                re = /^6011[- ]?\d{4}[- ]?\d{4}[- ]?\d{4}$/;
            } else if (type === "AmericanExpress") {
                // American Express: length 15, prefix 34 or 37.
                re = /^3[4,7]\d{13}$/;
            } else if (type === "DinersClub") {
                // Diners: length 14, prefix 30, 36, or 38.
                re = /^(3[0,6,8]\d{12})|(5[45]\d{14})$/;
            } else {
                // Basing min and max length on
                // http://developer.ean.com/general_info/Valid_Credit_Card_Types
                if (!value || value.length < 13 || value.length > 19) {
                    return false;
                }

                re = /[^0-9 \-]+/;
                notype = true;
            }

            if (!re.test(value)) {
                return false;
            }

            // Remove all dashes for the checksum checks to eliminate negative numbers
            value = value.split(notype ? "-" : /[- ]/).join("");

            // Checksum ("Mod 10")
            // Add even digits in even length strings or odd digits in odd length strings.
            checksum = 0;

            for (i = (2 - (value.length % 2)); i <= value.length; i += 2) {
                checksum += parseInt(value.charAt(i - 1));
            }

            // Analyze odd digits in even length strings or even digits in odd length strings.
            for (i = (value.length % 2) + 1; i < value.length; i += 2) {
                digit = parseInt(value.charAt(i - 1)) * 2;

                if (digit < 10) {
                    checksum += digit;
                } else {
                    checksum += (digit - 9);
                }
            }

            return (checksum % 10) === 0;
        }
    };

    Bridge.Validation = validation;

    // @source Attribute.js

    Bridge.define("System.Attribute", {
        statics: {
            getCustomAttributes: function (o, t, b) {
                if (o == null) {
                    throw new System.ArgumentNullException.$ctor1("element");
                }

                if (t == null) {
                    throw new System.ArgumentNullException.$ctor1("attributeType");
                }

                var r = o.at || [];

                if (!t) {
                    return r;
                }

                return r.filter(function (a) { return Bridge.is(a, t); });
            },

            getCustomAttributes$1: function (a, t, b) {
                if (a == null) {
                    throw new System.ArgumentNullException.$ctor1("element");
                }

                if (t == null) {
                    throw new System.ArgumentNullException.$ctor1("attributeType");
                }

                return a.getCustomAttributes(t || b);
            },

            isDefined: function (o, t, b) {
                var attrs = System.Attribute.getCustomAttributes(o, t, b);

                return attrs.length > 0;
            }
        }
    });

    // @source SerializableAttribute.js

    Bridge.define("System.SerializableAttribute", {
        inherits: [System.Attribute],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            }
        }
    });

    // @source INotifyPropertyChanged.js

    Bridge.define("System.ComponentModel.INotifyPropertyChanged", {
        $kind: "interface"
    });

    Bridge.define("System.ComponentModel.PropertyChangedEventArgs", {
        ctor: function (propertyName, newValue, oldValue) {
            this.$initialize();
            this.propertyName = propertyName;
            this.newValue = newValue;
            this.oldValue = oldValue;
        }
    });

    // @source Convert.js

    var scope = {};

    scope.convert = {
        typeCodes: {
            Empty: 0,
            Object: 1,
            DBNull: 2,
            Boolean: 3,
            Char: 4,
            SByte: 5,
            Byte: 6,
            Int16: 7,
            UInt16: 8,
            Int32: 9,
            UInt32: 10,
            Int64: 11,
            UInt64: 12,
            Single: 13,
            Double: 14,
            Decimal: 15,
            DateTime: 16,
            String: 18
        },

        toBoolean: function (value, formatProvider) {
            value = Bridge.unbox(value, true);

            switch (typeof (value)) {
                case "boolean":
                    return value;

                case "number":
                    return value !== 0; // non-zero int/float value is always converted to True;

                case "string":
                    var lowCaseVal = value.toLowerCase().trim();

                    if (lowCaseVal === "true") {
                        return true;
                    } else if (lowCaseVal === "false") {
                        return false;
                    } else {
                        throw new System.FormatException.$ctor1("String was not recognized as a valid Boolean.");
                    }

                case "object":
                    if (value == null) {
                        return false;
                    }

                    if (value instanceof System.Decimal) {
                        return !value.isZero();
                    }

                    if (System.Int64.is64Bit(value)) {
                        return value.ne(0);
                    }

                    break;
            }

            // TODO: #822 When IConvertible is implemented, try it before throwing InvalidCastEx
            var typeCode = scope.internal.suggestTypeCode(value);
            scope.internal.throwInvalidCastEx(typeCode, scope.convert.typeCodes.Boolean);

            // try converting using IConvertible
            return scope.convert.convertToType(scope.convert.typeCodes.Boolean, value, formatProvider || null);
        },

        toChar: function (value, formatProvider, valueTypeCode) {
            var typeCodes = scope.convert.typeCodes,
                isChar = Bridge.is(value, System.Char);

            value = Bridge.unbox(value, true);

            if (value instanceof System.Decimal) {
                value = value.toFloat();
            }

            if (value instanceof System.Int64 || value instanceof System.UInt64) {
                value = value.toNumber();
            }

            var type = typeof (value);

            valueTypeCode = valueTypeCode || scope.internal.suggestTypeCode(value);

            if (valueTypeCode === typeCodes.String && value == null) {
                type = "string";
            }

            if (valueTypeCode !== typeCodes.Object || isChar) {
                switch (type) {
                    case "boolean":
                        scope.internal.throwInvalidCastEx(typeCodes.Boolean, typeCodes.Char);

                    case "number":
                        var isFloatingType = scope.internal.isFloatingType(valueTypeCode);

                        if (isFloatingType || value % 1 !== 0) {
                            scope.internal.throwInvalidCastEx(valueTypeCode, typeCodes.Char);
                        }

                        scope.internal.validateNumberRange(value, typeCodes.Char, true);

                        return value;

                    case "string":
                        if (value == null) {
                            throw new System.ArgumentNullException.$ctor1("value");
                        }

                        if (value.length !== 1) {
                            throw new System.FormatException.$ctor1("String must be exactly one character long.");
                        }

                        return value.charCodeAt(0);
                }
            }

            if (valueTypeCode === typeCodes.Object || type === "object") {
                if (value == null) {
                    return 0;
                }

                if (Bridge.isDate(value)) {
                    scope.internal.throwInvalidCastEx(typeCodes.DateTime, typeCodes.Char);
                }
            }

            // TODO: #822 When IConvertible is implemented, try it before throwing InvalidCastEx
            scope.internal.throwInvalidCastEx(valueTypeCode, scope.convert.typeCodes.Char);

            // try converting using IConvertible
            return scope.convert.convertToType(typeCodes.Char, value, formatProvider || null);
        },

        toSByte: function (value, formatProvider, valueTypeCode) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.SByte, valueTypeCode || null);
        },

        toByte: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Byte);
        },

        toInt16: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Int16);
        },

        toUInt16: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.UInt16);
        },

        toInt32: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Int32);
        },

        toUInt32: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.UInt32);
        },

        toInt64: function (value, formatProvider) {
            var result = scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Int64);
            return new System.Int64(result);
        },

        toUInt64: function (value, formatProvider) {
            var result = scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.UInt64);
            return new System.UInt64(result);
        },

        toSingle: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Single);
        },

        toDouble: function (value, formatProvider) {
            return scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Double);
        },

        toDecimal: function (value, formatProvider) {
            if (value instanceof System.Decimal) {
                return value;
            }

            return new System.Decimal(scope.internal.toNumber(value, formatProvider || null, scope.convert.typeCodes.Decimal));
        },

        toDateTime: function (value, formatProvider) {
            var typeCodes = scope.convert.typeCodes;

            value = Bridge.unbox(value, true);

            switch (typeof (value)) {
                case "boolean":
                    scope.internal.throwInvalidCastEx(typeCodes.Boolean, typeCodes.DateTime);

                case "number":
                    var fromType = scope.internal.suggestTypeCode(value);
                    scope.internal.throwInvalidCastEx(fromType, typeCodes.DateTime);

                case "string":
                    value = System.DateTime.parse(value, formatProvider || null);

                    return value;

                case "object":
                    if (value == null) {
                        return scope.internal.getMinValue(typeCodes.DateTime);
                    }

                    if (Bridge.isDate(value)) {
                        return value;
                    }

                    if (value instanceof System.Decimal) {
                        scope.internal.throwInvalidCastEx(typeCodes.Decimal, typeCodes.DateTime);
                    }

                    if (value instanceof System.Int64) {
                        scope.internal.throwInvalidCastEx(typeCodes.Int64, typeCodes.DateTime);
                    }

                    if (value instanceof System.UInt64) {
                        scope.internal.throwInvalidCastEx(typeCodes.UInt64, typeCodes.DateTime);
                    }

                    break;
            }

            // TODO: #822 When IConvertible is implemented, try it before throwing InvalidCastEx
            var valueTypeCode = scope.internal.suggestTypeCode(value);

            scope.internal.throwInvalidCastEx(valueTypeCode, scope.convert.typeCodes.DateTime);

            // try converting using IConvertible
            return scope.convert.convertToType(typeCodes.DateTime, value, formatProvider || null);
        },

        toString: function (value, formatProvider, valueTypeCode) {
            if (value && value.$boxed) {
                return value.toString();
            }

            var typeCodes = scope.convert.typeCodes,
                type = typeof (value);

            switch (type) {
                case "boolean":
                    return value ? "True" : "False";

                case "number":
                    if ((valueTypeCode || null) === typeCodes.Char) {
                        return String.fromCharCode(value);
                    }

                    if (isNaN(value)) {
                        return "NaN";
                    }

                    if (value % 1 !== 0) {
                        value = parseFloat(value.toPrecision(15));
                    }

                    return value.toString();

                case "string":
                    return value;

                case "object":
                    if (value == null) {
                        return "";
                    }

                    // If the object has an override to the toString() method,
                    // then just return its result
                    if (value.toString !== Object.prototype.toString) {
                        return value.toString();
                    }

                    if (Bridge.isDate(value)) {
                        return System.DateTime.format(value, null, formatProvider || null);
                    }

                    if (value instanceof System.Decimal) {
                        if (value.isInteger()) {
                            return value.toFixed(0, 4);
                        }
                        return value.toPrecision(value.precision());
                    }

                    if (System.Int64.is64Bit(value)) {
                        return value.toString();
                    }

                    if (value.format) {
                        return value.format(null, formatProvider || null);
                    }

                    var typeName = Bridge.getTypeName(value);

                    return typeName;
            }

            // try converting using IConvertible
            return scope.convert.convertToType(scope.convert.typeCodes.String, value, formatProvider || null);
        },

        toNumberInBase: function (str, fromBase, typeCode) {
            if (fromBase !== 2 && fromBase !== 8 && fromBase !== 10 && fromBase !== 16) {
                throw new System.ArgumentException.$ctor1("Invalid Base.");
            }

            var typeCodes = scope.convert.typeCodes;

            if (str == null) {
                if (typeCode === typeCodes.Int64) {
                    return System.Int64.Zero;
                }

                if (typeCode === typeCodes.UInt64) {
                    return System.UInt64.Zero;
                }

                return 0;
            }

            if (str.length === 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index was out of range. Must be non-negative and less than the size of the collection.");
            }

            // Let's process the string in lower case.
            str = str.toLowerCase();

            var minValue = scope.internal.getMinValue(typeCode),
                maxValue = scope.internal.getMaxValue(typeCode);

            // Calculate offset (start index)
            var isNegative = false,
                startIndex = 0;

            if (str[startIndex] === "-") {
                if (fromBase !== 10) {
                    throw new System.ArgumentException.$ctor1("String cannot contain a minus sign if the base is not 10.");
                }

                if (minValue >= 0) {
                    throw new System.OverflowException.$ctor1("The string was being parsed as an unsigned number and could not have a negative sign.");
                }

                isNegative = true;
                ++startIndex;
            } else if (str[startIndex] === "+") {
                ++startIndex;
            }

            if (fromBase === 16 && str.length >= 2 && str[startIndex] === "0" && str[startIndex + 1] === "x") {
                startIndex += 2;
            }

            // Fill allowed codes for the specified base:
            var allowedCodes;

            if (fromBase === 2) {
                allowedCodes = scope.internal.charsToCodes("01");
            } else if (fromBase === 8) {
                allowedCodes = scope.internal.charsToCodes("01234567");
            } else if (fromBase === 10) {
                allowedCodes = scope.internal.charsToCodes("0123456789");
            } else if (fromBase === 16) {
                allowedCodes = scope.internal.charsToCodes("0123456789abcdef");
            } else {
                throw new System.ArgumentException.$ctor1("Invalid Base.");
            }

            // Create charCode-to-Value map
            var codeValues = {};

            for (var i = 0; i < allowedCodes.length; i++) {
                var allowedCode = allowedCodes[i];

                codeValues[allowedCode] = i;
            }

            var firstAllowed = allowedCodes[0],
                lastAllowed = allowedCodes[allowedCodes.length - 1],
                res,
                totalMax,
                code,
                j;

            if (typeCode === typeCodes.Int64 || typeCode === typeCodes.UInt64) {
                for (j = startIndex; j < str.length; j++) {
                    code = str[j].charCodeAt(0);

                    if (!(code >= firstAllowed && code <= lastAllowed)) {
                        if (j === startIndex) {
                            throw new System.FormatException.$ctor1("Could not find any recognizable digits.");
                        } else {
                            throw new System.FormatException.$ctor1("Additional non-parsable characters are at the end of the string.");
                        }
                    }
                }

                var isSign = typeCode === typeCodes.Int64;

                if (isSign) {
                    res = new System.Int64(Bridge.$Long.fromString(str, false, fromBase));
                } else {
                    res = new System.UInt64(Bridge.$Long.fromString(str, true, fromBase));
                }

                if (res.toString(fromBase) !== System.String.trimStartZeros(str)) {
                    throw new System.OverflowException.$ctor1("Value was either too large or too small.");
                }

                return res;
            } else {
                // Parse the number:
                res = 0;
                totalMax = maxValue - minValue + 1;

                for (j = startIndex; j < str.length; j++) {
                    code = str[j].charCodeAt(0);

                    if (code >= firstAllowed && code <= lastAllowed) {
                        res *= fromBase;
                        res += codeValues[code];

                        if (res > scope.internal.typeRanges.Int64_MaxValue) {
                            throw new System.OverflowException.$ctor1("Value was either too large or too small.");
                        }
                    } else {
                        if (j === startIndex) {
                            throw new System.FormatException.$ctor1("Could not find any recognizable digits.");
                        } else {
                            throw new System.FormatException.$ctor1("Additional non-parsable characters are at the end of the string.");
                        }
                    }
                }

                if (isNegative) {
                    res *= -1;
                }

                if (res > maxValue && fromBase !== 10 && minValue < 0) {
                    // Assume that the value is negative, transform it:
                    res = res - totalMax;
                }

                if (res < minValue || res > maxValue) {
                    throw new System.OverflowException.$ctor1("Value was either too large or too small.");
                }

                return res;
            }
        },

        toStringInBase: function (value, toBase, typeCode) {
            var typeCodes = scope.convert.typeCodes;

            value = Bridge.unbox(value, true);

            if (toBase !== 2 && toBase !== 8 && toBase !== 10 && toBase !== 16) {
                throw new System.ArgumentException.$ctor1("Invalid Base.");
            }

            var minValue = scope.internal.getMinValue(typeCode),
                maxValue = scope.internal.getMaxValue(typeCode),
                special = System.Int64.is64Bit(value);

            if (special) {
                if (value.lt(minValue) || value.gt(maxValue)) {
                    throw new System.OverflowException.$ctor1("Value was either too large or too small for an unsigned byte.");
                }
            } else if (value < minValue || value > maxValue) {
                throw new System.OverflowException.$ctor1("Value was either too large or too small for an unsigned byte.");
            }

            // Handle negative numbers:
            var isNegative = false;

            if (special) {
                if (toBase === 10) {
                    return value.toString();
                } else {
                    return value.value.toUnsigned().toString(toBase);
                }
            } else if (value < 0) {
                if (toBase === 10) {
                    isNegative = true;
                    value *= -1;
                } else {
                    value = (maxValue + 1 - minValue) + value;
                }
            }

            // Fill allowed codes for the specified base:
            var allowedChars;

            if (toBase === 2) {
                allowedChars = "01";
            } else if (toBase === 8) {
                allowedChars = "01234567";
            } else if (toBase === 10) {
                allowedChars = "0123456789";
            } else if (toBase === 16) {
                allowedChars = "0123456789abcdef";
            } else {
                throw new System.ArgumentException.$ctor1("Invalid Base.");
            }

            // Fill Value-To-Char map:
            var charByValues = {},
                allowedCharArr = allowedChars.split(""),
                allowedChar;

            for (var i = 0; i < allowedCharArr.length; i++) {
                allowedChar = allowedCharArr[i];

                charByValues[i] = allowedChar;
            }

            // Parse the number:
            var res = "";

            if (value === 0 || (special && value.eq(0))) {
                res = "0";
            } else {
                var mod, char;

                if (special) {
                    while (value.gt(0)) {
                        mod = value.mod(toBase);
                        value = value.sub(mod).div(toBase);

                        char = charByValues[mod.toNumber()];
                        res += char;
                    }
                } else {
                    while (value > 0) {
                        mod = value % toBase;
                        value = (value - mod) / toBase;

                        char = charByValues[mod];
                        res += char;
                    }
                }
            }

            if (isNegative) {
                res += "-";
            }

            res = res.split("").reverse().join("");

            return res;
        },

        toBase64String: function (inArray, offset, length, options) {
            if (inArray == null) {
                throw new System.ArgumentNullException.$ctor1("inArray");
            }

            offset = offset || 0;
            length = length != null ? length : inArray.length;
            options = options || 0; // 0 - means "None", 1 - stands for "InsertLineBreaks"

            if (length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index was out of range. Must be non-negative and less than the size of the collection.");
            }

            if (offset < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offset", "Value must be positive.");
            }

            if (options < 0 || options > 1) {
                throw new System.ArgumentException.$ctor1("Illegal enum value.");
            }

            var inArrayLength = inArray.length;

            if (offset > (inArrayLength - length)) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offset", "Offset and length must refer to a position in the string.");
            }

            if (inArrayLength === 0) {
                return "";
            }

            var insertLineBreaks = (options === 1),
                strArrayLen = scope.internal.toBase64_CalculateAndValidateOutputLength(length, insertLineBreaks);

            var strArray = [];
            strArray.length = strArrayLen;

            scope.internal.convertToBase64Array(strArray, inArray, offset, length, insertLineBreaks);

            var str = strArray.join("");

            return str;
        },

        toBase64CharArray: function (inArray, offsetIn, length, outArray, offsetOut, options) {
            if (inArray == null) {
                throw new System.ArgumentNullException.$ctor1("inArray");
            }

            if (outArray == null) {
                throw new System.ArgumentNullException.$ctor1("outArray");
            }

            if (length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index was out of range. Must be non-negative and less than the size of the collection.");
            }

            if (offsetIn < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offsetIn", "Value must be positive.");
            }

            if (offsetOut < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offsetOut", "Value must be positive.");
            }

            options = options || 0; // 0 - means "None", 1 - stands for "InsertLineBreaks"

            if (options < 0 || options > 1) {
                throw new System.ArgumentException.$ctor1("Illegal enum value.");
            }

            var inArrayLength = inArray.length;

            if (offsetIn > inArrayLength - length) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offsetIn", "Offset and length must refer to a position in the string.");
            }

            if (inArrayLength === 0) {
                return 0;
            }

            var insertLineBreaks = options === 1,
                outArrayLength = outArray.length; //This is the maximally required length that must be available in the char array

            // Length of the char buffer required
            var numElementsToCopy = scope.internal.toBase64_CalculateAndValidateOutputLength(length, insertLineBreaks);

            if (offsetOut > (outArrayLength - numElementsToCopy)) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offsetOut", "Either offset did not refer to a position in the string, or there is an insufficient length of destination character array.");
            }

            var charsArr = [],
                charsArrLength = scope.internal.convertToBase64Array(charsArr, inArray, offsetIn, length, insertLineBreaks);

            scope.internal.charsToCodes(charsArr, outArray, offsetOut);

            return charsArrLength;
        },

        fromBase64String: function (s) {
            // "s" is an unfortunate parameter name, but we need to keep it for backward compat.

            if (s == null) {
                throw new System.ArgumentNullException.$ctor1("s");
            }

            var sChars = s.split(""),
                bytes = scope.internal.fromBase64CharPtr(sChars, 0, sChars.length);

            return bytes;
        },

        fromBase64CharArray: function (inArray, offset, length) {
            if (inArray == null) {
                throw new System.ArgumentNullException.$ctor1("inArray");
            }

            if (length < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index was out of range. Must be non-negative and less than the size of the collection.");
            }

            if (offset < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offset", "Value must be positive.");
            }

            if (offset > (inArray.length - length)) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offset", "Offset and length must refer to a position in the string.");
            }

            var chars = scope.internal.codesToChars(inArray),
                bytes = scope.internal.fromBase64CharPtr(chars, offset, length);

            return bytes;
        },

        convertToType: function (typeCode, value, formatProvider) {
            //TODO: #822 IConvertible
            throw new System.NotSupportedException.$ctor1("IConvertible interface is not supported.");
        }
    };

    scope.internal = {
        base64Table: [
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
            "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d",
            "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s",
            "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7",
            "8", "9", "+", "/", "="
        ],

        typeRanges: {
            Char_MinValue: 0,
            Char_MaxValue: 65535,

            Byte_MinValue: 0,
            Byte_MaxValue: 255,

            SByte_MinValue: -128,
            SByte_MaxValue: 127,

            Int16_MinValue: -32768,
            Int16_MaxValue: 32767,

            UInt16_MinValue: 0,
            UInt16_MaxValue: 65535,

            Int32_MinValue: -2147483648,
            Int32_MaxValue: 2147483647,

            UInt32_MinValue: 0,
            UInt32_MaxValue: 4294967295,

            Int64_MinValue: System.Int64.MinValue,
            Int64_MaxValue: System.Int64.MaxValue,

            UInt64_MinValue: System.UInt64.MinValue,
            UInt64_MaxValue: System.UInt64.MaxValue,

            Single_MinValue: -3.40282347e+38,
            Single_MaxValue: 3.40282347e+38,

            Double_MinValue: -1.7976931348623157e+308,
            Double_MaxValue: 1.7976931348623157e+308,

            Decimal_MinValue: System.Decimal.MinValue,
            Decimal_MaxValue: System.Decimal.MaxValue
        },

        base64LineBreakPosition: 76,

        getTypeCodeName: function (typeCode) {
            var typeCodes = scope.convert.typeCodes;

            if (scope.internal.typeCodeNames == null) {
                var names = {};

                for (var codeName in typeCodes) {
                    if (!typeCodes.hasOwnProperty(codeName)) {
                        continue;
                    }

                    var codeValue = typeCodes[codeName];

                    names[codeValue] = codeName;
                }
                scope.internal.typeCodeNames = names;
            }

            var name = scope.internal.typeCodeNames[typeCode];

            if (name == null) {
                throw System.ArgumentOutOfRangeException("typeCode", "The specified typeCode is undefined.");
            }

            return name;
        },

        suggestTypeCode: function (value) {
            var typeCodes = scope.convert.typeCodes,
                type = typeof (value);

            switch (type) {
                case "boolean":
                    return typeCodes.Boolean;

                case "number":
                    if (value % 1 !== 0) {
                        return typeCodes.Double;
                    }

                    return typeCodes.Int32;

                case "string":
                    return typeCodes.String;

                case "object":
                    if (Bridge.isDate(value)) {
                        return typeCodes.DateTime;
                    }

                    if (value != null) {
                        return typeCodes.Object;
                    }

                    break;
            }
            return null;
        },

        getMinValue: function (typeCode) {
            var typeCodes = scope.convert.typeCodes;

            switch (typeCode) {
                case typeCodes.Char:
                    return scope.internal.typeRanges.Char_MinValue;
                case typeCodes.SByte:
                    return scope.internal.typeRanges.SByte_MinValue;
                case typeCodes.Byte:
                    return scope.internal.typeRanges.Byte_MinValue;
                case typeCodes.Int16:
                    return scope.internal.typeRanges.Int16_MinValue;
                case typeCodes.UInt16:
                    return scope.internal.typeRanges.UInt16_MinValue;
                case typeCodes.Int32:
                    return scope.internal.typeRanges.Int32_MinValue;
                case typeCodes.UInt32:
                    return scope.internal.typeRanges.UInt32_MinValue;
                case typeCodes.Int64:
                    return scope.internal.typeRanges.Int64_MinValue;
                case typeCodes.UInt64:
                    return scope.internal.typeRanges.UInt64_MinValue;
                case typeCodes.Single:
                    return scope.internal.typeRanges.Single_MinValue;
                case typeCodes.Double:
                    return scope.internal.typeRanges.Double_MinValue;
                case typeCodes.Decimal:
                    return scope.internal.typeRanges.Decimal_MinValue;
                case typeCodes.DateTime:
                    return System.DateTime.getMinValue();

                default:
                    return null;
            }
        },

        getMaxValue: function (typeCode) {
            var typeCodes = scope.convert.typeCodes;

            switch (typeCode) {
                case typeCodes.Char:
                    return scope.internal.typeRanges.Char_MaxValue;
                case typeCodes.SByte:
                    return scope.internal.typeRanges.SByte_MaxValue;
                case typeCodes.Byte:
                    return scope.internal.typeRanges.Byte_MaxValue;
                case typeCodes.Int16:
                    return scope.internal.typeRanges.Int16_MaxValue;
                case typeCodes.UInt16:
                    return scope.internal.typeRanges.UInt16_MaxValue;
                case typeCodes.Int32:
                    return scope.internal.typeRanges.Int32_MaxValue;
                case typeCodes.UInt32:
                    return scope.internal.typeRanges.UInt32_MaxValue;
                case typeCodes.Int64:
                    return scope.internal.typeRanges.Int64_MaxValue;
                case typeCodes.UInt64:
                    return scope.internal.typeRanges.UInt64_MaxValue;
                case typeCodes.Single:
                    return scope.internal.typeRanges.Single_MaxValue;
                case typeCodes.Double:
                    return scope.internal.typeRanges.Double_MaxValue;
                case typeCodes.Decimal:
                    return scope.internal.typeRanges.Decimal_MaxValue;
                case typeCodes.DateTime:
                    return System.DateTime.getMaxValue();
                default:
                    throw new System.ArgumentOutOfRangeException.$ctor4("typeCode", "The specified typeCode is undefined.");
            }
        },

        isFloatingType: function (typeCode) {
            var typeCodes = scope.convert.typeCodes,
                isFloatingType =
                    typeCode === typeCodes.Single ||
                    typeCode === typeCodes.Double ||
                    typeCode === typeCodes.Decimal;

            return isFloatingType;
        },

        toNumber: function (value, formatProvider, typeCode, valueTypeCode) {
            value = Bridge.unbox(value, true);

            var typeCodes = scope.convert.typeCodes,
                type = typeof (value),
                isFloating = scope.internal.isFloatingType(typeCode);

            if (valueTypeCode === typeCodes.String) {
                type = "string";
            }

            if (System.Int64.is64Bit(value) || value instanceof System.Decimal) {
                type = "number";
            }

            switch (type) {
                case "boolean":
                    return value ? 1 : 0;

                case "number":
                    if (typeCode === typeCodes.Decimal) {
                        scope.internal.validateNumberRange(value, typeCode, true);

                        return new System.Decimal(value, formatProvider);
                    }

                    if (typeCode === typeCodes.Int64) {
                        scope.internal.validateNumberRange(value, typeCode, true);

                        return new System.Int64(value);
                    }

                    if (typeCode === typeCodes.UInt64) {
                        scope.internal.validateNumberRange(value, typeCode, true);

                        return new System.UInt64(value);
                    }

                    if (System.Int64.is64Bit(value)) {
                        value = value.toNumber();
                    } else if (value instanceof System.Decimal) {
                        value = value.toFloat();
                    }

                    if (!isFloating && (value % 1 !== 0)) {
                        value = scope.internal.roundToInt(value, typeCode);
                    }

                    if (isFloating) {
                        var minValue = scope.internal.getMinValue(typeCode),
                            maxValue = scope.internal.getMaxValue(typeCode);

                        if (value > maxValue) {
                            value = Infinity;
                        } else if (value < minValue) {
                            value = -Infinity;
                        }
                    }

                    scope.internal.validateNumberRange(value, typeCode, false);
                    return value;

                case "string":
                    if (value == null) {
                        if (formatProvider != null) {
                            throw new System.ArgumentNullException.$ctor3("String", "Value cannot be null.");
                        }

                        return 0;
                    }

                    if (isFloating) {
                        if (typeCode === typeCodes.Decimal) {
                            if (!/^[+-]?(\d+|\d+.|\d*\.\d+)$/.test(value)) {
                                if (!/^[+-]?[0-9]+$/.test(value)) {
                                    throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                                }
                            }

                            value = System.Decimal(value, formatProvider);
                        } else {
                            if (!/^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/.test(value)) {
                                throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                            }

                            value = parseFloat(value);
                        }
                    } else {
                        if (!/^[+-]?[0-9]+$/.test(value)) {
                            throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                        }

                        var str = value;

                        if (typeCode === typeCodes.Int64) {
                            value = new System.Int64(value);

                            if (System.String.trimStartZeros(str) !== value.toString()) {
                                this.throwOverflow(scope.internal.getTypeCodeName(typeCode));
                            }
                        } else if (typeCode === typeCodes.UInt64) {
                            value = new System.UInt64(value);

                            if (System.String.trimStartZeros(str) !== value.toString()) {
                                this.throwOverflow(scope.internal.getTypeCodeName(typeCode));
                            }
                        } else {
                            value = parseInt(value, 10);
                        }
                    }

                    if (isNaN(value)) {
                        throw new System.FormatException.$ctor1("Input string was not in a correct format.");
                    }

                    scope.internal.validateNumberRange(value, typeCode, true);

                    return value;

                case "object":
                    if (value == null) {
                        return 0;
                    }

                    if (Bridge.isDate(value)) {
                        scope.internal.throwInvalidCastEx(scope.convert.typeCodes.DateTime, typeCode);
                    }

                    break;
            }

            // TODO: #822 When IConvertible is implemented, try it before throwing InvalidCastEx
            valueTypeCode = valueTypeCode || scope.internal.suggestTypeCode(value);
            scope.internal.throwInvalidCastEx(valueTypeCode, typeCode);

            // try converting using IConvertible
            return scope.convert.convertToType(typeCode, value, formatProvider);
        },

        validateNumberRange: function (value, typeCode, denyInfinity) {
            var typeCodes = scope.convert.typeCodes,
                minValue = scope.internal.getMinValue(typeCode),
                maxValue = scope.internal.getMaxValue(typeCode),
                typeName = scope.internal.getTypeCodeName(typeCode);

            if (typeCode === typeCodes.Single ||
                typeCode === typeCodes.Double) {
                if (!denyInfinity && (value === Infinity || value === -Infinity)) {
                    return;
                }
            }

            if (typeCode === typeCodes.Decimal || typeCode === typeCodes.Int64 || typeCode === typeCodes.UInt64) {
                if (typeCode === typeCodes.Decimal) {
                    if (!System.Int64.is64Bit(value)) {
                        if (minValue.gt(value) || maxValue.lt(value)) {
                            this.throwOverflow(typeName);
                        }
                    }

                    value = new System.Decimal(value);
                } else if (typeCode === typeCodes.Int64) {
                    if (value instanceof System.UInt64) {
                        if (value.gt(System.Int64.MaxValue)) {
                            this.throwOverflow(typeName);
                        }
                    } else if (value instanceof System.Decimal) {
                        if ((value.gt(new System.Decimal(maxValue)) || value.lt(new System.Decimal(minValue)))) {
                            this.throwOverflow(typeName);
                        }
                    } else if (!(value instanceof System.Int64)) {
                        if (minValue.toNumber() > value || maxValue.toNumber() < value) {
                            this.throwOverflow(typeName);
                        }
                    }

                    value = new System.Int64(value);
                } else if (typeCode === typeCodes.UInt64) {
                    if (value instanceof System.Int64) {
                        if (value.isNegative()) {
                            this.throwOverflow(typeName);
                        }
                    } else if (value instanceof System.Decimal) {
                        if ((value.gt(new System.Decimal(maxValue)) || value.lt(new System.Decimal(minValue)))) {
                            this.throwOverflow(typeName);
                        }
                    } else if (!(value instanceof System.UInt64)) {
                        if (minValue.toNumber() > value || maxValue.toNumber() < value) {
                            this.throwOverflow(typeName);
                        }
                    }

                    value = new System.UInt64(value);
                }
            } else if (value < minValue || value > maxValue) {
                this.throwOverflow(typeName);
            }
        },

        throwOverflow: function (typeName) {
            throw new System.OverflowException.$ctor1("Value was either too large or too small for '" + typeName + "'.");
        },

        roundToInt: function (value, typeCode) {
            if (value % 1 === 0) {
                return value;
            }

            var intPart;

            if (value >= 0) {
                intPart = Math.floor(value);
            } else {
                intPart = -1 * Math.floor(-value);
            }

            var floatPart = value - intPart,
                minValue = scope.internal.getMinValue(typeCode),
                maxValue = scope.internal.getMaxValue(typeCode);

            if (value >= 0.0) {
                if (value < (maxValue + 0.5)) {
                    if (floatPart > 0.5 || floatPart === 0.5 && (intPart & 1) !== 0) {
                        ++intPart;
                    }

                    return intPart;
                }
            } else if (value >= (minValue - 0.5)) {
                if (floatPart < -0.5 || floatPart === -0.5 && (intPart & 1) !== 0) {
                    --intPart;
                }

                return intPart;
            }

            var typeName = scope.internal.getTypeCodeName(typeCode);

            throw new System.OverflowException.$ctor1("Value was either too large or too small for an '" + typeName + "'.");
        },

        toBase64_CalculateAndValidateOutputLength: function (inputLength, insertLineBreaks) {
            var base64LineBreakPosition = scope.internal.base64LineBreakPosition,
                outlen = ~~(inputLength / 3) * 4; // the base length - we want integer division here.

            outlen += ((inputLength % 3) !== 0) ? 4 : 0; // at most 4 more chars for the remainder

            if (outlen === 0) {
                return 0;
            }

            if (insertLineBreaks) {
                var newLines = ~~(outlen / base64LineBreakPosition);

                if ((outlen % base64LineBreakPosition) === 0) {
                    --newLines;
                }

                outlen += newLines * 2; // the number of line break chars we'll add, "\r\n"
            }

            // If we overflow an int then we cannot allocate enough
            // memory to output the value so throw
            if (outlen > 2147483647) {
                throw new System.OutOfMemoryException();
            }

            return outlen;
        },

        convertToBase64Array: function (outChars, inData, offset, length, insertLineBreaks) {
            var base64Table = scope.internal.base64Table,
                base64LineBreakPosition = scope.internal.base64LineBreakPosition,
                lengthmod3 = length % 3,
                calcLength = offset + (length - lengthmod3),
                charCount = 0,
                j = 0;

            // Convert three bytes at a time to base64 notation.  This will consume 4 chars.
            var i;

            for (i = offset; i < calcLength; i += 3) {
                if (insertLineBreaks) {
                    if (charCount === base64LineBreakPosition) {
                        outChars[j++] = "\r";
                        outChars[j++] = "\n";
                        charCount = 0;
                    }

                    charCount += 4;
                }

                outChars[j] = base64Table[(inData[i] & 0xfc) >> 2];
                outChars[j + 1] = base64Table[((inData[i] & 0x03) << 4) | ((inData[i + 1] & 0xf0) >> 4)];
                outChars[j + 2] = base64Table[((inData[i + 1] & 0x0f) << 2) | ((inData[i + 2] & 0xc0) >> 6)];
                outChars[j + 3] = base64Table[(inData[i + 2] & 0x3f)];
                j += 4;
            }

            //Where we left off before
            i = calcLength;

            if (insertLineBreaks && (lengthmod3 !== 0) && (charCount === scope.internal.base64LineBreakPosition)) {
                outChars[j++] = "\r";
                outChars[j++] = "\n";
            }

            switch (lengthmod3) {
                case 2: //One character padding needed
                    outChars[j] = base64Table[(inData[i] & 0xfc) >> 2];
                    outChars[j + 1] = base64Table[((inData[i] & 0x03) << 4) | ((inData[i + 1] & 0xf0) >> 4)];
                    outChars[j + 2] = base64Table[(inData[i + 1] & 0x0f) << 2];
                    outChars[j + 3] = base64Table[64]; //Pad
                    j += 4;

                    break;

                case 1: // Two character padding needed
                    outChars[j] = base64Table[(inData[i] & 0xfc) >> 2];
                    outChars[j + 1] = base64Table[(inData[i] & 0x03) << 4];
                    outChars[j + 2] = base64Table[64]; //Pad
                    outChars[j + 3] = base64Table[64]; //Pad
                    j += 4;

                    break;
            }

            return j;
        },

        fromBase64CharPtr: function (input, offset, inputLength) {
            if (inputLength < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("inputLength", "Index was out of range. Must be non-negative and less than the size of the collection.");
            }

            if (offset < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("offset", "Value must be positive.");
            }

            // We need to get rid of any trailing white spaces.
            // Otherwise we would be rejecting input such as "abc= ":
            while (inputLength > 0) {
                var lastChar = input[offset + inputLength - 1];

                if (lastChar !== " " && lastChar !== "\n" && lastChar !== "\r" && lastChar !== "\t") {
                    break;
                }

                inputLength--;
            }

            // Compute the output length:
            var resultLength = scope.internal.fromBase64_ComputeResultLength(input, offset, inputLength);

            if (0 > resultLength) {
                throw new System.InvalidOperationException.$ctor1("Contract voilation: 0 <= resultLength.");
            }

            // resultLength can be zero. We will still enter FromBase64_Decode and process the input.
            // It may either simply write no bytes (e.g. input = " ") or throw (e.g. input = "ab").

            // Create result byte blob:
            var decodedBytes = [];
            decodedBytes.length = resultLength;

            // Convert Base64 chars into bytes:
            scope.internal.fromBase64_Decode(input, offset, inputLength, decodedBytes, 0, resultLength);

            // We are done:
            return decodedBytes;
        },

        fromBase64_Decode: function (input, inputIndex, inputLength, dest, destIndex, destLength) {
            var startDestIndex = destIndex;

            // You may find this method weird to look at. Its written for performance, not aesthetics.
            // You will find unrolled loops label jumps and bit manipulations.

            var intA = "A".charCodeAt(0),
                inta = "a".charCodeAt(0),
                int0 = "0".charCodeAt(0),
                intEq = "=".charCodeAt(0),
                intPlus = "+".charCodeAt(0),
                intSlash = "/".charCodeAt(0),
                intSpace = " ".charCodeAt(0),
                intTab = "\t".charCodeAt(0),
                intNLn = "\n".charCodeAt(0),
                intCRt = "\r".charCodeAt(0),
                intAtoZ = ("Z".charCodeAt(0) - "A".charCodeAt(0)),
                int0To9 = ("9".charCodeAt(0) - "0".charCodeAt(0));

            var endInputIndex = inputIndex + inputLength,
                endDestIndex = destIndex + destLength;

            // Current char code/value:
            var currCode;

            // This 4-byte integer will contain the 4 codes of the current 4-char group.
            // Eeach char codes for 6 bits = 24 bits.
            // The remaining byte will be FF, we use it as a marker when 4 chars have been processed.
            var currBlockCodes = 0x000000FF;

            var allInputConsumed = false,
                equalityCharEncountered = false;

            while (true) {
                // break when done:
                if (inputIndex >= endInputIndex) {
                    allInputConsumed = true;

                    break;
                }

                // Get current char:
                currCode = input[inputIndex].charCodeAt(0);
                inputIndex++;

                // Determine current char code (unsigned Int comparison):
                if (((currCode - intA) >>> 0) <= intAtoZ) {
                    currCode -= intA;
                } else if (((currCode - inta) >>> 0) <= intAtoZ) {
                    currCode -= (inta - 26);
                } else if (((currCode - int0) >>> 0) <= int0To9) {
                    currCode -= (int0 - 52);
                } else {
                    // Use the slower switch for less common cases:
                    switch (currCode) {
                        // Significant chars:
                        case intPlus:
                            currCode = 62;

                            break;

                        case intSlash:
                            currCode = 63;

                            break;

                            // Legal no-value chars (we ignore these):
                        case intCRt:
                        case intNLn:
                        case intSpace:
                        case intTab:
                            continue;

                            // The equality char is only legal at the end of the input.
                            // Jump after the loop to make it easier for the JIT register predictor to do a good job for the loop itself:
                        case intEq:
                            equalityCharEncountered = true;

                            break;

                            // Other chars are illegal:
                        default:
                            throw new System.FormatException.$ctor1("The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.");
                    }
                }

                if (equalityCharEncountered) {
                    break;
                }

                // Ok, we got the code. Save it:
                currBlockCodes = (currBlockCodes << 6) | currCode;

                // Last bit in currBlockCodes will be on after in shifted right 4 times:
                if ((currBlockCodes & 0x80000000) !== 0) {
                    if ((endDestIndex - destIndex) < 3) {
                        return -1;
                    }

                    dest[destIndex] = 0xFF & (currBlockCodes >> 16);
                    dest[destIndex + 1] = 0xFF & (currBlockCodes >> 8);
                    dest[destIndex + 2] = 0xFF & (currBlockCodes);
                    destIndex += 3;

                    currBlockCodes = 0x000000FF;
                }
            } // end of while

            if (!allInputConsumed && !equalityCharEncountered) {
                throw new System.InvalidOperationException.$ctor1("Contract violation: should never get here.");
            }

            if (equalityCharEncountered) {
                if (currCode !== intEq) {
                    throw new System.InvalidOperationException.$ctor1("Contract violation: currCode == intEq.");
                }

                // Recall that inputIndex is now one position past where '=' was read.
                // '=' can only be at the last input pos:
                if (inputIndex === endInputIndex) {
                    // Code is zero for trailing '=':
                    currBlockCodes <<= 6;

                    // The '=' did not complete a 4-group. The input must be bad:
                    if ((currBlockCodes & 0x80000000) === 0) {
                        throw new System.FormatException.$ctor1("Invalid length for a Base-64 char array or string.");
                    }

                    if ((endDestIndex - destIndex) < 2) {
                        // Autch! We underestimated the output length!
                        return -1;
                    }

                    // We are good, store bytes form this past group. We had a single "=", so we take two bytes:
                    dest[destIndex] = 0xFF & (currBlockCodes >> 16);
                    dest[destIndex + 1] = 0xFF & (currBlockCodes >> 8);
                    destIndex += 2;

                    currBlockCodes = 0x000000FF;
                } else { // '=' can also be at the pre-last position iff the last is also a '=' excluding the white spaces:
                    // We need to get rid of any intermediate white spaces.
                    // Otherwise we would be rejecting input such as "abc= =":
                    while (inputIndex < (endInputIndex - 1)) {
                        var lastChar = input[inputIndex];

                        if (lastChar !== " " && lastChar !== "\n" && lastChar !== "\r" && lastChar !== "\t") {
                            break;
                        }

                        inputIndex++;
                    }

                    if (inputIndex === (endInputIndex - 1) && input[inputIndex] === "=") {
                        // Code is zero for each of the two '=':
                        currBlockCodes <<= 12;

                        // The '=' did not complete a 4-group. The input must be bad:
                        if ((currBlockCodes & 0x80000000) === 0) {
                            throw new System.FormatException.$ctor1("Invalid length for a Base-64 char array or string.");
                        }

                        if ((endDestIndex - destIndex) < 1) {
                            // Autch! We underestimated the output length!
                            return -1;
                        }

                        // We are good, store bytes form this past group. We had a "==", so we take only one byte:
                        dest[destIndex] = 0xFF & (currBlockCodes >> 16);
                        destIndex++;

                        currBlockCodes = 0x000000FF;
                    } else {
                        // '=' is not ok at places other than the end:
                        throw new System.FormatException.$ctor1("The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.");
                    }
                }
            }

            // We get here either from above or by jumping out of the loop:
            // The last block of chars has less than 4 items
            if (currBlockCodes !== 0x000000FF) {
                throw new System.FormatException.$ctor1("Invalid length for a Base-64 char array or string.");
            }

            // Return how many bytes were actually recovered:
            return (destIndex - startDestIndex);
        },

        fromBase64_ComputeResultLength: function (input, startIndex, inputLength) {
            var intEq = "=",
                intSpace = " ";

            if (inputLength < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor4("inputLength", "Index was out of range. Must be non-negative and less than the size of the collection.");
            }

            var endIndex = startIndex + inputLength,
                usefulInputLength = inputLength,
                padding = 0;

            while (startIndex < endIndex) {
                var c = input[startIndex];

                startIndex++;

                // We want to be as fast as possible and filter out spaces with as few comparisons as possible.
                // We end up accepting a number of illegal chars as legal white-space chars.
                // This is ok: as soon as we hit them during actual decode we will recognise them as illegal and throw.
                if (c <= intSpace) {
                    usefulInputLength--;
                } else if (c === intEq) {
                    usefulInputLength--;
                    padding++;
                }
            }

            if (0 > usefulInputLength) {
                throw new System.InvalidOperationException.$ctor1("Contract violation: 0 <= usefulInputLength.");
            }

            if (0 > padding) {
                // For legal input, we can assume that 0 <= padding < 3. But it may be more for illegal input.
                // We will notice it at decode when we see a '=' at the wrong place.
                throw new System.InvalidOperationException.$ctor1("Contract violation: 0 <= padding.");
            }

            // Perf: reuse the variable that stored the number of '=' to store the number of bytes encoded by the
            // last group that contains the '=':
            if (padding !== 0) {
                if (padding === 1) {
                    padding = 2;
                } else if (padding === 2) {
                    padding = 1;
                } else {
                    throw new System.FormatException.$ctor1("The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.");
                }
            }

            // Done:
            return ~~(usefulInputLength / 4) * 3 + padding;
        },

        charsToCodes: function (chars, codes, codesOffset) {
            if (chars == null) {
                return null;
            }

            codesOffset = codesOffset || 0;

            if (codes == null) {
                codes = [];
                codes.length = chars.length;
            }

            for (var i = 0; i < chars.length; i++) {
                codes[i + codesOffset] = chars[i].charCodeAt(0);
            }

            return codes;
        },

        codesToChars: function (codes, chars) {
            if (codes == null) {
                return null;
            }

            chars = chars || [];

            for (var i = 0; i < codes.length; i++) {
                var code = codes[i];

                chars[i] = String.fromCharCode(code);
            }

            return chars;
        },

        throwInvalidCastEx: function (fromTypeCode, toTypeCode) {
            var fromType = scope.internal.getTypeCodeName(fromTypeCode),                toType = scope.internal.getTypeCodeName(toTypeCode);

            throw new System.InvalidCastException.$ctor1("Invalid cast from '" + fromType + "' to '" + toType + "'.");
        }
    };

    System.Convert = scope.convert;

    // @source ClientWebSocket.js

    Bridge.define("System.Net.WebSockets.ClientWebSocket", {
        inherits: [System.IDisposable],

        ctor: function () {
            this.$initialize();
            this.messageBuffer = [];
            this.state = "none";
            this.options = new System.Net.WebSockets.ClientWebSocketOptions();
            this.disposed = false;
            this.closeStatus = null;
            this.closeStatusDescription = null;
        },

        getCloseStatus: function () {
            return this.closeStatus;
        },

        getState: function () {
            return this.state;
        },

        getCloseStatusDescription: function () {
            return this.closeStatusDescription;
        },

        getSubProtocol: function () {
            return this.socket ? this.socket.protocol : null;
        },

        connectAsync: function (uri, cancellationToken) {
            if (this.state !== "none") {
                throw new System.InvalidOperationException.$ctor1("Socket is not in initial state");
            }

            this.options.setToReadOnly();
            this.state = "connecting";

            var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                self = this;

            try {
                this.socket = new WebSocket(uri.getAbsoluteUri(), this.options.requestedSubProtocols);
                this.socket.binaryType = "arraybuffer";
                this.socket.onopen = function () {
                    self.state = "open";
                    tcs.setResult(null);
                };

                this.socket.onmessage = function (e) {
                    var data = e.data,
                        message = {},
                        i;

                    message.bytes = [];

                    if (typeof (data) === "string") {
                        for (i = 0; i < data.length; ++i) {
                            message.bytes.push(data.charCodeAt(i));
                        }

                        message.messageType = "text";
                        self.messageBuffer.push(message);

                        return;
                    }

                    if (data instanceof ArrayBuffer) {
                        var dataView = new Uint8Array(data);

                        for (i = 0; i < dataView.length; i++) {
                            message.bytes.push(dataView[i]);
                        }

                        message.messageType = "binary";
                        self.messageBuffer.push(message);

                        return;
                    }

                    throw new System.ArgumentException.$ctor1("Invalid message type.");
                };

                this.socket.onclose = function (e) {
                    self.state = "closed";
                    self.closeStatus = e.code;
                    self.closeStatusDescription = e.reason;
                }
            } catch (e) {
                tcs.setException(System.Exception.create(e));
            }

            return tcs.task;
        },

        sendAsync: function (buffer, messageType, endOfMessage, cancellationToken) {
            this.throwIfNotConnected();

            var tcs = new System.Threading.Tasks.TaskCompletionSource();

            try {
                if (messageType === "close") {
                    this.socket.close();
                } else {
                    var array = buffer.getArray(),
                        count = buffer.getCount(),
                        offset = buffer.getOffset();

                    var data = new Uint8Array(count);

                    for (var i = 0; i < count; i++) {
                        data[i] = array[i + offset];
                    }

                    if (messageType === "text") {
                        data = String.fromCharCode.apply(null, data);
                    }

                    this.socket.send(data);
                }

                tcs.setResult(null);
            } catch (e) {
                tcs.setException(System.Exception.create(e));
            }

            return tcs.task;
        },

        receiveAsync: function (buffer, cancellationToken) {
            this.throwIfNotConnected();

            var task,
                tcs = new System.Threading.Tasks.TaskCompletionSource(),
                self = this,
                asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        if (cancellationToken.getIsCancellationRequested()) {
                            tcs.setException(new System.Threading.Tasks.TaskCanceledException("Receive has been cancelled.", tcs.task));

                            return;
                        }

                        if (self.messageBuffer.length === 0) {
                            task = System.Threading.Tasks.Task.delay(0);
                            task.continueWith(asyncBody);

                            return;
                        }

                        var message = self.messageBuffer[0],
                            array = buffer.getArray(),
                            resultBytes,
                            endOfMessage;

                        if (message.bytes.length <= array.length) {
                            self.messageBuffer.shift();
                            resultBytes = message.bytes;
                            endOfMessage = true;
                        } else {
                            resultBytes = message.bytes.slice(0, array.length);
                            message.bytes = message.bytes.slice(array.length, message.bytes.length);
                            endOfMessage = false;
                        }

                        for (var i = 0; i < resultBytes.length; i++) {
                            array[i] = resultBytes[i];
                        }

                        tcs.setResult(new System.Net.WebSockets.WebSocketReceiveResult(
                            resultBytes.length, message.messageType, endOfMessage));
                    } catch (e) {
                        tcs.setException(System.Exception.create(e));
                    }
                }, arguments);

            asyncBody();

            return tcs.task;
        },

        closeAsync: function (closeStatus, statusDescription, cancellationToken) {
            this.throwIfNotConnected();

            if (this.state !== "open") {
                throw new System.InvalidOperationException.$ctor1("Socket is not in connected state");
            }

            var tcs = new System.Threading.Tasks.TaskCompletionSource(),
                self = this,
                task,
                asyncBody = function () {
                    if (self.state === "closed") {
                        tcs.setResult(null);
                        return;
                    }

                    if (cancellationToken.getIsCancellationRequested()) {
                        tcs.setException(new System.Threading.Tasks.TaskCanceledException("Closing has been cancelled.", tcs.task));
                        return;
                    }

                    task = System.Threading.Tasks.Task.delay(0);
                    task.continueWith(asyncBody);
                };
            try {
                this.state = "closesent";
                this.socket.close(closeStatus, statusDescription);
            } catch (e) {
                tcs.setException(System.Exception.create(e));
            }

            asyncBody();

            return tcs.task;
        },

        closeOutputAsync: function (closeStatus, statusDescription, cancellationToken) {
            this.throwIfNotConnected();

            if (this.state !== "open") {
                throw new System.InvalidOperationException.$ctor1("Socket is not in connected state");
            }

            var tcs = new System.Threading.Tasks.TaskCompletionSource();

            try {
                this.state = "closesent";
                this.socket.close(closeStatus, statusDescription);
                tcs.setResult(null);
            } catch (e) {
                tcs.setException(System.Exception.create(e));
            }

            return tcs.task;
        },

        abort: function () {
            this.Dispose();
        },

        Dispose: function () {
            if (this.disposed) {
                return;
            }

            this.disposed = true;
            this.messageBuffer = [];

            if (state === "open") {
                this.state = "closesent";
                this.socket.close();
            }
        },

        throwIfNotConnected: function () {
            if (this.disposed) {
                throw new System.InvalidOperationException.$ctor1("Socket is disposed.");
            }

            if (this.socket.readyState !== 1) {
                throw new System.InvalidOperationException.$ctor1("Socket is not connected.");
            }
        }
    });

    Bridge.define("System.Net.WebSockets.ClientWebSocketOptions", {
        ctor: function () {
            this.$initialize();
            this.isReadOnly = false;
            this.requestedSubProtocols = [];
        },

        setToReadOnly: function () {
            if (this.isReadOnly) {
                throw new System.InvalidOperationException.$ctor1("Options are already readonly.");
            }

            this.isReadOnly = true;
        },

        addSubProtocol: function (subProtocol) {
            if (this.isReadOnly) {
                throw new System.InvalidOperationException.$ctor1("Socket already started.");
            }

            if (this.requestedSubProtocols.indexOf(subProtocol) > -1) {
                throw new System.ArgumentException.$ctor1("Socket cannot have duplicate sub-protocols.", "subProtocol");
            }

            this.requestedSubProtocols.push(subProtocol);
        }
    });

    Bridge.define("System.Net.WebSockets.WebSocketReceiveResult", {
        ctor: function (count, messageType, endOfMessage, closeStatus, closeStatusDescription) {
            this.$initialize();
            this.count = count;
            this.messageType = messageType;
            this.endOfMessage = endOfMessage;
            this.closeStatus = closeStatus;
            this.closeStatusDescription = closeStatusDescription;
        },

        getCount: function () {
            return this.count;
        },

        getMessageType: function () {
            return this.messageType;
        },

        getEndOfMessage: function () {
            return this.endOfMessage;
        },

        getCloseStatus: function () {
            return this.closeStatus;
        },

        getCloseStatusDescription: function () {
            return this.closeStatusDescription;
        }
    });

    // @source Uri.js

    Bridge.assembly("System", {}, function ($asm, globals) {
        "use strict";

        Bridge.define("System.Uri", {
            statics: {
                methods: {
                    equals: function (uri1, uri2) {
                        if (uri1 == uri2) {
                            return true;
                        }

                        if (uri1 == null || uri2 == null) {
                            return false;
                        }

                        return uri2.equals(uri1);
                    },

                    notEquals: function (uri1, uri2) {
                        return !System.Uri.equals(uri1, uri2);
                    }
                }
            },

            ctor: function (uriString) {
                this.$initialize();
                this.absoluteUri = uriString;
            },

            getAbsoluteUri: function () {
                return this.absoluteUri;
            },

            toJSON: function () {
                return this.absoluteUri;
            },

            toString: function () {
                return this.absoluteUri;
            },

            equals: function (uri) {
                if (uri == null || !Bridge.is(uri, System.Uri)) {
                    return false;
                }

                return this.absoluteUri === uri.absoluteUri;
            }
        });
    }, true);

    // @source Generator.js

    Bridge.define("Bridge.GeneratorEnumerable", {
        inherits: [System.Collections.IEnumerable],

        config: {
            alias: [
            "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"
            ]
        },

        ctor: function (action) {
            this.$initialize();
            this.GetEnumerator = action;
            this.System$Collections$IEnumerable$GetEnumerator = action;
        }
    });

    Bridge.define("Bridge.GeneratorEnumerable$1", function (T)
    {
        return {
            inherits: [System.Collections.Generic.IEnumerable$1(T)],

            config: {
                alias: [
                "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]
                ]
            },

            ctor: function (action) {
                this.$initialize();
                this.GetEnumerator = action;
                this["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator"] = action;
                this["System$Collections$Generic$IEnumerable$1$GetEnumerator"] = action;
            }
        };
    });

    Bridge.define("Bridge.GeneratorEnumerator", {
        inherits: [System.Collections.IEnumerator],

        current: null,

        config: {
            properties: {
                Current: {
                    get: function () {
                        return this.getCurrent();
                    }
                }
            },

            alias: [
                "getCurrent", "System$Collections$IEnumerator$getCurrent",
                "moveNext", "System$Collections$IEnumerator$moveNext",
                "reset", "System$Collections$IEnumerator$reset",
                "Current", "System$Collections$IEnumerator$Current"
            ]
        },

        ctor: function (action) {
            this.$initialize();
            this.moveNext = action;
            this.System$Collections$IEnumerator$moveNext = action;
        },

        getCurrent: function () {
            return this.current;
        },

        getCurrent$1: function () {
            return this.current;
        },

        reset: function () {
            throw new System.NotSupportedException();
        }
    });

    Bridge.define("Bridge.GeneratorEnumerator$1", function (T) {
        return {
            inherits: [System.Collections.Generic.IEnumerator$1(T), System.IDisposable],

            current: null,

            config: {
                properties: {
                    Current: {
                        get: function () {
                            return this.getCurrent();
                        }
                    },

                    Current$1: {
                        get: function () {
                            return this.getCurrent();
                        }
                    }
                },
                alias: [
                    "getCurrent", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$getCurrent$1", "System$Collections$Generic$IEnumerator$1$getCurrent$1"],
                    "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
                    "Current", "System$Collections$IEnumerator$Current",
                    "Dispose", "System$IDisposable$Dispose",
                    "moveNext", "System$Collections$IEnumerator$moveNext",
                    "reset", "System$Collections$IEnumerator$reset"
                ]
            },

            ctor: function (action, final) {
                this.$initialize();
                this.moveNext = action;
                this.System$Collections$IEnumerator$moveNext = action;
                this.final = final;
            },

            getCurrent: function () {
                return this.current;
            },

            getCurrent$1: function () {
                return this.current;
            },

            System$Collections$IEnumerator$getCurrent: function () {
                return this.current;
            },

            Dispose: function () {
                if (this.final) {
                    this.final();
                }
            },

            reset: function () {
                throw new System.NotSupportedException();
            }
        };
    });
    // @source linq.js

/*--------------------------------------------------------------------------
 * linq.js - LINQ for JavaScript
 * ver 3.0.4-Beta5 (Jun. 20th, 2013)
 *
 * created and maintained by neuecc <ils@neue.cc>
 * licensed under MIT License
 * http://linqjs.codeplex.com/
 *------------------------------------------------------------------------*/

(function (root, undefined) {
    // ReadOnly Function
    var Functions = {
        Identity: function (x) { return x; },
        True: function () { return true; },
        Blank: function () { }
    };

    // const Type
    var Types = {
        Boolean: typeof true,
        Number: typeof 0,
        String: typeof "",
        Object: typeof {},
        Undefined: typeof undefined,
        Function: typeof function () { }
    };

    // createLambda cache
    var funcCache = { "": Functions.Identity };

    // private utility methods
    var Utils = {
        // Create anonymous function from lambda expression string
        createLambda: function (expression) {
            if (expression == null) return Functions.Identity;
            if (typeof expression === Types.String) {
                // get from cache
                var f = funcCache[expression];
                if (f != null) {
                    return f;
                }

                if (expression.indexOf("=>") === -1) {
                    var regexp = new RegExp("[$]+", "g");

                    var maxLength = 0;
                    var match;
                    while ((match = regexp.exec(expression)) != null) {
                        var paramNumber = match[0].length;
                        if (paramNumber > maxLength) {
                            maxLength = paramNumber;
                        }
                    }

                    var argArray = [];
                    for (var i = 1; i <= maxLength; i++) {
                        var dollar = "";
                        for (var j = 0; j < i; j++) {
                            dollar += "$";
                        }
                        argArray.push(dollar);
                    }

                    var args = Array.prototype.join.call(argArray, ",");

                    f = new Function(args, "return " + expression);
                    funcCache[expression] = f;
                    return f;
                }
                else {
                    var expr = expression.match(/^[(\s]*([^()]*?)[)\s]*=>(.*)/);
                    f = new Function(expr[1], "return " + expr[2]);
                    funcCache[expression] = f;
                    return f;
                }
            }
            return expression;
        },

        isIEnumerable: function (obj) {
            if (typeof Enumerator !== Types.Undefined) {
                try {
                    new Enumerator(obj); // check JScript(IE)'s Enumerator
                    return true;
                }
                catch (e) { }
            }

            return false;
        },

        // IE8's defineProperty is defined but cannot use, therefore check defineProperties
        defineProperty: (Object.defineProperties != null)
            ? function (target, methodName, value) {
                Object.defineProperty(target, methodName, {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    value: value
                })
            }
            : function (target, methodName, value) {
                target[methodName] = value;
            },

        compare: function (a, b) {
            return (a === b) ? 0
                 : (a > b) ? 1
                 : -1;
        },

        Dispose: function (obj) {
            if (obj != null) obj.Dispose();
        }
    };

    // IEnumerator State
    var State = { Before: 0, Running: 1, After: 2 };

    // "Enumerator" is conflict JScript's "Enumerator"
    var IEnumerator = function (initialize, tryGetNext, dispose) {
        var yielder = new Yielder();
        var state = State.Before;

        this.getCurrent = yielder.getCurrent;
        this.reset = function () { throw new Error("Reset is not supported"); };

        this.moveNext = function () {
            try {
                switch (state) {
                    case State.Before:
                        state = State.Running;
                        initialize();
                        // fall through
                    case State.Running:
                        if (tryGetNext.apply(yielder)) {
                            return true;
                        }
                        else {
                            this.Dispose();
                            return false;
                        }
                    case State.After:
                        return false;
                }
            }
            catch (e) {
                this.Dispose();
                throw e;
            }
        };

        this.Dispose = function () {
            if (state != State.Running) return;

            try {
                dispose();
            }
            finally {
                state = State.After;
            }
        };

        this.System$IDisposable$Dispose = this.Dispose;
        this.getCurrent$1 = this.getCurrent;
        this.System$Collections$IEnumerator$getCurrent = this.getCurrent;
        this.System$Collections$IEnumerator$moveNext = this.moveNext;
        this.System$Collections$IEnumerator$reset = this.reset;

        Object.defineProperties(this,
        {
            "Current$1": {
                get: this.getCurrent,
                enumerable: true
            },

            "Current": {
                get: this.getCurrent,
                enumerable: true
            },

            "System$Collections$IEnumerator$Current": {
                get: this.getCurrent,
                enumerable: true
            }
        });
    };

    IEnumerator.$$inherits = [];
    Bridge.Class.addExtend(IEnumerator, [System.IDisposable, System.Collections.IEnumerator]);

    // for tryGetNext
    var Yielder = function () {
        var current = null;
        this.getCurrent = function () { return current; };
        this.yieldReturn = function (value) {
            current = value;
            return true;
        };
        this.yieldBreak = function () {
            return false;
        };
    };

    // Enumerable constuctor
    var Enumerable = function (GetEnumerator) {
        this.GetEnumerator = GetEnumerator;
    };

    Enumerable.$$inherits = [];
    Bridge.Class.addExtend(Enumerable, [System.Collections.IEnumerable]);

    // Utility

    Enumerable.Utils = {}; // container

    Enumerable.Utils.createLambda = function (expression) {
        return Utils.createLambda(expression);
    };

    Enumerable.Utils.createEnumerable = function (GetEnumerator) {
        return new Enumerable(GetEnumerator);
    };

    Enumerable.Utils.createEnumerator = function (initialize, tryGetNext, dispose) {
        return new IEnumerator(initialize, tryGetNext, dispose);
    };

    Enumerable.Utils.extendTo = function (type) {
        var typeProto = type.prototype;
        var enumerableProto;

        if (type === Array) {
            enumerableProto = ArrayEnumerable.prototype;
            Utils.defineProperty(typeProto, "getSource", function () {
                return this;
            });
        }
        else {
            enumerableProto = Enumerable.prototype;
            Utils.defineProperty(typeProto, "GetEnumerator", function () {
                return Enumerable.from(this).GetEnumerator();
            });
        }

        for (var methodName in enumerableProto) {
            var func = enumerableProto[methodName];

            // already extended
            if (typeProto[methodName] == func) continue;

            // already defined(example Array#reverse/join/forEach...)
            if (typeProto[methodName] != null) {
                methodName = methodName + "ByLinq";
                if (typeProto[methodName] == func) continue; // recheck
            }

            if (func instanceof Function) {
                Utils.defineProperty(typeProto, methodName, func);
            }
        }
    };

    // Generator

    Enumerable.choice = function () // variable argument
    {
        var args = arguments;

        return new Enumerable(function () {
            return new IEnumerator(
                function () {
                    args = (args[0] instanceof Array) ? args[0]
                        : (args[0].GetEnumerator != null) ? args[0].ToArray()
                        : args;
                },
                function () {
                    return this.yieldReturn(args[Math.floor(Math.random() * args.length)]);
                },
                Functions.Blank);
        });
    };

    Enumerable.cycle = function () // variable argument
    {
        var args = arguments;

        return new Enumerable(function () {
            var index = 0;
            return new IEnumerator(
                function () {
                    args = (args[0] instanceof Array) ? args[0]
                        : (args[0].GetEnumerator != null) ? args[0].ToArray()
                        : args;
                },
                function () {
                    if (index >= args.length) index = 0;
                    return this.yieldReturn(args[index++]);
                },
                Functions.Blank);
        });
    };

    // private singleton
    var emptyEnumerable = new Enumerable(function () {
            return new IEnumerator(
                Functions.Blank,
                function () { return false; },
                Functions.Blank);
        });
    Enumerable.empty = function () {
        return emptyEnumerable;
    };

    Enumerable.from = function (obj) {
        if (obj == null) {
            return Enumerable.empty();
        }
        if (obj instanceof Enumerable) {
            return obj;
        }
        if (typeof obj == Types.Number || typeof obj == Types.Boolean) {
            return Enumerable.repeat(obj, 1);
        }
        if (typeof obj == Types.String) {
            return new Enumerable(function () {
                var index = 0;
                return new IEnumerator(
                    Functions.Blank,
                    function () {
                        return (index < obj.length) ? this.yieldReturn(obj.charCodeAt(index++)) : false;
                    },
                    Functions.Blank);
            });
        }
        var ienum = Bridge.as(obj, System.Collections.IEnumerable);
        if (ienum) {
            return new Enumerable(function () {
                var enumerator;
                return new IEnumerator(
                    function () { enumerator = Bridge.getEnumerator(ienum); },
                    function () {
                        var ok = enumerator.moveNext();
                        return ok ? this.yieldReturn(enumerator.Current) : false;
                    },
                    function () {
                        var disposable = Bridge.as(enumerator, System.IDisposable);
                        if (disposable) {
                            disposable.Dispose();
                        }
                    }
                );
            });
        }
        if (typeof obj != Types.Function) {
            // array or array like object
            if (typeof obj.length == Types.Number) {
                return new ArrayEnumerable(obj);
            }

            // JScript's IEnumerable
            if (!(obj instanceof Object) && Utils.isIEnumerable(obj)) {
                return new Enumerable(function () {
                    var isFirst = true;
                    var enumerator;
                    return new IEnumerator(
                        function () { enumerator = new Enumerator(obj); },
                        function () {
                            if (isFirst) isFirst = false;
                            else enumerator.moveNext();

                            return (enumerator.atEnd()) ? false : this.yieldReturn(enumerator.item());
                        },
                        Functions.Blank);
                });
            }

            // WinMD IIterable<T>
            if (typeof Windows === Types.Object && typeof obj.first === Types.Function) {
                return new Enumerable(function () {
                    var isFirst = true;
                    var enumerator;
                    return new IEnumerator(
                        function () { enumerator = obj.first(); },
                        function () {
                            if (isFirst) isFirst = false;
                            else enumerator.moveNext();

                            return (enumerator.hasCurrent) ? this.yieldReturn(enumerator.current) : this.yieldBreak();
                        },
                        Functions.Blank);
                });
            }
        }

        // case function/object : Create keyValuePair[]
        return new Enumerable(function () {
            var array = [];
            var index = 0;

            return new IEnumerator(
                function () {
                    for (var key in obj) {
                        var value = obj[key];
                        if (!(value instanceof Function) && Object.prototype.hasOwnProperty.call(obj, key)) {
                            array.push({ key: key, value: value });
                        }
                    }
                },
                function () {
                    return (index < array.length)
                        ? this.yieldReturn(array[index++])
                        : false;
                },
                Functions.Blank);
        });
    },

    Enumerable.make = function (element) {
        return Enumerable.repeat(element, 1);
    };

    // Overload:function (input, pattern)
    // Overload:function (input, pattern, flags)
    Enumerable.matches = function (input, pattern, flags) {
        if (flags == null) flags = "";
        if (pattern instanceof RegExp) {
            flags += (pattern.ignoreCase) ? "i" : "";
            flags += (pattern.multiline) ? "m" : "";
            pattern = pattern.source;
        }
        if (flags.indexOf("g") === -1) flags += "g";

        return new Enumerable(function () {
            var regex;
            return new IEnumerator(
                function () { regex = new RegExp(pattern, flags); },
                function () {
                    var match = regex.exec(input);
                    return (match) ? this.yieldReturn(match) : false;
                },
                Functions.Blank);
        });
    };

    // Overload:function (start, count)
    // Overload:function (start, count, step)
    Enumerable.range = function (start, count, step) {
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            var index = 0;

            return new IEnumerator(
                function () { value = start - step; },
                function () {
                    return (index++ < count)
                        ? this.yieldReturn(value += step)
                        : this.yieldBreak();
                },
                Functions.Blank);
        });
    };

    // Overload:function (start, count)
    // Overload:function (start, count, step)
    Enumerable.rangeDown = function (start, count, step) {
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            var index = 0;

            return new IEnumerator(
                function () { value = start + step; },
                function () {
                    return (index++ < count)
                        ? this.yieldReturn(value -= step)
                        : this.yieldBreak();
                },
                Functions.Blank);
        });
    };

    // Overload:function (start, to)
    // Overload:function (start, to, step)
    Enumerable.rangeTo = function (start, to, step) {
        if (step == null) step = 1;

        if (start < to) {
            return new Enumerable(function () {
                var value;

                return new IEnumerator(
                function () { value = start - step; },
                function () {
                    var next = value += step;
                    return (next <= to)
                        ? this.yieldReturn(next)
                        : this.yieldBreak();
                },
                Functions.Blank);
            });
        }
        else {
            return new Enumerable(function () {
                var value;

                return new IEnumerator(
                function () { value = start + step; },
                function () {
                    var next = value -= step;
                    return (next >= to)
                        ? this.yieldReturn(next)
                        : this.yieldBreak();
                },
                Functions.Blank);
            });
        }
    };

    // Overload:function (element)
    // Overload:function (element, count)
    Enumerable.repeat = function (element, count) {
        if (count != null) return Enumerable.repeat(element).take(count);

        return new Enumerable(function () {
            return new IEnumerator(
                Functions.Blank,
                function () { return this.yieldReturn(element); },
                Functions.Blank);
        });
    };

    Enumerable.repeatWithFinalize = function (initializer, finalizer) {
        initializer = Utils.createLambda(initializer);
        finalizer = Utils.createLambda(finalizer);

        return new Enumerable(function () {
            var element;
            return new IEnumerator(
                function () { element = initializer(); },
                function () { return this.yieldReturn(element); },
                function () {
                    if (element != null) {
                        finalizer(element);
                        element = null;
                    }
                });
        });
    };

    // Overload:function (func)
    // Overload:function (func, count)
    Enumerable.generate = function (func, count) {
        if (count != null) return Enumerable.generate(func).take(count);
        func = Utils.createLambda(func);

        return new Enumerable(function () {
            return new IEnumerator(
                Functions.Blank,
                function () { return this.yieldReturn(func()); },
                Functions.Blank);
        });
    };

    // Overload:function ()
    // Overload:function (start)
    // Overload:function (start, step)
    Enumerable.toInfinity = function (start, step) {
        if (start == null) start = 0;
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            return new IEnumerator(
                function () { value = start - step; },
                function () { return this.yieldReturn(value += step); },
                Functions.Blank);
        });
    };

    // Overload:function ()
    // Overload:function (start)
    // Overload:function (start, step)
    Enumerable.toNegativeInfinity = function (start, step) {
        if (start == null) start = 0;
        if (step == null) step = 1;

        return new Enumerable(function () {
            var value;
            return new IEnumerator(
                function () { value = start + step; },
                function () { return this.yieldReturn(value -= step); },
                Functions.Blank);
        });
    };

    Enumerable.unfold = function (seed, func) {
        func = Utils.createLambda(func);

        return new Enumerable(function () {
            var isFirst = true;
            var value;
            return new IEnumerator(
                Functions.Blank,
                function () {
                    if (isFirst) {
                        isFirst = false;
                        value = seed;
                        return this.yieldReturn(value);
                    }
                    value = func(value);
                    return this.yieldReturn(value);
                },
                Functions.Blank);
        });
    };

    Enumerable.defer = function (enumerableFactory) {
        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = Enumerable.from(enumerableFactory()).GetEnumerator(); },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : this.yieldBreak();
                },
                function () {
                    Utils.Dispose(enumerator);
                });
        });
    };

    // Extension Methods

    /* Projection and Filtering Methods */

    // Overload:function (func)
    // Overload:function (func, resultSelector<element>)
    // Overload:function (func, resultSelector<element, nestLevel>)
    Enumerable.prototype.traverseBreadthFirst = function (func, resultSelector) {
        var source = this;
        func = Utils.createLambda(func);
        resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumerator;
            var nestLevel = 0;
            var buffer = [];

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    while (true) {
                        if (enumerator.moveNext()) {
                            buffer.push(enumerator.Current);
                            return this.yieldReturn(resultSelector(enumerator.Current, nestLevel));
                        }

                        var next = Enumerable.from(buffer).selectMany(function (x) { return func(x); });
                        if (!next.any()) {
                            return false;
                        }
                        else {
                            nestLevel++;
                            buffer = [];
                            Utils.Dispose(enumerator);
                            enumerator = next.GetEnumerator();
                        }
                    }
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (func)
    // Overload:function (func, resultSelector<element>)
    // Overload:function (func, resultSelector<element, nestLevel>)
    Enumerable.prototype.traverseDepthFirst = function (func, resultSelector) {
        var source = this;
        func = Utils.createLambda(func);
        resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumeratorStack = [];
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    while (true) {
                        if (enumerator.moveNext()) {
                            var value = resultSelector(enumerator.Current, enumeratorStack.length);
                            enumeratorStack.push(enumerator);
                            enumerator = Enumerable.from(func(enumerator.Current)).GetEnumerator();
                            return this.yieldReturn(value);
                        }

                        if (enumeratorStack.length <= 0) return false;
                        Utils.Dispose(enumerator);
                        enumerator = enumeratorStack.pop();
                    }
                },
                function () {
                    try {
                        Utils.Dispose(enumerator);
                    }
                    finally {
                        Enumerable.from(enumeratorStack).forEach(function (s) { s.Dispose(); });
                    }
                });
        });
    };

    Enumerable.prototype.flatten = function () {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var middleEnumerator = null;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    while (true) {
                        if (middleEnumerator != null) {
                            if (middleEnumerator.moveNext()) {
                                return this.yieldReturn(middleEnumerator.Current);
                            }
                            else {
                                middleEnumerator = null;
                            }
                        }

                        if (enumerator.moveNext()) {
                            if (enumerator.Current instanceof Array) {
                                Utils.Dispose(middleEnumerator);
                                middleEnumerator = Enumerable.from(enumerator.Current)
                                    .selectMany(Functions.Identity)
                                    .flatten()
                                    .GetEnumerator();
                                continue;
                            }
                            else {
                                return this.yieldReturn(enumerator.Current);
                            }
                        }

                        return false;
                    }
                },
                function () {
                    try {
                        Utils.Dispose(enumerator);
                    }
                    finally {
                        Utils.Dispose(middleEnumerator);
                    }
                });
        });
    };

    Enumerable.prototype.pairwise = function (selector) {
        var source = this;
        selector = Utils.createLambda(selector);

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();
                    enumerator.moveNext();
                },
                function () {
                    var prev = enumerator.Current;
                    return (enumerator.moveNext())
                        ? this.yieldReturn(selector(prev, enumerator.Current))
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (func)
    // Overload:function (seed,func<value,element>)
    Enumerable.prototype.scan = function (seed, func) {
        var isUseSeed;
        if (func == null) {
            func = Utils.createLambda(seed); // arguments[0]
            isUseSeed = false;
        } else {
            func = Utils.createLambda(func);
            isUseSeed = true;
        }
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var value;
            var isFirst = true;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    if (isFirst) {
                        isFirst = false;
                        if (!isUseSeed) {
                            if (enumerator.moveNext()) {
                                return this.yieldReturn(value = enumerator.Current);
                            }
                        }
                        else {
                            return this.yieldReturn(value = seed);
                        }
                    }

                    return (enumerator.moveNext())
                        ? this.yieldReturn(value = func(value, enumerator.Current))
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (selector<element>)
    // Overload:function (selector<element,index>)
    Enumerable.prototype.select = function (selector) {
        selector = Utils.createLambda(selector);

        if (selector.length <= 1) {
            return new WhereSelectEnumerable(this, null, selector);
        }
        else {
            var source = this;

            return new Enumerable(function () {
                var enumerator;
                var index = 0;

                return new IEnumerator(
                    function () { enumerator = source.GetEnumerator(); },
                    function () {
                        return (enumerator.moveNext())
                            ? this.yieldReturn(selector(enumerator.Current, index++))
                            : false;
                    },
                    function () { Utils.Dispose(enumerator); });
            });
        }
    };

    // Overload:function (collectionSelector<element>)
    // Overload:function (collectionSelector<element,index>)
    // Overload:function (collectionSelector<element>,resultSelector)
    // Overload:function (collectionSelector<element,index>,resultSelector)
    Enumerable.prototype.selectMany = function (collectionSelector, resultSelector) {
        var source = this;
        collectionSelector = Utils.createLambda(collectionSelector);
        if (resultSelector == null) resultSelector = function (a, b) { return b; };
        resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumerator;
            var middleEnumerator = undefined;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    if (middleEnumerator === undefined) {
                        if (!enumerator.moveNext()) return false;
                    }
                    do {
                        if (middleEnumerator == null) {
                            var middleSeq = collectionSelector(enumerator.Current, index++);
                            middleEnumerator = Enumerable.from(middleSeq).GetEnumerator();
                        }
                        if (middleEnumerator.moveNext()) {
                            return this.yieldReturn(resultSelector(enumerator.Current, middleEnumerator.Current));
                        }
                        Utils.Dispose(middleEnumerator);
                        middleEnumerator = null;
                    } while (enumerator.moveNext());
                    return false;
                },
                function () {
                    try {
                        Utils.Dispose(enumerator);
                    }
                    finally {
                        Utils.Dispose(middleEnumerator);
                    }
                });
        });
    };

    // Overload:function (predicate<element>)
    // Overload:function (predicate<element,index>)
    Enumerable.prototype.where = function (predicate) {
        predicate = Utils.createLambda(predicate);

        if (predicate.length <= 1) {
            return new WhereEnumerable(this, predicate);
        }
        else {
            var source = this;

            return new Enumerable(function () {
                var enumerator;
                var index = 0;

                return new IEnumerator(
                    function () { enumerator = source.GetEnumerator(); },
                    function () {
                        while (enumerator.moveNext()) {
                            if (predicate(enumerator.Current, index++)) {
                                return this.yieldReturn(enumerator.Current);
                            }
                        }
                        return false;
                    },
                    function () { Utils.Dispose(enumerator); });
            });
        }
    };

    // Overload:function (selector<element>)
    // Overload:function (selector<element,index>)
    Enumerable.prototype.choose = function (selector) {
        selector = Utils.createLambda(selector);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    while (enumerator.moveNext()) {
                        var result = selector(enumerator.Current, index++);
                        if (result != null) {
                            return this.yieldReturn(result);
                        }
                    }
                    return this.yieldBreak();
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    Enumerable.prototype.ofType = function (type) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = Bridge.getEnumerator(source);
                },
                function () {
                    while (enumerator.moveNext()) {
                        var v = Bridge.as(enumerator.Current, type);
                        if (Bridge.hasValue(v)) {
                            return this.yieldReturn(v);
                        }
                    }
                    return false;
                },
                function () {
                    Utils.Dispose(enumerator);
                });
        });
    };

    // mutiple arguments, last one is selector, others are enumerable
    Enumerable.prototype.zip = function () {
        var args = arguments;
        var selector = Utils.createLambda(arguments[arguments.length - 1]);

        var source = this;
        // optimized case:argument is 2
        if (arguments.length == 2) {
            var second = arguments[0];

            return new Enumerable(function () {
                var firstEnumerator;
                var secondEnumerator;
                var index = 0;

                return new IEnumerator(
                function () {
                    firstEnumerator = source.GetEnumerator();
                    secondEnumerator = Enumerable.from(second).GetEnumerator();
                },
                function () {
                    if (firstEnumerator.moveNext() && secondEnumerator.moveNext()) {
                        return this.yieldReturn(selector(firstEnumerator.Current, secondEnumerator.Current, index++));
                    }
                    return false;
                },
                function () {
                    try {
                        Utils.Dispose(firstEnumerator);
                    } finally {
                        Utils.Dispose(secondEnumerator);
                    }
                });
            });
        }
        else {
            return new Enumerable(function () {
                var enumerators;
                var index = 0;

                return new IEnumerator(
                function () {
                    var array = Enumerable.make(source)
                        .concat(Enumerable.from(args).takeExceptLast().select(Enumerable.from))
                        .select(function (x) { return x.GetEnumerator() })
                        .ToArray();
                    enumerators = Enumerable.from(array);
                },
                function () {
                    if (enumerators.all(function (x) { return x.moveNext() })) {
                        var array = enumerators
                            .select(function (x) { return x.Current; })
                            .ToArray();
                        array.push(index++);
                        return this.yieldReturn(selector.apply(null, array));
                    }
                    else {
                        return this.yieldBreak();
                    }
                },
                function () {
                    Enumerable.from(enumerators).forEach(Utils.Dispose);
                });
            });
        }
    };

    // mutiple arguments
    Enumerable.prototype.merge = function () {
        var args = arguments;
        var source = this;

        return new Enumerable(function () {
            var enumerators;
            var index = -1;

            return new IEnumerator(
                function () {
                    enumerators = Enumerable.make(source)
                        .concat(Enumerable.from(args).select(Enumerable.from))
                        .select(function (x) { return x.GetEnumerator() })
                        .ToArray();
                },
                function () {
                    while (enumerators.length > 0) {
                        index = (index >= enumerators.length - 1) ? 0 : index + 1;
                        var enumerator = enumerators[index];

                        if (enumerator.moveNext()) {
                            return this.yieldReturn(enumerator.Current);
                        }
                        else {
                            enumerator.Dispose();
                            enumerators.splice(index--, 1);
                        }
                    }
                    return this.yieldBreak();
                },
                function () {
                    Enumerable.from(enumerators).forEach(Utils.Dispose);
                });
        });
    };

    /* Join Methods */

    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector)
    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector)
    Enumerable.prototype.join = function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
        outerKeySelector = Utils.createLambda(outerKeySelector);
        innerKeySelector = Utils.createLambda(innerKeySelector);
        resultSelector = Utils.createLambda(resultSelector);

        var source = this;

        return new Enumerable(function () {
            var outerEnumerator;
            var lookup;
            var innerElements = null;
            var innerCount = 0;

            return new IEnumerator(
                function () {
                    outerEnumerator = source.GetEnumerator();
                    lookup = Enumerable.from(inner).toLookup(innerKeySelector, Functions.Identity, comparer);
                },
                function () {
                    while (true) {
                        if (innerElements != null) {
                            var innerElement = innerElements[innerCount++];
                            if (innerElement !== undefined) {
                                return this.yieldReturn(resultSelector(outerEnumerator.Current, innerElement));
                            }

                            innerElement = null;
                            innerCount = 0;
                        }

                        if (outerEnumerator.moveNext()) {
                            var key = outerKeySelector(outerEnumerator.Current);
                            innerElements = lookup.get(key).ToArray();
                        } else {
                            return false;
                        }
                    }
                },
                function () { Utils.Dispose(outerEnumerator); });
        });
    };

    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector)
    // Overload:function (inner, outerKeySelector, innerKeySelector, resultSelector, compareSelector)
    Enumerable.prototype.groupJoin = function (inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
        outerKeySelector = Utils.createLambda(outerKeySelector);
        innerKeySelector = Utils.createLambda(innerKeySelector);
        resultSelector = Utils.createLambda(resultSelector);
        var source = this;

        return new Enumerable(function () {
            var enumerator = source.GetEnumerator();
            var lookup = null;

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();
                    lookup = Enumerable.from(inner).toLookup(innerKeySelector, Functions.Identity, comparer);
                },
                function () {
                    if (enumerator.moveNext()) {
                        var innerElement = lookup.get(outerKeySelector(enumerator.Current));
                        return this.yieldReturn(resultSelector(enumerator.Current, innerElement));
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    /* Set Methods */

    Enumerable.prototype.all = function (predicate) {
        predicate = Utils.createLambda(predicate);

        var result = true;
        this.forEach(function (x) {
            if (!predicate(x)) {
                result = false;
                return false; // break
            }
        });
        return result;
    };

    // Overload:function ()
    // Overload:function (predicate)
    Enumerable.prototype.any = function (predicate) {
        predicate = Utils.createLambda(predicate);

        var enumerator = this.GetEnumerator();
        try {
            if (arguments.length == 0) return enumerator.moveNext(); // case:function ()

            while (enumerator.moveNext()) // case:function (predicate)
            {
                if (predicate(enumerator.Current)) return true;
            }
            return false;
        }
        finally {
            Utils.Dispose(enumerator);
        }
    };

    Enumerable.prototype.isEmpty = function () {
        return !this.any();
    };

    // multiple arguments
    Enumerable.prototype.concat = function () {
        var source = this;

        if (arguments.length == 1) {
            var second = arguments[0];

            return new Enumerable(function () {
                var firstEnumerator;
                var secondEnumerator;

                return new IEnumerator(
                function () { firstEnumerator = source.GetEnumerator(); },
                function () {
                    if (secondEnumerator == null) {
                        if (firstEnumerator.moveNext()) return this.yieldReturn(firstEnumerator.Current);
                        secondEnumerator = Enumerable.from(second).GetEnumerator();
                    }
                    if (secondEnumerator.moveNext()) return this.yieldReturn(secondEnumerator.Current);
                    return false;
                },
                function () {
                    try {
                        Utils.Dispose(firstEnumerator);
                    }
                    finally {
                        Utils.Dispose(secondEnumerator);
                    }
                });
            });
        }
        else {
            var args = arguments;

            return new Enumerable(function () {
                var enumerators;

                return new IEnumerator(
                    function () {
                        enumerators = Enumerable.make(source)
                            .concat(Enumerable.from(args).select(Enumerable.from))
                            .select(function (x) { return x.GetEnumerator() })
                            .ToArray();
                    },
                    function () {
                        while (enumerators.length > 0) {
                            var enumerator = enumerators[0];

                            if (enumerator.moveNext()) {
                                return this.yieldReturn(enumerator.Current);
                            }
                            else {
                                enumerator.Dispose();
                                enumerators.splice(0, 1);
                            }
                        }
                        return this.yieldBreak();
                    },
                    function () {
                        Enumerable.from(enumerators).forEach(Utils.Dispose);
                    });
            });
        }
    };

    Enumerable.prototype.insert = function (index, second) {
        var source = this;

        return new Enumerable(function () {
            var firstEnumerator;
            var secondEnumerator;
            var count = 0;
            var isEnumerated = false;

            return new IEnumerator(
                function () {
                    firstEnumerator = source.GetEnumerator();
                    secondEnumerator = Enumerable.from(second).GetEnumerator();
                },
                function () {
                    if (count == index && secondEnumerator.moveNext()) {
                        isEnumerated = true;
                        return this.yieldReturn(secondEnumerator.Current);
                    }
                    if (firstEnumerator.moveNext()) {
                        count++;
                        return this.yieldReturn(firstEnumerator.Current);
                    }
                    if (!isEnumerated && secondEnumerator.moveNext()) {
                        return this.yieldReturn(secondEnumerator.Current);
                    }
                    return false;
                },
                function () {
                    try {
                        Utils.Dispose(firstEnumerator);
                    }
                    finally {
                        Utils.Dispose(secondEnumerator);
                    }
                });
        });
    };

    Enumerable.prototype.alternate = function (alternateValueOrSequence) {
        var source = this;

        return new Enumerable(function () {
            var buffer;
            var enumerator;
            var alternateSequence;
            var alternateEnumerator;

            return new IEnumerator(
                function () {
                    if (alternateValueOrSequence instanceof Array || alternateValueOrSequence.GetEnumerator != null) {
                        alternateSequence = Enumerable.from(Enumerable.from(alternateValueOrSequence).ToArray()); // freeze
                    }
                    else {
                        alternateSequence = Enumerable.make(alternateValueOrSequence);
                    }
                    enumerator = source.GetEnumerator();
                    if (enumerator.moveNext()) buffer = enumerator.Current;
                },
                function () {
                    while (true) {
                        if (alternateEnumerator != null) {
                            if (alternateEnumerator.moveNext()) {
                                return this.yieldReturn(alternateEnumerator.Current);
                            }
                            else {
                                alternateEnumerator = null;
                            }
                        }

                        if (buffer == null && enumerator.moveNext()) {
                            buffer = enumerator.Current; // hasNext
                            alternateEnumerator = alternateSequence.GetEnumerator();
                            continue; // GOTO
                        }
                        else if (buffer != null) {
                            var retVal = buffer;
                            buffer = null;
                            return this.yieldReturn(retVal);
                        }

                        return this.yieldBreak();
                    }
                },
                function () {
                    try {
                        Utils.Dispose(enumerator);
                    }
                    finally {
                        Utils.Dispose(alternateEnumerator);
                    }
                });
        });
    };

    // Overload:function (value)
    // Overload:function (value, compareSelector)
    Enumerable.prototype.contains = function (value, comparer) {
        comparer = comparer || System.Collections.Generic.EqualityComparer$1.$default;
        var enumerator = this.GetEnumerator();
        try {
            while (enumerator.moveNext()) {
                if (comparer.equals2(enumerator.Current, value)) return true;
            }
            return false;
        }
        finally {
            Utils.Dispose(enumerator);
        }
    };

    Enumerable.prototype.defaultIfEmpty = function (defaultValue) {
        var source = this;
        if (defaultValue === undefined) defaultValue = null;

        return new Enumerable(function () {
            var enumerator;
            var isFirst = true;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    if (enumerator.moveNext()) {
                        isFirst = false;
                        return this.yieldReturn(enumerator.Current);
                    }
                    else if (isFirst) {
                        isFirst = false;
                        return this.yieldReturn(defaultValue);
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function ()
    // Overload:function (compareSelector)
    Enumerable.prototype.distinct = function (comparer) {
        return this.except(Enumerable.empty(), comparer);
    };

    Enumerable.prototype.distinctUntilChanged = function (compareSelector) {
        compareSelector = Utils.createLambda(compareSelector);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var compareKey;
            var initial;

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();
                },
                function () {
                    while (enumerator.moveNext()) {
                        var key = compareSelector(enumerator.Current);

                        if (initial) {
                            initial = false;
                            compareKey = key;
                            return this.yieldReturn(enumerator.Current);
                        }

                        if (compareKey === key) {
                            continue;
                        }

                        compareKey = key;
                        return this.yieldReturn(enumerator.Current);
                    }
                    return this.yieldBreak();
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (second)
    // Overload:function (second, compareSelector)
    Enumerable.prototype.except = function (second, comparer) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var keys;

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();
                    keys = new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))(null, comparer);
                    Enumerable.from(second).forEach(function (key) { if (!keys.containsKey(key)) { keys.add(key); } });
                },
                function () {
                    while (enumerator.moveNext()) {
                        var current = enumerator.Current;
                        if (!keys.containsKey(current)) {
                            keys.add(current);
                            return this.yieldReturn(current);
                        }
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (second)
    // Overload:function (second, compareSelector)
    Enumerable.prototype.intersect = function (second, comparer) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var keys;
            var outs;

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();

                    keys = new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))(null, comparer);
                    Enumerable.from(second).forEach(function (key) { if (!keys.containsKey(key)) { keys.add(key); } });
                    outs = new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))(null, comparer);
                },
                function () {
                    while (enumerator.moveNext()) {
                        var current = enumerator.Current;
                        if (!outs.containsKey(current) && keys.containsKey(current)) {
                            outs.add(current);
                            return this.yieldReturn(current);
                        }
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (second)
    // Overload:function (second, compareSelector)
    Enumerable.prototype.sequenceEqual = function (second, comparer) {
        comparer = comparer || System.Collections.Generic.EqualityComparer$1.$default;

        var firstEnumerator = this.GetEnumerator();
        try {
            var secondEnumerator = Enumerable.from(second).GetEnumerator();
            try {
                while (firstEnumerator.moveNext()) {
                    if (!secondEnumerator.moveNext()
                    || !comparer.equals2(firstEnumerator.Current, secondEnumerator.Current)) {
                        return false;
                    }
                }

                if (secondEnumerator.moveNext()) return false;
                return true;
            }
            finally {
                Utils.Dispose(secondEnumerator);
            }
        }
        finally {
            Utils.Dispose(firstEnumerator);
        }
    };

    Enumerable.prototype.union = function (second, comparer) {
        var source = this;

        return new Enumerable(function () {
            var firstEnumerator;
            var secondEnumerator;
            var keys;

            return new IEnumerator(
                function () {
                    firstEnumerator = source.GetEnumerator();
                    keys = new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))(null, comparer);
                },
                function () {
                    var current;
                    if (secondEnumerator === undefined) {
                        while (firstEnumerator.moveNext()) {
                            current = firstEnumerator.Current;
                            if (!keys.containsKey(current)) {
                                keys.add(current);
                                return this.yieldReturn(current);
                            }
                        }
                        secondEnumerator = Enumerable.from(second).GetEnumerator();
                    }
                    while (secondEnumerator.moveNext()) {
                        current = secondEnumerator.Current;
                        if (!keys.containsKey(current)) {
                            keys.add(current);
                            return this.yieldReturn(current);
                        }
                    }
                    return false;
                },
                function () {
                    try {
                        Utils.Dispose(firstEnumerator);
                    }
                    finally {
                        Utils.Dispose(secondEnumerator);
                    }
                });
        });
    };

    /* Ordering Methods */

    Enumerable.prototype.orderBy = function (keySelector, comparer) {
        return new OrderedEnumerable(this, keySelector, comparer, false);
    };

    Enumerable.prototype.orderByDescending = function (keySelector, comparer) {
        return new OrderedEnumerable(this, keySelector, comparer, true);
    };

    Enumerable.prototype.reverse = function () {
        var source = this;

        return new Enumerable(function () {
            var buffer;
            var index;

            return new IEnumerator(
                function () {
                    buffer = source.ToArray();
                    index = buffer.length;
                },
                function () {
                    return (index > 0)
                        ? this.yieldReturn(buffer[--index])
                        : false;
                },
                Functions.Blank);
        });
    };

    Enumerable.prototype.shuffle = function () {
        var source = this;

        return new Enumerable(function () {
            var buffer;

            return new IEnumerator(
                function () { buffer = source.ToArray(); },
                function () {
                    if (buffer.length > 0) {
                        var i = Math.floor(Math.random() * buffer.length);
                        return this.yieldReturn(buffer.splice(i, 1)[0]);
                    }
                    return false;
                },
                Functions.Blank);
        });
    };

    Enumerable.prototype.weightedSample = function (weightSelector) {
        weightSelector = Utils.createLambda(weightSelector);
        var source = this;

        return new Enumerable(function () {
            var sortedByBound;
            var totalWeight = 0;

            return new IEnumerator(
                function () {
                    sortedByBound = source
                        .choose(function (x) {
                            var weight = weightSelector(x);
                            if (weight <= 0) return null; // ignore 0

                            totalWeight += weight;
                            return { value: x, bound: totalWeight };
                        })
                        .ToArray();
                },
                function () {
                    if (sortedByBound.length > 0) {
                        var draw = Math.floor(Math.random() * totalWeight) + 1;

                        var lower = -1;
                        var upper = sortedByBound.length;
                        while (upper - lower > 1) {
                            var index = Math.floor((lower + upper) / 2);
                            if (sortedByBound[index].bound >= draw) {
                                upper = index;
                            }
                            else {
                                lower = index;
                            }
                        }

                        return this.yieldReturn(sortedByBound[upper].value);
                    }

                    return this.yieldBreak();
                },
                Functions.Blank);
        });
    };

    /* Grouping Methods */

    // Overload:function (keySelector)
    // Overload:function (keySelector,elementSelector)
    // Overload:function (keySelector,elementSelector,resultSelector)
    // Overload:function (keySelector,elementSelector,resultSelector,compareSelector)
    Enumerable.prototype.groupBy = function (keySelector, elementSelector, resultSelector, comparer) {
        var source = this;
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);
        if (resultSelector != null) resultSelector = Utils.createLambda(resultSelector);

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = source.toLookup(keySelector, elementSelector, comparer)
                        .toEnumerable()
                        .GetEnumerator();
                },
                function () {
                    while (enumerator.moveNext()) {
                        return (resultSelector == null)
                            ? this.yieldReturn(enumerator.Current)
                            : this.yieldReturn(resultSelector(enumerator.Current.key(), enumerator.Current));
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (keySelector)
    // Overload:function (keySelector,elementSelector)
    // Overload:function (keySelector,elementSelector,resultSelector)
    // Overload:function (keySelector,elementSelector,resultSelector,compareSelector)
    Enumerable.prototype.partitionBy = function (keySelector, elementSelector, resultSelector, comparer) {
        var source = this;
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);
        comparer = comparer || System.Collections.Generic.EqualityComparer$1.$default;
        var hasResultSelector;
        if (resultSelector == null) {
            hasResultSelector = false;
            resultSelector = function (key, group) { return new Grouping(key, group); };
        }
        else {
            hasResultSelector = true;
            resultSelector = Utils.createLambda(resultSelector);
        }

        return new Enumerable(function () {
            var enumerator;
            var key;
            var group = [];

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();
                    if (enumerator.moveNext()) {
                        key = keySelector(enumerator.Current);
                        group.push(elementSelector(enumerator.Current));
                    }
                },
                function () {
                    var hasNext;
                    while ((hasNext = enumerator.moveNext()) == true) {
                        if (comparer.equals2(key, keySelector(enumerator.Current))) {
                            group.push(elementSelector(enumerator.Current));
                        }
                        else break;
                    }

                    if (group.length > 0) {
                        var result = (hasResultSelector)
                            ? resultSelector(key, Enumerable.from(group))
                            : resultSelector(key, group);
                        if (hasNext) {
                            key = keySelector(enumerator.Current);
                            group = [elementSelector(enumerator.Current)];
                        }
                        else group = [];

                        return this.yieldReturn(result);
                    }

                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    Enumerable.prototype.buffer = function (count) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    var array = [];
                    var index = 0;
                    while (enumerator.moveNext()) {
                        array.push(enumerator.Current);
                        if (++index >= count) return this.yieldReturn(array);
                    }
                    if (array.length > 0) return this.yieldReturn(array);
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    /* Aggregate Methods */

    // Overload:function (func)
    // Overload:function (seed,func)
    // Overload:function (seed,func,resultSelector)
    Enumerable.prototype.aggregate = function (seed, func, resultSelector) {
        resultSelector = Utils.createLambda(resultSelector);
        return resultSelector(this.scan(seed, func, resultSelector).last());
    };

    // Overload:function ()
    // Overload:function (selector)
    Enumerable.prototype.average = function (selector, def) {
        if (selector && !def && !Bridge.isFunction(selector)) {
            def = selector;
            selector = null;
        }

        selector = Utils.createLambda(selector);

        var sum = def || 0;
        var count = 0;
        this.forEach(function (x) {
            x = selector(x);

            if (x instanceof System.Decimal || System.Int64.is64Bit(x)) {
                sum = x.add(sum);
            }
            else if (sum instanceof System.Decimal || System.Int64.is64Bit(sum)) {
                sum = sum.add(x);
            } else {
                sum += x;
            }

            ++count;
        });

        if (count === 0) {
            throw new System.InvalidOperationException.$ctor1("Sequence contains no elements");
        }

        return (sum instanceof System.Decimal || System.Int64.is64Bit(sum)) ? sum.div(count) : (sum / count);
    };

    Enumerable.prototype.nullableAverage = function (selector, def) {
        if (this.any(Bridge.isNull)) {
            return null;
        }

        return this.average(selector, def);
    };

    // Overload:function ()
    // Overload:function (predicate)
    Enumerable.prototype.count = function (predicate) {
        predicate = (predicate == null) ? Functions.True : Utils.createLambda(predicate);

        var count = 0;
        this.forEach(function (x, i) {
            if (predicate(x, i))++count;
        });
        return count;
    };

    // Overload:function ()
    // Overload:function (selector)
    Enumerable.prototype.max = function (selector) {
        if (selector == null) selector = Functions.Identity;
        return this.select(selector).aggregate(function (a, b) {
            return (Bridge.compare(a, b, true) === 1) ? a : b;
        });
    };

    Enumerable.prototype.nullableMax = function (selector) {
        if (this.any(Bridge.isNull)) {
            return null;
        }

        return this.max(selector);
    };

    // Overload:function ()
    // Overload:function (selector)
    Enumerable.prototype.min = function (selector) {
        if (selector == null) selector = Functions.Identity;
        return this.select(selector).aggregate(function (a, b) {
            return (Bridge.compare(a, b, true) === -1) ? a : b;
        });
    };

    Enumerable.prototype.nullableMin = function (selector) {
        if (this.any(Bridge.isNull)) {
            return null;
        }

        return this.min(selector);
    };

    Enumerable.prototype.maxBy = function (keySelector) {
        keySelector = Utils.createLambda(keySelector);
        return this.aggregate(function (a, b) {
            return (Bridge.compare(keySelector(a), keySelector(b), true) === 1) ? a : b;
        });
    };

    Enumerable.prototype.minBy = function (keySelector) {
        keySelector = Utils.createLambda(keySelector);
        return this.aggregate(function (a, b) {
            return (Bridge.compare(keySelector(a), keySelector(b), true) === -1) ? a : b;
        });
    };

    // Overload:function ()
    // Overload:function (selector)
    Enumerable.prototype.sum = function (selector, def) {
        if (selector && !def && !Bridge.isFunction(selector)) {
            def = selector;
            selector = null;
        }

        if (selector == null) selector = Functions.Identity;
        var s = this.select(selector).aggregate(0, function (a, b) {
             if (a instanceof System.Decimal || System.Int64.is64Bit(a)) {
                 return a.add(b);
             }
             if (b instanceof System.Decimal || System.Int64.is64Bit(b)) {
                 return b.add(a);
             }
             return a + b;
        });

        if (s === 0 && def) {
            return def;
        }

        return s;
    };

    Enumerable.prototype.nullableSum = function (selector, def) {
        if (this.any(Bridge.isNull)) {
            return null;
        }

        return this.sum(selector, def);
    };

    /* Paging Methods */

    Enumerable.prototype.elementAt = function (index) {
        var value;
        var found = false;
        this.forEach(function (x, i) {
            if (i == index) {
                value = x;
                found = true;
                return false;
            }
        });

        if (!found) throw new Error("index is less than 0 or greater than or equal to the number of elements in source.");
        return value;
    };

    Enumerable.prototype.elementAtOrDefault = function (index, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        var value;
        var found = false;
        this.forEach(function (x, i) {
            if (i == index) {
                value = x;
                found = true;
                return false;
            }
        });

        return (!found) ? defaultValue : value;
    };

    // Overload:function ()
    // Overload:function (predicate)
    Enumerable.prototype.first = function (predicate) {
        if (predicate != null) return this.where(predicate).first();

        var value;
        var found = false;
        this.forEach(function (x) {
            value = x;
            found = true;
            return false;
        });

        if (!found) throw new Error("first:No element satisfies the condition.");
        return value;
    };

    Enumerable.prototype.firstOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) return this.where(predicate).firstOrDefault(null, defaultValue);

        var value;
        var found = false;
        this.forEach(function (x) {
            value = x;
            found = true;
            return false;
        });
        return (!found) ? defaultValue : value;
    };

    // Overload:function ()
    // Overload:function (predicate)
    Enumerable.prototype.last = function (predicate) {
        if (predicate != null) return this.where(predicate).last();

        var value;
        var found = false;
        this.forEach(function (x) {
            found = true;
            value = x;
        });

        if (!found) throw new Error("last:No element satisfies the condition.");
        return value;
    };

    // Overload:function (defaultValue)
    // Overload:function (defaultValue,predicate)
    Enumerable.prototype.lastOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) return this.where(predicate).lastOrDefault(null, defaultValue);

        var value;
        var found = false;
        this.forEach(function (x) {
            found = true;
            value = x;
        });
        return (!found) ? defaultValue : value;
    };

    // Overload:function ()
    // Overload:function (predicate)
    Enumerable.prototype.single = function (predicate) {
        if (predicate != null) return this.where(predicate).single();

        var value;
        var found = false;
        this.forEach(function (x) {
            if (!found) {
                found = true;
                value = x;
            } else throw new Error("single:sequence contains more than one element.");
        });

        if (!found) throw new Error("single:No element satisfies the condition.");
        return value;
    };

    // Overload:function (defaultValue)
    // Overload:function (defaultValue,predicate)
    Enumerable.prototype.singleOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) return this.where(predicate).singleOrDefault(null, defaultValue);

        var value;
        var found = false;
        this.forEach(function (x) {
            if (!found) {
                found = true;
                value = x;
            } else throw new Error("single:sequence contains more than one element.");
        });

        return (!found) ? defaultValue : value;
    };

    Enumerable.prototype.skip = function (count) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () {
                    enumerator = source.GetEnumerator();
                    while (index++ < count && enumerator.moveNext()) {
                    }
                    ;
                },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (predicate<element>)
    // Overload:function (predicate<element,index>)
    Enumerable.prototype.skipWhile = function (predicate) {
        predicate = Utils.createLambda(predicate);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;
            var isSkipEnd = false;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    while (!isSkipEnd) {
                        if (enumerator.moveNext()) {
                            if (!predicate(enumerator.Current, index++)) {
                                isSkipEnd = true;
                                return this.yieldReturn(enumerator.Current);
                            }
                            continue;
                        } else return false;
                    }

                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    Enumerable.prototype.take = function (count) {
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    return (index++ < count && enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () { Utils.Dispose(enumerator); }
            );
        });
    };

    // Overload:function (predicate<element>)
    // Overload:function (predicate<element,index>)
    Enumerable.prototype.takeWhile = function (predicate) {
        predicate = Utils.createLambda(predicate);
        var source = this;

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    return (enumerator.moveNext() && predicate(enumerator.Current, index++))
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function ()
    // Overload:function (count)
    Enumerable.prototype.takeExceptLast = function (count) {
        if (count == null) count = 1;
        var source = this;

        return new Enumerable(function () {
            if (count <= 0) return source.GetEnumerator(); // do nothing

            var enumerator;
            var q = [];

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    while (enumerator.moveNext()) {
                        if (q.length == count) {
                            q.push(enumerator.Current);
                            return this.yieldReturn(q.shift());
                        }
                        q.push(enumerator.Current);
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    Enumerable.prototype.takeFromLast = function (count) {
        if (count <= 0 || count == null) return Enumerable.empty();
        var source = this;

        return new Enumerable(function () {
            var sourceEnumerator;
            var enumerator;
            var q = [];

            return new IEnumerator(
                function () { sourceEnumerator = source.GetEnumerator(); },
                function () {
                    if (enumerator == null) {
                        while (sourceEnumerator.moveNext()) {
                            if (q.length == count) q.shift();
                            q.push(sourceEnumerator.Current);
                        }
                        enumerator = Enumerable.from(q).GetEnumerator();
                    }
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (item)
    // Overload:function (predicate)
    Enumerable.prototype.indexOf = function (item, comparer) {
        var found = null;

        // item as predicate
        if (typeof (item) === Types.Function) {
            this.forEach(function (x, i) {
                if (item(x, i)) {
                    found = i;
                    return false;
                }
            });
        }
        else {
            comparer = comparer || System.Collections.Generic.EqualityComparer$1.$default;
            this.forEach(function (x, i) {
                if (comparer.equals2(x, item)) {
                    found = i;
                    return false;
                }
            });
        }

        return (found !== null) ? found : -1;
    };

    // Overload:function (item)
    // Overload:function (predicate)
    Enumerable.prototype.lastIndexOf = function (item, comparer) {
        var result = -1;

        // item as predicate
        if (typeof (item) === Types.Function) {
            this.forEach(function (x, i) {
                if (item(x, i)) result = i;
            });
        }
        else {
            comparer = comparer || System.Collections.Generic.EqualityComparer$1.$default;
            this.forEach(function (x, i) {
                if (comparer.equals2(x, item)) result = i;
            });
        }

        return result;
    };

    /* Convert Methods */

    Enumerable.prototype.asEnumerable = function () {
        return Enumerable.from(this);
    };

    Enumerable.prototype.ToArray = function (T) {
        var array = System.Array.init([], T || System.Object);
        this.forEach(function (x) { array.push(x); });
        return array;
    };

    Enumerable.prototype.toList = function (T) {
        var array = [];
        this.forEach(function (x) { array.push(x); });
        return new (System.Collections.Generic.List$1(T || System.Object).$ctor1)(array);
    };

    // Overload:function (keySelector)
    // Overload:function (keySelector, elementSelector)
    // Overload:function (keySelector, elementSelector, compareSelector)
    Enumerable.prototype.toLookup = function (keySelector, elementSelector, comparer) {
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);

        var dict = new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))(null, comparer);
        var order = [];
        this.forEach(function (x) {
            var key = keySelector(x);
            var element = elementSelector(x);

            var array = { v: null };
            if (dict.tryGetValue(key, array)) {
                array.v.push(element);
            }
            else {
                order.push(key);
                dict.add(key, [element]);
            }
        });
        return new Lookup(dict, order);
    };

    Enumerable.prototype.toObject = function (keySelector, elementSelector) {
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);

        var obj = {};
        this.forEach(function (x) {
            obj[keySelector(x)] = elementSelector(x);
        });
        return obj;
    };

    // Overload:function (keySelector, elementSelector)
    // Overload:function (keySelector, elementSelector, compareSelector)
    Enumerable.prototype.toDictionary = function (keySelector, elementSelector, keyType, valueType, comparer) {
        keySelector = Utils.createLambda(keySelector);
        elementSelector = Utils.createLambda(elementSelector);

        var dict = new (System.Collections.Generic.Dictionary$2(keyType, valueType))(null, comparer);
        this.forEach(function (x) {
            dict.add(keySelector(x), elementSelector(x));
        });
        return dict;
    };

    // Overload:function ()
    // Overload:function (replacer)
    // Overload:function (replacer, space)
    Enumerable.prototype.toJSONString = function (replacer, space) {
        if (typeof JSON === Types.Undefined || JSON.stringify == null) {
            throw new Error("toJSONString can't find JSON.stringify. This works native JSON support Browser or include json2.js");
        }
        return JSON.stringify(this.ToArray(), replacer, space);
    };

    // Overload:function ()
    // Overload:function (separator)
    // Overload:function (separator,selector)
    Enumerable.prototype.toJoinedString = function (separator, selector) {
        if (separator == null) separator = "";
        if (selector == null) selector = Functions.Identity;

        return this.select(selector).ToArray().join(separator);
    };

    /* Action Methods */

    // Overload:function (action<element>)
    // Overload:function (action<element,index>)
    Enumerable.prototype.doAction = function (action) {
        var source = this;
        action = Utils.createLambda(action);

        return new Enumerable(function () {
            var enumerator;
            var index = 0;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    if (enumerator.moveNext()) {
                        action(enumerator.Current, index++);
                        return this.yieldReturn(enumerator.Current);
                    }
                    return false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    // Overload:function (action<element>)
    // Overload:function (action<element,index>)
    // Overload:function (func<element,bool>)
    // Overload:function (func<element,index,bool>)
    Enumerable.prototype.forEach = function (action) {
        action = Utils.createLambda(action);

        var index = 0;
        var enumerator = this.GetEnumerator();
        try {
            while (enumerator.moveNext()) {
                if (action(enumerator.Current, index++) === false) break;
            }
        } finally {
            Utils.Dispose(enumerator);
        }
    };

    // Overload:function ()
    // Overload:function (separator)
    // Overload:function (separator,selector)
    Enumerable.prototype.write = function (separator, selector) {
        if (separator == null) separator = "";
        selector = Utils.createLambda(selector);

        var isFirst = true;
        this.forEach(function (item) {
            if (isFirst) isFirst = false;
            else document.write(separator);
            document.write(selector(item));
        });
    };

    // Overload:function ()
    // Overload:function (selector)
    Enumerable.prototype.writeLine = function (selector) {
        selector = Utils.createLambda(selector);

        this.forEach(function (item) {
            document.writeln(selector(item) + "<br />");
        });
    };

    Enumerable.prototype.force = function () {
        var enumerator = this.GetEnumerator();

        try {
            while (enumerator.moveNext()) {
            }
        }
        finally {
            Utils.Dispose(enumerator);
        }
    };

    /* Functional Methods */

    Enumerable.prototype.letBind = function (func) {
        func = Utils.createLambda(func);
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () {
                    enumerator = Enumerable.from(func(source)).GetEnumerator();
                },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    Enumerable.prototype.share = function () {
        var source = this;
        var sharedEnumerator;
        var disposed = false;

        return new DisposableEnumerable(function () {
            return new IEnumerator(
                function () {
                    if (sharedEnumerator == null) {
                        sharedEnumerator = source.GetEnumerator();
                    }
                },
                function () {
                    if (disposed) throw new Error("enumerator is disposed");

                    return (sharedEnumerator.moveNext())
                        ? this.yieldReturn(sharedEnumerator.Current)
                        : false;
                },
                Functions.Blank
            );
        }, function () {
            disposed = true;
            Utils.Dispose(sharedEnumerator);
        });
    };

    Enumerable.prototype.memoize = function () {
        var source = this;
        var cache;
        var enumerator;
        var disposed = false;

        return new DisposableEnumerable(function () {
            var index = -1;

            return new IEnumerator(
                function () {
                    if (enumerator == null) {
                        enumerator = source.GetEnumerator();
                        cache = [];
                    }
                },
                function () {
                    if (disposed) throw new Error("enumerator is disposed");

                    index++;
                    if (cache.length <= index) {
                        return (enumerator.moveNext())
                            ? this.yieldReturn(cache[index] = enumerator.Current)
                            : false;
                    }

                    return this.yieldReturn(cache[index]);
                },
                Functions.Blank
            );
        }, function () {
            disposed = true;
            Utils.Dispose(enumerator);
            cache = null;
        });
    };

    /* Error Handling Methods */

    Enumerable.prototype.catchError = function (handler) {
        handler = Utils.createLambda(handler);
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    try {
                        return (enumerator.moveNext())
                            ? this.yieldReturn(enumerator.Current)
                            : false;
                    } catch (e) {
                        handler(e);
                        return false;
                    }
                },
                function () { Utils.Dispose(enumerator); });
        });
    };

    Enumerable.prototype.finallyAction = function (finallyAction) {
        finallyAction = Utils.createLambda(finallyAction);
        var source = this;

        return new Enumerable(function () {
            var enumerator;

            return new IEnumerator(
                function () { enumerator = source.GetEnumerator(); },
                function () {
                    return (enumerator.moveNext())
                        ? this.yieldReturn(enumerator.Current)
                        : false;
                },
                function () {
                    try {
                        Utils.Dispose(enumerator);
                    } finally {
                        finallyAction();
                    }
                });
        });
    };

    /* For Debug Methods */

    // Overload:function ()
    // Overload:function (selector)
    Enumerable.prototype.log = function (selector) {
        selector = Utils.createLambda(selector);

        return this.doAction(function (item) {
            if (typeof console !== Types.Undefined) {
                console.log(selector(item));
            }
        });
    };

    // Overload:function ()
    // Overload:function (message)
    // Overload:function (message,selector)
    Enumerable.prototype.trace = function (message, selector) {
        if (message == null) message = "Trace";
        selector = Utils.createLambda(selector);

        return this.doAction(function (item) {
            if (typeof console !== Types.Undefined) {
                console.log(message, selector(item));
            }
        });
    };

    // private
    var defaultComparer = {
        compare: function (x, y) {
            if (!Bridge.hasValue(x)) {
                return !Bridge.hasValue(y) ? 0 : -1;
            } else if (!Bridge.hasValue(y)) {
                return 1;
            }

            if (typeof x == "string" && typeof y == "string") {
                var result = System.String.compare(x, y, true);

                if (result !== 0) {
                    return result;
                }

                x = System.String.swapCase(x);
                y = System.String.swapCase(y);
            }

            return Bridge.compare(x, y);
        }
    };
    var OrderedEnumerable = function (source, keySelector, comparer, descending, parent) {
        this.source = source;
        this.keySelector = Utils.createLambda(keySelector);
        this.comparer = comparer || defaultComparer;
        this.descending = descending;
        this.parent = parent;
    };
    OrderedEnumerable.prototype = new Enumerable();
    OrderedEnumerable.prototype.constructor = OrderedEnumerable;
    Bridge.definei("System.Linq.IOrderedEnumerable$1");
    OrderedEnumerable.$$inherits = [];
    Bridge.Class.addExtend(OrderedEnumerable, [System.Collections.IEnumerable, System.Linq.IOrderedEnumerable$1]);

    OrderedEnumerable.prototype.createOrderedEnumerable = function (keySelector, comparer, descending) {
        return new OrderedEnumerable(this.source, keySelector, comparer, descending, this);
    };

    OrderedEnumerable.prototype.thenBy = function (keySelector, comparer) {
        return this.createOrderedEnumerable(keySelector, comparer, false);
    };

    OrderedEnumerable.prototype.thenByDescending = function (keySelector, comparer) {
        return this.createOrderedEnumerable(keySelector, comparer, true);
    };

    OrderedEnumerable.prototype.GetEnumerator = function () {
        var self = this;
        var buffer;
        var indexes;
        var index = 0;

        return new IEnumerator(
            function () {
                buffer = [];
                indexes = [];
                self.source.forEach(function (item, index) {
                    buffer.push(item);
                    indexes.push(index);
                });
                var sortContext = SortContext.create(self, null);
                sortContext.GenerateKeys(buffer);

                indexes.sort(function (a, b) { return sortContext.compare(a, b); });
            },
            function () {
                return (index < indexes.length)
                    ? this.yieldReturn(buffer[indexes[index++]])
                    : false;
            },
            Functions.Blank
        );
    };

    var SortContext = function (keySelector, comparer, descending, child) {
        this.keySelector = keySelector;
        this.comparer = comparer;
        this.descending = descending;
        this.child = child;
        this.keys = null;
    };

    SortContext.create = function (orderedEnumerable, currentContext) {
        var context = new SortContext(orderedEnumerable.keySelector, orderedEnumerable.comparer, orderedEnumerable.descending, currentContext);
        if (orderedEnumerable.parent != null) return SortContext.create(orderedEnumerable.parent, context);
        return context;
    };

    SortContext.prototype.GenerateKeys = function (source) {
        var len = source.length;
        var keySelector = this.keySelector;
        var keys = new Array(len);
        for (var i = 0; i < len; i++) keys[i] = keySelector(source[i]);
        this.keys = keys;

        if (this.child != null) this.child.GenerateKeys(source);
    };

    SortContext.prototype.compare = function (index1, index2) {
        var comparison = this.comparer.compare(this.keys[index1], this.keys[index2]);

        if (comparison == 0) {
            if (this.child != null) return this.child.compare(index1, index2);
            return Utils.compare(index1, index2);
        }

        return (this.descending) ? -comparison : comparison;
    };

    var DisposableEnumerable = function (GetEnumerator, dispose) {
        this.Dispose = dispose;
        Enumerable.call(this, GetEnumerator);
    };
    DisposableEnumerable.prototype = new Enumerable();

    // optimize array or arraylike object

    var ArrayEnumerable = function (source) {
        this.getSource = function () { return source; };
    };
    ArrayEnumerable.prototype = new Enumerable();

    ArrayEnumerable.prototype.any = function (predicate) {
        return (predicate == null)
            ? (this.getSource().length > 0)
            : Enumerable.prototype.any.apply(this, arguments);
    };

    ArrayEnumerable.prototype.count = function (predicate) {
        return (predicate == null)
            ? this.getSource().length
            : Enumerable.prototype.count.apply(this, arguments);
    };

    ArrayEnumerable.prototype.elementAt = function (index) {
        var source = this.getSource();
        return (0 <= index && index < source.length)
            ? source[index]
            : Enumerable.prototype.elementAt.apply(this, arguments);
    };

    ArrayEnumerable.prototype.elementAtOrDefault = function (index, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        var source = this.getSource();
        return (0 <= index && index < source.length)
            ? source[index]
            : defaultValue;
    };

    ArrayEnumerable.prototype.first = function (predicate) {
        var source = this.getSource();
        return (predicate == null && source.length > 0)
            ? source[0]
            : Enumerable.prototype.first.apply(this, arguments);
    };

    ArrayEnumerable.prototype.firstOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) {
            return Enumerable.prototype.firstOrDefault.apply(this, arguments);
        }

        var source = this.getSource();
        return source.length > 0 ? source[0] : defaultValue;
    };

    ArrayEnumerable.prototype.last = function (predicate) {
        var source = this.getSource();
        return (predicate == null && source.length > 0)
            ? source[source.length - 1]
            : Enumerable.prototype.last.apply(this, arguments);
    };

    ArrayEnumerable.prototype.lastOrDefault = function (predicate, defaultValue) {
        if (defaultValue === undefined) defaultValue = null;
        if (predicate != null) {
            return Enumerable.prototype.lastOrDefault.apply(this, arguments);
        }

        var source = this.getSource();
        return source.length > 0 ? source[source.length - 1] : defaultValue;
    };

    ArrayEnumerable.prototype.skip = function (count) {
        var source = this.getSource();

        return new Enumerable(function () {
            var index;

            return new IEnumerator(
                function () { index = (count < 0) ? 0 : count; },
                function () {
                    return (index < source.length)
                        ? this.yieldReturn(source[index++])
                        : false;
                },
                Functions.Blank);
        });
    };

    ArrayEnumerable.prototype.takeExceptLast = function (count) {
        if (count == null) count = 1;
        return this.take(this.getSource().length - count);
    };

    ArrayEnumerable.prototype.takeFromLast = function (count) {
        return this.skip(this.getSource().length - count);
    };

    ArrayEnumerable.prototype.reverse = function () {
        var source = this.getSource();

        return new Enumerable(function () {
            var index;

            return new IEnumerator(
                function () {
                    index = source.length;
                },
                function () {
                    return (index > 0)
                        ? this.yieldReturn(source[--index])
                        : false;
                },
                Functions.Blank);
        });
    };

    ArrayEnumerable.prototype.sequenceEqual = function (second, comparer) {
        if ((second instanceof ArrayEnumerable || second instanceof Array)
            && comparer == null
            && Enumerable.from(second).count() != this.count()) {
            return false;
        }

        return Enumerable.prototype.sequenceEqual.apply(this, arguments);
    };

    ArrayEnumerable.prototype.toJoinedString = function (separator, selector) {
        var source = this.getSource();
        if (selector != null || !(source instanceof Array)) {
            return Enumerable.prototype.toJoinedString.apply(this, arguments);
        }

        if (separator == null) separator = "";
        return source.join(separator);
    };

    ArrayEnumerable.prototype.GetEnumerator = function () {
        return new Bridge.ArrayEnumerator(this.getSource());
    };

    // optimization for multiple where and multiple select and whereselect

    var WhereEnumerable = function (source, predicate) {
        this.prevSource = source;
        this.prevPredicate = predicate; // predicate.length always <= 1
    };
    WhereEnumerable.prototype = new Enumerable();

    WhereEnumerable.prototype.where = function (predicate) {
        predicate = Utils.createLambda(predicate);

        if (predicate.length <= 1) {
            var prevPredicate = this.prevPredicate;
            var composedPredicate = function (x) { return prevPredicate(x) && predicate(x); };
            return new WhereEnumerable(this.prevSource, composedPredicate);
        }
        else {
            // if predicate use index, can't compose
            return Enumerable.prototype.where.call(this, predicate);
        }
    };

    WhereEnumerable.prototype.select = function (selector) {
        selector = Utils.createLambda(selector);

        return (selector.length <= 1)
            ? new WhereSelectEnumerable(this.prevSource, this.prevPredicate, selector)
            : Enumerable.prototype.select.call(this, selector);
    };

    WhereEnumerable.prototype.GetEnumerator = function () {
        var predicate = this.prevPredicate;
        var source = this.prevSource;
        var enumerator;

        return new IEnumerator(
            function () { enumerator = source.GetEnumerator(); },
            function () {
                while (enumerator.moveNext()) {
                    if (predicate(enumerator.Current)) {
                        return this.yieldReturn(enumerator.Current);
                    }
                }
                return false;
            },
            function () { Utils.Dispose(enumerator); });
    };

    var WhereSelectEnumerable = function (source, predicate, selector) {
        this.prevSource = source;
        this.prevPredicate = predicate; // predicate.length always <= 1 or null
        this.prevSelector = selector; // selector.length always <= 1
    };
    WhereSelectEnumerable.prototype = new Enumerable();

    WhereSelectEnumerable.prototype.where = function (predicate) {
        predicate = Utils.createLambda(predicate);

        return (predicate.length <= 1)
            ? new WhereEnumerable(this, predicate)
            : Enumerable.prototype.where.call(this, predicate);
    };

    WhereSelectEnumerable.prototype.select = function (selector) {
        selector = Utils.createLambda(selector);

        if (selector.length <= 1) {
            var prevSelector = this.prevSelector;
            var composedSelector = function (x) { return selector(prevSelector(x)); };
            return new WhereSelectEnumerable(this.prevSource, this.prevPredicate, composedSelector);
        }
        else {
            // if selector use index, can't compose
            return Enumerable.prototype.select.call(this, selector);
        }
    };

    WhereSelectEnumerable.prototype.GetEnumerator = function () {
        var predicate = this.prevPredicate;
        var selector = this.prevSelector;
        var source = this.prevSource;
        var enumerator;

        return new IEnumerator(
            function () { enumerator = source.GetEnumerator(); },
            function () {
                while (enumerator.moveNext()) {
                    if (predicate == null || predicate(enumerator.Current)) {
                        return this.yieldReturn(selector(enumerator.Current));
                    }
                }
                return false;
            },
            function () { Utils.Dispose(enumerator); });
    };

    // Collections

    // dictionary = Dictionary<TKey, TValue[]>
    var Lookup = function (dictionary, order) {
        this.count = function () {
            return dictionary.getCount();
        };
        this.get = function (key) {
            var value = { v: null };
            var success = dictionary.tryGetValue(key, value);
            return Enumerable.from(success ? value.v : []);
        };
        this.contains = function (key) {
            return dictionary.containsKey(key);
        };
        this.toEnumerable = function () {
            return Enumerable.from(order).select(function (key) {
                return new Grouping(key, dictionary.get(key));
            });
        };
        this.GetEnumerator = function () {
            return this.toEnumerable().GetEnumerator();
        };
    };

    Bridge.definei("System.Linq.ILookup$2");
    Lookup.$$inherits = [];
    Bridge.Class.addExtend(Lookup, [System.Collections.IEnumerable, System.Linq.ILookup$2]);

    var Grouping = function (groupKey, elements) {
        this.key = function () {
            return groupKey;
        };
        ArrayEnumerable.call(this, elements);
    };
    Grouping.prototype = new ArrayEnumerable();
    Bridge.definei("System.Linq.IGrouping$2");
    Grouping.prototype.constructor = Grouping;

    Grouping.$$inherits = [];
    Bridge.Class.addExtend(Grouping, [System.Collections.IEnumerable, System.Linq.IGrouping$2]);

    // module export
    /*if (typeof define === Types.Function && define.amd) { // AMD
        define("linqjs", [], function () { return Enumerable; });
    } else if (typeof module !== Types.Undefined && module.exports) { // Node
        module.exports = Enumerable;
    } else {
        root.Enumerable = Enumerable;
    }*/

    Bridge.Linq = {};
    Bridge.Linq.Enumerable = Enumerable;

    System.Linq = System.Linq || {};
    System.Linq.Enumerable = Enumerable;
    System.Linq.Grouping$2 = Grouping;
    System.Linq.Lookup$2 = Lookup;
    System.Linq.OrderedEnumerable$1 = OrderedEnumerable;
})(Bridge.global);

    // @source CollectionDataContractAttribute.js

    Bridge.define("System.Runtime.Serialization.CollectionDataContractAttribute", {
        inherits: [System.Attribute],
        fields: {
            _name: null,
            _ns: null,
            _itemName: null,
            _keyName: null,
            _valueName: null,
            _isReference: false,
            _isNameSetExplicitly: false,
            _isNamespaceSetExplicitly: false,
            _isReferenceSetExplicitly: false,
            _isItemNameSetExplicitly: false,
            _isKeyNameSetExplicitly: false,
            _isValueNameSetExplicitly: false
        },
        props: {
            Namespace: {
                get: function () {
                    return this._ns;
                },
                set: function (value) {
                    this._ns = value;
                    this._isNamespaceSetExplicitly = true;
                }
            },
            IsNamespaceSetExplicitly: {
                get: function () {
                    return this._isNamespaceSetExplicitly;
                }
            },
            Name: {
                get: function () {
                    return this._name;
                },
                set: function (value) {
                    this._name = value;
                    this._isNameSetExplicitly = true;
                }
            },
            IsNameSetExplicitly: {
                get: function () {
                    return this._isNameSetExplicitly;
                }
            },
            ItemName: {
                get: function () {
                    return this._itemName;
                },
                set: function (value) {
                    this._itemName = value;
                    this._isItemNameSetExplicitly = true;
                }
            },
            IsItemNameSetExplicitly: {
                get: function () {
                    return this._isItemNameSetExplicitly;
                }
            },
            KeyName: {
                get: function () {
                    return this._keyName;
                },
                set: function (value) {
                    this._keyName = value;
                    this._isKeyNameSetExplicitly = true;
                }
            },
            IsReference: {
                get: function () {
                    return this._isReference;
                },
                set: function (value) {
                    this._isReference = value;
                    this._isReferenceSetExplicitly = true;
                }
            },
            IsReferenceSetExplicitly: {
                get: function () {
                    return this._isReferenceSetExplicitly;
                }
            },
            IsKeyNameSetExplicitly: {
                get: function () {
                    return this._isKeyNameSetExplicitly;
                }
            },
            ValueName: {
                get: function () {
                    return this._valueName;
                },
                set: function (value) {
                    this._valueName = value;
                    this._isValueNameSetExplicitly = true;
                }
            },
            IsValueNameSetExplicitly: {
                get: function () {
                    return this._isValueNameSetExplicitly;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            }
        }
    });

    // @source ContractNamespaceAttribute.js

    Bridge.define("System.Runtime.Serialization.ContractNamespaceAttribute", {
        inherits: [System.Attribute],
        fields: {
            _clrNamespace: null,
            _contractNamespace: null
        },
        props: {
            ClrNamespace: {
                get: function () {
                    return this._clrNamespace;
                },
                set: function (value) {
                    this._clrNamespace = value;
                }
            },
            ContractNamespace: {
                get: function () {
                    return this._contractNamespace;
                }
            }
        },
        ctors: {
            ctor: function (contractNamespace) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._contractNamespace = contractNamespace;
            }
        }
    });

    // @source DataContractAttribute.js

    Bridge.define("System.Runtime.Serialization.DataContractAttribute", {
        inherits: [System.Attribute],
        fields: {
            _name: null,
            _ns: null,
            _isNameSetExplicitly: false,
            _isNamespaceSetExplicitly: false,
            _isReference: false,
            _isReferenceSetExplicitly: false
        },
        props: {
            IsReference: {
                get: function () {
                    return this._isReference;
                },
                set: function (value) {
                    this._isReference = value;
                    this._isReferenceSetExplicitly = true;
                }
            },
            IsReferenceSetExplicitly: {
                get: function () {
                    return this._isReferenceSetExplicitly;
                }
            },
            Namespace: {
                get: function () {
                    return this._ns;
                },
                set: function (value) {
                    this._ns = value;
                    this._isNamespaceSetExplicitly = true;
                }
            },
            IsNamespaceSetExplicitly: {
                get: function () {
                    return this._isNamespaceSetExplicitly;
                }
            },
            Name: {
                get: function () {
                    return this._name;
                },
                set: function (value) {
                    this._name = value;
                    this._isNameSetExplicitly = true;
                }
            },
            IsNameSetExplicitly: {
                get: function () {
                    return this._isNameSetExplicitly;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            }
        }
    });

    // @source DataMemberAttribute.js

    Bridge.define("System.Runtime.Serialization.DataMemberAttribute", {
        inherits: [System.Attribute],
        fields: {
            _name: null,
            _isNameSetExplicitly: false,
            _order: 0,
            _isRequired: false,
            _emitDefaultValue: false
        },
        props: {
            Name: {
                get: function () {
                    return this._name;
                },
                set: function (value) {
                    this._name = value;
                    this._isNameSetExplicitly = true;
                }
            },
            IsNameSetExplicitly: {
                get: function () {
                    return this._isNameSetExplicitly;
                }
            },
            Order: {
                get: function () {
                    return this._order;
                },
                set: function (value) {
                    if (value < 0) {
                        throw new System.Runtime.Serialization.InvalidDataContractException.$ctor1("Property 'Order' in DataMemberAttribute attribute cannot be a negative number.");
                    }
                    this._order = value;
                }
            },
            IsRequired: {
                get: function () {
                    return this._isRequired;
                },
                set: function (value) {
                    this._isRequired = value;
                }
            },
            EmitDefaultValue: {
                get: function () {
                    return this._emitDefaultValue;
                },
                set: function (value) {
                    this._emitDefaultValue = value;
                }
            }
        },
        ctors: {
            init: function () {
                this._order = -1;
                this._emitDefaultValue = true;
            },
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            }
        }
    });

    // @source EnumMemberAttribute.js

    Bridge.define("System.Runtime.Serialization.EnumMemberAttribute", {
        inherits: [System.Attribute],
        fields: {
            _value: null,
            _isValueSetExplicitly: false
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    this._value = value;
                    this._isValueSetExplicitly = true;
                }
            },
            IsValueSetExplicitly: {
                get: function () {
                    return this._isValueSetExplicitly;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            }
        }
    });

    // @source IDeserializationCallback.js

    Bridge.define("System.Runtime.Serialization.IDeserializationCallback", {
        $kind: "interface"
    });

    // @source IFormatterConverter.js

    Bridge.define("System.Runtime.Serialization.IFormatterConverter", {
        $kind: "interface"
    });

    // @source IgnoreDataMemberAttribute.js

    Bridge.define("System.Runtime.Serialization.IgnoreDataMemberAttribute", {
        inherits: [System.Attribute],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            }
        }
    });

    // @source InvalidDataContractException.js

    Bridge.define("System.Runtime.Serialization.InvalidDataContractException", {
        inherits: [System.Exception],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this);
            },
            $ctor1: function (message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerException);
            }
        }
    });

    // @source IObjectReference.js

    Bridge.define("System.Runtime.Serialization.IObjectReference", {
        $kind: "interface"
    });

    // @source ISafeSerializationData.js

    Bridge.define("System.Runtime.Serialization.ISafeSerializationData", {
        $kind: "interface"
    });

    // @source ISerializable.js

    Bridge.define("System.Runtime.Serialization.ISerializable", {
        $kind: "interface"
    });

    // @source ISerializationSurrogateProvider.js

    Bridge.define("System.Runtime.Serialization.ISerializationSurrogateProvider", {
        $kind: "interface"
    });

    // @source KnownTypeAttribute.js

    Bridge.define("System.Runtime.Serialization.KnownTypeAttribute", {
        inherits: [System.Attribute],
        fields: {
            _methodName: null,
            _type: null
        },
        props: {
            MethodName: {
                get: function () {
                    return this._methodName;
                }
            },
            Type: {
                get: function () {
                    return this._type;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Attribute.ctor.call(this);
            },
            $ctor2: function (type) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._type = type;
            },
            $ctor1: function (methodName) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._methodName = methodName;
            }
        }
    });

    // @source SerializationEntry.js

    Bridge.define("System.Runtime.Serialization.SerializationEntry", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.Runtime.Serialization.SerializationEntry(); }
            }
        },
        fields: {
            _name: null,
            _value: null,
            _type: null
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                }
            },
            Name: {
                get: function () {
                    return this._name;
                }
            },
            ObjectType: {
                get: function () {
                    return this._type;
                }
            }
        },
        ctors: {
            $ctor1: function (entryName, entryValue, entryType) {
                this.$initialize();
                this._name = entryName;
                this._value = entryValue;
                this._type = entryType;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7645431029, this._name, this._value, this._type]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Runtime.Serialization.SerializationEntry)) {
                    return false;
                }
                return Bridge.equals(this._name, o._name) && Bridge.equals(this._value, o._value) && Bridge.equals(this._type, o._type);
            },
            $clone: function (to) {
                var s = to || new System.Runtime.Serialization.SerializationEntry();
                s._name = this._name;
                s._value = this._value;
                s._type = this._type;
                return s;
            }
        }
    });

    // @source SerializationException.js

    Bridge.define("System.Runtime.Serialization.SerializationException", {
        inherits: [System.SystemException],
        statics: {
            fields: {
                s_nullMessage: null
            },
            ctors: {
                init: function () {
                    this.s_nullMessage = "Serialization error.";
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, System.Runtime.Serialization.SerializationException.s_nullMessage);
                this.HResult = -2146233076;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233076;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233076;
            }
        }
    });

    // @source SerializationInfoEnumerator.js

    Bridge.define("System.Runtime.Serialization.SerializationInfoEnumerator", {
        inherits: [System.Collections.IEnumerator],
        fields: {
            _members: null,
            _data: null,
            _types: null,
            _numItems: 0,
            _currItem: 0,
            _current: false
        },
        props: {
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return this.Current.$clone();
                }
            },
            Current: {
                get: function () {
                    if (this._current === false) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
                    }
                    return new System.Runtime.Serialization.SerializationEntry.$ctor1(this._members[System.Array.index(this._currItem, this._members)], this._data[System.Array.index(this._currItem, this._data)], this._types[System.Array.index(this._currItem, this._types)]);
                }
            },
            Name: {
                get: function () {
                    if (this._current === false) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
                    }
                    return this._members[System.Array.index(this._currItem, this._members)];
                }
            },
            Value: {
                get: function () {
                    if (this._current === false) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
                    }
                    return this._data[System.Array.index(this._currItem, this._data)];
                }
            },
            ObjectType: {
                get: function () {
                    if (this._current === false) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
                    }
                    return this._types[System.Array.index(this._currItem, this._types)];
                }
            }
        },
        alias: [
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "reset", "System$Collections$IEnumerator$reset"
        ],
        ctors: {
            ctor: function (members, info, types, numItems) {
                this.$initialize();

                this._members = members;
                this._data = info;
                this._types = types;

                this._numItems = (numItems - 1) | 0;
                this._currItem = -1;
                this._current = false;
            }
        },
        methods: {
            moveNext: function () {
                if (this._currItem < this._numItems) {
                    this._currItem = (this._currItem + 1) | 0;
                    this._current = true;
                } else {
                    this._current = false;
                }

                return this._current;
            },
            reset: function () {
                this._currItem = -1;
                this._current = false;
            }
        }
    });

    // @source StreamingContext.js

    Bridge.define("System.Runtime.Serialization.StreamingContext", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.Runtime.Serialization.StreamingContext(); }
            }
        },
        fields: {
            _additionalContext: null,
            _state: 0
        },
        props: {
            State: {
                get: function () {
                    return this._state;
                }
            },
            Context: {
                get: function () {
                    return this._additionalContext;
                }
            }
        },
        ctors: {
            $ctor1: function (state) {
                System.Runtime.Serialization.StreamingContext.$ctor2.call(this, state, null);
            },
            $ctor2: function (state, additional) {
                this.$initialize();
                this._state = state;
                this._additionalContext = additional;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                if (!(Bridge.is(obj, System.Runtime.Serialization.StreamingContext))) {
                    return false;
                }
                var ctx = System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.Runtime.Serialization.StreamingContext), System.Runtime.Serialization.StreamingContext));
                return Bridge.referenceEquals(ctx._additionalContext, this._additionalContext) && ctx._state === this._state;
            },
            getHashCode: function () {
                return this._state;
            },
            $clone: function (to) {
                var s = to || new System.Runtime.Serialization.StreamingContext();
                s._additionalContext = this._additionalContext;
                s._state = this._state;
                return s;
            }
        }
    });

    // @source StreamingContextStates.js

    Bridge.define("System.Runtime.Serialization.StreamingContextStates", {
        $kind: "enum",
        statics: {
            fields: {
                CrossProcess: 1,
                CrossMachine: 2,
                File: 4,
                Persistence: 8,
                Remoting: 16,
                Other: 32,
                Clone: 64,
                CrossAppDomain: 128,
                All: 255
            }
        },
        $flags: true
    });

    // @source OnSerializingAttribute.js

    Bridge.define("System.Runtime.Serialization.OnSerializingAttribute", {
        inherits: [System.Attribute]
    });

    // @source OnSerializedAttribute.js

    Bridge.define("System.Runtime.Serialization.OnSerializedAttribute", {
        inherits: [System.Attribute]
    });

    // @source OnDeserializingAttribute.js

    Bridge.define("System.Runtime.Serialization.OnDeserializingAttribute", {
        inherits: [System.Attribute]
    });

    // @source OnDeserializedAttribute.js

    Bridge.define("System.Runtime.Serialization.OnDeserializedAttribute", {
        inherits: [System.Attribute]
    });

    // @source SecurityException.js

    Bridge.define("System.Security.SecurityException", {
        inherits: [System.SystemException],
        statics: {
            fields: {
                DemandedName: null,
                GrantedSetName: null,
                RefusedSetName: null,
                DeniedName: null,
                PermitOnlyName: null,
                UrlName: null
            },
            ctors: {
                init: function () {
                    this.DemandedName = "Demanded";
                    this.GrantedSetName = "GrantedSet";
                    this.RefusedSetName = "RefusedSet";
                    this.DeniedName = "Denied";
                    this.PermitOnlyName = "PermitOnly";
                    this.UrlName = "Url";
                }
            }
        },
        props: {
            Demanded: null,
            DenySetInstance: null,
            GrantedSet: null,
            Method: null,
            PermissionState: null,
            PermissionType: null,
            PermitOnlySetInstance: null,
            RefusedSet: null,
            Url: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Security error.");
                this.HResult = -2146233078;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233078;
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, inner);
                this.HResult = -2146233078;
            },
            $ctor3: function (message, type) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233078;
                this.PermissionType = type;
            },
            $ctor4: function (message, type, state) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233078;
                this.PermissionType = type;
                this.PermissionState = state;
            }
        },
        methods: {
            toString: function () {
                return Bridge.toString(this);
            }
        }
    });

    // @source UnauthorizedAccessException.js

    Bridge.define("System.UnauthorizedAccessException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Attempted to perform an unauthorized operation.");
                this.HResult = -2147024891;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147024891;
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, inner);
                this.HResult = -2147024891;
            }
        }
    });

    // @source UnhandledExceptionEventArgs.js

    Bridge.define("System.UnhandledExceptionEventArgs", {
        fields: {
            _exception: null,
            _isTerminating: false
        },
        props: {
            ExceptionObject: {
                get: function () {
                    return this._exception;
                }
            },
            IsTerminating: {
                get: function () {
                    return this._isTerminating;
                }
            }
        },
        ctors: {
            ctor: function (exception, isTerminating) {
                this.$initialize();
                System.Object.call(this);
                this._exception = exception;
                this._isTerminating = isTerminating;
            }
        }
    });

    // @source Regex.js

    Bridge.define("System.Text.RegularExpressions.Regex", {
        statics: {
            _cacheSize: 15,
            _defaultMatchTimeout: System.TimeSpan.fromMilliseconds(-1),

            getCacheSize: function () {
                return System.Text.RegularExpressions.Regex._cacheSize;
            },

            setCacheSize: function (value) {
                if (value < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("value");
                }

                System.Text.RegularExpressions.Regex._cacheSize = value;
                //TODO: remove extra items from cache
            },

            escape: function (str) {
                if (str == null) {
                    throw new System.ArgumentNullException.$ctor1("str");
                }

                return System.Text.RegularExpressions.RegexParser.escape(str);
            },

            unescape: function (str) {
                if (str == null) {
                    throw new System.ArgumentNullException.$ctor1("str");
                }

                return System.Text.RegularExpressions.RegexParser.unescape(str);
            },

            isMatch: function (input, pattern, options, matchTimeout) {
                var scope = System.Text.RegularExpressions;

                if (!Bridge.isDefined(options)) {
                    options = scope.RegexOptions.None;
                }

                if (!Bridge.isDefined(matchTimeout)) {
                    matchTimeout = scope.Regex._defaultMatchTimeout;
                }

                var regex = new System.Text.RegularExpressions.Regex.ctor(pattern, options, matchTimeout, true);

                return regex.isMatch(input);
            },

            match: function (input, pattern, options, matchTimeout) {
                var scope = System.Text.RegularExpressions;

                if (!Bridge.isDefined(options)) {
                    options = scope.RegexOptions.None;
                }

                if (!Bridge.isDefined(matchTimeout)) {
                    matchTimeout = scope.Regex._defaultMatchTimeout;
                }

                var regex = new System.Text.RegularExpressions.Regex.ctor(pattern, options, matchTimeout, true);

                return regex.match(input);
            },

            matches: function (input, pattern, options, matchTimeout) {
                var scope = System.Text.RegularExpressions;

                if (!Bridge.isDefined(options)) {
                    options = scope.RegexOptions.None;
                }

                if (!Bridge.isDefined(matchTimeout)) {
                    matchTimeout = scope.Regex._defaultMatchTimeout;
                }

                var regex = new System.Text.RegularExpressions.Regex.ctor(pattern, options, matchTimeout, true);

                return regex.matches(input);
            },

            replace: function (input, pattern, replacement, options, matchTimeout) {
                var scope = System.Text.RegularExpressions;

                if (!Bridge.isDefined(options)) {
                    options = scope.RegexOptions.None;
                }

                if (!Bridge.isDefined(matchTimeout)) {
                    matchTimeout = scope.Regex._defaultMatchTimeout;
                }

                var regex = new System.Text.RegularExpressions.Regex.ctor(pattern, options, matchTimeout, true);

                return regex.replace(input, replacement);
            },

            split: function (input, pattern, options, matchTimeout) {
                var scope = System.Text.RegularExpressions;

                if (!Bridge.isDefined(options)) {
                    options = scope.RegexOptions.None;
                }

                if (!Bridge.isDefined(matchTimeout)) {
                    matchTimeout = scope.Regex._defaultMatchTimeout;
                }

                var regex = new System.Text.RegularExpressions.Regex.ctor(pattern, options, matchTimeout, true);

                return regex.split(input);
            }
        },

        _pattern: "",
        _matchTimeout: System.TimeSpan.fromMilliseconds(-1),
        _runner: null,
        _caps: null,
        _capsize: 0,
        _capnames: null,
        _capslist: null,

        config: {
            init: function () {
                this._options = System.Text.RegularExpressions.RegexOptions.None;
            }
        },

        ctor: function (pattern, options, matchTimeout, useCache) {
            this.$initialize();

            if (!Bridge.isDefined(options)) {
                options = System.Text.RegularExpressions.RegexOptions.None;
            }

            if (!Bridge.isDefined(matchTimeout)) {
                matchTimeout = System.TimeSpan.fromMilliseconds(-1);
            }

            if (!Bridge.isDefined(useCache)) {
                useCache = false;
            }

            var scope = System.Text.RegularExpressions;

            if (pattern == null) {
                throw new System.ArgumentNullException.$ctor1("pattern");
            }

            if (options < scope.RegexOptions.None || ((options >> 10) !== 0)) {
                throw new System.ArgumentOutOfRangeException.$ctor1("options");
            }

            if (((options & scope.RegexOptions.ECMAScript) !== 0) &&
                ((options & ~(scope.RegexOptions.ECMAScript |
                    scope.RegexOptions.IgnoreCase |
                    scope.RegexOptions.Multiline |
                    scope.RegexOptions.CultureInvariant
                )) !== 0)) {
                throw new System.ArgumentOutOfRangeException.$ctor1("options");
            }

            // Check if the specified options are supported.
            var supportedOptions =
                System.Text.RegularExpressions.RegexOptions.IgnoreCase |
                System.Text.RegularExpressions.RegexOptions.Multiline |
                System.Text.RegularExpressions.RegexOptions.Singleline |
                System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace |
                System.Text.RegularExpressions.RegexOptions.ExplicitCapture;

            if ((options | supportedOptions) !== supportedOptions) {
                throw new System.NotSupportedException.$ctor1("Specified Regex options are not supported.");
            }

            this._validateMatchTimeout(matchTimeout);

            this._pattern = pattern;
            this._options = options;
            this._matchTimeout = matchTimeout;
            this._runner = new scope.RegexRunner(this);

            //TODO: cache
            var patternInfo = this._runner.parsePattern();

            this._capnames = patternInfo.sparseSettings.sparseSlotNameMap;
            this._capslist = patternInfo.sparseSettings.sparseSlotNameMap.keys;
            this._capsize = this._capslist.length;
        },

        getMatchTimeout: function () {
            return this._matchTimeout;
        },

        getOptions: function () {
            return this._options;
        },

        getRightToLeft: function () {
            return (this._options & System.Text.RegularExpressions.RegexOptions.RightToLeft) !== 0;
        },

        isMatch: function (input, startat) {
            if (input == null) {
                throw new System.ArgumentNullException.$ctor1("input");
            }

            if (!Bridge.isDefined(startat)) {
                startat = this.getRightToLeft() ? input.length : 0;
            }

            var match = this._runner.run(true, -1, input, 0, input.length, startat);

            return match == null;
        },

        match: function (input, startat, arg3) {
            if (input == null) {
                throw new System.ArgumentNullException.$ctor1("input");
            }

            var length = input.length,
                beginning = 0;

            if (arguments.length === 3) {
                beginning = startat;
                length = arg3;
                startat = this.getRightToLeft() ? beginning + length : beginning;
            } else if (!Bridge.isDefined(startat)) {
                startat = this.getRightToLeft() ? length : 0;
            }

            return this._runner.run(false, -1, input, beginning, length, startat);
        },

        matches: function (input, startat) {
            if (input == null) {
                throw new System.ArgumentNullException.$ctor1("input");
            }

            if (!Bridge.isDefined(startat)) {
                startat = this.getRightToLeft() ? input.length : 0;
            }

            return new System.Text.RegularExpressions.MatchCollection(this, input, 0, input.length, startat);
        },

        getGroupNames: function () {
            if (this._capslist == null) {
                var invariantCulture = System.Globalization.CultureInfo.invariantCulture;

                var result = [];
                var max = this._capsize;
                var i;

                for (i = 0; i < max; i++) {
                    result[i] = System.Convert.toString(i, invariantCulture, System.Convert.typeCodes.Int32);
                }

                return result;
            } else {
                return this._capslist.slice();
            }
        },

        getGroupNumbers: function () {
            var caps = this._caps;
            var result;
            var key;
            var max;
            var i;

            if (caps == null) {
                result = [];
                max = this._capsize;
                for (i = 0; i < max; i++) {
                    result.push(i);
                }
            } else {
                result = [];

                for (key in caps) {
                    if (caps.hasOwnProperty(key)) {
                        result[caps[key]] = key;
                    }
                }
            }

            return result;
        },

        groupNameFromNumber: function (i) {
            if (this._capslist == null) {
                if (i >= 0 && i < this._capsize) {
                    var invariantCulture = System.Globalization.CultureInfo.invariantCulture;

                    return System.Convert.toString(i, invariantCulture, System.Convert.typeCodes.Int32);
                }

                return "";
            } else {
                if (this._caps != null) {
                    var obj = this._caps[i];

                    if (obj == null) {
                        return "";
                    }

                    return parseInt(obj);
                }

                if (i >= 0 && i < this._capslist.length) {
                    return this._capslist[i];
                }

                return "";
            }
        },

        groupNumberFromName: function (name) {
            if (name == null) {
                throw new System.ArgumentNullException.$ctor1("name");
            }

            // look up name if we have a hashtable of names
            if (this._capnames != null) {
                var ret = this._capnames[name];

                if (ret == null) {
                    return -1;
                }

                return parseInt(ret);
            }

            // convert to an int if it looks like a number
            var result = 0;
            var ch;
            var i;

            for (i = 0; i < name.Length; i++) {
                ch = name[i];

                if (ch > "9" || ch < "0") {
                    return -1;
                }

                result *= 10;
                result += (ch - "0");
            }

            // return int if it's in range
            if (result >= 0 && result < this._capsize) {
                return result;
            }

            return -1;
        },

        replace: function (input, evaluator, count, startat) {
            if (input == null) {
                throw new System.ArgumentNullException.$ctor1("input");
            }

            if (!Bridge.isDefined(count)) {
                count = -1;
            }

            if (!Bridge.isDefined(startat)) {
                startat = this.getRightToLeft() ? input.length : 0;
            }

            if (evaluator == null) {
                throw new System.ArgumentNullException.$ctor1("evaluator");
            }

            if (Bridge.isFunction(evaluator)) {
                return System.Text.RegularExpressions.RegexReplacement.replace(evaluator, this, input, count, startat);
            }

            var repl = System.Text.RegularExpressions.RegexParser.parseReplacement(evaluator, this._caps, this._capsize, this._capnames, this._options);
            //TODO: Cache

            return repl.replace(this, input, count, startat);
        },

        split: function (input, count, startat) {
            if (input == null) {
                throw new System.ArgumentNullException.$ctor1("input");
            }

            if (!Bridge.isDefined(count)) {
                count = 0;
            }

            if (!Bridge.isDefined(startat)) {
                startat = this.getRightToLeft() ? input.length : 0;
            }

            return System.Text.RegularExpressions.RegexReplacement.split(this, input, count, startat);
        },

        _validateMatchTimeout: function (matchTimeout) {
            var ms = matchTimeout.getTotalMilliseconds();

            if (-1 === ms) {
                return;
            }

            if (ms > 0 && ms <= 2147483646) {
                return;
            }

            throw new System.ArgumentOutOfRangeException.$ctor1("matchTimeout");
        }
    });

    // @source RegexCapture.js

    Bridge.define("System.Text.RegularExpressions.Capture", {
        _text: "",
        _index: 0,
        _length: 0,

        ctor: function (text, i, l) {
            this.$initialize();
            this._text = text;
            this._index = i;
            this._length = l;
        },

        getIndex: function () {
            return this._index;
        },

        getLength: function () {
            return this._length;
        },

        getValue: function () {
            return this._text.substr(this._index, this._length);
        },

        toString: function () {
            return this.getValue();
        },

        _getOriginalString: function () {
            return this._text;
        },

        _getLeftSubstring: function () {
            return this._text.slice(0, _index);
        },

        _getRightSubstring: function () {
            return this._text.slice(this._index + this._length, this._text.length);
        }
    });

    // @source RegexCaptureCollection.js

    Bridge.define("System.Text.RegularExpressions.CaptureCollection", {
        inherits: function () {
            return [System.Collections.ICollection];
        },

        config: {
            properties: {
                Count: {
                    get: function () {
                        return this._capcount;
                    }
                }
            },

            alias: [
            "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator",
            "getCount", "System$Collections$ICollection$getCount",
            "Count", "System$Collections$ICollection$Count",
            "copyTo", "System$Collections$ICollection$copyTo"
            ]
        },

        _group: null,
        _capcount: 0,
        _captures: null,

        ctor: function (group) {
            this.$initialize();
            this._group = group;
            this._capcount = group._capcount;
        },

        getSyncRoot: function () {
            return this._group;
        },

        getIsSynchronized: function () {
            return false;
        },

        getIsReadOnly: function () {
            return true;
        },

        getCount: function () {
            return this._capcount;
        },

        get: function (i) {
            if (i === this._capcount - 1 && i >= 0) {
                return this._group;
            }

            if (i >= this._capcount || i < 0) {
                throw new System.ArgumentOutOfRangeException.$ctor1("i");
            }

            this._ensureCapturesInited();

            return this._captures[i];
        },

        copyTo: function (array, arrayIndex) {
            if (array == null) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            if (array.length < arrayIndex + this._capcount) {
                throw new System.IndexOutOfRangeException();
            }

            var capture;
            var i;
            var j;

            for (i = arrayIndex, j = 0; j < this._capcount; i++, j++) {
                capture = this.get(j);
                System.Array.set(array, capture, [i]);
            }
        },

        GetEnumerator: function () {
            return new System.Text.RegularExpressions.CaptureEnumerator(this);
        },

        _ensureCapturesInited: function () {
            // first time a capture is accessed, compute them all
            if (this._captures == null) {
                var captures = [];
                var j;

                captures.length = this._capcount;

                for (j = 0; j < this._capcount - 1; j++) {
                    var index = this._group._caps[j * 2];
                    var length = this._group._caps[j * 2 + 1];

                    captures[j] = new System.Text.RegularExpressions.Capture(this._group._text, index, length);
                }

                if (this._capcount > 0) {
                    captures[this._capcount - 1] = this._group;
                }

                this._captures = captures;
            }
        }
    });

    Bridge.define("System.Text.RegularExpressions.CaptureEnumerator", {
        inherits: function () {
            return [System.Collections.IEnumerator];
        },

        config: {
            properties: {
                Current: {
                    get: function () {
                        return this.getCurrent();
                    }
                }
            },
            alias: [
                "getCurrent", "System$Collections$IEnumerator$getCurrent",
                "moveNext", "System$Collections$IEnumerator$moveNext",
                "reset", "System$Collections$IEnumerator$reset",
                "Current", "System$Collections$IEnumerator$Current"
            ]
        },

        _captureColl: null,
        _curindex: 0,

        ctor: function (captureColl) {
            this.$initialize();
            this._curindex = -1;
            this._captureColl = captureColl;
        },

        moveNext: function () {
            var size = this._captureColl.getCount();

            if (this._curindex >= size) {
                return false;
            }

            this._curindex++;
            return (this._curindex < size);
        },

        getCurrent: function () {
            return this.getCapture();
        },

        getCapture: function () {
            if (this._curindex < 0 || this._curindex >= this._captureColl.getCount()) {
                throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
            }

            return this._captureColl.get(this._curindex);
        },

        reset: function () {
            this._curindex = -1;
        }
    });

    // @source RegexGroup.js

    Bridge.define("System.Text.RegularExpressions.Group", {
        inherits: function () {
            return [System.Text.RegularExpressions.Capture];
        },

        statics: {
            config: {
                init: function () {
                    var empty = new System.Text.RegularExpressions.Group("", [], 0);

                    this.getEmpty = function () {
                        return empty;
                    }
                }
            },

            synchronized: function (group) {
                if (group == null) {
                    throw new System.ArgumentNullException.$ctor1("group");
                }

                // force Captures to be computed.
                var captures = group.getCaptures();

                if (captures.getCount() > 0) {
                    captures.get(0);
                }

                return group;
            }
        },

        _caps: null,
        _capcount: 0,
        _capColl: null,

        ctor: function (text, caps, capcount) {
            this.$initialize();
            var scope = System.Text.RegularExpressions;
            var index = capcount === 0 ? 0 : caps[(capcount - 1) * 2];
            var length = capcount === 0 ? 0 : caps[(capcount * 2) - 1];

            scope.Capture.ctor.call(this, text, index, length);

            this._caps = caps;
            this._capcount = capcount;
        },

        getSuccess: function () {
            return this._capcount !== 0;
        },

        getCaptures: function () {
            if (this._capColl == null) {
                this._capColl = new System.Text.RegularExpressions.CaptureCollection(this);
            }

            return this._capColl;
        }
    });

    // @source RegexGroupCollection.js

    Bridge.define("System.Text.RegularExpressions.GroupCollection", {
        inherits: function () {
            return [System.Collections.ICollection];
        },

        config: {
            properties: {
                Count: {
                    get: function () {
                        return this._match._matchcount.length;
                    }
                }
            },
            alias: [
            "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator",
            "getCount", "System$Collections$ICollection$getCount",
            "Count", "System$Collections$ICollection$Count",
            "copyTo", "System$Collections$ICollection$copyTo"
            ]
        },

        _match: null,
        _captureMap: null,
        _groups: null,

        ctor: function (match, caps) {
            this.$initialize();
            this._match = match;
            this._captureMap = caps;
        },

        getSyncRoot: function () {
            return this._match;
        },

        getIsSynchronized: function () {
            return false;
        },

        getIsReadOnly: function () {
            return true;
        },

        getCount: function () {
            return this._match._matchcount.length;
        },

        get: function (groupnum) {
            return this._getGroup(groupnum);
        },

        getByName: function (groupname) {
            if (this._match._regex == null) {
                return System.Text.RegularExpressions.Group.getEmpty();
            }

            var groupnum = this._match._regex.groupNumberFromName(groupname);

            return this._getGroup(groupnum);
        },

        copyTo: function (array, arrayIndex) {
            if (array == null) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            var count = this.getCount();

            if (array.length < arrayIndex + count) {
                throw new System.IndexOutOfRangeException();
            }

            var group;
            var i;
            var j;

            for (i = arrayIndex, j = 0; j < count; i++, j++) {
                group = this._getGroup(j);
                System.Array.set(array, group, [i]);
            }
        },

        GetEnumerator: function () {
            return new System.Text.RegularExpressions.GroupEnumerator(this);
        },

        _getGroup: function (groupnum) {
            var group;

            if (this._captureMap != null) {
                var num = this._captureMap[groupnum];

                if (num == null) {
                    group = System.Text.RegularExpressions.Group.getEmpty();
                } else {
                    group = this._getGroupImpl(num);
                }
            } else {
                if (groupnum >= this._match._matchcount.length || groupnum < 0) {
                    group = System.Text.RegularExpressions.Group.getEmpty();
                } else {
                    group = this._getGroupImpl(groupnum);
                }
            }

            return group;
        },

        _getGroupImpl: function (groupnum) {
            if (groupnum === 0) {
                return this._match;
            }

            this._ensureGroupsInited();

            return this._groups[groupnum];
        },

        _ensureGroupsInited: function () {
            // Construct all the Group objects the first time GetGroup is called
            if (this._groups == null) {
                var groups = [];

                groups.length = this._match._matchcount.length;

                if (groups.length > 0) {
                    groups[0] = this._match;
                }

                var matchText;
                var matchCaps;
                var matchCapcount;
                var i;

                for (i = 0; i < groups.length - 1; i++) {
                    matchText = this._match._text;
                    matchCaps = this._match._matches[i + 1];
                    matchCapcount = this._match._matchcount[i + 1];
                    groups[i + 1] = new System.Text.RegularExpressions.Group(matchText, matchCaps, matchCapcount);
                }

                this._groups = groups;
            }
        }
    });

    Bridge.define("System.Text.RegularExpressions.GroupEnumerator", {
        inherits: function () {
            return [System.Collections.IEnumerator];
        },

        config: {
            properties: {
                Current: {
                    get: function () {
                        return this.getCurrent();
                    }
                }
            },

            alias: [
                "getCurrent", "System$Collections$IEnumerator$getCurrent",
                "moveNext", "System$Collections$IEnumerator$moveNext",
                "reset", "System$Collections$IEnumerator$reset",
                "Current", "System$Collections$IEnumerator$Current"
            ]
        },

        _groupColl: null,
        _curindex: 0,

        ctor: function (groupColl) {
            this.$initialize();
            this._curindex = -1;
            this._groupColl = groupColl;
        },

        moveNext: function () {
            var size = this._groupColl.getCount();

            if (this._curindex >= size) {
                return false;
            }

            this._curindex++;

            return (this._curindex < size);
        },

        getCurrent: function () {
            return this.getCapture();
        },

        getCapture: function () {
            if (this._curindex < 0 || this._curindex >= this._groupColl.getCount()) {
                throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
            }

            return this._groupColl.get(this._curindex);
        },

        reset: function () {
            this._curindex = -1;
        }
    });

    // @source RegexMatch.js

    Bridge.define("System.Text.RegularExpressions.Match", {
        inherits: function () {
            return [System.Text.RegularExpressions.Group];
        },

        statics: {
            config: {
                init: function () {
                    var empty = new System.Text.RegularExpressions.Match(null, 1, "", 0, 0, 0);

                    this.getEmpty = function () {
                        return empty;
                    }
                }
            },

            synchronized: function (match) {
                if (match == null) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }

                // Populate all groups by looking at each one
                var groups = match.getGroups();
                var groupsCount = groups.getCount();
                var group;
                var i;

                for (i = 0; i < groupsCount; i++) {
                    group = groups.get(i);
                    System.Text.RegularExpressions.Group.synchronized(group);
                }

                return match;
            }
        },

        _regex: null,
        _matchcount: null,
        _matches: null,
        _textbeg: 0,
        _textend: 0,
        _textstart: 0,
        _groupColl: null,
        _textpos: 0,

        ctor: function (regex, capcount, text, begpos, len, startpos) {
            this.$initialize();
            var scope = System.Text.RegularExpressions;
            var caps = [0, 0];

            scope.Group.ctor.call(this, text, caps, 0);

            this._regex = regex;

            this._matchcount = [];
            this._matchcount.length = capcount;

            var i;

            for (i = 0; i < capcount; i++) {
                this._matchcount[i] = 0;
            }

            this._matches = [];
            this._matches.length = capcount;
            this._matches[0] = caps;

            this._textbeg = begpos;
            this._textend = begpos + len;
            this._textstart = startpos;
        },

        getGroups: function () {
            if (this._groupColl == null) {
                this._groupColl = new System.Text.RegularExpressions.GroupCollection(this, null);
            }

            return this._groupColl;
        },

        nextMatch: function () {
            if (this._regex == null) {
                return this;
            }

            return this._regex._runner.run(false, this._length, this._text, this._textbeg, this._textend - this._textbeg, this._textpos);
        },

        result: function (replacement) {
            if (replacement == null) {
                throw new System.ArgumentNullException.$ctor1("replacement");
            }

            if (this._regex == null) {
                throw new System.NotSupportedException.$ctor1("Result cannot be called on a failed Match.");
            }

            var repl = System.Text.RegularExpressions.RegexParser.parseReplacement(replacement, this._regex._caps, this._regex._capsize, this._regex._capnames, this._regex._options);
            //TODO: cache

            return repl.replacement(this);
        },

        _isMatched: function (cap) {
            return cap < this._matchcount.length && this._matchcount[cap] > 0 && this._matches[cap][this._matchcount[cap] * 2 - 1] !== (-3 + 1);
        },

        _addMatch: function (cap, start, len) {
            if (this._matches[cap] == null) {
                this._matches[cap] = new Array(2);
            }

            var capcount = this._matchcount[cap];

            if (capcount * 2 + 2 > this._matches[cap].length) {
                var oldmatches = this._matches[cap];
                var newmatches = new Array(capcount * 8);
                var j;

                for (j = 0; j < capcount * 2; j++) {
                    newmatches[j] = oldmatches[j];
                }

                this._matches[cap] = newmatches;
            }

            this._matches[cap][capcount * 2] = start;
            this._matches[cap][capcount * 2 + 1] = len;
            this._matchcount[cap] = capcount + 1;
        },

        _tidy: function (textpos) {
            var interval = this._matches[0];
            this._index = interval[0];
            this._length = interval[1];
            this._textpos = textpos;
            this._capcount = this._matchcount[0];
        },

        _groupToStringImpl: function (groupnum) {
            var c = this._matchcount[groupnum];

            if (c === 0) {
                return "";
            }

            var matches = this._matches[groupnum];
            var capIndex = matches[(c - 1) * 2];
            var capLength = matches[(c * 2) - 1];

            return this._text.slice(capIndex, capIndex + capLength);
        },

        _lastGroupToStringImpl: function () {
            return this._groupToStringImpl(this._matchcount.length - 1);
        }
    });

    Bridge.define("System.Text.RegularExpressions.MatchSparse", {
        inherits: function () {
            return [System.Text.RegularExpressions.Match];
        },

        _caps: null,

        ctor: function (regex, caps, capcount, text, begpos, len, startpos) {
            this.$initialize();
            var scope = System.Text.RegularExpressions;
            scope.Match.ctor.call(this, regex, capcount, text, begpos, len, startpos);

            this._caps = caps;
        },

        getGroups: function () {
            if (this._groupColl == null) {
                this._groupColl = new System.Text.RegularExpressions.GroupCollection(this, this._caps);
            }

            return this._groupColl;
        },
    });

    // @source RegexMatchCollection.js

    Bridge.define("System.Text.RegularExpressions.MatchCollection", {
        inherits: function () {
            return [System.Collections.ICollection];
        },

        config: {
            properties: {
                Count: {
                    get: function () {
                        return this.getCount();
                    }
                }
            },
            alias: [
            "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator",
            "getCount", "System$Collections$ICollection$getCount",
            "Count", "System$Collections$ICollection$Count",
            "copyTo", "System$Collections$ICollection$copyTo"
            ]
        },

        _regex: null,
        _input: null,
        _beginning: 0,
        _length: 0,
        _startat: 0,
        _prevlen: 0,
        _matches: null,
        _done: false,

        ctor: function (regex, input, beginning, length, startat) {
            this.$initialize();
            if (startat < 0 || startat > input.Length) {
                throw new System.ArgumentOutOfRangeException.$ctor1("startat");
            }

            this._regex = regex;
            this._input = input;
            this._beginning = beginning;
            this._length = length;
            this._startat = startat;
            this._prevlen = -1;
            this._matches = [];
        },

        getCount: function () {
            if (!this._done) {
                this._getMatch(0x7FFFFFFF);
            }

            return this._matches.length;
        },

        getSyncRoot: function () {
            return this;
        },

        getIsSynchronized: function () {
            return false;
        },

        getIsReadOnly: function () {
            return true;
        },

        get: function (i) {
            var match = this._getMatch(i);

            if (match == null) {
                throw new System.ArgumentOutOfRangeException.$ctor1("i");
            }

            return match;
        },

        copyTo: function (array, arrayIndex) {
            if (array == null) {
                throw new System.ArgumentNullException.$ctor1("array");
            }

            var count = this.getCount();

            if (array.length < arrayIndex + count) {
                throw new System.IndexOutOfRangeException();
            }

            var match;
            var i;
            var j;

            for (i = arrayIndex, j = 0; j < count; i++, j++) {
                match = this._getMatch(j);
                System.Array.set(array, match, [i]);
            }
        },

        GetEnumerator: function () {
            return new System.Text.RegularExpressions.MatchEnumerator(this);
        },

        _getMatch: function (i) {
            if (i < 0) {
                return null;
            }

            if (this._matches.length > i) {
                return this._matches[i];
            }

            if (this._done) {
                return null;
            }

            var match;

            do {
                match = this._regex._runner.run(false, this._prevLen, this._input, this._beginning, this._length, this._startat);
                if (!match.getSuccess()) {
                    this._done = true;
                    return null;
                }

                this._matches.push(match);

                this._prevLen = match._length;
                this._startat = match._textpos;
            } while (this._matches.length <= i);

            return match;
        }
    });

    Bridge.define("System.Text.RegularExpressions.MatchEnumerator", {
        inherits: function () {
            return [System.Collections.IEnumerator];
        },

        config: {
            properties: {
                Current: {
                    get: function () {
                        return this.getCurrent();
                    }
                }
            },

            alias: [
                "getCurrent", "System$Collections$IEnumerator$getCurrent",
                "moveNext", "System$Collections$IEnumerator$moveNext",
                "reset", "System$Collections$IEnumerator$reset",
                "Current", "System$Collections$IEnumerator$Current"
            ]
        },

        _matchcoll: null,
        _match: null,
        _curindex: 0,
        _done: false,

        ctor: function (matchColl) {
            this.$initialize();
            this._matchcoll = matchColl;
        },

        moveNext: function () {
            if (this._done) {
                return false;
            }

            this._match = this._matchcoll._getMatch(this._curindex);
            this._curindex++;

            if (this._match == null) {
                this._done = true;

                return false;
            }

            return true;
        },

        getCurrent: function () {
            if (this._match == null) {
                throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
            }

            return this._match;
        },

        reset: function () {
            this._curindex = 0;
            this._done = false;
            this._match = null;
        }
    });

    // @source RegexOptions.js

    Bridge.define("System.Text.RegularExpressions.RegexOptions", {
        statics: {
            None: 0x0000,
            IgnoreCase: 0x0001,
            Multiline: 0x0002,
            ExplicitCapture: 0x0004,
            Compiled: 0x0008,
            Singleline: 0x0010,
            IgnorePatternWhitespace: 0x0020,
            RightToLeft: 0x0040,
            ECMAScript: 0x0100,
            CultureInvariant: 0x0200
        },

        $kind: "enum",
        $flags: true
    });

    // @source RegexRunner.js

    Bridge.define("System.Text.RegularExpressions.RegexRunner", {
        statics: {},

        _runregex: null,
        _netEngine: null,

        _runtext: "", // text to search
        _runtextpos: 0, // current position in text

        _runtextbeg: 0, // beginning of text to search
        _runtextend: 0, // end of text to search
        _runtextstart: 0, // starting point for search
        _quick: false, // true value means IsMatch method call
        _prevlen: 0,

        ctor: function (regex) {
            this.$initialize();

            if (regex == null) {
                throw new System.ArgumentNullException.$ctor1("regex");
            }

            this._runregex = regex;

            var options = regex.getOptions();
            var optionsEnum = System.Text.RegularExpressions.RegexOptions;

            var isCaseInsensitive = (options & optionsEnum.IgnoreCase) === optionsEnum.IgnoreCase;
            var isMultiline = (options & optionsEnum.Multiline) === optionsEnum.Multiline;
            var isSingleline = (options & optionsEnum.Singleline) === optionsEnum.Singleline;
            var isIgnoreWhitespace = (options & optionsEnum.IgnorePatternWhitespace) === optionsEnum.IgnorePatternWhitespace;
            var isExplicitCapture = (options & optionsEnum.ExplicitCapture) === optionsEnum.ExplicitCapture;

            var timeoutMs = regex._matchTimeout.getTotalMilliseconds();

            this._netEngine = new System.Text.RegularExpressions.RegexEngine(regex._pattern, isCaseInsensitive, isMultiline, isSingleline, isIgnoreWhitespace, isExplicitCapture, timeoutMs);
        },

        run: function (quick, prevlen, input, beginning, length, startat) {
            if (startat < 0 || startat > input.Length) {
                throw new System.ArgumentOutOfRangeException.$ctor4("start", "Start index cannot be less than 0 or greater than input length.");
            }

            if (length < 0 || length > input.Length) {
                throw new ArgumentOutOfRangeException("length", "Length cannot be less than 0 or exceed input length.");
            }

            this._runtext = input;
            this._runtextbeg = beginning;
            this._runtextend = beginning + length;
            this._runtextstart = startat;
            this._quick = quick;
            this._prevlen = prevlen;

            var stoppos;
            var bump;

            if (this._runregex.getRightToLeft()) {
                stoppos = this._runtextbeg;
                bump = -1;
            } else {
                stoppos = this._runtextend;
                bump = 1;
            }

            if (this._prevlen === 0) {
                if (this._runtextstart === stoppos) {
                    return System.Text.RegularExpressions.Match.getEmpty();
                }

                this._runtextstart += bump;
            }

            // Execute Regex:
            var jsMatch = this._netEngine.match(this._runtext, this._runtextstart);

            // Convert the results:
            var result = this._convertNetEngineResults(jsMatch);
            return result;
        },

        parsePattern: function () {
            var result = this._netEngine.parsePattern();

            return result;
        },

        _convertNetEngineResults: function (jsMatch) {
            if (jsMatch.success && this._quick) {
                return null; // in quick mode, a successful match returns null
            }

            if (!jsMatch.success) {
                return System.Text.RegularExpressions.Match.getEmpty();
            }

            var patternInfo = this.parsePattern();
            var match;

            if (patternInfo.sparseSettings.isSparse) {
                match = new System.Text.RegularExpressions.MatchSparse(this._runregex, patternInfo.sparseSettings.sparseSlotMap, jsMatch.groups.length, this._runtext, 0, this._runtext.length, this._runtextstart);
            } else {
                match = new System.Text.RegularExpressions.Match(this._runregex, jsMatch.groups.length, this._runtext, 0, this._runtext.length, this._runtextstart);
            }

            var jsGroup;
            var jsCapture;
            var grOrder;
            var i;
            var j;

            for (i = 0; i < jsMatch.groups.length; i++) {
                jsGroup = jsMatch.groups[i];

                // Paste group index/length according to group ordering:
                grOrder = 0;

                if (jsGroup.descriptor != null) {
                    grOrder = this._runregex.groupNumberFromName(jsGroup.descriptor.name);
                }

                for (j = 0; j < jsGroup.captures.length; j++) {
                    jsCapture = jsGroup.captures[j];
                    match._addMatch(grOrder, jsCapture.capIndex, jsCapture.capLength);
                }
            }

            var textEndPos = jsMatch.capIndex + jsMatch.capLength;

            match._tidy(textEndPos);

            return match;
        }
    });

    // @source RegexParser.js

    Bridge.define("System.Text.RegularExpressions.RegexParser", {
        statics: {
            _Q: 5, // quantifier
            _S: 4, // ordinary stopper
            _Z: 3, // ScanBlank stopper
            _X: 2, // whitespace
            _E: 1, // should be escaped

            _category: [
                //0 1 2  3  4  5  6  7  8  9  A  B  C  D  E  F  0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                //! " #  $  %  &  '  (  )  *  +  ,  -  .  /  0  1  2  3  4  5  6  7  8  9  :  ;  <  =  >  ?
                2, 0, 0, 3, 4, 0, 0, 0, 4, 4, 5, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
                //@ A B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z  [  \  ]  ^  _
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0,
                //' a b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z  {  |  }  ~
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0
            ],

            escape: function (input) {
                var sb;
                var ch;
                var lastpos;
                var i;

                for (i = 0; i < input.length; i++) {
                    if (System.Text.RegularExpressions.RegexParser._isMetachar(input[i])) {
                        sb = "";
                        ch = input[i];

                        sb += input.slice(0, i);

                        do {
                            sb += "\\";

                            switch (ch) {
                                case "\n":
                                    ch = "n";
                                    break;
                                case "\r":
                                    ch = "r";
                                    break;
                                case "\t":
                                    ch = "t";
                                    break;
                                case "\f":
                                    ch = "f";
                                    break;
                            }

                            sb += ch;
                            i++;
                            lastpos = i;

                            while (i < input.length) {
                                ch = input[i];

                                if (System.Text.RegularExpressions.RegexParser._isMetachar(ch)) {
                                    break;
                                }

                                i++;
                            }

                            sb += input.slice(lastpos, i);
                        } while (i < input.length);

                        return sb;
                    }
                }

                return input;
            },

            unescape: function (input) {
                var culture = System.Globalization.CultureInfo.invariantCulture;
                var sb;
                var lastpos;
                var i;
                var p;

                for (i = 0; i < input.length; i++) {
                    if (input[i] === "\\") {
                        sb = "";
                        p = new System.Text.RegularExpressions.RegexParser(culture);
                        p._setPattern(input);

                        sb += input.slice(0, i);

                        do {
                            i++;

                            p._textto(i);

                            if (i < input.length) {
                                sb += p._scanCharEscape();
                            }

                            i = p._textpos();
                            lastpos = i;

                            while (i < input.length && input[i] !== "\\") {
                                i++;
                            }

                            sb += input.slice(lastpos, i);
                        } while (i < input.length);

                        return sb;
                    }
                }

                return input;
            },

            parseReplacement: function (rep, caps, capsize, capnames, op) {
                var culture = System.Globalization.CultureInfo.getCurrentCulture(); // TODO: InvariantCulture
                var p = new System.Text.RegularExpressions.RegexParser(culture);

                p._options = op;
                p._noteCaptures(caps, capsize, capnames);
                p._setPattern(rep);

                var root = p._scanReplacement();

                return new System.Text.RegularExpressions.RegexReplacement(rep, root, caps);
            },

            _isMetachar: function (ch) {
                var code = ch.charCodeAt(0);

                return (code <= "|".charCodeAt(0) && System.Text.RegularExpressions.RegexParser._category[code] >= System.Text.RegularExpressions.RegexParser._E);
            }
        },

        _caps: null,
        _capsize: 0,
        _capnames: null,
        _pattern: "",
        _currentPos: 0,
        _concatenation: null,
        _culture: null,

        config: {
            init: function () {
                this._options = System.Text.RegularExpressions.RegexOptions.None;
            }
        },

        ctor: function (culture) {
            this.$initialize();
            this._culture = culture;
            this._caps = {};
        },

        _noteCaptures: function (caps, capsize, capnames) {
            this._caps = caps;
            this._capsize = capsize;
            this._capnames = capnames;
        },

        _setPattern: function (pattern) {
            if (pattern == null) {
                pattern = "";
            }

            this._pattern = pattern || "";
            this._currentPos = 0;
        },

        _scanReplacement: function () {
            this._concatenation = new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Concatenate, this._options);
            var c;
            var startpos;
            var dollarNode;

            while (true) {
                c = this._charsRight();

                if (c === 0) {
                    break;
                }

                startpos = this._textpos();

                while (c > 0 && this._rightChar() !== "$") {
                    this._moveRight();
                    c--;
                }

                this._addConcatenate(startpos, this._textpos() - startpos);

                if (c > 0) {
                    if (this._moveRightGetChar() === "$") {
                        dollarNode = this._scanDollar();
                        this._concatenation.addChild(dollarNode);
                    }
                }
            }

            return this._concatenation;
        },

        _addConcatenate: function (pos, cch /*, bool isReplacement*/ ) {
            if (cch === 0) {
                return;
            }

            var node;

            if (cch > 1) {
                var str = this._pattern.slice(pos, pos + cch);

                node = new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Multi, this._options, str);
            } else {
                var ch = this._pattern[pos];

                node = new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.One, this._options, ch);
            }

            this._concatenation.addChild(node);
        },

        _useOptionE: function () {
            return (this._options & System.Text.RegularExpressions.RegexOptions.ECMAScript) !== 0;
        },

        _makeException: function (message) {
            return new System.ArgumentException("Incorrect pattern. " + message);
        },

        _scanDollar: function () {
            var maxValueDiv10 = 214748364; // Int32.MaxValue / 10;
            var maxValueMod10 = 7; // Int32.MaxValue % 10;

            if (this._charsRight() === 0) {
                return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.One, this._options, "$");
            }

            var ch = this._rightChar();
            var angled;
            var backpos = this._textpos();
            var lastEndPos = backpos;

            // Note angle
            if (ch === "{" && this._charsRight() > 1) {
                angled = true;
                this._moveRight();
                ch = this._rightChar();
            } else {
                angled = false;
            }

            // Try to parse backreference: \1 or \{1} or \{cap}

            var capnum;
            var digit;

            if (ch >= "0" && ch <= "9") {
                if (!angled && this._useOptionE()) {
                    capnum = -1;
                    var newcapnum = ch - "0";

                    this._moveRight();

                    if (this._isCaptureSlot(newcapnum)) {
                        capnum = newcapnum;
                        lastEndPos = this._textpos();
                    }

                    while (this._charsRight() > 0 && (ch = this._rightChar()) >= "0" && ch <= "9") {
                        digit = ch - "0";
                        if (newcapnum > (maxValueDiv10) || (newcapnum === (maxValueDiv10) && digit > (maxValueMod10))) {
                            throw this._makeException("Capture group is out of range.");
                        }

                        newcapnum = newcapnum * 10 + digit;

                        this._moveRight();

                        if (this._isCaptureSlot(newcapnum)) {
                            capnum = newcapnum;
                            lastEndPos = this._textpos();
                        }
                    }
                    this._textto(lastEndPos);

                    if (capnum >= 0) {
                        return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Ref, this._options, capnum);
                    }
                } else {
                    capnum = this._scanDecimal();

                    if (!angled || this._charsRight() > 0 && this._moveRightGetChar() === "}") {
                        if (this._isCaptureSlot(capnum)) {
                            return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Ref, this._options, capnum);
                        }
                    }
                }
            } else if (angled && this._isWordChar(ch)) {
                var capname = this._scanCapname();

                if (this._charsRight() > 0 && this._moveRightGetChar() === "}") {
                    if (this._isCaptureName(capname)) {
                        var captureSlot = this._captureSlotFromName(capname);

                        return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Ref, this._options, captureSlot);
                    }
                }
            } else if (!angled) {
                capnum = 1;

                switch (ch) {
                    case "$":
                        this._moveRight();
                        return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.One, this._options, "$");

                    case "&":
                        capnum = 0;
                        break;

                    case "`":
                        capnum = System.Text.RegularExpressions.RegexReplacement.LeftPortion;
                        break;

                    case "\'":
                        capnum = System.Text.RegularExpressions.RegexReplacement.RightPortion;
                        break;

                    case "+":
                        capnum = System.Text.RegularExpressions.RegexReplacement.LastGroup;
                        break;

                    case "_":
                        capnum = System.Text.RegularExpressions.RegexReplacement.WholeString;
                        break;
                }

                if (capnum !== 1) {
                    this._moveRight();

                    return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Ref, this._options, capnum);
                }
            }

            // unrecognized $: literalize

            this._textto(backpos);

            return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.One, this._options, "$");
        },

        _scanDecimal: function () {
            // Scans any number of decimal digits (pegs value at 2^31-1 if too large)

            var maxValueDiv10 = 214748364; // Int32.MaxValue / 10;
            var maxValueMod10 = 7; // Int32.MaxValue % 10;
            var i = 0;
            var ch;
            var d;

            while (this._charsRight() > 0) {
                ch = this._rightChar();

                if (ch < "0" || ch > "9") {
                    break;
                }

                d = ch - "0";

                this._moveRight();

                if (i > (maxValueDiv10) || (i === (maxValueDiv10) && d > (maxValueMod10))) {
                    throw this._makeException("Capture group is out of range.");
                }

                i *= 10;
                i += d;
            }

            return i;
        },

        _scanOctal: function () {
            var d;
            var i;
            var c;

            // Consume octal chars only up to 3 digits and value 0377

            c = 3;

            if (c > this._charsRight()) {
                c = this._charsRight();
            }

            for (i = 0; c > 0 && (d = this._rightChar() - "0") <= 7; c -= 1) {
                this._moveRight();

                i *= 8;
                i += d;

                if (this._useOptionE() && i >= 0x20) {
                    break;
                }
            }

            // Octal codes only go up to 255.  Any larger and the behavior that Perl follows
            // is simply to truncate the high bits.
            i &= 0xFF;

            return String.fromCharCode(i);
        },

        _scanHex: function (c) {
            var i;
            var d;

            i = 0;

            if (this._charsRight() >= c) {
                for (; c > 0 && ((d = this._hexDigit(this._moveRightGetChar())) >= 0); c -= 1) {
                    i *= 0x10;
                    i += d;
                }
            }

            if (c > 0) {
                throw this._makeException("Insufficient hexadecimal digits.");
            }

            return i;
        },

        _hexDigit: function (ch) {
            var d;

            var code = ch.charCodeAt(0);

            if ((d = code - "0".charCodeAt(0)) <= 9) {
                return d;
            }

            if ((d = code - "a".charCodeAt(0)) <= 5) {
                return d + 0xa;
            }

            if ((d = code - "A".charCodeAt(0)) <= 5) {
                return d + 0xa;
            }

            return -1;
        },

        _scanControl: function () {
            if (this._charsRight() <= 0) {
                throw this._makeException("Missing control character.");
            }

            var ch = this._moveRightGetChar();

            // \ca interpreted as \cA

            var code = ch.charCodeAt(0);

            if (code >= "a".charCodeAt(0) && code <= "z".charCodeAt(0)) {
                code = code - ("a".charCodeAt(0) - "A".charCodeAt(0));
            }

            if ((code = (code - "@".charCodeAt(0))) < " ".charCodeAt(0)) {
                return String.fromCharCode(code);
            }

            throw this._makeException("Unrecognized control character.");
        },

        _scanCapname: function () {
            var startpos = this._textpos();

            while (this._charsRight() > 0) {
                if (!this._isWordChar(this._moveRightGetChar())) {
                    this._moveLeft();

                    break;
                }
            }

            return _pattern.slice(startpos, this._textpos());
        },

        _scanCharEscape: function () {
            var ch = this._moveRightGetChar();

            if (ch >= "0" && ch <= "7") {
                this._moveLeft();

                return this._scanOctal();
            }

            switch (ch) {
                case "x":
                    return this._scanHex(2);
                case "u":
                    return this._scanHex(4);
                case "a":
                    return "\u0007";
                case "b":
                    return "\b";
                case "e":
                    return "\u001B";
                case "f":
                    return "\f";
                case "n":
                    return "\n";
                case "r":
                    return "\r";
                case "t":
                    return "\t";
                case "v":
                    return "\u000B";
                case "c":
                    return this._scanControl();
                default:
                    var isInvalidBasicLatin = ch === '8' || ch === '9' || ch === '_';
                    if (isInvalidBasicLatin || (!this._useOptionE() && this._isWordChar(ch))) {
                        throw this._makeException("Unrecognized escape sequence \\" + ch + ".");
                    }
                    return ch;
            }
        },

        _captureSlotFromName: function (capname) {
            return this._capnames[capname];
        },

        _isCaptureSlot: function (i) {
            if (this._caps != null) {
                return this._caps[i] != null;
            }

            return (i >= 0 && i < this._capsize);
        },

        _isCaptureName: function (capname) {
            if (this._capnames == null) {
                return false;
            }

            return _capnames[capname] != null;
        },

        _isWordChar: function (ch) {
            // Partial implementation,
            // see the link for more details (http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/RegexParser.cs,1156)
            return System.Char.isLetter(ch.charCodeAt(0));
        },

        _charsRight: function () {
            return this._pattern.length - this._currentPos;
        },

        _rightChar: function () {
            return this._pattern[this._currentPos];
        },

        _moveRightGetChar: function () {
            return this._pattern[this._currentPos++];
        },

        _moveRight: function () {
            this._currentPos++;
        },

        _textpos: function () {
            return this._currentPos;
        },

        _textto: function (pos) {
            this._currentPos = pos;
        },

        _moveLeft: function () {
            this._currentPos--;
        }
    });

    // @source RegexNode.js

    Bridge.define("System.Text.RegularExpressions.RegexNode", {
        statics: {
            One: 9, // char     a
            Multi: 12, // string   abcdef
            Ref: 13, // index    \1
            Empty: 23, //          ()
            Concatenate: 25 //          ab
        },

        _type: 0,
        _str: null,
        _children: null,
        _next: null,
        _m: 0,

        config: {
            init: function () {
                this._options = System.Text.RegularExpressions.RegexOptions.None;
            }
        },

        ctor: function (type, options, arg) {
            this.$initialize();
            this._type = type;
            this._options = options;

            if (type === System.Text.RegularExpressions.RegexNode.Ref) {
                this._m = arg;
            } else {
                this._str = arg || null;
            }
        },

        addChild: function (newChild) {
            if (this._children == null) {
                this._children = [];
            }

            var reducedChild = newChild._reduce();
            this._children.push(reducedChild);
            reducedChild._next = this;
        },

        childCount: function () {
            return this._children == null ? 0 : this._children.length;
        },

        child: function (i) {
            return this._children[i];
        },

        _reduce: function () {
            // Warning: current implementation is just partial (for Replacement servicing)

            var n;

            switch (this._type) {
                case System.Text.RegularExpressions.RegexNode.Concatenate:
                    n = this._reduceConcatenation();
                    break;

                default:
                    n = this;
                    break;
            }

            return n;
        },

        _reduceConcatenation: function () {
            var wasLastString = false;
            var optionsLast = 0;
            var optionsAt;
            var at;
            var prev;
            var i;
            var j;
            var k;

            if (this._children == null) {
                return new System.Text.RegularExpressions.RegexNode(System.Text.RegularExpressions.RegexNode.Empty, this._options);
            }

            for (i = 0, j = 0; i < this._children.length; i++, j++) {
                at = this._children[i];

                if (j < i) {
                    this._children[j] = at;
                }

                if (at._type === System.Text.RegularExpressions.RegexNode.Concatenate && at._isRightToLeft()) {
                    for (k = 0; k < at._children.length; k++) {
                        at._children[k]._next = this;
                    }

                    this._children.splice.apply(this._children, [i + 1, 0].concat(at._children)); // _children.InsertRange(i + 1, at._children);
                    j--;
                } else if (at._type === System.Text.RegularExpressions.RegexNode.Multi || at._type === System.Text.RegularExpressions.RegexNode.One) {
                    // Cannot merge strings if L or I options differ
                    optionsAt = at._options & (System.Text.RegularExpressions.RegexOptions.RightToLeft | System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                    if (!wasLastString || optionsLast !== optionsAt) {
                        wasLastString = true;
                        optionsLast = optionsAt;
                        continue;
                    }

                    prev = this._children[--j];

                    if (prev._type === System.Text.RegularExpressions.RegexNode.One) {
                        prev._type = System.Text.RegularExpressions.RegexNode.Multi;
                        prev._str = prev._str;
                    }

                    if ((optionsAt & System.Text.RegularExpressions.RegexOptions.RightToLeft) === 0) {
                        prev._str += at._str;
                    } else {
                        prev._str = at._str + prev._str;
                    }
                } else if (at._type === System.Text.RegularExpressions.RegexNode.Empty) {
                    j--;
                } else {
                    wasLastString = false;
                }
            }

            if (j < i) {
                this._children.splice(j, i - j);
            }

            return this._stripEnation(System.Text.RegularExpressions.RegexNode.Empty);
        },

        _stripEnation: function (emptyType) {
            switch (this.childCount()) {
                case 0:
                    return new scope.RegexNode(emptyType, this._options);
                case 1:
                    return this.child(0);
                default:
                    return this;
            }
        },

        _isRightToLeft: function () {
            if ((this._options & System.Text.RegularExpressions.RegexOptions.RightToLeft) > 0) {
                return true;
            }

            return false;
        },
    });

    // @source RegexReplacement.js

    Bridge.define("System.Text.RegularExpressions.RegexReplacement", {
        statics: {
            replace: function (evaluator, regex, input, count, startat) {
                if (evaluator == null) {
                    throw new System.ArgumentNullException.$ctor1("evaluator");
                }

                if (count < -1) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "Count cannot be less than -1.");
                }

                if (startat < 0 || startat > input.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("startat", "Start index cannot be less than 0 or greater than input length.");
                }

                if (count === 0) {
                    return input;
                }

                var match = regex.match(input, startat);

                if (!match.getSuccess()) {
                    return input;
                } else {
                    var sb = "";
                    var prevat;
                    var matchIndex;
                    var matchLength;

                    if (!regex.getRightToLeft()) {
                        prevat = 0;

                        do {
                            matchIndex = match.getIndex();
                            matchLength = match.getLength();

                            if (matchIndex !== prevat) {
                                sb += input.slice(prevat, matchIndex);
                            }

                            prevat = matchIndex + matchLength;
                            sb += evaluator(match);

                            if (--count === 0) {
                                break;
                            }

                            match = match.nextMatch();
                        } while (match.getSuccess());

                        if (prevat < input.length) {
                            sb += input.slice(prevat, input.length);
                        }
                    } else {
                        var al = [];

                        prevat = input.length;

                        do {
                            matchIndex = match.getIndex();
                            matchLength = match.getLength();

                            if (matchIndex + matchLength !== prevat) {
                                al.push(input.slice(matchIndex + matchLength, prevat));
                            }

                            prevat = matchIndex;
                            al.push(evaluator(match));

                            if (--count === 0) {
                                break;
                            }

                            match = match.nextMatch();
                        } while (match.getSuccess());

                        sb = new StringBuilder();

                        if (prevat > 0) {
                            sb += sb.slice(0, prevat);
                        }

                        var i;

                        for (i = al.length - 1; i >= 0; i--) {
                            sb += al[i];
                        }
                    }

                    return sb;
                }
            },

            split: function (regex, input, count, startat) {
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "Count can't be less than 0.");
                }

                if (startat < 0 || startat > input.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("startat", "Start index cannot be less than 0 or greater than input length.");
                }

                var result = [];

                if (count === 1) {
                    result.push(input);

                    return result;
                }

                --count;
                var match = regex.match(input, startat);

                if (!match.getSuccess()) {
                    result.push(input);
                } else {
                    var i;
                    var prevat;
                    var matchIndex;
                    var matchLength;
                    var matchGroups;
                    var matchGroupsCount;

                    if (!regex.getRightToLeft()) {
                        prevat = 0;

                        for (;;) {
                            matchIndex = match.getIndex();
                            matchLength = match.getLength();
                            matchGroups = match.getGroups();
                            matchGroupsCount = matchGroups.getCount();

                            result.push(input.slice(prevat, matchIndex));
                            prevat = matchIndex + matchLength;

                            // add all matched capture groups to the list.
                            for (i = 1; i < matchGroupsCount; i++) {
                                if (match._isMatched(i)) {
                                    result.push(matchGroups.get(i).toString());
                                }
                            }

                            --count;
                            if (count === 0) {
                                break;
                            }

                            match = match.nextMatch();

                            if (!match.getSuccess()) {
                                break;
                            }
                        }

                        result.push(input.slice(prevat, input.length));
                    } else {
                        prevat = input.length;

                        for (;;) {
                            matchIndex = match.getIndex();
                            matchLength = match.getLength();
                            matchGroups = match.getGroups();
                            matchGroupsCount = matchGroups.getCount();

                            result.push(input.slice(matchIndex + matchLength, prevat));
                            prevat = matchIndex;

                            // add all matched capture groups to the list.
                            for (i = 1; i < matchGroupsCount; i++) {
                                if (match._isMatched(i)) {
                                    result.push(matchGroups.get(i).toString());
                                }
                            }

                            --count;
                            if (count === 0) {
                                break;
                            }

                            match = match.nextMatch();

                            if (!match.getSuccess()) {
                                break;
                            }
                        }

                        result.push(input.slice(0, prevat));
                        result.reverse();
                    }
                }

                return result;
            },

            Specials: 4,
            LeftPortion: -1,
            RightPortion: -2,
            LastGroup: -3,
            WholeString: -4
        },

        _rep: "",
        _strings: [], // table of string constants
        _rules: [], // negative -> group #, positive -> string #

        ctor: function (rep, concat, caps) {
            this.$initialize();
            this._rep = rep;

            if (concat._type !== System.Text.RegularExpressions.RegexNode.Concatenate) {
                throw new System.ArgumentException.$ctor1("Replacement error.");
            }

            var sb = "";
            var strings = [];
            var rules = [];
            var slot;
            var child;
            var i;

            for (i = 0; i < concat.childCount(); i++) {
                child = concat.child(i);

                switch (child._type) {
                    case System.Text.RegularExpressions.RegexNode.Multi:
                    case System.Text.RegularExpressions.RegexNode.One:
                        sb += child._str;
                        break;

                    case System.Text.RegularExpressions.RegexNode.Ref:
                        if (sb.length > 0) {
                            rules.push(strings.length);
                            strings.push(sb);
                            sb = "";
                        }

                        slot = child._m;

                        if (caps != null && slot >= 0) {
                            slot = caps[slot];
                        }

                        rules.push(-System.Text.RegularExpressions.RegexReplacement.Specials - 1 - slot);
                        break;
                    default:
                        throw new System.ArgumentException.$ctor1("Replacement error.");
                }
            }

            if (sb.length > 0) {
                rules.push(strings.length);
                strings.push(sb);
            }

            this._strings = strings;
            this._rules = rules;
        },

        getPattern: function () {
            return _rep;
        },

        replacement: function (match) {
            return this._replacementImpl("", match);
        },

        replace: function (regex, input, count, startat) {
            if (count < -1) {
                throw new System.ArgumentOutOfRangeException.$ctor4("count", "Count cannot be less than -1.");
            }

            if (startat < 0 || startat > input.length) {
                throw new System.ArgumentOutOfRangeException.$ctor4("startat", "Start index cannot be less than 0 or greater than input length.");
            }

            if (count === 0) {
                return input;
            }

            var match = regex.match(input, startat);

            if (!match.getSuccess()) {
                return input;
            } else {
                var sb = "";
                var prevat;
                var matchIndex;
                var matchLength;

                if (!regex.getRightToLeft()) {
                    prevat = 0;

                    do {
                        matchIndex = match.getIndex();
                        matchLength = match.getLength();

                        if (matchIndex !== prevat) {
                            sb += input.slice(prevat, matchIndex);
                        }

                        prevat = matchIndex + matchLength;
                        sb = this._replacementImpl(sb, match);

                        if (--count === 0) {
                            break;
                        }

                        match = match.nextMatch();
                    } while (match.getSuccess());

                    if (prevat < input.length) {
                        sb += input.slice(prevat, input.length);
                    }
                } else {
                    var al = [];

                    prevat = input.length;

                    do {
                        matchIndex = match.getIndex();
                        matchLength = match.getLength();

                        if (matchIndex + matchLength !== prevat) {
                            al.push(input.slice(matchIndex + matchLength, prevat));
                        }

                        prevat = matchIndex;
                        this._replacementImplRTL(al, match);

                        if (--count === 0) {
                            break;
                        }

                        match = match.nextMatch();
                    } while (match.getSuccess());

                    if (prevat > 0) {
                        sb += sb.slice(0, prevat);
                    }

                    var i;

                    for (i = al.length - 1; i >= 0; i--) {
                        sb += al[i];
                    }
                }

                return sb;
            }
        },

        _replacementImpl: function (sb, match) {
            var specials = System.Text.RegularExpressions.RegexReplacement.Specials;
            var r;
            var i;

            for (i = 0; i < this._rules.length; i++) {
                r = this._rules[i];

                if (r >= 0) {
                    // string lookup
                    sb += this._strings[r];
                } else if (r < -specials) {
                    // group lookup
                    sb += match._groupToStringImpl(-specials - 1 - r);
                } else {
                    // special insertion patterns
                    switch (-specials - 1 - r) {
                        case System.Text.RegularExpressions.RegexReplacement.LeftPortion:
                            sb += match._getLeftSubstring();
                            break;
                        case System.Text.RegularExpressions.RegexReplacement.RightPortion:
                            sb += match._getRightSubstring();
                            break;
                        case System.Text.RegularExpressions.RegexReplacement.LastGroup:
                            sb += match._lastGroupToStringImpl();
                            break;
                        case System.Text.RegularExpressions.RegexReplacement.WholeString:
                            sb += match._getOriginalString();
                            break;
                    }
                }
            }

            return sb;
        },

        _replacementImplRTL: function (al, match) {
            var specials = System.Text.RegularExpressions.RegexReplacement.Specials;
            var r;
            var i;

            for (i = _rules.length - 1; i >= 0; i--) {
                r = this._rules[i];

                if (r >= 0) {
                    // string lookup
                    al.push(this._strings[r]);
                } else if (r < -specials) {
                    // group lookup
                    al.push(match._groupToStringImpl(-specials - 1 - r));
                } else {
                    // special insertion patterns
                    switch (-specials - 1 - r) {
                        case System.Text.RegularExpressions.RegexReplacement.LeftPortion:
                            al.push(match._getLeftSubstring());
                            break;
                        case System.Text.RegularExpressions.RegexReplacement.RightPortion:
                            al.push(match._getRightSubstring());
                            break;
                        case System.Text.RegularExpressions.RegexReplacement.LastGroup:
                            al.push(match._lastGroupToStringImpl());
                            break;
                        case System.Text.RegularExpressions.RegexReplacement.WholeString:
                            al.push(match._getOriginalString());
                            break;
                    }
                }
            }
        }
    });

    // @source RegexEngine.js

    Bridge.define("System.Text.RegularExpressions.RegexEngine", {
        _pattern: "",
        _patternInfo: null,

        _text: "",
        _textStart: 0,
        _timeoutMs: -1,
        _timeoutTime: -1,
        _settings: null,

        _branchType: {
            base: 0,
            offset: 1,
            lazy: 2,
            greedy: 3,
            or: 4
        },

        _branchResultKind: {
            ok: 1,
            endPass: 2,
            nextPass: 3,
            nextBranch: 4
        },

        // ============================================================================================
        // Public functions
        // ============================================================================================
        ctor: function (pattern, isCaseInsensitive, isMultiLine, isSingleline, isIgnoreWhitespace, isExplicitCapture, timeoutMs) {
            this.$initialize();

            if (pattern == null) {
                throw new System.ArgumentNullException.$ctor1("pattern");
            }

            this._pattern = pattern;
            this._timeoutMs = timeoutMs;
            this._settings = {
                ignoreCase: isCaseInsensitive,
                multiline: isMultiLine,
                singleline: isSingleline,
                ignoreWhitespace: isIgnoreWhitespace,
                explicitCapture: isExplicitCapture
            };
        },

        match: function (text, textStart) {
            if (text == null) {
                throw new System.ArgumentNullException.$ctor1("text");
            }

            if (textStart != null && (textStart < 0 || textStart > text.length)) {
                throw new System.ArgumentOutOfRangeException.$ctor4("textStart", "Start index cannot be less than 0 or greater than input length.");
            }

            this._text = text;
            this._textStart = textStart;
            this._timeoutTime = this._timeoutMs > 0 ? new Date().getTime() + System.Convert.toInt32(this._timeoutMs + 0.5) : -1;

            // Get group descriptors
            var patternInfo = this.parsePattern();

            if (patternInfo.shouldFail) {
                return this._getEmptyMatch();
            }

            this._checkTimeout();

            var scanRes = this._scanAndTransformResult(textStart, patternInfo.tokens, false, null);

            return scanRes;
        },

        parsePattern: function () {
            if (this._patternInfo == null) {
                var parser = System.Text.RegularExpressions.RegexEngineParser;
                var patternInfo = parser.parsePattern(this._pattern, this._cloneSettings(this._settings));
                this._patternInfo = patternInfo;
            }

            return this._patternInfo;
        },

        // ============================================================================================
        // Engine main logic
        // ============================================================================================
        _scanAndTransformResult: function (textPos, tokens, noOffset, desiredLen) {
            var state = this._scan(textPos, this._text.length, tokens, noOffset, desiredLen);
            var transformedRes = this._collectScanResults(state, textPos);
            return transformedRes;
        },

        _scan: function (textPos, textEndPos, tokens, noOffset, desiredLen) {
            var resKind = this._branchResultKind;
            var branches = [];
            branches.grCaptureCache = {};

            var branch = null;
            var res = null;

            // Empty pattern case:
            if (tokens.length === 0) {
                var state = new System.Text.RegularExpressions.RegexEngineState();
                state.capIndex = textPos;
                state.txtIndex = textPos;
                state.capLength = 0;

                return state;
            }

            // Init base branch:
            var baseBranchType = noOffset ? this._branchType.base : this._branchType.offset;

            var endPos = this._patternInfo.isContiguous ? textPos : textEndPos;
            var baseBranch = new System.Text.RegularExpressions.RegexEngineBranch(baseBranchType, textPos, textPos, endPos);

            baseBranch.pushPass(0, tokens, this._cloneSettings(this._settings));
            baseBranch.started = true;
            baseBranch.state.txtIndex = textPos;
            branches.push(baseBranch);

            while (branches.length) {
                branch = branches[branches.length - 1];

                res = this._scanBranch(textEndPos, branches, branch);

                if (res === resKind.ok && (desiredLen == null || branch.state.capLength === desiredLen)) {
                    return branch.state;
                }

                //if (!this.branchLimit) {
                //    this.branchLimit = 1;
                //} else {
                //    this.branchLimit++;
                //    if (this.branchLimit > 200000) {
                //        alert("Too many branches :(");
                //        break;
                //    }
                //}

                this._advanceToNextBranch(branches, branch);
                this._checkTimeout();
            }

            return null;
        },

        _scanBranch: function (textEndPos, branches, branch) {
            var resKind = this._branchResultKind;
            var pass;
            var res;

            if (branch.mustFail) {
                branch.mustFail = false;

                return resKind.nextBranch;
            }

            while (branch.hasPass()) {
                pass = branch.peekPass();

                if (pass.tokens == null || pass.tokens.length === 0) {
                    res = resKind.endPass;
                } else {
                    // Add alternation branches before scanning:
                    if (this._addAlternationBranches(branches, branch, pass) === resKind.nextBranch) {
                        return resKind.nextBranch;
                    }

                    // Scan:
                    res = this._scanPass(textEndPos, branches, branch, pass);
                }

                switch (res) {
                    case resKind.nextBranch:
                        // Move to the next branch:
                        return res;

                    case resKind.nextPass:
                        // switch to the recently added pass
                        continue;

                    case resKind.endPass:
                    case resKind.ok:
                        // End of pass has been reached:
                        branch.popPass();
                        break;

                    default:
                        throw new System.InvalidOperationException.$ctor1("Unexpected branch result.");
                }
            }

            return resKind.ok;
        },

        _scanPass: function (textEndPos, branches, branch, pass) {
            var resKind = this._branchResultKind;
            var passEndIndex = pass.tokens.length;
            var token;
            var probe;
            var res;

            while (pass.index < passEndIndex) {
                token = pass.tokens[pass.index];
                probe = pass.probe;

                // Add probing:
                if (probe == null) {
                    if (this._addBranchBeforeProbing(branches, branch, pass, token)) {
                        return resKind.nextBranch;
                    }
                } else {
                    if (probe.value < probe.min || probe.forced) {
                        res = this._scanToken(textEndPos, branches, branch, pass, token);

                        if (res !== resKind.ok) {
                            return res;
                        }

                        probe.value += 1;
                        probe.forced = false;

                        continue;
                    }

                    this._addBranchAfterProbing(branches, branch, pass, probe);

                    if (probe.forced) {
                        continue;
                    }

                    pass.probe = null;
                    pass.index++;

                    continue;
                }

                // Process the token:
                res = this._scanToken(textEndPos, branches, branch, pass, token);

                // Process the result of the token scan:
                switch (res) {
                    case resKind.nextBranch:
                    case resKind.nextPass:
                    case resKind.endPass:
                        return res;

                    case resKind.ok:
                        // Advance to the next token within the current pass:
                        pass.index++;
                        break;

                    default:
                        throw new System.InvalidOperationException.$ctor1("Unexpected branch-pass result.");
                }
            }

            return resKind.ok;
        },

        _addAlternationBranches: function (branches, branch, pass) {
            var tokenTypes = System.Text.RegularExpressions.RegexEngineParser.tokenTypes;
            var branchTypes = this._branchType;
            var passEndIndex = pass.tokens.length;
            var resKind = this._branchResultKind;
            var orIndexes;
            var newBranch;
            var newPass;
            var token;
            var i;

            // Scan potential alternations:
            if (!pass.alternationHandled && !pass.tokens.noAlternation) {
                orIndexes = [-1];

                for (i = 0; i < passEndIndex; i++) {
                    token = pass.tokens[i];

                    if (token.type === tokenTypes.alternation) {
                        orIndexes.push(i);
                    }
                }

                if (orIndexes.length > 1) {
                    for (i = 0; i < orIndexes.length; i++) {
                        newBranch = new System.Text.RegularExpressions.RegexEngineBranch(branchTypes.or, i, 0, orIndexes.length, branch.state);
                        newBranch.isNotFailing = true;
                        newPass = newBranch.peekPass();
                        newPass.alternationHandled = true;
                        newPass.index = orIndexes[i] + 1;
                        branches.splice(branches.length - i, 0, newBranch);
                    }

                    // The last branch must fail:
                    branches[branches.length - orIndexes.length].isNotFailing = false;

                    // The parent branch must be ended up immediately:
                    branch.mustFail = true;

                    pass.alternationHandled = true;

                    return resKind.nextBranch;
                } else {
                    pass.tokens.noAlternation = true;
                }
            }

            return resKind.ok;
        },

        _addBranchBeforeProbing: function (branches, branch, pass, token) {
            // Add +, *, ? branches:
            var probe = this._tryGetTokenProbe(token);

            if (probe == null) {
                return false;
            }

            pass.probe = probe;

            var branchType = probe.isLazy ? this._branchType.lazy : this._branchType.greedy;
            var newBranch = new System.Text.RegularExpressions.RegexEngineBranch(branchType, probe.value, probe.min, probe.max, branch.state);

            branches.push(newBranch);

            return true;
        },

        _addBranchAfterProbing: function (branches, branch, pass, probe) {
            if (probe.isLazy) {
                if (probe.value + 1 <= probe.max) {
                    var lazyBranch = branch.clone();
                    var lazyProbe = lazyBranch.peekPass().probe;

                    lazyBranch.value += 1;
                    lazyProbe.forced = true;

                    // add to the left from the current branch
                    branches.splice(branches.length - 1, 0, lazyBranch);
                    branch.isNotFailing = true;
                }
            } else {
                if (probe.value + 1 <= probe.max) {
                    var greedyBranch = branch.clone();

                    greedyBranch.started = true;
                    greedyBranch.peekPass().probe = null;
                    greedyBranch.peekPass().index++;
                    branches.splice(branches.length - 1, 0, greedyBranch);

                    probe.forced = true;
                    branch.value += 1;
                    branch.isNotFailing = true;
                }
            }
        },

        _tryGetTokenProbe: function (token) {
            var qtoken = token.qtoken;

            if (qtoken == null) {
                return null;
            }

            var tokenTypes = System.Text.RegularExpressions.RegexEngineParser.tokenTypes;
            var min;
            var max;

            if (qtoken.type === tokenTypes.quantifier) {
                switch (qtoken.value) {
                    case "*":
                    case "*?":
                        min = 0;
                        max = 2147483647;
                        break;

                    case "+":
                    case "+?":
                        min = 1;
                        max = 2147483647;
                        break;

                    case "?":
                    case "??":
                        min = 0;
                        max = 1;
                        break;

                    default:
                        throw new System.InvalidOperationException.$ctor1("Unexpected quantifier value.");
                }
            } else if (qtoken.type === tokenTypes.quantifierN) {
                min = qtoken.data.n;
                max = qtoken.data.n;
            } else if (qtoken.type === tokenTypes.quantifierNM) {
                min = qtoken.data.n;
                max = qtoken.data.m != null ? qtoken.data.m : 2147483647;
            } else {
                return null;
            }

            var probe = new System.Text.RegularExpressions.RegexEngineProbe(min, max, 0, qtoken.data.isLazy);
            return probe;
        },

        _advanceToNextBranch: function (branches, branch) {
            if (branches.length === 0) {
                return;
            }

            var lastBranch = branches[branches.length - 1];

            if (!lastBranch.started) {
                lastBranch.started = true;
                return;
            }

            if (branch !== lastBranch) {
                throw new System.InvalidOperationException.$ctor1("Current branch is supposed to be the last one.");
            }

            if (branches.length === 1 && branch.type === this._branchType.offset) {
                branch.value++;
                branch.state.txtIndex = branch.value;
                branch.mustFail = false;

                // clear state:
                branch.state.capIndex = null;
                branch.state.capLength = 0;
                branch.state.groups.length = 0;
                branch.state.passes.length = 1;
                branch.state.passes[0].clearState(this._cloneSettings(this._settings));

                if (branch.value > branch.max) {
                    branches.pop();
                }
            } else {
                branches.pop();

                if (!branch.isNotFailing) {
                    lastBranch = branches[branches.length - 1];
                    this._advanceToNextBranch(branches, lastBranch);

                    return;
                }
            }
        },

        _collectScanResults: function (state, textPos) {
            var groupDescs = this._patternInfo.groups;
            var text = this._text;
            var processedGroupNames = {};
            var capGroups;
            var capGroup;
            var groupsMap = {};
            var groupDesc;
            var capture;
            var group;
            var i;

            // Create Empty match object:
            var match = this._getEmptyMatch();

            if (state != null) {
                capGroups = state.groups;

                // For successful match fill Match object:
                this._fillMatch(match, state.capIndex, state.capLength, textPos);

                // Fill group captures:
                for (i = 0; i < capGroups.length; i++) {
                    capGroup = capGroups[i];
                    groupDesc = groupDescs[capGroup.rawIndex - 1];

                    if (groupDesc.constructs.skipCapture) {
                        continue;
                    }

                    capture = {
                        capIndex: capGroup.capIndex,
                        capLength: capGroup.capLength,
                        value: text.slice(capGroup.capIndex, capGroup.capIndex + capGroup.capLength)
                    };

                    group = groupsMap[groupDesc.name];

                    if (group == null) {
                        group = {
                            capIndex: 0,
                            capLength: 0,
                            value: "",
                            success: false,
                            captures: [capture]
                        };

                        groupsMap[groupDesc.name] = group;
                    } else {
                        group.captures.push(capture);
                    }
                }

                // Add groups to Match in the required order:
                for (i = 0; i < groupDescs.length; i++) {
                    groupDesc = groupDescs[i];

                    if (groupDesc.constructs.skipCapture) {
                        continue;
                    }

                    if (processedGroupNames[groupDesc.name] === true) {
                        continue;
                    }

                    group = groupsMap[groupDesc.name];

                    if (group == null) {
                        group = {
                            capIndex: 0,
                            capLength: 0,
                            value: "",
                            success: false,
                            captures: []
                        };
                    } else {
                        // Update group values with the last capture info:
                        if (group.captures.length > 0) {
                            capture = group.captures[group.captures.length - 1];

                            group.capIndex = capture.capIndex;
                            group.capLength = capture.capLength;
                            group.value = capture.value;
                            group.success = true;
                        }
                    }

                    processedGroupNames[groupDesc.name] = true;
                    group.descriptor = groupDesc; // TODO: check if we can get rid of this
                    match.groups.push(group);
                }
            }

            return match;
        },

        // ============================================================================================
        // Token processing
        // ============================================================================================
        _scanToken: function (textEndPos, branches, branch, pass, token) {
            var tokenTypes = System.Text.RegularExpressions.RegexEngineParser.tokenTypes;
            var resKind = this._branchResultKind;

            switch (token.type) {
                case tokenTypes.group:
                case tokenTypes.groupImnsx:
                case tokenTypes.alternationGroup:
                    return this._scanGroupToken(textEndPos, branches, branch, pass, token);

                case tokenTypes.groupImnsxMisc:
                    return this._scanGroupImnsxToken(token.group.constructs, pass.settings);

                case tokenTypes.charGroup:
                    return this._scanCharGroupToken(branches, branch, pass, token, false);

                case tokenTypes.charNegativeGroup:
                    return this._scanCharNegativeGroupToken(branches, branch, pass, token, false);

                case tokenTypes.escChar:
                case tokenTypes.escCharOctal:
                case tokenTypes.escCharHex:
                case tokenTypes.escCharUnicode:
                case tokenTypes.escCharCtrl:
                    return this._scanLiteral(textEndPos, branches, branch, pass, token.data.ch);

                case tokenTypes.escCharOther:
                case tokenTypes.escCharClass:
                    return this._scanEscapeToken(branches, branch, pass, token);

                case tokenTypes.escCharClassCategory:
                    throw new System.NotSupportedException.$ctor1("Unicode Category constructions are not supported.");

                case tokenTypes.escCharClassBlock:
                    throw new System.NotSupportedException.$ctor1("Unicode Named block constructions are not supported.");

                case tokenTypes.escCharClassDot:
                    return this._scanDotToken(textEndPos, branches, branch, pass);

                case tokenTypes.escBackrefNumber:
                    return this._scanBackrefNumberToken(textEndPos, branches, branch, pass, token);

                case tokenTypes.escBackrefName:
                    return this._scanBackrefNameToken(textEndPos, branches, branch, pass, token);

                case tokenTypes.anchor:
                case tokenTypes.escAnchor:
                    return this._scanAnchorToken(textEndPos, branches, branch, pass, token);

                case tokenTypes.groupConstruct:
                case tokenTypes.groupConstructName:
                case tokenTypes.groupConstructImnsx:
                case tokenTypes.groupConstructImnsxMisc:
                    return resKind.ok;

                case tokenTypes.alternationGroupCondition:
                case tokenTypes.alternationGroupRefNameCondition:
                case tokenTypes.alternationGroupRefNumberCondition:
                    return this._scanAlternationConditionToken(textEndPos, branches, branch, pass, token);

                case tokenTypes.alternation:
                    return resKind.endPass;

                case tokenTypes.commentInline:
                case tokenTypes.commentXMode:
                    return resKind.ok;

                default:
                    return this._scanLiteral(textEndPos, branches, branch, pass, token.value);
            }
        },

        _scanGroupToken: function (textEndPos, branches, branch, pass, token) {
            var tokenTypes = System.Text.RegularExpressions.RegexEngineParser.tokenTypes;
            var resKind = this._branchResultKind;
            var textIndex = branch.state.txtIndex;

            if (pass.onHold) {
                if (token.type === tokenTypes.group) {
                    var rawIndex = token.group.rawIndex;
                    var capIndex = pass.onHoldTextIndex;
                    var capLength = textIndex - capIndex;

                    // Cache value to avoid proceeding with the already checked route:
                    var tokenCache = branches.grCaptureCache[rawIndex];

                    if (tokenCache == null) {
                        tokenCache = {};
                        branches.grCaptureCache[rawIndex] = tokenCache;
                    }

                    var key = capIndex.toString() + "_" + capLength.toString();

                    if (tokenCache[key] == null) {
                        tokenCache[key] = true;
                    } else {
                        return resKind.nextBranch;
                    }

                    if (!token.group.constructs.emptyCapture) {
                        if (token.group.isBalancing) {
                            branch.state.logCaptureGroupBalancing(token.group, capIndex);
                        } else {
                            branch.state.logCaptureGroup(token.group, capIndex, capLength);
                        }
                    }
                }

                pass.onHold = false;
                pass.onHoldTextIndex = -1;

                return resKind.ok;
            }

            if (token.type === tokenTypes.group ||
                token.type === tokenTypes.groupImnsx) {
                var constructs = token.group.constructs;

                // Update Pass settings:
                this._scanGroupImnsxToken(constructs, pass.settings);

                // Scan Grouping constructs:
                if (constructs.isPositiveLookahead || constructs.isNegativeLookahead ||
                    constructs.isPositiveLookbehind || constructs.isNegativeLookbehind) {
                    var scanLookRes = this._scanLook(branch, textIndex, textEndPos, token);

                    return scanLookRes;
                } else if (constructs.isNonbacktracking) {
                    var scanNonBacktrackingRes = this._scanNonBacktracking(branch, textIndex, textEndPos, token);

                    return scanNonBacktrackingRes;
                }
            }

            // Continue scanning a regular group:
            pass.onHoldTextIndex = textIndex;
            pass.onHold = true;

            branch.pushPass(0, token.children, this._cloneSettings(pass.settings));

            return resKind.nextPass;
        },

        _scanGroupImnsxToken: function (constructs, settings) {
            var resKind = this._branchResultKind;

            if (constructs.isIgnoreCase != null) {
                settings.ignoreCase = constructs.isIgnoreCase;
            }

            if (constructs.isMultiline != null) {
                settings.multiline = constructs.isMultiline;
            }

            if (constructs.isSingleLine != null) {
                settings.singleline = constructs.isSingleLine;
            }

            if (constructs.isIgnoreWhitespace != null) {
                settings.ignoreWhitespace = constructs.isIgnoreWhitespace;
            }

            if (constructs.isExplicitCapture != null) {
                settings.explicitCapture = constructs.isExplicitCapture;
            }

            return resKind.ok;
        },

        _scanAlternationConditionToken: function (textEndPos, branches, branch, pass, token) {
            var tokenTypes = System.Text.RegularExpressions.RegexEngineParser.tokenTypes;
            var resKind = this._branchResultKind;
            var children = token.children;
            var textIndex = branch.state.txtIndex;
            var res = resKind.nextBranch;

            if (token.type === tokenTypes.alternationGroupRefNameCondition ||
                token.type === tokenTypes.alternationGroupRefNumberCondition) {
                var grCapture = branch.state.resolveBackref(token.data.packedSlotId);

                if (grCapture != null) {
                    res = resKind.ok;
                } else {
                    res = resKind.nextBranch;
                }
            } else {
                // Resolve expression:
                var state = this._scan(textIndex, textEndPos, children, true, null);

                if (this._combineScanResults(branch, state)) {
                    res = resKind.ok;
                }
            }

            if (res === resKind.nextBranch && pass.tokens.noAlternation) {
                res = resKind.endPass;
            }

            return res;
        },

        _scanLook: function (branch, textIndex, textEndPos, token) {
            var constructs = token.group.constructs;
            var resKind = this._branchResultKind;
            var children = token.children;
            var expectedRes;
            var actualRes;

            var isLookahead = constructs.isPositiveLookahead || constructs.isNegativeLookahead;
            var isLookbehind = constructs.isPositiveLookbehind || constructs.isNegativeLookbehind;

            if (isLookahead || isLookbehind) {
                children = children.slice(1, children.length); // remove constructs

                expectedRes = constructs.isPositiveLookahead || constructs.isPositiveLookbehind;

                if (isLookahead) {
                    actualRes = this._scanLookAhead(branch, textIndex, textEndPos, children);
                } else {
                    actualRes = this._scanLookBehind(branch, textIndex, textEndPos, children);
                }

                if (expectedRes === actualRes) {
                    return resKind.ok;
                } else {
                    return resKind.nextBranch;
                }
            }

            return null;
        },

        _scanLookAhead: function (branch, textIndex, textEndPos, tokens) {
            var state = this._scan(textIndex, textEndPos, tokens, true, null);

            return this._combineScanResults(branch, state);
        },

        _scanLookBehind: function (branch, textIndex, textEndPos, tokens) {
            var currIndex = textIndex;
            var strLen;
            var state;

            while (currIndex >= 0) {
                strLen = textIndex - currIndex;
                state = this._scan(currIndex, textEndPos, tokens, true, strLen);

                if (this._combineScanResults(branch, state)) {
                    return true;
                }

                --currIndex;
            }

            return false;
        },

        _scanNonBacktracking: function (branch, textIndex, textEndPos, token) {
            var resKind = this._branchResultKind;
            var children = token.children;
            children = children.slice(1, children.length); // remove constructs

            var state = this._scan(textIndex, textEndPos, children, true, null);

            if (!state) {
                return resKind.nextBranch;
            }

            branch.state.logCapture(state.capLength);

            return resKind.ok;
        },

        _scanLiteral: function (textEndPos, branches, branch, pass, literal) {
            var resKind = this._branchResultKind;
            var index = branch.state.txtIndex;

            if (index + literal.length > textEndPos) {
                return resKind.nextBranch;
            }

            var i;

            if (pass.settings.ignoreCase) {
                for (i = 0; i < literal.length; i++) {
                    if (this._text[index + i].toLowerCase() !== literal[i].toLowerCase()) {
                        return resKind.nextBranch;
                    }
                }
            } else {
                for (i = 0; i < literal.length; i++) {
                    if (this._text[index + i] !== literal[i]) {
                        return resKind.nextBranch;
                    }
                }
            }

            branch.state.logCapture(literal.length);

            return resKind.ok;
        },

        _scanWithJsRegex: function (branches, branch, pass, token, tokenValue) {
            var resKind = this._branchResultKind;
            var index = branch.state.txtIndex;
            var ch = this._text[index];

            if (ch == null) {
                ch = "";
            }

            var options = pass.settings.ignoreCase ? "i" : "";

            var rgx = token.rgx;

            if (rgx == null) {
                if (tokenValue == null) {
                    tokenValue = token.value;
                }

                rgx = new RegExp(tokenValue, options);
                token.rgx = rgx;
            }

            if (rgx.test(ch)) {
                branch.state.logCapture(ch.length);

                return resKind.ok;
            }

            return resKind.nextBranch;
        },

        _scanWithJsRegex2: function (textIndex, pattern) {
            var resKind = this._branchResultKind;
            var ch = this._text[textIndex];

            if (ch == null) {
                ch = "";
            }

            var rgx = new RegExp(pattern, "");

            if (rgx.test(ch)) {
                return resKind.ok;
            }

            return resKind.nextBranch;
        },

        _scanCharGroupToken: function (branches, branch, pass, token, skipLoggingCapture) {
            var tokenTypes = System.Text.RegularExpressions.RegexEngineParser.tokenTypes;
            var resKind = this._branchResultKind;
            var index = branch.state.txtIndex;
            var ch = this._text[index];

            if (ch == null) {
                return resKind.nextBranch;
            }

            var i;
            var j;
            var n = ch.charCodeAt(0);
            var ranges = token.data.ranges;
            var range;
            var upperCh;

            // Check susbstruct group:
            if (token.data.substractToken != null) {
                var substractRes;

                if (token.data.substractToken.type === tokenTypes.charGroup) {
                    substractRes = this._scanCharGroupToken(branches, branch, pass, token.data.substractToken, true);
                } else if (token.data.substractToken.type === tokenTypes.charNegativeGroup) {
                    substractRes = this._scanCharNegativeGroupToken(branches, branch, pass, token.data.substractToken, true);
                } else {
                    throw new System.InvalidOperationException.$ctor1("Unexpected substuct group token.");
                }

                if (substractRes === resKind.ok) {
                    return token.type === tokenTypes.charGroup ? resKind.nextBranch : resKind.ok;
                }
            }

            // Try CharClass tokens like: \s \S \d \D
            if (ranges.charClassToken != null) {
                var charClassRes = this._scanWithJsRegex(branches, branch, pass, ranges.charClassToken);

                if (charClassRes === resKind.ok) {
                    return resKind.ok;
                }
            }

            // 2 iterations - to handle both cases: upper and lower
            for (j = 0; j < 2; j++) {
                //TODO: [Performance] Use binary search
                for (i = 0; i < ranges.length; i++) {
                    range = ranges[i];

                    if (range.n > n) {
                        break;
                    }

                    if (n <= range.m) {
                        if (!skipLoggingCapture) {
                            branch.state.logCapture(1);
                        }

                        return resKind.ok;
                    }
                }

                if (upperCh == null && pass.settings.ignoreCase) {
                    upperCh = ch.toUpperCase();

                    // Invert case for the 2nd attempt;
                    if (ch === upperCh) {
                        ch = ch.toLowerCase();
                    } else {
                        ch = upperCh;
                    }

                    n = ch.charCodeAt(0);
                }
            }

            return resKind.nextBranch;
        },

        _scanCharNegativeGroupToken: function (branches, branch, pass, token, skipLoggingCapture) {
            var resKind = this._branchResultKind;
            var index = branch.state.txtIndex;
            var ch = this._text[index];

            if (ch == null) {
                return resKind.nextBranch;
            }

            // Get result for positive group:
            var positiveRes = this._scanCharGroupToken(branches, branch, pass, token, true);

            // Inverse the positive result:
            if (positiveRes === resKind.ok) {
                return resKind.nextBranch;
            }

            if (!skipLoggingCapture) {
                branch.state.logCapture(1);
            }

            return resKind.ok;
        },

        _scanEscapeToken: function (branches, branch, pass, token) {
            return this._scanWithJsRegex(branches, branch, pass, token);
        },

        _scanDotToken: function (textEndPos, branches, branch, pass) {
            var resKind = this._branchResultKind;
            var index = branch.state.txtIndex;

            if (pass.settings.singleline) {
                if (index < textEndPos) {
                    branch.state.logCapture(1);

                    return resKind.ok;
                }
            } else {
                if (index < textEndPos && this._text[index] !== "\n") {
                    branch.state.logCapture(1);

                    return resKind.ok;
                }
            }

            return resKind.nextBranch;
        },

        _scanBackrefNumberToken: function (textEndPos, branches, branch, pass, token) {
            var resKind = this._branchResultKind;

            var grCapture = branch.state.resolveBackref(token.data.slotId);

            if (grCapture == null) {
                return resKind.nextBranch;
            }

            var grCaptureTxt = this._text.slice(grCapture.capIndex, grCapture.capIndex + grCapture.capLength);

            return this._scanLiteral(textEndPos, branches, branch, pass, grCaptureTxt);
        },

        _scanBackrefNameToken: function (textEndPos, branches, branch, pass, token) {
            var resKind = this._branchResultKind;

            var grCapture = branch.state.resolveBackref(token.data.slotId);

            if (grCapture == null) {
                return resKind.nextBranch;
            }

            var grCaptureTxt = this._text.slice(grCapture.capIndex, grCapture.capIndex + grCapture.capLength);

            return this._scanLiteral(textEndPos, branches, branch, pass, grCaptureTxt);
        },

        _scanAnchorToken: function (textEndPos, branches, branch, pass, token) {
            var resKind = this._branchResultKind;
            var index = branch.state.txtIndex;

            if (token.value === "\\b" || token.value === "\\B") {
                var prevIsWord = index > 0 && this._scanWithJsRegex2(index - 1, "\\w") === resKind.ok;
                var currIsWord = this._scanWithJsRegex2(index, "\\w") === resKind.ok;

                if ((prevIsWord === currIsWord) === (token.value === "\\B")) {
                    return resKind.ok;
                }
            } else if (token.value === "^") {
                if (index === 0) {
                    return resKind.ok;
                }

                if (pass.settings.multiline && this._text[index - 1] === "\n") {
                    return resKind.ok;
                }
            } else if (token.value === "$") {
                if (index === textEndPos) {
                    return resKind.ok;
                }

                if (pass.settings.multiline && this._text[index] === "\n") {
                    return resKind.ok;
                }
            } else if (token.value === "\\A") {
                if (index === 0) {
                    return resKind.ok;
                }
            } else if (token.value === "\\z") {
                if (index === textEndPos) {
                    return resKind.ok;
                }
            } else if (token.value === "\\Z") {
                if (index === textEndPos) {
                    return resKind.ok;
                }

                if (index === textEndPos - 1 && this._text[index] === "\n") {
                    return resKind.ok;
                }
            } else if (token.value === "\\G") {
                return resKind.ok;
            }

            return resKind.nextBranch;
        },

        // ============================================================================================
        // Auxiliary functions
        // ============================================================================================
        _cloneSettings: function (settings) {
            var cloned = {
                ignoreCase: settings.ignoreCase,
                multiline: settings.multiline,
                singleline: settings.singleline,
                ignoreWhitespace: settings.ignoreWhitespace,
                explicitCapture: settings.explicitCapture
            };

            return cloned;
        },

        _combineScanResults: function (branch, srcState) {
            if (srcState != null) {
                var dstGroups = branch.state.groups;
                var srcGroups = srcState.groups;
                var srcGroupsLen = srcGroups.length;
                var i;

                for (i = 0; i < srcGroupsLen; ++i) {
                    dstGroups.push(srcGroups[i]);
                }

                return true;
            }
            return false;
        },

        _getEmptyMatch: function () {
            var match = {
                capIndex: 0,    // start index of total capture
                capLength: 0,   // length of total capture
                success: false,
                value: "",
                groups: [],
                captures: []
            };

            return match;
        },

        _fillMatch: function (match, capIndex, capLength, textPos) {
            if (capIndex == null) {
                capIndex = textPos;
            }

            match.capIndex = capIndex;
            match.capLength = capLength;
            match.success = true;
            match.value = this._text.slice(capIndex, capIndex + capLength);

            match.groups.push({
                capIndex: capIndex,
                capLength: capLength,
                value: match.value,
                success: true,
                captures: [
                    {
                        capIndex: capIndex,
                        capLength: capLength,
                        value: match.value
                    }
                ]
            });

            match.captures.push(match.groups[0].captures[0]);
        },

        _checkTimeout: function () {
            if (this._timeoutTime < 0) {
                return;
            }

            var time = new Date().getTime();

            if (time >= this._timeoutTime) {
                throw new System.RegexMatchTimeoutException(this._text, this._pattern, System.TimeSpan.fromMilliseconds(this._timeoutMs));
            }
        }
    });

    // @source RegexEngineBranch.js

    Bridge.define("System.Text.RegularExpressions.RegexEngineBranch", {
        type: 0,
        value: 0,
        min: 0,
        max: 0,

        isStarted: false,
        isNotFailing: false,

        state: null,

        ctor: function (branchType, currVal, minVal, maxVal, parentState) {
            this.$initialize();

            this.type = branchType;

            this.value = currVal;
            this.min = minVal;
            this.max = maxVal;

            this.state = parentState != null ? parentState.clone() : new System.Text.RegularExpressions.RegexEngineState();
        },

        pushPass: function (index, tokens, settings) {
            var pass = new System.Text.RegularExpressions.RegexEnginePass(index, tokens, settings);

            this.state.passes.push(pass);
        },

        peekPass: function () {
            return this.state.passes[this.state.passes.length - 1];
        },

        popPass: function () {
            return this.state.passes.pop();
        },

        hasPass: function () {
            return this.state.passes.length > 0;
        },

        clone: function () {
            var cloned = new System.Text.RegularExpressions.RegexEngineBranch(this.type, this.value, this.min, this.max, this.state);

            cloned.isNotFailing = this.isNotFailing;

            return cloned;
        }
    });

    // @source RegexEngineState.js

    Bridge.define("System.Text.RegularExpressions.RegexEngineState", {
        txtIndex: 0, // current index
        capIndex: null, // first index of captured text
        capLength: 0, // current length
        passes: null,
        groups: null, // captured groups

        ctor: function () {
            this.$initialize();

            this.passes = [];
            this.groups = [];
        },

        logCapture: function (length) {
            if (this.capIndex == null) {
                this.capIndex = this.txtIndex;
            }

            this.txtIndex += length;
            this.capLength += length;
        },

        logCaptureGroup: function (group, index, length) {
            this.groups.push({ rawIndex: group.rawIndex, slotId: group.packedSlotId, capIndex: index, capLength: length });
        },

        logCaptureGroupBalancing: function (group, capIndex) {
            var balancingSlotId = group.balancingSlotId;
            var groups = this.groups;
            var index = groups.length - 1;
            var group2;
            var group2Index;

            while (index >= 0) {
                if (groups[index].slotId === balancingSlotId) {
                    group2 = groups[index];
                    group2Index = index;

                    break;
                }
                --index;
            }

            if (group2 != null && group2Index != null) {
                groups.splice(group2Index, 1); // remove group2 from the collection

                // Add balancing group value:
                if (group.constructs.name1 != null) {
                    var balCapIndex = group2.capIndex + group2.capLength;
                    var balCapLength = capIndex - balCapIndex;

                    this.logCaptureGroup(group, balCapIndex, balCapLength);
                }

                return true;
            }

            return false;
        },

        resolveBackref: function (packedSlotId) {
            var groups = this.groups;
            var index = groups.length - 1;

            while (index >= 0) {
                if (groups[index].slotId === packedSlotId) {
                    return groups[index];
                }

                --index;
            }

            return null;
        },

        clone: function () {
            var cloned = new System.Text.RegularExpressions.RegexEngineState();
            cloned.txtIndex = this.txtIndex;
            cloned.capIndex = this.capIndex;
            cloned.capLength = this.capLength;

            // Clone passes:
            var clonedPasses = cloned.passes;
            var thisPasses = this.passes;
            var len = thisPasses.length;
            var clonedItem;
            var i;

            for (i = 0; i < len; i++) {
                clonedItem = thisPasses[i].clone();
                clonedPasses.push(clonedItem);
            }

            // Clone groups:
            var clonedGroups = cloned.groups;
            var thisGroups = this.groups;
            len = thisGroups.length;

            for (i = 0; i < len; i++) {
                clonedItem = thisGroups[i];
                clonedGroups.push(clonedItem);
            }

            return cloned;
        }
    });

    // @source RegexEnginePass.js

    Bridge.define("System.Text.RegularExpressions.RegexEnginePass", {
        index: 0,
        tokens: null,
        probe: null,

        onHold: false,
        onHoldTextIndex: -1,
        alternationHandled: false,

        settings: null,

        ctor: function (index, tokens, settings) {
            this.$initialize();

            this.index = index;
            this.tokens = tokens;
            this.settings = settings;
        },

        clearState: function (settings) {
            this.index = 0;
            this.probe = null;
            this.onHold = false;
            this.onHoldTextIndex = -1;
            this.alternationHandled = false;
            this.settings = settings;
        },

        clone: function () {
            var cloned = new System.Text.RegularExpressions.RegexEnginePass(this.index, this.tokens, this.settings);

            cloned.onHold = this.onHold;
            cloned.onHoldTextIndex = this.onHoldTextIndex;
            cloned.alternationHandled = this.alternationHandled;
            cloned.probe = this.probe != null ? this.probe.clone() : null;

            return cloned;
        }
    });

    // @source RegexEngineProbe.js

    Bridge.define("System.Text.RegularExpressions.RegexEngineProbe", {
        min: 0,
        max: 0,
        value: 0,
        isLazy: false,
        forced: false,

        ctor: function (min, max, value, isLazy) {
            this.$initialize();

            this.min = min;
            this.max = max;
            this.value = value;
            this.isLazy = isLazy;
            this.forced = false;
        },

        clone: function () {
            var cloned = new System.Text.RegularExpressions.RegexEngineProbe(this.min, this.max, this.value, this.isLazy);

            cloned.forced = this.forced;

            return cloned;
        }
    });

    // @source RegexEngineParser.js

    Bridge.define("System.Text.RegularExpressions.RegexEngineParser", {
        statics: {
            _hexSymbols: "0123456789abcdefABCDEF",
            _octSymbols: "01234567",
            _decSymbols: "0123456789",

            _escapedChars: "abtrvfnexcu",
            _escapedCharClasses: "pPwWsSdD",
            _escapedAnchors: "AZzGbB",
            _escapedSpecialSymbols: " .,$^{}[]()|*+-=?\\|/\"':;~!@#%&",

            _whiteSpaceChars: " \r\n\t\v\f\u00A0\uFEFF", //TODO: This is short version of .NET WhiteSpace category.
            _unicodeCategories: ["Lu", "Ll", "Lt", "Lm", "Lo", "L", "Mn", "Mc", "Me", "M", "Nd", "Nl", "No", "N", "Pc", "Pd", "Ps", "Pe", "Pi", "Pf", "Po", "P", "Sm", "Sc", "Sk", "So", "S", "Zs", "Zl", "Zp", "Z", "Cc", "Cf", "Cs", "Co", "Cn", "C"],
            _namedCharBlocks: ["IsBasicLatin", "IsLatin-1Supplement", "IsLatinExtended-A", "IsLatinExtended-B", "IsIPAExtensions", "IsSpacingModifierLetters", "IsCombiningDiacriticalMarks", "IsGreek", "IsGreekandCoptic", "IsCyrillic", "IsCyrillicSupplement", "IsArmenian", "IsHebrew", "IsArabic", "IsSyriac", "IsThaana", "IsDevanagari", "IsBengali", "IsGurmukhi", "IsGujarati", "IsOriya", "IsTamil", "IsTelugu", "IsKannada", "IsMalayalam", "IsSinhala", "IsThai", "IsLao", "IsTibetan", "IsMyanmar", "IsGeorgian", "IsHangulJamo", "IsEthiopic", "IsCherokee", "IsUnifiedCanadianAboriginalSyllabics", "IsOgham", "IsRunic", "IsTagalog", "IsHanunoo", "IsBuhid", "IsTagbanwa", "IsKhmer", "IsMongolian", "IsLimbu", "IsTaiLe", "IsKhmerSymbols", "IsPhoneticExtensions", "IsLatinExtendedAdditional", "IsGreekExtended", "IsGeneralPunctuation", "IsSuperscriptsandSubscripts", "IsCurrencySymbols", "IsCombiningDiacriticalMarksforSymbols", "IsCombiningMarksforSymbols", "IsLetterlikeSymbols", "IsNumberForms", "IsArrows", "IsMathematicalOperators", "IsMiscellaneousTechnical", "IsControlPictures", "IsOpticalCharacterRecognition", "IsEnclosedAlphanumerics", "IsBoxDrawing", "IsBlockElements", "IsGeometricShapes", "IsMiscellaneousSymbols", "IsDingbats", "IsMiscellaneousMathematicalSymbols-A", "IsSupplementalArrows-A", "IsBraillePatterns", "IsSupplementalArrows-B", "IsMiscellaneousMathematicalSymbols-B", "IsSupplementalMathematicalOperators", "IsMiscellaneousSymbolsandArrows", "IsCJKRadicalsSupplement", "IsKangxiRadicals", "IsIdeographicDescriptionCharacters", "IsCJKSymbolsandPunctuation", "IsHiragana", "IsKatakana", "IsBopomofo", "IsHangulCompatibilityJamo", "IsKanbun", "IsBopomofoExtended", "IsKatakanaPhoneticExtensions", "IsEnclosedCJKLettersandMonths", "IsCJKCompatibility", "IsCJKUnifiedIdeographsExtensionA", "IsYijingHexagramSymbols", "IsCJKUnifiedIdeographs", "IsYiSyllables", "IsYiRadicals", "IsHangulSyllables", "IsHighSurrogates", "IsHighPrivateUseSurrogates", "IsLowSurrogates", "IsPrivateUse or IsPrivateUseArea", "IsCJKCompatibilityIdeographs", "IsAlphabeticPresentationForms", "IsArabicPresentationForms-A", "IsVariationSelectors", "IsCombiningHalfMarks", "IsCJKCompatibilityForms", "IsSmallFormVariants", "IsArabicPresentationForms-B", "IsHalfwidthandFullwidthForms", "IsSpecials"],
            _controlChars: ["@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_"],

            tokenTypes: {
                literal: 0,

                escChar: 110,
                escCharOctal: 111,
                escCharHex: 112,
                escCharCtrl: 113,
                escCharUnicode: 114,
                escCharOther: 115,

                escCharClass: 120,
                escCharClassCategory: 121,
                escCharClassBlock: 122,
                escCharClassDot: 123,

                escAnchor: 130,

                escBackrefNumber: 140,
                escBackrefName: 141,

                charGroup: 200,
                charNegativeGroup: 201,
                charInterval: 202,

                anchor: 300,

                group: 400,
                groupImnsx: 401,
                groupImnsxMisc: 402,

                groupConstruct: 403,
                groupConstructName: 404,
                groupConstructImnsx: 405,
                groupConstructImnsxMisc: 406,

                quantifier: 500,
                quantifierN: 501,
                quantifierNM: 502,

                alternation: 600,
                alternationGroup: 601,
                alternationGroupCondition: 602,
                alternationGroupRefNumberCondition: 603,
                alternationGroupRefNameCondition: 604,

                commentInline: 700,
                commentXMode: 701
            },

            parsePattern: function (pattern, settings) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;

                // Parse tokens in the original pattern:
                var tokens = scope._parsePatternImpl(pattern, settings, 0, pattern.length);

                // Collect and fill group descriptors into Group tokens.
                // We need do it before any token modification.
                var groups = [];
                scope._fillGroupDescriptors(tokens, groups);

                // Fill Sparse Info:
                var sparseSettings = scope._getGroupSparseInfo(groups);

                // Fill balancing info for the groups with "name2":
                scope._fillBalancingGroupInfo(groups, sparseSettings);

                // Transform tokens for usage in JS RegExp:
                scope._preTransformBackrefTokens(pattern, tokens, sparseSettings);
                scope._transformRawTokens(settings, tokens, sparseSettings, [], [], 0);

                // Update group descriptors as tokens have been transformed (at least indexes were changed):
                scope._updateGroupDescriptors(tokens);

                var result = {
                    groups: groups,
                    sparseSettings: sparseSettings,
                    isContiguous: settings.isContiguous || false,
                    shouldFail: settings.shouldFail || false,
                    tokens: tokens
                };

                return result;
            },

            _transformRawTokens: function (settings, tokens, sparseSettings, allowedPackedSlotIds, nestedGroupIds, nestingLevel) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var prevToken;
                var token;
                var value;
                var packedSlotId;
                var groupNumber;
                var matchRes;
                var localNestedGroupIds;
                var localSettings;
                var qtoken;
                var i;

                // Transform/adjust tokens collection to work with JS RegExp:
                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];

                    if (i < tokens.length - 1) {
                        qtoken = tokens[i + 1];

                        switch (qtoken.type) {
                            case tokenTypes.quantifier:
                            case tokenTypes.quantifierN:
                            case tokenTypes.quantifierNM:
                                token.qtoken = qtoken;
                                tokens.splice(i + 1, 1);
                                --i;
                        }
                    }

                    if (token.type === tokenTypes.escBackrefNumber) {
                        groupNumber = token.data.number;
                        packedSlotId = sparseSettings.getPackedSlotIdBySlotNumber(groupNumber);

                        if (packedSlotId == null) {
                            throw new System.ArgumentException.$ctor1("Reference to undefined group number " + groupNumber.toString() + ".");
                        }

                        if (allowedPackedSlotIds.indexOf(packedSlotId) < 0) {
                            settings.shouldFail = true; // Backreferences to unreachable group number lead to an empty match.

                            continue;
                        }

                        token.data.slotId = packedSlotId;
                    } else if (token.type === tokenTypes.escBackrefName) {
                        value = token.data.name;
                        packedSlotId = sparseSettings.getPackedSlotIdBySlotName(value);

                        if (packedSlotId == null) {
                            // TODO: Move this code to earlier stages
                            // If the name is number, treat the backreference as a numbered:
                            matchRes = scope._matchChars(value, 0, value.length, scope._decSymbols);

                            if (matchRes.matchLength === value.length) {
                                value = "\\" + value;
                                scope._updatePatternToken(token, tokenTypes.escBackrefNumber, token.index, value.length, value);
                                --i; // process the token again

                                continue;
                            }

                            throw new System.ArgumentException.$ctor1("Reference to undefined group name '" + value + "'.");
                        }

                        if (allowedPackedSlotIds.indexOf(packedSlotId) < 0) {
                            settings.shouldFail = true; // Backreferences to unreachable group number lead to an empty match.

                            continue;
                        }

                        token.data.slotId = packedSlotId;
                    } else if (token.type === tokenTypes.anchor || token.type === tokenTypes.escAnchor) {
                        if (token.value === "\\G") {
                            if (nestingLevel === 0 && i === 0) {
                                settings.isContiguous = true;
                            } else {
                                settings.shouldFail = true;
                            }

                            tokens.splice(i, 1);
                            --i;

                            continue;
                        }
                    } else if (token.type === tokenTypes.commentInline || token.type === tokenTypes.commentXMode) {
                        // We can safely remove comments from the pattern
                        tokens.splice(i, 1);
                        --i;

                        continue;
                    } else if (token.type === tokenTypes.literal) {
                        // Combine literal tokens for better performance:
                        if (i > 0 && !token.qtoken) {
                            prevToken = tokens[i - 1];

                            if (prevToken.type === tokenTypes.literal && !prevToken.qtoken) {
                                prevToken.value += token.value;
                                prevToken.length += token.length;

                                tokens.splice(i, 1);
                                --i;

                                continue;
                            }
                        }
                    } else if (token.type === tokenTypes.alternationGroupCondition) {
                        if (token.data != null) {
                            if (token.data.number != null) {
                                packedSlotId = sparseSettings.getPackedSlotIdBySlotNumber(token.data.number);

                                if (packedSlotId == null) {
                                    throw new System.ArgumentException.$ctor1("Reference to undefined group number " + value + ".");
                                }

                                token.data.packedSlotId = packedSlotId;
                                scope._updatePatternToken(token, tokenTypes.alternationGroupRefNumberCondition, token.index, token.length, token.value);
                            } else {
                                packedSlotId = sparseSettings.getPackedSlotIdBySlotName(token.data.name);

                                if (packedSlotId != null) {
                                    token.data.packedSlotId = packedSlotId;
                                    scope._updatePatternToken(token, tokenTypes.alternationGroupRefNameCondition, token.index, token.length, token.value);
                                } else {
                                    delete token.data;
                                }
                            }
                        }
                    }

                    // Update children tokens:
                    if (token.children && token.children.length) {
                        localNestedGroupIds = token.type === tokenTypes.group ? [token.group.rawIndex] : [];
                        localNestedGroupIds = localNestedGroupIds.concat(nestedGroupIds);

                        localSettings = token.localSettings || settings;
                        scope._transformRawTokens(localSettings, token.children, sparseSettings, allowedPackedSlotIds, localNestedGroupIds, nestingLevel + 1);
                        settings.shouldFail = settings.shouldFail || localSettings.shouldFail;
                        settings.isContiguous = settings.isContiguous || localSettings.isContiguous;
                    }

                    // Group is processed. Now it can be referenced with Backref:
                    if (token.type === tokenTypes.group) {
                        allowedPackedSlotIds.push(token.group.packedSlotId);
                    }
                }
            },

            _fillGroupDescriptors: function (tokens, groups) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var group;
                var i;

                // Fill group structure:
                scope._fillGroupStructure(groups, tokens, null);

                // Assign name or id:
                var groupId = 1;

                for (i = 0; i < groups.length; i++) {
                    group = groups[i];

                    if (group.constructs.name1 != null) {
                        group.name = group.constructs.name1;
                        group.hasName = true;
                    } else {
                        group.hasName = false;
                        group.name = groupId.toString();
                        ++groupId;
                    }
                }
            },

            _fillGroupStructure: function (groups, tokens, parentGroup) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var group;
                var token;
                var constructs;
                var constructCandidateToken;
                var hasChildren;
                var i;

                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    hasChildren = token.children && token.children.length;

                    if (token.type === tokenTypes.group || token.type === tokenTypes.groupImnsx || token.type === tokenTypes.groupImnsxMisc) {
                        group = {
                            rawIndex: groups.length + 1,
                            number: -1,

                            parentGroup: null,
                            innerGroups: [],

                            name: null,
                            hasName: false,

                            constructs: null,
                            quantifier: null,

                            exprIndex: -1,
                            exprLength: 0,
                            expr: null,
                            exprFull: null
                        };

                        token.group = group;

                        if (token.type === tokenTypes.group) {
                            groups.push(group);

                            if (parentGroup != null) {
                                token.group.parentGroup = parentGroup;
                                parentGroup.innerGroups.push(group);
                            }
                        }

                        // fill group constructs:
                        constructCandidateToken = hasChildren ? token.children[0] : null;
                        group.constructs = scope._fillGroupConstructs(constructCandidateToken);
                        constructs = group.constructs;

                        if (token.isNonCapturingExplicit) {
                            delete token.isNonCapturingExplicit;
                            constructs.isNonCapturingExplicit = true;
                        }

                        if (token.isEmptyCapturing) {
                            delete token.isEmptyCapturing;
                            constructs.emptyCapture = true;
                        }

                        constructs.skipCapture =
                            constructs.isNonCapturing ||
                            constructs.isNonCapturingExplicit ||
                            constructs.isNonbacktracking ||
                            constructs.isPositiveLookahead ||
                            constructs.isNegativeLookahead ||
                            constructs.isPositiveLookbehind ||
                            constructs.isNegativeLookbehind ||
                            (constructs.name1 == null && constructs.name2 != null);
                    }

                    // fill group descriptors for inner tokens:
                    if (hasChildren) {
                        scope._fillGroupStructure(groups, token.children, token.group);
                    }
                }
            },

            _getGroupSparseInfo: function (groups) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;

                var explNumberedGroups = {};
                var explNumberedGroupKeys = [];
                var explNamedGroups = {};
                var explGroups;

                var numberedGroups;
                var slotNumber;
                var slotName;
                var group;
                var i;
                var j;

                var sparseSlotMap = { 0: 0 };
                sparseSlotMap.lastSlot = 0;

                var sparseSlotNameMap = { "0": 0 };
                sparseSlotNameMap.keys = ["0"];

                // Fill Explicit Numbers:
                for (i = 0; i < groups.length; i++) {
                    group = groups[i];

                    if (group.constructs.skipCapture) {
                        continue;
                    }

                    if (group.constructs.isNumberName1) {
                        slotNumber = parseInt(group.constructs.name1);
                        explNumberedGroupKeys.push(slotNumber);

                        if (explNumberedGroups[slotNumber]) {
                            explNumberedGroups[slotNumber].push(group);
                        } else {
                            explNumberedGroups[slotNumber] = [group];
                        }
                    } else {
                        slotName = group.constructs.name1;

                        if (explNamedGroups[slotName]) {
                            explNamedGroups[slotName].push(group);
                        } else {
                            explNamedGroups[slotName] = [group];
                        }
                    }
                }

                // Sort explicitly set Number names:
                var sortNum = function (a, b) {
                    return a - b;
                };

                explNumberedGroupKeys.sort(sortNum);

                // Add group without names first (emptyCapture = false first, than emptyCapture = true):
                var allowEmptyCapture = false;

                for (j = 0; j < 2; j++) {
                    for (i = 0; i < groups.length; i++) {
                        group = groups[i];

                        if (group.constructs.skipCapture) {
                            continue;
                        }

                        if ((group.constructs.emptyCapture === true) !== allowEmptyCapture) {
                            continue;
                        }

                        slotNumber = sparseSlotNameMap.keys.length;

                        if (!group.hasName) {
                            numberedGroups = [group];
                            explGroups = explNumberedGroups[slotNumber];

                            if (explGroups != null) {
                                numberedGroups = numberedGroups.concat(explGroups);
                                explNumberedGroups[slotNumber] = null;
                            }

                            scope._addSparseSlotForSameNamedGroups(numberedGroups, slotNumber, sparseSlotMap, sparseSlotNameMap);
                        }
                    }
                    allowEmptyCapture = true;
                }

                // Then add named groups:
                for (i = 0; i < groups.length; i++) {
                    group = groups[i];

                    if (group.constructs.skipCapture) {
                        continue;
                    }

                    if (!group.hasName || group.constructs.isNumberName1) {
                        continue;
                    }

                    // If the slot is already occupied by an explicitly numbered group,
                    // add this group to the slot:
                    slotNumber = sparseSlotNameMap.keys.length;
                    explGroups = explNumberedGroups[slotNumber];

                    while (explGroups != null) {
                        scope._addSparseSlotForSameNamedGroups(explGroups, slotNumber, sparseSlotMap, sparseSlotNameMap);

                        explNumberedGroups[slotNumber] = null; // Group is processed.
                        slotNumber = sparseSlotNameMap.keys.length;
                        explGroups = explNumberedGroups[slotNumber];
                    }

                    if (!group.constructs.isNumberName1) {
                        slotNumber = sparseSlotNameMap.keys.length;
                        explGroups = explNumberedGroups[slotNumber];

                        while (explGroups != null) {
                            scope._addSparseSlotForSameNamedGroups(explGroups, slotNumber, sparseSlotMap, sparseSlotNameMap);

                            explNumberedGroups[slotNumber] = null; // Group is processed.
                            slotNumber = sparseSlotNameMap.keys.length;
                            explGroups = explNumberedGroups[slotNumber];
                        }
                    }

                    // Add the named group(s) to the 1st free slot:
                    slotName = group.constructs.name1;
                    explGroups = explNamedGroups[slotName];

                    if (explGroups != null) {
                        scope._addSparseSlotForSameNamedGroups(explGroups, slotNumber, sparseSlotMap, sparseSlotNameMap);
                        explNamedGroups[slotName] = null;  // Group is processed.
                    }
                }

                // Add the rest explicitly numbered groups:
                for (i = 0; i < explNumberedGroupKeys.length; i++) {
                    slotNumber = explNumberedGroupKeys[i];
                    explGroups = explNumberedGroups[slotNumber];

                    if (explGroups != null) {
                        scope._addSparseSlotForSameNamedGroups(explGroups, slotNumber, sparseSlotMap, sparseSlotNameMap);

                        explNumberedGroups[slotNumber] = null; // Group is processed.
                    }
                }

                return {
                    isSparse: sparseSlotMap.isSparse || false, //sparseSlotNumbers.length !== (1 + sparseSlotNumbers[sparseSlotNumbers.length - 1]),
                    sparseSlotMap: sparseSlotMap,           // <SlotNumber, PackedSlotId>
                    sparseSlotNameMap: sparseSlotNameMap,   // <SlotName, PackedSlotId>

                    getPackedSlotIdBySlotNumber: function (slotNumber) {
                        return this.sparseSlotMap[slotNumber];
                    },

                    getPackedSlotIdBySlotName: function (slotName) {
                        return this.sparseSlotNameMap[slotName];
                    }
                };
            },

            _addSparseSlot: function (group, slotNumber, sparseSlotMap, sparseSlotNameMap) {
                var packedSlotId = sparseSlotNameMap.keys.length; // 0-based index. Raw Slot number, 0,1..n (without gaps)

                group.packedSlotId = packedSlotId;

                sparseSlotMap[slotNumber] = packedSlotId;
                sparseSlotNameMap[group.name] = packedSlotId;
                sparseSlotNameMap.keys.push(group.name);

                if (!sparseSlotMap.isSparse && ((slotNumber - sparseSlotMap.lastSlot) > 1)) {
                    sparseSlotMap.isSparse = true;
                }

                sparseSlotMap.lastSlot = slotNumber;
            },

            _addSparseSlotForSameNamedGroups: function (groups, slotNumber, sparseSlotMap, sparseSlotNameMap) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var i;

                scope._addSparseSlot(groups[0], slotNumber, sparseSlotMap, sparseSlotNameMap);
                var sparseSlotId = groups[0].sparseSlotId;
                var packedSlotId = groups[0].packedSlotId;

                // Assign SlotID for all expl. named groups in this slot.
                if (groups.length > 1) {
                    for (i = 1; i < groups.length; i++) {
                        groups[i].sparseSlotId = sparseSlotId;
                        groups[i].packedSlotId = packedSlotId;
                    }
                }
            },

            _fillGroupConstructs: function (childToken) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var constructs = {
                    name1: null,
                    name2: null,

                    isNumberName1: false,
                    isNumberName2: false,

                    isNonCapturing: false,
                    isNonCapturingExplicit: false,

                    isIgnoreCase: null,
                    isMultiline: null,
                    isExplicitCapture: null,
                    isSingleLine: null,
                    isIgnoreWhitespace: null,

                    isPositiveLookahead: false,
                    isNegativeLookahead: false,
                    isPositiveLookbehind: false,
                    isNegativeLookbehind: false,

                    isNonbacktracking: false
                };

                if (childToken == null) {
                    return constructs;
                }

                if (childToken.type === tokenTypes.groupConstruct) {
                    // ?:
                    // ?=
                    // ?!
                    // ?<=
                    // ?<!
                    // ?>

                    switch (childToken.value) {
                        case "?:":
                            constructs.isNonCapturing = true;
                            break;

                        case "?=":
                            constructs.isPositiveLookahead = true;
                            break;

                        case "?!":
                            constructs.isNegativeLookahead = true;
                            break;

                        case "?>":
                            constructs.isNonbacktracking = true;
                            break;

                        case "?<=":
                            constructs.isPositiveLookbehind = true;
                            break;

                        case "?<!":
                            constructs.isNegativeLookbehind = true;
                            break;

                        default:
                            throw new System.ArgumentException.$ctor1("Unrecognized grouping construct.");
                    }
                } else if (childToken.type === tokenTypes.groupConstructName) {
                    // ?<name1>
                    // ?'name1'
                    // ?<name1-name2>
                    // ?'name1-name2'

                    var nameExpr = childToken.value.slice(2, childToken.length - 1);
                    var groupNames = nameExpr.split("-");

                    if (groupNames.length === 0 || groupNames.length > 2) {
                        throw new System.ArgumentException.$ctor1("Invalid group name.");
                    }

                    if (groupNames[0].length) {
                        constructs.name1 = groupNames[0];

                        var nameRes1 = scope._validateGroupName(groupNames[0]);

                        constructs.isNumberName1 = nameRes1.isNumberName;
                    }

                    if (groupNames.length === 2) {
                        constructs.name2 = groupNames[1];

                        var nameRes2 = scope._validateGroupName(groupNames[1]);

                        constructs.isNumberName2 = nameRes2.isNumberName;
                    }
                } else if (childToken.type === tokenTypes.groupConstructImnsx || childToken.type === tokenTypes.groupConstructImnsxMisc) {
                    // ?imnsx-imnsx:
                    var imnsxPostfixLen = childToken.type === tokenTypes.groupConstructImnsx ? 1 : 0;
                    var imnsxExprLen = childToken.length - 1 - imnsxPostfixLen; // - prefix - postfix
                    var imnsxVal = true;
                    var ch;
                    var i;

                    for (i = 1; i <= imnsxExprLen; i++) {
                        ch = childToken.value[i];

                        if (ch === "-") {
                            imnsxVal = false;
                        } else if (ch === "i") {
                            constructs.isIgnoreCase = imnsxVal;
                        } else if (ch === "m") {
                            constructs.isMultiline = imnsxVal;
                        } else if (ch === "n") {
                            constructs.isExplicitCapture = imnsxVal;
                        } else if (ch === "s") {
                            constructs.isSingleLine = imnsxVal;
                        } else if (ch === "x") {
                            constructs.isIgnoreWhitespace = imnsxVal;
                        }
                    }
                }

                return constructs;
            },

            _validateGroupName: function (name) {
                if (!name || !name.length) {
                    throw new System.ArgumentException.$ctor1("Invalid group name: Group names must begin with a word character.");
                }

                var isDigit = name[0] >= "0" && name[0] <= "9";

                if (isDigit) {
                    var scope = System.Text.RegularExpressions.RegexEngineParser;
                    var res = scope._matchChars(name, 0, name.length, scope._decSymbols);

                    if (res.matchLength !== name.length) {
                        throw new System.ArgumentException.$ctor1("Invalid group name: Group names must begin with a word character.");
                    }
                }

                return {
                    isNumberName: isDigit
                };
            },

            _fillBalancingGroupInfo: function (groups, sparseSettings) {
                var group;
                var i;

                // Assign name or id:
                for (i = 0; i < groups.length; i++) {
                    group = groups[i];

                    if (group.constructs.name2 != null) {
                        group.isBalancing = true;

                        group.balancingSlotId = sparseSettings.getPackedSlotIdBySlotName(group.constructs.name2);

                        if (group.balancingSlotId == null) {
                            throw new System.ArgumentException.$ctor1("Reference to undefined group name '" + group.constructs.name2 + "'.");
                        }
                    }
                }
            },

            _preTransformBackrefTokens: function (pattern, tokens, sparseSettings) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var groupNumber;
                var octalCharToken;
                var extraLength;
                var literalToken;
                var token;
                var i;

                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];

                    if (token.type === tokenTypes.escBackrefNumber) {
                        groupNumber = token.data.number;

                        if (groupNumber >= 1 && sparseSettings.getPackedSlotIdBySlotNumber(groupNumber) != null) {
                            // Expressions from \10 and greater are considered backreferences
                            // if there is a group corresponding to that number;
                            // otherwise, they are interpreted as octal codes.
                            continue; // validated
                        }

                        if (groupNumber <= 9) {
                            // The expressions \1 through \9 are always interpreted as backreferences, and not as octal codes.
                            throw new System.ArgumentException.$ctor1("Reference to undefined group number " + groupNumber.toString() + ".");
                        }

                        // Otherwise, transform the token to OctalNumber:
                        octalCharToken = scope._parseOctalCharToken(token.value, 0, token.length);

                        if (octalCharToken == null) {
                            throw new System.ArgumentException.$ctor1("Unrecognized escape sequence " + token.value.slice(0, 2) + ".");
                        }

                        extraLength = token.length - octalCharToken.length;
                        scope._modifyPatternToken(token, pattern, tokenTypes.escCharOctal, null, octalCharToken.length);
                        token.data = octalCharToken.data;

                        if (extraLength > 0) {
                            literalToken = scope._createPatternToken(pattern, tokenTypes.literal, token.index + token.length, extraLength);
                            tokens.splice(i + 1, 0, literalToken);
                        }
                    }

                    if (token.children && token.children.length) {
                        scope._preTransformBackrefTokens(pattern, token.children, sparseSettings);
                    }
                }
            },

            _updateGroupDescriptors: function (tokens, parentIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var group;
                var token;
                var quantCandidateToken;
                var childrenValue;
                var childrenIndex;
                var i;

                var index = parentIndex || 0;

                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    token.index = index;

                    // Calculate children indexes/lengths to update parent length:
                    if (token.children) {
                        childrenIndex = token.childrenPostfix.length;
                        scope._updateGroupDescriptors(token.children, index + childrenIndex);

                        // Update parent value if children have been changed:
                        childrenValue = scope._constructPattern(token.children);
                        token.value = token.childrenPrefix + childrenValue + token.childrenPostfix;
                        token.length = token.value.length;
                    }

                    // Update group information:
                    if (token.type === tokenTypes.group && token.group) {
                        group = token.group;
                        group.exprIndex = token.index;
                        group.exprLength = token.length;

                        if (i + 1 < tokens.length) {
                            quantCandidateToken = tokens[i + 1];

                            if (quantCandidateToken.type === tokenTypes.quantifier ||
                                quantCandidateToken.type === tokenTypes.quantifierN ||
                                quantCandidateToken.type === tokenTypes.quantifierNM) {
                                group.quantifier = quantCandidateToken.value;
                            }
                        }

                        group.expr = token.value;
                        group.exprFull = group.expr + (group.quantifier != null ? group.quantifier : "");
                    }

                    // Update current index:
                    index += token.length;
                }
            },

            _constructPattern: function (tokens) {
                var pattern = "";
                var token;
                var i;

                for (i = 0; i < tokens.length; i++) {
                    token = tokens[i];
                    pattern += token.value;
                }

                return pattern;
            },

            _parsePatternImpl: function (pattern, settings, startIndex, endIndex) {
                if (pattern == null) {
                    throw new System.ArgumentNullException.$ctor1("pattern");
                }

                if (startIndex < 0 || startIndex > pattern.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                }

                if (endIndex < startIndex || endIndex > pattern.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("endIndex");
                }

                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var tokens = [];
                var token;
                var ch;
                var i;

                i = startIndex;

                while (i < endIndex) {
                    ch = pattern[i];

                    // Ignore whitespaces (if it was requested):
                    if (settings.ignoreWhitespace && scope._whiteSpaceChars.indexOf(ch) >= 0) {
                        ++i;

                        continue;
                    }

                    if (ch === ".") {
                        token = scope._parseDotToken(pattern, i, endIndex);
                    } else if (ch === "\\") {
                        token = scope._parseEscapeToken(pattern, i, endIndex);
                    } else if (ch === "[") {
                        token = scope._parseCharRangeToken(pattern, i, endIndex);
                    } else if (ch === "^" || ch === "$") {
                        token = scope._parseAnchorToken(pattern, i);
                    } else if (ch === "(") {
                        token = scope._parseGroupToken(pattern, settings, i, endIndex);
                    } else if (ch === "|") {
                        token = scope._parseAlternationToken(pattern, i);
                    } else if (ch === "#" && settings.ignoreWhitespace) {
                        token = scope._parseXModeCommentToken(pattern, i, endIndex);
                    } else {
                        token = scope._parseQuantifierToken(pattern, i, endIndex);
                    }

                    if (token == null) {
                        token = scope._createPatternToken(pattern, tokenTypes.literal, i, 1);
                    }

                    if (token != null) {
                        tokens.push(token);
                        i += token.length;
                    }
                }

                return tokens;
            },

            _parseEscapeToken: function (pattern, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch !== "\\") {
                    return null;
                }

                if (i + 1 >= endIndex) {
                    throw new System.ArgumentException.$ctor1("Illegal \\ at end of pattern.");
                }

                ch = pattern[i + 1];

                // Parse a sequence for a numbered reference ("Backreference Constructs")
                if (ch >= "1" && ch <= "9") {
                    // check if the number is a group backreference
                    var groupDigits = scope._matchChars(pattern, i + 1, endIndex, scope._decSymbols, 3); // assume: there are not more than 999 groups
                    var backrefNumberToken = scope._createPatternToken(pattern, tokenTypes.escBackrefNumber, i, 1 + groupDigits.matchLength); // "\nnn"

                    backrefNumberToken.data = { number: parseInt(groupDigits.match, 10) };

                    return backrefNumberToken;
                }

                // Parse a sequence for "Anchors"
                if (scope._escapedAnchors.indexOf(ch) >= 0) {
                    return scope._createPatternToken(pattern, tokenTypes.escAnchor, i, 2); // "\A" or "\Z" or "\z" or "\G" or "\b" or "\B"
                }

                // Parse a sequence for "Character Escapes" or "Character Classes"
                var escapedCharToken = scope._parseEscapedChar(pattern, i, endIndex);

                if (escapedCharToken != null) {
                    return escapedCharToken;
                }

                // Parse a sequence for a named backreference ("Backreference Constructs")
                if (ch === "k") {
                    if (i + 2 < endIndex) {
                        var nameQuoteCh = pattern[i + 2];

                        if (nameQuoteCh === "'" || nameQuoteCh === "<") {
                            var closingCh = nameQuoteCh === "<" ? ">" : "'";
                            var refNameChars = scope._matchUntil(pattern, i + 3, endIndex, closingCh);

                            if (refNameChars.unmatchLength === 1 && refNameChars.matchLength > 0) {
                                var backrefNameToken = scope._createPatternToken(pattern, tokenTypes.escBackrefName, i, 3 + refNameChars.matchLength + 1); // "\k<Name>" or "\k'Name'"

                                backrefNameToken.data = { name: refNameChars.match };

                                return backrefNameToken;
                            }
                        }
                    }

                    throw new System.ArgumentException.$ctor1("Malformed \\k<...> named back reference.");
                }

                // Temp fix (until IsWordChar is not supported):
                // See more: https://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/RegexParser.cs,1414
                // Unescaping of any of the following ASCII characters results in the character itself
                var code = ch.charCodeAt(0);

                if ((code >= 0 && code < 48) ||
                    (code > 57 && code < 65) ||
                    (code > 90 && code < 95) ||
                    (code === 96) ||
                    (code > 122 && code < 128)) {
                    var token = scope._createPatternToken(pattern, tokenTypes.escChar, i, 2);

                    token.data = { n: code, ch: ch };

                    return token;
                }

                // Unrecognized escape sequence:
                throw new System.ArgumentException.$ctor1("Unrecognized escape sequence \\" + ch + ".");
            },

            _parseOctalCharToken: function (pattern, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch === "\\" && i + 1 < endIndex) {
                    ch = pattern[i + 1];

                    if (ch >= "0" && ch <= "7") {
                        var octalDigits = scope._matchChars(pattern, i + 1, endIndex, scope._octSymbols, 3);
                        var octalVal = parseInt(octalDigits.match, 8);
                        var token = scope._createPatternToken(pattern, tokenTypes.escCharOctal, i, 1 + octalDigits.matchLength); // "\0" or "\nn" or "\nnn"

                        token.data = { n: octalVal, ch: String.fromCharCode(octalVal) };

                        return token;
                    }
                }

                return null;
            },

            _parseEscapedChar: function (pattern, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var token;

                var ch = pattern[i];

                if (ch !== "\\" || i + 1 >= endIndex) {
                    return null;
                }

                ch = pattern[i + 1];

                // Parse a sequence for "Character Escapes"
                if (scope._escapedChars.indexOf(ch) >= 0) {
                    if (ch === "x") {
                        var hexDigits = scope._matchChars(pattern, i + 2, endIndex, scope._hexSymbols, 2);

                        if (hexDigits.matchLength !== 2) {
                            throw new System.ArgumentException.$ctor1("Insufficient hexadecimal digits.");
                        }

                        var hexVal = parseInt(hexDigits.match, 16);

                        token = scope._createPatternToken(pattern, tokenTypes.escCharHex, i, 4); // "\xnn"
                        token.data = { n: hexVal, ch: String.fromCharCode(hexVal) };

                        return token;
                    } else if (ch === "c") {
                        if (i + 2 >= endIndex) {
                            throw new System.ArgumentException.$ctor1("Missing control character.");
                        }

                        var ctrlCh = pattern[i + 2];

                        ctrlCh = ctrlCh.toUpperCase();

                        var ctrlIndex = this._controlChars.indexOf(ctrlCh);

                        if (ctrlIndex >= 0) {
                            token = scope._createPatternToken(pattern, tokenTypes.escCharCtrl, i, 3); // "\cx" or "\cX"
                            token.data = { n: ctrlIndex, ch: String.fromCharCode(ctrlIndex) };

                            return token;
                        }

                        throw new System.ArgumentException.$ctor1("Unrecognized control character.");
                    } else if (ch === "u") {
                        var ucodeDigits = scope._matchChars(pattern, i + 2, endIndex, scope._hexSymbols, 4);

                        if (ucodeDigits.matchLength !== 4) {
                            throw new System.ArgumentException.$ctor1("Insufficient hexadecimal digits.");
                        }

                        var ucodeVal = parseInt(ucodeDigits.match, 16);

                        token = scope._createPatternToken(pattern, tokenTypes.escCharUnicode, i, 6); // "\unnnn"
                        token.data = { n: ucodeVal, ch: String.fromCharCode(ucodeVal) };

                        return token;
                    }

                    token = scope._createPatternToken(pattern, tokenTypes.escChar, i, 2); // "\a" or "\b" or "\t" or "\r" or "\v" or "f" or "n" or "e"-

                    var escVal;

                    switch (ch) {
                        case "a":
                            escVal = 7;
                            break;
                        case "b":
                            escVal = 8;
                            break;
                        case "t":
                            escVal = 9;
                            break;
                        case "r":
                            escVal = 13;
                            break;
                        case "v":
                            escVal = 11;
                            break;
                        case "f":
                            escVal = 12;
                            break;
                        case "n":
                            escVal = 10;
                            break;
                        case "e":
                            escVal = 27;
                            break;

                        default:
                            throw new System.ArgumentException.$ctor1("Unexpected escaped char: '" + ch + "'.");
                    }

                    token.data = { n: escVal, ch: String.fromCharCode(escVal) };

                    return token;
                }

                // Parse a sequence for an octal character("Character Escapes")
                if (ch >= "0" && ch <= "7") {
                    var octalCharToken = scope._parseOctalCharToken(pattern, i, endIndex);

                    return octalCharToken;
                }

                // Parse a sequence for "Character Classes"
                if (scope._escapedCharClasses.indexOf(ch) >= 0) {
                    if (ch === "p" || ch === "P") {
                        var catNameChars = scope._matchUntil(pattern, i + 2, endIndex, "}"); // the longest category name is 37 + 2 brackets, but .NET does not limit the value on this step

                        if (catNameChars.matchLength < 2 || catNameChars.match[0] !== "{" || catNameChars.unmatchLength !== 1) {
                            throw new System.ArgumentException.$ctor1("Incomplete \p{X} character escape.");
                        }

                        var catName = catNameChars.match.slice(1);

                        if (scope._unicodeCategories.indexOf(catName) >= 0) {
                            return scope._createPatternToken(pattern, tokenTypes.escCharClassCategory, i, 2 + catNameChars.matchLength + 1); // "\p{Name}" or "\P{Name}"
                        }

                        if (scope._namedCharBlocks.indexOf(catName) >= 0) {
                            return scope._createPatternToken(pattern, tokenTypes.escCharClassBlock, i, 2 + catNameChars.matchLength + 1); // "\p{Name}" or "\P{Name}"
                        }

                        throw new System.ArgumentException.$ctor1("Unknown property '" + catName + "'.");
                    }

                    return scope._createPatternToken(pattern, tokenTypes.escCharClass, i, 2); // "\w" or "\W" or "\s" or "\S" or "\d" or "\D"
                }

                // Some other literal
                if (scope._escapedSpecialSymbols.indexOf(ch) >= 0) {
                    token = scope._createPatternToken(pattern, tokenTypes.escCharOther, i, 2); // "\." or "\$" or ... "\\"
                    token.data = { n: ch.charCodeAt(0), ch: ch };
                    return token;
                }

                return null;
            },

            _parseCharRangeToken: function (pattern, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var tokens = [];
                var intervalToken;
                var substractToken;
                var token;
                var isNegative = false;
                var noMoreTokenAllowed = false;
                var hasSubstractToken = false;

                var ch = pattern[i];

                if (ch !== "[") {
                    return null;
                }

                var index = i + 1;
                var closeBracketIndex = -1;
                var toInc;

                if (index < endIndex && pattern[index] === "^") {
                    isNegative = true;
                    index ++;
                }

                var startIndex = index;

                while (index < endIndex) {
                    ch = pattern[index];

                    noMoreTokenAllowed = hasSubstractToken;

                    if (ch === "-" && index + 1 < endIndex && pattern[index + 1] === "[") {
                        substractToken = scope._parseCharRangeToken(pattern, index + 1, endIndex);
                        substractToken.childrenPrefix = "-" + substractToken.childrenPrefix;
                        substractToken.length ++;
                        token = substractToken;
                        toInc = substractToken.length;
                        hasSubstractToken = true;
                    } else if (ch === "\\") {
                        token = scope._parseEscapedChar(pattern, index, endIndex);

                        if (token == null) {
                            throw new System.ArgumentException.$ctor1("Unrecognized escape sequence \\" + ch + ".");
                        }
                        toInc = token.length;
                    } else if (ch === "]" && index > startIndex) {
                        closeBracketIndex = index;

                        break;
                    } else {
                        token = scope._createPatternToken(pattern, tokenTypes.literal, index, 1);
                        toInc = 1;
                    }

                    if (noMoreTokenAllowed) {
                        throw new System.ArgumentException.$ctor1("A subtraction must be the last element in a character class.");
                    }

                    // Check for interval:
                    if (tokens.length > 1) {
                        intervalToken = scope._parseCharIntervalToken(pattern, tokens[tokens.length - 2], tokens[tokens.length - 1], token);

                        if (intervalToken != null) {
                            tokens.pop(); //pop Dush
                            tokens.pop(); //pop Interval start
                            token = intervalToken;
                        }
                    }

                    // Add token:
                    if (token != null) {
                        tokens.push(token);
                        index += toInc;
                    }
                }

                if (closeBracketIndex < 0 || tokens.length < 1) {
                    throw new System.ArgumentException.$ctor1("Unterminated [] set.");
                }

                var groupToken;

                if (!isNegative) {
                    groupToken = scope._createPatternToken(pattern, tokenTypes.charGroup, i, 1 + closeBracketIndex - i, tokens, "[", "]");
                } else {
                    groupToken = scope._createPatternToken(pattern, tokenTypes.charNegativeGroup, i, 1 + closeBracketIndex - i, tokens, "[^", "]");
                }

                // Create full range data:
                var ranges = scope._tidyCharRange(tokens);

                groupToken.data = { ranges: ranges };

                if (substractToken != null) {
                    groupToken.data.substractToken = substractToken;
                }

                return groupToken;
            },

            _parseCharIntervalToken: function (pattern, intervalStartToken, dashToken, intervalEndToken) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                if (dashToken.type !== tokenTypes.literal || dashToken.value !== "-") {
                    return null;
                }

                if (intervalStartToken.type !== tokenTypes.literal &&
                    intervalStartToken.type !== tokenTypes.escChar &&
                    intervalStartToken.type !== tokenTypes.escCharOctal &&
                    intervalStartToken.type !== tokenTypes.escCharHex &&
                    intervalStartToken.type !== tokenTypes.escCharCtrl &&
                    intervalStartToken.type !== tokenTypes.escCharUnicode &&
                    intervalStartToken.type !== tokenTypes.escCharOther) {
                    return null;
                }

                if (intervalEndToken.type !== tokenTypes.literal &&
                    intervalEndToken.type !== tokenTypes.escChar &&
                    intervalEndToken.type !== tokenTypes.escCharOctal &&
                    intervalEndToken.type !== tokenTypes.escCharHex &&
                    intervalEndToken.type !== tokenTypes.escCharCtrl &&
                    intervalEndToken.type !== tokenTypes.escCharUnicode &&
                    intervalEndToken.type !== tokenTypes.escCharOther) {
                    return null;
                }

                var startN;
                var startCh;

                if (intervalStartToken.type === tokenTypes.literal) {
                    startN = intervalStartToken.value.charCodeAt(0);
                    startCh = intervalStartToken.value;
                } else {
                    startN = intervalStartToken.data.n;
                    startCh = intervalStartToken.data.ch;
                }

                var endN;
                var endCh;

                if (intervalEndToken.type === tokenTypes.literal) {
                    endN = intervalEndToken.value.charCodeAt(0);
                    endCh = intervalEndToken.value;
                } else {
                    endN = intervalEndToken.data.n;
                    endCh = intervalEndToken.data.ch;
                }

                if (startN > endN) {
                    throw new System.NotSupportedException.$ctor1("[x-y] range in reverse order.");
                }

                var index = intervalStartToken.index;
                var length = intervalStartToken.length + dashToken.length + intervalEndToken.length;
                var intervalToken = scope._createPatternToken(pattern, tokenTypes.charInterval, index, length, [intervalStartToken, dashToken, intervalEndToken], "", "");

                intervalToken.data = {
                    startN: startN,
                    startCh: startCh,
                    endN: endN,
                    endCh: endCh
                };

                return intervalToken;
            },

            _tidyCharRange: function (tokens) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var j;
                var k;
                var n;
                var m;
                var token;
                var ranges = [];
                var classTokens = [];

                var range;
                var nextRange;
                var toSkip;

                for (j = 0; j < tokens.length; j++) {
                    token = tokens[j];

                    if (token.type === tokenTypes.literal) {
                        n = token.value.charCodeAt(0);
                        m = n;
                    } else if (token.type === tokenTypes.charInterval) {
                        n = token.data.startN;
                        m = token.data.endN;
                    } else if (token.type === tokenTypes.literal ||
                        token.type === tokenTypes.escChar ||
                        token.type === tokenTypes.escCharOctal ||
                        token.type === tokenTypes.escCharHex ||
                        token.type === tokenTypes.escCharCtrl ||
                        token.type === tokenTypes.escCharUnicode ||
                        token.type === tokenTypes.escCharOther) {
                        n = token.data.n;
                        m = n;
                    } else if (
                        token.type === tokenTypes.charGroup ||
                        token.type === tokenTypes.charNegativeGroup) {
                        continue;
                    } else {
                        classTokens.push(token);
                        continue;
                    }

                    if (ranges.length === 0) {
                        ranges.push({ n: n, m: m });
                        continue;
                    }

                    //TODO: [Performance] Use binary search
                    for (k = 0; k < ranges.length; k++) {
                        if (ranges[k].n > n) {
                            break;
                        }
                    }

                    ranges.splice(k, 0, { n: n, m: m });
                }

                // Combine ranges:
                for (j = 0; j < ranges.length; j++) {
                    range = ranges[j];

                    toSkip = 0;

                    for (k = j + 1; k < ranges.length; k++) {
                        nextRange = ranges[k];

                        if (nextRange.n > 1 + range.m) {
                            break;
                        }

                        toSkip++;

                        if (nextRange.m > range.m) {
                            range.m = nextRange.m;
                        }
                    }
                    if (toSkip > 0) {
                        ranges.splice(j + 1, toSkip);
                    }
                }

                if (classTokens.length > 0) {
                    var charClassStr = "[" + scope._constructPattern(classTokens) + "]";
                    ranges.charClassToken = scope._createPatternToken(charClassStr, tokenTypes.charGroup, 0, charClassStr.length, tokens, "[", "]");
                }

                return ranges;
            },

            _parseDotToken: function (pattern, i) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch !== ".") {
                    return null;
                }

                return scope._createPatternToken(pattern, tokenTypes.escCharClassDot, i, 1);
            },

            _parseAnchorToken: function (pattern, i) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch !== "^" && ch !== "$") {
                    return null;
                }

                return scope._createPatternToken(pattern, tokenTypes.anchor, i, 1);
            },

            _updateSettingsFromConstructs: function (settings, constructs) {
                if (constructs.isIgnoreWhitespace != null) {
                    settings.ignoreWhitespace = constructs.isIgnoreWhitespace;
                }

                if (constructs.isExplicitCapture != null) {
                    settings.explicitCapture = constructs.isExplicitCapture;
                }
            },

            _parseGroupToken: function (pattern, settings, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var groupSettings = {
                    ignoreWhitespace: settings.ignoreWhitespace,
                    explicitCapture: settings.explicitCapture
                };

                var ch = pattern[i];

                if (ch !== "(") {
                    return null;
                }

                var bracketLvl = 1;
                var sqBracketCtx = false;
                var bodyIndex = i + 1;
                var closeBracketIndex = -1;

                var isComment = false;
                var isAlternation = false;
                var isInlineOptions = false;
                var isImnsxConstructed = false;
                var isNonCapturingExplicit = false;

                var grConstructs = null;

                // Parse the Group construct, if any:
                var constructToken = scope._parseGroupConstructToken(pattern, groupSettings, i + 1, endIndex);

                if (constructToken != null) {
                    grConstructs = this._fillGroupConstructs(constructToken);

                    bodyIndex += constructToken.length;

                    if (constructToken.type === tokenTypes.commentInline) {
                        isComment = true;
                    } else if (constructToken.type === tokenTypes.alternationGroupCondition) {
                        isAlternation = true;
                    } else if (constructToken.type === tokenTypes.groupConstructImnsx) {
                        this._updateSettingsFromConstructs(groupSettings, grConstructs);
                        isImnsxConstructed = true;
                    } else if (constructToken.type === tokenTypes.groupConstructImnsxMisc) {
                        this._updateSettingsFromConstructs(settings, grConstructs); // parent settings!
                        isInlineOptions = true;
                    }
                }

                if (groupSettings.explicitCapture && (grConstructs == null || grConstructs.name1 == null)) {
                    isNonCapturingExplicit = true;
                }

                var index = bodyIndex;

                while (index < endIndex) {
                    ch = pattern[index];

                    if (ch === "\\") {
                        index ++; // skip the escaped char
                    } else if (ch === "[") {
                        sqBracketCtx = true;
                    } else if (ch === "]" && sqBracketCtx) {
                        sqBracketCtx = false;
                    } else if (!sqBracketCtx) {
                        if (ch === "(" && !isComment) {
                            ++bracketLvl;
                        } else if (ch === ")") {
                            --bracketLvl;

                            if (bracketLvl === 0) {
                                closeBracketIndex = index;
                                break;
                            }
                        }
                    }

                    ++index;
                }

                var result = null;

                if (isComment) {
                    if (closeBracketIndex < 0) {
                        throw new System.ArgumentException.$ctor1("Unterminated (?#...) comment.");
                    }

                    result = scope._createPatternToken(pattern, tokenTypes.commentInline, i, 1 + closeBracketIndex - i);
                } else {
                    if (closeBracketIndex < 0) {
                        throw new System.ArgumentException.$ctor1("Not enough )'s.");
                    }

                    // Parse the "Body" of the group
                    var innerTokens = scope._parsePatternImpl(pattern, groupSettings, bodyIndex, closeBracketIndex);

                    if (constructToken != null) {
                        innerTokens.splice(0, 0, constructToken);
                    }

                    // If there is an Alternation expression, treat the group as Alternation group
                    if (isAlternation) {
                        var innerTokensLen = innerTokens.length;
                        var innerToken;
                        var j;

                        // Check that there is only 1 alternation symbol:
                        var altCount = 0;

                        for (j = 0; j < innerTokensLen; j++) {
                            innerToken = innerTokens[j];

                            if (innerToken.type === tokenTypes.alternation) {
                                ++altCount;

                                if (altCount > 1) {
                                    throw new System.ArgumentException.$ctor1("Too many | in (?()|).");
                                }
                            }
                        }

                        if (altCount === 0) {
                            // Though .NET works with this case, it ends up with unexpected result. Let's avoid this behaviour.
                            throw new System.NotSupportedException.$ctor1("Alternation group without | is not supported.");
                        }

                        var altGroupToken = scope._createPatternToken(pattern, tokenTypes.alternationGroup, i, 1 + closeBracketIndex - i, innerTokens, "(", ")");

                        result = altGroupToken;
                    } else {
                        // Create Group token:
                        var tokenType = tokenTypes.group;

                        if (isInlineOptions) {
                            tokenType = tokenTypes.groupImnsxMisc;
                        } else if (isImnsxConstructed) {
                            tokenType = tokenTypes.groupImnsx;
                        }

                        var groupToken = scope._createPatternToken(pattern, tokenType, i, 1 + closeBracketIndex - i, innerTokens, "(", ")");

                        groupToken.localSettings = groupSettings;
                        result = groupToken;
                    }
                }

                if (isNonCapturingExplicit) {
                    result.isNonCapturingExplicit = true;
                }

                return result;
            },

            _parseGroupConstructToken: function (pattern, settings, i, endIndex) {
                // ?<name1>
                // ?'name1'
                // ?<name1-name2>
                // ?'name1-name2'
                // ?:
                // ?imnsx-imnsx
                // ?=
                // ?!
                // ?<=
                // ?<!
                // ?>
                // ?#

                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch !== "?" || i + 1 >= endIndex) {
                    return null;
                }

                ch = pattern[i + 1];

                if (ch === ":" || ch === "=" || ch === "!" || ch === ">") {
                    return scope._createPatternToken(pattern, tokenTypes.groupConstruct, i, 2);
                }

                if (ch === "#") {
                    return scope._createPatternToken(pattern, tokenTypes.commentInline, i, 2);
                }

                if (ch === "(") {
                    return scope._parseAlternationGroupConditionToken(pattern, settings, i, endIndex);
                }

                if (ch === "<" && i + 2 < endIndex) {
                    var ch3 = pattern[i + 2];

                    if (ch3 === "=" || ch3 === "!") {
                        return scope._createPatternToken(pattern, tokenTypes.groupConstruct, i, 3);
                    }
                }

                if (ch === "<" || ch === "'") {
                    var closingCh = ch === "<" ? ">" : ch;
                    var nameChars = scope._matchUntil(pattern, i + 2, endIndex, closingCh);

                    if (nameChars.unmatchLength !== 1 || nameChars.matchLength === 0) {
                        throw new System.ArgumentException.$ctor1("Unrecognized grouping construct.");
                    }

                    var nameFirstCh = nameChars.match.slice(0, 1);

                    if ("`~@#$%^&*()+{}[]|\\/|'\";:,.?".indexOf(nameFirstCh) >= 0) {
                        // TODO: replace the "black list" of wrong characters with char class check:
                        // According to UTS#18 Unicode Regular Expressions (http://www.unicode.org/reports/tr18/)
                        // RL 1.4 Simple Word Boundaries  The class of <word_character> includes all Alphabetic
                        // values from the Unicode character database, from UnicodeData.txt [UData], plus the U+200C
                        // ZERO WIDTH NON-JOINER and U+200D ZERO WIDTH JOINER.
                        throw new System.ArgumentException.$ctor1("Invalid group name: Group names must begin with a word character.");
                    }

                    return scope._createPatternToken(pattern, tokenTypes.groupConstructName, i, 2 + nameChars.matchLength + 1);
                }

                var imnsxChars = scope._matchChars(pattern, i + 1, endIndex, "imnsx-");

                if (imnsxChars.matchLength > 0 && (imnsxChars.unmatchCh === ":" || imnsxChars.unmatchCh === ")")) {
                    var imnsxTokenType = imnsxChars.unmatchCh === ":" ? tokenTypes.groupConstructImnsx : tokenTypes.groupConstructImnsxMisc;
                    var imnsxPostfixLen = imnsxChars.unmatchCh === ":" ? 1 : 0;

                    return scope._createPatternToken(pattern, imnsxTokenType, i, 1 + imnsxChars.matchLength + imnsxPostfixLen);
                }

                throw new System.ArgumentException.$ctor1("Unrecognized grouping construct.");
            },

            _parseQuantifierToken: function (pattern, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var token = null;

                var ch = pattern[i];

                if (ch === "*" || ch === "+" || ch === "?") {
                    token = scope._createPatternToken(pattern, tokenTypes.quantifier, i, 1);
                    token.data = { val: ch };
                } else if (ch === "{") {
                    var dec1Chars = scope._matchChars(pattern, i + 1, endIndex, scope._decSymbols);

                    if (dec1Chars.matchLength !== 0) {
                        if (dec1Chars.unmatchCh === "}") {
                            token = scope._createPatternToken(pattern, tokenTypes.quantifierN, i, 1 + dec1Chars.matchLength + 1);
                            token.data = {
                                n: parseInt(dec1Chars.match, 10)
                            };
                        } else if (dec1Chars.unmatchCh === ",") {
                            var dec2Chars = scope._matchChars(pattern, dec1Chars.unmatchIndex + 1, endIndex, scope._decSymbols);

                            if (dec2Chars.unmatchCh === "}") {
                                token = scope._createPatternToken(pattern, tokenTypes.quantifierNM, i, 1 + dec1Chars.matchLength + 1 + dec2Chars.matchLength + 1);
                                token.data = {
                                    n: parseInt(dec1Chars.match, 10),
                                    m: null
                                };

                                if (dec2Chars.matchLength !== 0) {
                                    token.data.m = parseInt(dec2Chars.match, 10);

                                    if (token.data.n > token.data.m) {
                                        throw new System.ArgumentException.$ctor1("Illegal {x,y} with x > y.");
                                    }
                                }
                            }
                        }
                    }
                }

                if (token != null) {
                    var nextChIndex = i + token.length;

                    if (nextChIndex < endIndex) {
                        var nextCh = pattern[nextChIndex];

                        if (nextCh === "?") {
                            this._modifyPatternToken(token, pattern, token.type, token.index, token.length + 1);
                            token.data.isLazy = true;
                        }
                    }
                }

                return token;
            },

            _parseAlternationToken: function (pattern, i) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch !== "|") {
                    return null;
                }

                return scope._createPatternToken(pattern, tokenTypes.alternation, i, 1);
            },

            _parseAlternationGroupConditionToken: function (pattern, settings, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var constructToken;
                var childToken;
                var data = null;

                var ch = pattern[i];

                if (ch !== "?" || i + 1 >= endIndex || pattern[i + 1] !== "(") {
                    return null;
                }

                // Parse Alternation condition as a group:
                var expr = scope._parseGroupToken(pattern, settings, i + 1, endIndex);

                if (expr == null) {
                    return null;
                }

                if (expr.type === tokenTypes.commentInline) {
                    throw new System.ArgumentException.$ctor1("Alternation conditions cannot be comments.");
                }

                var children = expr.children;

                if (children && children.length) {
                    constructToken = children[0];

                    if (constructToken.type === tokenTypes.groupConstructName) {
                        throw new System.ArgumentException.$ctor1("Alternation conditions do not capture and cannot be named.");
                    }

                    if (constructToken.type === tokenTypes.groupConstruct || constructToken.type === tokenTypes.groupConstructImnsx) {
                        childToken = scope._findFirstGroupWithoutConstructs(children);

                        if (childToken != null) {
                            childToken.isEmptyCapturing = true;
                        }
                    }

                    if (constructToken.type === tokenTypes.literal) {
                        var literalVal = expr.value.slice(1, expr.value.length - 1);
                        var isDigit = literalVal[0] >= "0" && literalVal[0] <= "9";

                        if (isDigit) {
                            var res = scope._matchChars(literalVal, 0, literalVal.length, scope._decSymbols);

                            if (res.matchLength !== literalVal.length) {
                                throw new System.ArgumentException.$ctor1("Malformed Alternation group number: " + literalVal + ".");
                            }

                            var number = parseInt(literalVal, 10);
                            data = { number: number };
                        } else {
                            data = { name: literalVal };
                        }
                    }
                }

                // Add "Noncapturing" construct if there are no other ones.
                if (!children.length || (children[0].type !== tokenTypes.groupConstruct && children[0].type !== tokenTypes.groupConstructImnsx)) {
                    constructToken = scope._createPatternToken("?:", tokenTypes.groupConstruct, 0, 2);
                    children.splice(0, 0, constructToken);
                }

                // Transform Group token to Alternation expression token:
                var token = scope._createPatternToken(pattern, tokenTypes.alternationGroupCondition, expr.index - 1, 1 + expr.length, [expr], "?", "");

                if (data != null) {
                    token.data = data;
                }

                return token;
            },

            _findFirstGroupWithoutConstructs: function (tokens) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;
                var result = null;
                var token;
                var i;

                for (i = 0; i < tokens.length; ++i) {
                    token = tokens[i];

                    if (token.type === tokenTypes.group && token.children && token.children.length) {
                        if (token.children[0].type !== tokenTypes.groupConstruct && token.children[0].type !== tokenTypes.groupConstructImnsx) {
                            result = token;

                            break;
                        }

                        if (token.children && token.children.length) {
                            result = scope._findFirstGroupWithoutConstructs(token.children);

                            if (result != null) {
                                break;
                            }
                        }
                    }
                }

                return result;
            },

            _parseXModeCommentToken: function (pattern, i, endIndex) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var tokenTypes = scope.tokenTypes;

                var ch = pattern[i];

                if (ch !== "#") {
                    return null;
                }

                var index = i + 1;

                while (index < endIndex) {
                    ch = pattern[index];
                    ++index; // index should be changed before breaking

                    if (ch === "\n") {
                        break;
                    }
                }

                return scope._createPatternToken(pattern, tokenTypes.commentXMode, i, index - i);
            },

            _createLiteralToken: function (body) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;
                var token = scope._createPatternToken(body, scope.tokenTypes.literal, 0, body.length);

                return token;
            },

            _createPositiveLookaheadToken: function (body, settings) {
                var scope = System.Text.RegularExpressions.RegexEngineParser;

                var pattern = "(?=" + body + ")";
                var groupToken = scope._parseGroupToken(pattern, settings, 0, pattern.length);

                return groupToken;
            },

            _createPatternToken: function (pattern, type, i, len, innerTokens, innerTokensPrefix, innerTokensPostfix) {
                var token = {
                    type: type,
                    index: i,
                    length: len,
                    value: pattern.slice(i, i + len)
                };

                if (innerTokens != null && innerTokens.length > 0) {
                    token.children = innerTokens;
                    token.childrenPrefix = innerTokensPrefix;
                    token.childrenPostfix = innerTokensPostfix;
                }

                return token;
            },

            _modifyPatternToken: function (token, pattern, type, i, len) {
                if (type != null) {
                    token.type = type;
                }

                if (i != null || len != null) {
                    if (i != null) {
                        token.index = i;
                    }

                    if (len != null) {
                        token.length = len;
                    }

                    token.value = pattern.slice(token.index, token.index + token.length);
                }
            },

            _updatePatternToken: function (token, type, i, len, value) {
                token.type = type;
                token.index = i;
                token.length = len;
                token.value = value;
            },

            _matchChars: function (str, startIndex, endIndex, allowedChars, maxLength) {
                var res = {
                    match: "",
                    matchIndex: -1,
                    matchLength: 0,
                    unmatchCh: "",
                    unmatchIndex: -1,
                    unmatchLength: 0
                };

                var index = startIndex;
                var ch;

                if (maxLength != null && maxLength >= 0) {
                    endIndex = startIndex + maxLength;
                }

                while (index < endIndex) {
                    ch = str[index];

                    if (allowedChars.indexOf(ch) < 0) {
                        res.unmatchCh = ch;
                        res.unmatchIndex = index;
                        res.unmatchLength = 1;

                        break;
                    }

                    index++;
                }

                if (index > startIndex) {
                    res.match = str.slice(startIndex, index);
                    res.matchIndex = startIndex;
                    res.matchLength = index - startIndex;
                }

                return res;
            },

            _matchUntil: function (str, startIndex, endIndex, unallowedChars, maxLength) {
                var res = {
                    match: "",
                    matchIndex: -1,
                    matchLength: 0,
                    unmatchCh: "",
                    unmatchIndex: -1,
                    unmatchLength: 0
                };

                var index = startIndex;
                var ch;

                if (maxLength != null && maxLength >= 0) {
                    endIndex = startIndex + maxLength;
                }

                while (index < endIndex) {
                    ch = str[index];

                    if (unallowedChars.indexOf(ch) >= 0) {
                        res.unmatchCh = ch;
                        res.unmatchIndex = index;
                        res.unmatchLength = 1;

                        break;
                    }

                    index++;
                }

                if (index > startIndex) {
                    res.match = str.slice(startIndex, index);
                    res.matchIndex = startIndex;
                    res.matchLength = index - startIndex;
                }

                return res;
            }
        }
    });

    // @source BitConverter.js

    Bridge.define("System.BitConverter", {
        statics: {
            fields: {
                isLittleEndian: false,
                arg_ArrayPlusOffTooSmall: null
            },
            ctors: {
                init: function () {
                    this.isLittleEndian = System.BitConverter.getIsLittleEndian();
                    this.arg_ArrayPlusOffTooSmall = "Destination array is not long enough to copy all the items in the collection. Check array index and length.";
                }
            },
            methods: {
                getBytes: function (value) {
                    return value ? System.Array.init([1], System.Byte) : System.Array.init([0], System.Byte);
                },
                getBytes$1: function (value) {
                    return System.BitConverter.getBytes$3(Bridge.Int.sxs(value & 65535));
                },
                getBytes$3: function (value) {
                    var view = System.BitConverter.view(2);
                    view.setInt16(0, value);

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$4: function (value) {
                    var view = System.BitConverter.view(4);
                    view.setInt32(0, value);

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$5: function (value) {
                    var view = System.BitConverter.getView(value);

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$7: function (value) {
                    var view = System.BitConverter.view(2);
                    view.setUint16(0, value);

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$8: function (value) {
                    var view = System.BitConverter.view(4);
                    view.setUint32(0, value);

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$9: function (value) {
                    var view = System.BitConverter.getView(System.Int64.clip64(value));

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$6: function (value) {
                    var view = System.BitConverter.view(4);
                    view.setFloat32(0, value);

                    return System.BitConverter.getViewBytes(view);
                },
                getBytes$2: function (value) {
                    if (isNaN(value)) {
                        if (System.BitConverter.isLittleEndian) {
                            return System.Array.init([0, 0, 0, 0, 0, 0, 248, 255], System.Byte);
                        } else {
                            return System.Array.init([255, 248, 0, 0, 0, 0, 0, 0], System.Byte);
                        }
                    }

                    var view = System.BitConverter.view(8);
                    view.setFloat64(0, value);

                    return System.BitConverter.getViewBytes(view);
                },
                toChar: function (value, startIndex) {
                    return ((System.BitConverter.toInt16(value, startIndex)) & 65535);
                },
                toInt16: function (value, startIndex) {
                    System.BitConverter.checkArguments(value, startIndex, 2);

                    var view = System.BitConverter.view(2);

                    System.BitConverter.setViewBytes(view, value, -1, startIndex);

                    return view.getInt16(0);
                },
                toInt32: function (value, startIndex) {
                    System.BitConverter.checkArguments(value, startIndex, 4);

                    var view = System.BitConverter.view(4);

                    System.BitConverter.setViewBytes(view, value, -1, startIndex);

                    return view.getInt32(0);
                },
                toInt64: function (value, startIndex) {
                    System.BitConverter.checkArguments(value, startIndex, 8);

                    var low = System.BitConverter.toInt32(value, startIndex);
                    var high = System.BitConverter.toInt32(value, ((startIndex + 4) | 0));

                    if (System.BitConverter.isLittleEndian) {
                        return System.Int64([low, high]);
                    }

                    return System.Int64([high, low]);
                },
                toUInt16: function (value, startIndex) {
                    return ((System.BitConverter.toInt16(value, startIndex)) & 65535);
                },
                toUInt32: function (value, startIndex) {
                    return ((System.BitConverter.toInt32(value, startIndex)) >>> 0);
                },
                toUInt64: function (value, startIndex) {
                    var l = System.BitConverter.toInt64(value, startIndex);

                    return System.UInt64([l.value.low, l.value.high]);
                },
                toSingle: function (value, startIndex) {
                    System.BitConverter.checkArguments(value, startIndex, 4);

                    var view = System.BitConverter.view(4);

                    System.BitConverter.setViewBytes(view, value, -1, startIndex);

                    return view.getFloat32(0);
                },
                toDouble: function (value, startIndex) {
                    System.BitConverter.checkArguments(value, startIndex, 8);

                    var view = System.BitConverter.view(8);

                    System.BitConverter.setViewBytes(view, value, -1, startIndex);

                    return view.getFloat64(0);
                },
                toString$2: function (value, startIndex, length) {
                    if (value == null) {
                        throw new System.ArgumentNullException.$ctor1("value");
                    }

                    if (startIndex < 0 || startIndex >= value.length && startIndex > 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                    }

                    if (length < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("length");
                    }

                    if (startIndex > ((value.length - length) | 0)) {
                        throw new System.ArgumentException.$ctor1(System.BitConverter.arg_ArrayPlusOffTooSmall);
                    }

                    if (length === 0) {
                        return "";
                    }

                    if (length > (715827882)) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("length", Bridge.toString((715827882)));
                    }

                    var chArrayLength = Bridge.Int.mul(length, 3);

                    var chArray = System.Array.init(chArrayLength, 0, System.Char);
                    var i = 0;
                    var index = startIndex;

                    for (i = 0; i < chArrayLength; i = (i + 3) | 0) {
                        var b = value[System.Array.index(Bridge.identity(index, (index = (index + 1) | 0)), value)];
                        chArray[System.Array.index(i, chArray)] = System.BitConverter.getHexValue(((Bridge.Int.div(b, 16)) | 0));
                        chArray[System.Array.index(((i + 1) | 0), chArray)] = System.BitConverter.getHexValue(b % 16);
                        chArray[System.Array.index(((i + 2) | 0), chArray)] = 45;
                    }

                    return System.String.fromCharArray(chArray, 0, ((chArray.length - 1) | 0));
                },
                toString: function (value) {
                    if (value == null) {
                        throw new System.ArgumentNullException.$ctor1("value");
                    }

                    return System.BitConverter.toString$2(value, 0, value.length);
                },
                toString$1: function (value, startIndex) {
                    if (value == null) {
                        throw new System.ArgumentNullException.$ctor1("value");
                    }

                    return System.BitConverter.toString$2(value, startIndex, ((value.length - startIndex) | 0));
                },
                toBoolean: function (value, startIndex) {
                    System.BitConverter.checkArguments(value, startIndex, 1);

                    return (value[System.Array.index(startIndex, value)] === 0) ? false : true;
                },
                doubleToInt64Bits: function (value) {
                    var view = System.BitConverter.view(8);
                    view.setFloat64(0, value);

                    return System.Int64([view.getInt32(4), view.getInt32(0)]);
                },
                int64BitsToDouble: function (value) {
                    var view = System.BitConverter.getView(value);

                    return view.getFloat64(0);
                },
                getHexValue: function (i) {
                    if (i < 10) {
                        return ((((i + 48) | 0)) & 65535);
                    }

                    return ((((((i - 10) | 0) + 65) | 0)) & 65535);
                },
                getViewBytes: function (view, count, startIndex) {
                    if (count === void 0) { count = -1; }
                    if (startIndex === void 0) { startIndex = 0; }
                    if (count === -1) {
                        count = view.byteLength;
                    }

                    var r = System.Array.init(count, 0, System.Byte);

                    if (System.BitConverter.isLittleEndian) {
                        for (var i = (count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                            r[System.Array.index(i, r)] = view.getUint8(Bridge.identity(startIndex, (startIndex = (startIndex + 1) | 0)));
                        }
                    } else {
                        for (var i1 = 0; i1 < count; i1 = (i1 + 1) | 0) {
                            r[System.Array.index(i1, r)] = view.getUint8(Bridge.identity(startIndex, (startIndex = (startIndex + 1) | 0)));
                        }
                    }

                    return r;
                },
                setViewBytes: function (view, value, count, startIndex) {
                    if (count === void 0) { count = -1; }
                    if (startIndex === void 0) { startIndex = 0; }
                    if (count === -1) {
                        count = view.byteLength;
                    }

                    if (System.BitConverter.isLittleEndian) {
                        for (var i = (count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                            view.setUint8(i, value[System.Array.index(Bridge.identity(startIndex, (startIndex = (startIndex + 1) | 0)), value)]);
                        }
                    } else {
                        for (var i1 = 0; i1 < count; i1 = (i1 + 1) | 0) {
                            view.setUint8(i1, value[System.Array.index(Bridge.identity(startIndex, (startIndex = (startIndex + 1) | 0)), value)]);
                        }
                    }
                },
                view: function (length) {
                    var buffer = new ArrayBuffer(length);
                    var view = new DataView(buffer);

                    return view;
                },
                getView: function (value) {
                    var view = System.BitConverter.view(8);

                    view.setInt32(4, value.value.low);
                    view.setInt32(0, value.value.high);

                    return view;
                },
                getIsLittleEndian: function () {
                    var view = System.BitConverter.view(2);

                    view.setUint8(0, 170);
                    view.setUint8(1, 187);

                    if (view.getUint16(0) === 43707) {
                        return true;
                    }

                    return false;
                },
                checkArguments: function (value, startIndex, size) {
                    if (value == null) {
                        throw new System.ArgumentNullException.$ctor1("null");
                    }

                    if (System.Int64((startIndex >>> 0)).gte(System.Int64(value.length))) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("startIndex");
                    }

                    if (startIndex > ((value.length - size) | 0)) {
                        throw new System.ArgumentException.$ctor1(System.BitConverter.arg_ArrayPlusOffTooSmall);
                    }
                }
            }
        }
    });

    // @source BitArray.js

    Bridge.define("System.Collections.BitArray", {
        inherits: [System.Collections.ICollection,System.ICloneable],
        statics: {
            fields: {
                BitsPerInt32: 0,
                BytesPerInt32: 0,
                BitsPerByte: 0,
                _ShrinkThreshold: 0
            },
            ctors: {
                init: function () {
                    this.BitsPerInt32 = 32;
                    this.BytesPerInt32 = 4;
                    this.BitsPerByte = 8;
                    this._ShrinkThreshold = 256;
                }
            },
            methods: {
                GetArrayLength: function (n, div) {
                    return n > 0 ? ((((((Bridge.Int.div((((n - 1) | 0)), div)) | 0)) + 1) | 0)) : 0;
                }
            }
        },
        fields: {
            m_array: null,
            m_length: 0,
            _version: 0
        },
        props: {
            Length: {
                get: function () {
                    return this.m_length;
                },
                set: function (value) {
                    if (value < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("value", "Non-negative number required.");
                    }

                    var newints = System.Collections.BitArray.GetArrayLength(value, System.Collections.BitArray.BitsPerInt32);
                    if (newints > this.m_array.length || ((newints + System.Collections.BitArray._ShrinkThreshold) | 0) < this.m_array.length) {
                        var newarray = System.Array.init(newints, 0, System.Int32);
                        System.Array.copy(this.m_array, 0, newarray, 0, newints > this.m_array.length ? this.m_array.length : newints);
                        this.m_array = newarray;
                    }

                    if (value > this.m_length) {
                        var last = (System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32) - 1) | 0;
                        var bits = this.m_length % 32;
                        if (bits > 0) {
                            this.m_array[System.Array.index(last, this.m_array)] = this.m_array[System.Array.index(last, this.m_array)] & ((((1 << bits) - 1) | 0));
                        }

                        System.Array.fill(this.m_array, 0, ((last + 1) | 0), ((((newints - last) | 0) - 1) | 0));
                    }

                    this.m_length = value;
                    this._version = (this._version + 1) | 0;
                }
            },
            Count: {
                get: function () {
                    return this.m_length;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return this;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "copyTo", "System$Collections$ICollection$copyTo",
            "Count", "System$Collections$ICollection$Count",
            "clone", "System$ICloneable$clone",
            "GetEnumerator", "System$Collections$IEnumerable$GetEnumerator"
        ],
        ctors: {
            $ctor3: function (length) {
                System.Collections.BitArray.$ctor4.call(this, length, false);
            },
            $ctor4: function (length, defaultValue) {
                this.$initialize();
                if (length < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("length", "Index is less than zero.");
                }

                this.m_array = System.Array.init(System.Collections.BitArray.GetArrayLength(length, System.Collections.BitArray.BitsPerInt32), 0, System.Int32);
                this.m_length = length;

                var fillValue = defaultValue ? (-1) : 0;
                for (var i = 0; i < this.m_array.length; i = (i + 1) | 0) {
                    this.m_array[System.Array.index(i, this.m_array)] = fillValue;
                }

                this._version = 0;
            },
            $ctor1: function (bytes) {
                this.$initialize();
                if (bytes == null) {
                    throw new System.ArgumentNullException.$ctor1("bytes");
                }
                if (bytes.length > 268435455) {
                    throw new System.ArgumentException.$ctor3(System.String.format("The input array length must not exceed Int32.MaxValue / {0}. Otherwise BitArray.Length would exceed Int32.MaxValue.", [Bridge.box(System.Collections.BitArray.BitsPerByte, System.Int32)]), "bytes");
                }

                this.m_array = System.Array.init(System.Collections.BitArray.GetArrayLength(bytes.length, System.Collections.BitArray.BytesPerInt32), 0, System.Int32);
                this.m_length = Bridge.Int.mul(bytes.length, System.Collections.BitArray.BitsPerByte);

                var i = 0;
                var j = 0;
                while (((bytes.length - j) | 0) >= 4) {
                    this.m_array[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), this.m_array)] = (bytes[System.Array.index(j, bytes)] & 255) | ((bytes[System.Array.index(((j + 1) | 0), bytes)] & 255) << 8) | ((bytes[System.Array.index(((j + 2) | 0), bytes)] & 255) << 16) | ((bytes[System.Array.index(((j + 3) | 0), bytes)] & 255) << 24);
                    j = (j + 4) | 0;
                }

                var r = (bytes.length - j) | 0;
                if (r === 3) {
                    this.m_array[System.Array.index(i, this.m_array)] = ((bytes[System.Array.index(((j + 2) | 0), bytes)] & 255) << 16);
                    r = 2;
                }

                if (r === 2) {
                    this.m_array[System.Array.index(i, this.m_array)] = this.m_array[System.Array.index(i, this.m_array)] | ((bytes[System.Array.index(((j + 1) | 0), bytes)] & 255) << 8);
                    r = 1;
                }

                if (r === 1) {
                    this.m_array[System.Array.index(i, this.m_array)] = this.m_array[System.Array.index(i, this.m_array)] | (bytes[System.Array.index(j, bytes)] & 255);
                }

                this._version = 0;
            },
            ctor: function (values) {
                var $t;
                this.$initialize();
                if (values == null) {
                    throw new System.ArgumentNullException.$ctor1("values");
                }

                this.m_array = System.Array.init(System.Collections.BitArray.GetArrayLength(values.length, System.Collections.BitArray.BitsPerInt32), 0, System.Int32);
                this.m_length = values.length;

                for (var i = 0; i < values.length; i = (i + 1) | 0) {
                    if (values[System.Array.index(i, values)]) {
                        this.m_array[System.Array.index(($t = ((Bridge.Int.div(i, 32)) | 0)), this.m_array)] = this.m_array[System.Array.index($t, this.m_array)] | (1 << (i % 32));
                    }
                }

                this._version = 0;
            },
            $ctor5: function (values) {
                this.$initialize();
                if (values == null) {
                    throw new System.ArgumentNullException.$ctor1("values");
                }
                if (values.length > 67108863) {
                    throw new System.ArgumentException.$ctor3(System.String.format("The input array length must not exceed Int32.MaxValue / {0}. Otherwise BitArray.Length would exceed Int32.MaxValue.", [Bridge.box(System.Collections.BitArray.BitsPerInt32, System.Int32)]), "values");
                }

                this.m_array = System.Array.init(values.length, 0, System.Int32);
                this.m_length = Bridge.Int.mul(values.length, System.Collections.BitArray.BitsPerInt32);

                System.Array.copy(values, 0, this.m_array, 0, values.length);

                this._version = 0;
            },
            $ctor2: function (bits) {
                this.$initialize();
                if (bits == null) {
                    throw new System.ArgumentNullException.$ctor1("bits");
                }

                var arrayLength = System.Collections.BitArray.GetArrayLength(bits.m_length, System.Collections.BitArray.BitsPerInt32);
                this.m_array = System.Array.init(arrayLength, 0, System.Int32);
                this.m_length = bits.m_length;

                System.Array.copy(bits.m_array, 0, this.m_array, 0, arrayLength);

                this._version = bits._version;
            }
        },
        methods: {
            getItem: function (index) {
                return this.Get(index);
            },
            setItem: function (index, value) {
                this.Set(index, value);
            },
            copyTo: function (array, index) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor1("Only single dimensional arrays are supported for the requested action.");
                }

                if (Bridge.is(array, System.Array.type(System.Int32))) {
                    System.Array.copy(this.m_array, 0, array, index, System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32));
                } else if (Bridge.is(array, System.Array.type(System.Byte))) {
                    var arrayLength = System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerByte);
                    if ((((array.length - index) | 0)) < arrayLength) {
                        throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
                    }

                    var b = Bridge.cast(array, System.Array.type(System.Byte));
                    for (var i = 0; i < arrayLength; i = (i + 1) | 0) {
                        b[System.Array.index(((index + i) | 0), b)] = ((this.m_array[System.Array.index(((Bridge.Int.div(i, 4)) | 0), this.m_array)] >> (Bridge.Int.mul((i % 4), 8))) & 255) & 255;
                    }
                } else if (Bridge.is(array, System.Array.type(System.Boolean))) {
                    if (((array.length - index) | 0) < this.m_length) {
                        throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
                    }

                    var b1 = Bridge.cast(array, System.Array.type(System.Boolean));
                    for (var i1 = 0; i1 < this.m_length; i1 = (i1 + 1) | 0) {
                        b1[System.Array.index(((index + i1) | 0), b1)] = ((this.m_array[System.Array.index(((Bridge.Int.div(i1, 32)) | 0), this.m_array)] >> (i1 % 32)) & 1) !== 0;
                    }
                } else {
                    throw new System.ArgumentException.$ctor1("Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[].");
                }
            },
            Get: function (index) {
                if (index < 0 || index >= this.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("index", "Index was out of range. Must be non-negative and less than the size of the collection.");
                }

                return (this.m_array[System.Array.index(((Bridge.Int.div(index, 32)) | 0), this.m_array)] & (1 << (index % 32))) !== 0;
            },
            Set: function (index, value) {
                var $t, $t1;
                if (index < 0 || index >= this.Length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("index", "Index was out of range. Must be non-negative and less than the size of the collection.");
                }

                if (value) {
                    this.m_array[System.Array.index(($t = ((Bridge.Int.div(index, 32)) | 0)), this.m_array)] = this.m_array[System.Array.index($t, this.m_array)] | (1 << (index % 32));
                } else {
                    this.m_array[System.Array.index(($t1 = ((Bridge.Int.div(index, 32)) | 0)), this.m_array)] = this.m_array[System.Array.index($t1, this.m_array)] & (~(1 << (index % 32)));
                }

                this._version = (this._version + 1) | 0;
            },
            SetAll: function (value) {
                var fillValue = value ? (-1) : 0;
                var ints = System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32);
                for (var i = 0; i < ints; i = (i + 1) | 0) {
                    this.m_array[System.Array.index(i, this.m_array)] = fillValue;
                }

                this._version = (this._version + 1) | 0;
            },
            And: function (value) {
                if (value == null) {
                    throw new System.ArgumentNullException.$ctor1("value");
                }
                if (this.Length !== value.Length) {
                    throw new System.ArgumentException.$ctor1("Array lengths must be the same.");
                }

                var ints = System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32);
                for (var i = 0; i < ints; i = (i + 1) | 0) {
                    this.m_array[System.Array.index(i, this.m_array)] = this.m_array[System.Array.index(i, this.m_array)] & value.m_array[System.Array.index(i, value.m_array)];
                }

                this._version = (this._version + 1) | 0;
                return this;
            },
            Or: function (value) {
                if (value == null) {
                    throw new System.ArgumentNullException.$ctor1("value");
                }
                if (this.Length !== value.Length) {
                    throw new System.ArgumentException.$ctor1("Array lengths must be the same.");
                }

                var ints = System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32);
                for (var i = 0; i < ints; i = (i + 1) | 0) {
                    this.m_array[System.Array.index(i, this.m_array)] = this.m_array[System.Array.index(i, this.m_array)] | value.m_array[System.Array.index(i, value.m_array)];
                }

                this._version = (this._version + 1) | 0;
                return this;
            },
            Xor: function (value) {
                if (value == null) {
                    throw new System.ArgumentNullException.$ctor1("value");
                }
                if (this.Length !== value.Length) {
                    throw new System.ArgumentException.$ctor1("Array lengths must be the same.");
                }

                var ints = System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32);
                for (var i = 0; i < ints; i = (i + 1) | 0) {
                    this.m_array[System.Array.index(i, this.m_array)] = this.m_array[System.Array.index(i, this.m_array)] ^ value.m_array[System.Array.index(i, value.m_array)];
                }

                this._version = (this._version + 1) | 0;
                return this;
            },
            Not: function () {
                var ints = System.Collections.BitArray.GetArrayLength(this.m_length, System.Collections.BitArray.BitsPerInt32);
                for (var i = 0; i < ints; i = (i + 1) | 0) {
                    this.m_array[System.Array.index(i, this.m_array)] = ~this.m_array[System.Array.index(i, this.m_array)];
                }

                this._version = (this._version + 1) | 0;
                return this;
            },
            clone: function () {
                var bitArray = new System.Collections.BitArray.$ctor5(this.m_array);
                bitArray._version = this._version;
                bitArray.m_length = this.m_length;
                return bitArray;
            },
            GetEnumerator: function () {
                return new System.Collections.BitArray.BitArrayEnumeratorSimple(this);
            }
        }
    });

    // @source BitArrayEnumeratorSimple.js

    Bridge.define("System.Collections.BitArray.BitArrayEnumeratorSimple", {
        inherits: [System.Collections.IEnumerator],
        $kind: "nested class",
        fields: {
            bitarray: null,
            index: 0,
            version: 0,
            currentElement: false
        },
        props: {
            Current: {
                get: function () {
                    if (this.index === -1) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has not started. Call MoveNext.");
                    }
                    if (this.index >= this.bitarray.Count) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration already finished.");
                    }
                    return Bridge.box(this.currentElement, System.Boolean, System.Boolean.toString);
                }
            }
        },
        alias: [
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", "System$Collections$IEnumerator$Current",
            "reset", "System$Collections$IEnumerator$reset"
        ],
        ctors: {
            ctor: function (bitarray) {
                this.$initialize();
                this.bitarray = bitarray;
                this.index = -1;
                this.version = bitarray._version;
            }
        },
        methods: {
            moveNext: function () {
                if (this.version !== this.bitarray._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                if (this.index < (((this.bitarray.Count - 1) | 0))) {
                    this.index = (this.index + 1) | 0;
                    this.currentElement = this.bitarray.Get(this.index);
                    return true;
                } else {
                    this.index = this.bitarray.Count;
                }

                return false;
            },
            reset: function () {
                if (this.version !== this.bitarray._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                this.index = -1;
            }
        }
    });

    // @source BitHelper.js

    Bridge.define("System.Collections.Generic.BitHelper", {
        statics: {
            fields: {
                MarkedBitFlag: 0,
                IntSize: 0
            },
            ctors: {
                init: function () {
                    this.MarkedBitFlag = 1;
                    this.IntSize = 32;
                }
            },
            methods: {
                ToIntArrayLength: function (n) {
                    return n > 0 ? (((((Bridge.Int.div((((n - 1) | 0)), System.Collections.Generic.BitHelper.IntSize)) | 0) + 1) | 0)) : 0;
                }
            }
        },
        fields: {
            _length: 0,
            _array: null
        },
        ctors: {
            ctor: function (bitArray, length) {
                this.$initialize();
                this._array = bitArray;
                this._length = length;
            }
        },
        methods: {
            MarkBit: function (bitPosition) {
                var bitArrayIndex = (Bridge.Int.div(bitPosition, System.Collections.Generic.BitHelper.IntSize)) | 0;
                if (bitArrayIndex < this._length && bitArrayIndex >= 0) {
                    var flag = (System.Collections.Generic.BitHelper.MarkedBitFlag << (bitPosition % System.Collections.Generic.BitHelper.IntSize));
                    this._array[System.Array.index(bitArrayIndex, this._array)] = this._array[System.Array.index(bitArrayIndex, this._array)] | flag;
                }
            },
            IsMarked: function (bitPosition) {
                var bitArrayIndex = (Bridge.Int.div(bitPosition, System.Collections.Generic.BitHelper.IntSize)) | 0;
                if (bitArrayIndex < this._length && bitArrayIndex >= 0) {
                    var flag = (System.Collections.Generic.BitHelper.MarkedBitFlag << (bitPosition % System.Collections.Generic.BitHelper.IntSize));
                    return ((this._array[System.Array.index(bitArrayIndex, this._array)] & flag) !== 0);
                }
                return false;
            }
        }
    });

    // @source DictionaryKeyCollectionDebugView.js

    Bridge.define("System.Collections.Generic.DictionaryKeyCollectionDebugView$2", function (TKey, TValue) { return {
        fields: {
            _collection: null
        },
        props: {
            Items: {
                get: function () {
                    var items = System.Array.init(System.Array.getCount(this._collection, TKey), function (){
                        return Bridge.getDefaultValue(TKey);
                    }, TKey);
                    System.Array.copyTo(this._collection, items, 0, TKey);
                    return items;
                }
            }
        },
        ctors: {
            ctor: function (collection) {
                this.$initialize();
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }

                this._collection = collection;
            }
        }
    }; });

    // @source DictionaryValueCollectionDebugView.js

    Bridge.define("System.Collections.Generic.DictionaryValueCollectionDebugView$2", function (TKey, TValue) { return {
        fields: {
            _collection: null
        },
        props: {
            Items: {
                get: function () {
                    var items = System.Array.init(System.Array.getCount(this._collection, TValue), function (){
                        return Bridge.getDefaultValue(TValue);
                    }, TValue);
                    System.Array.copyTo(this._collection, items, 0, TValue);
                    return items;
                }
            }
        },
        ctors: {
            ctor: function (collection) {
                this.$initialize();
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }

                this._collection = collection;
            }
        }
    }; });

    // @source EnumerableHelpers.js

    Bridge.define("Bridge.Collections.EnumerableHelpers", {
        statics: {
            methods: {
                ToArray: function (T, source) {
                    var count = { };
                    var results = { v : Bridge.Collections.EnumerableHelpers.ToArray$1(T, source, count) };
                    System.Array.resize(results, count.v, Bridge.getDefaultValue(T));
                    return results.v;
                },
                ToArray$1: function (T, source, length) {
                    var en = Bridge.getEnumerator(source, T);
                    try {
                        if (en.System$Collections$IEnumerator$moveNext()) {
                            var DefaultCapacity = 4;
                            var arr = { v : System.Array.init(DefaultCapacity, function (){
                                return Bridge.getDefaultValue(T);
                            }, T) };
                            arr.v[System.Array.index(0, arr.v)] = en[Bridge.geti(en, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")];
                            var count = 1;

                            while (en.System$Collections$IEnumerator$moveNext()) {
                                if (count === arr.v.length) {
                                    var MaxArrayLength = 2146435071;

                                    var newLength = count << 1;
                                    if ((newLength >>> 0) > MaxArrayLength) {
                                        newLength = MaxArrayLength <= count ? ((count + 1) | 0) : MaxArrayLength;
                                    }

                                    System.Array.resize(arr, newLength, Bridge.getDefaultValue(T));
                                }

                                arr.v[System.Array.index(Bridge.identity(count, (count = (count + 1) | 0)), arr.v)] = en[Bridge.geti(en, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")];
                            }

                            length.v = count;
                            return arr.v;
                        }
                    }
                    finally {
                        if (Bridge.hasValue(en)) {
                            en.System$IDisposable$Dispose();
                        }
                    }

                    length.v = 0;
                    return System.Array.init(0, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }
            }
        }
    });

    // @source HashSet.js

    Bridge.define("System.Collections.Generic.HashSet$1", function (T) { return {
        inherits: [System.Collections.Generic.ICollection$1(T),System.Collections.Generic.ISet$1(T),System.Collections.Generic.IReadOnlyCollection$1(T)],
        statics: {
            fields: {
                Lower31BitMask: 0,
                ShrinkThreshold: 0
            },
            ctors: {
                init: function () {
                    this.Lower31BitMask = 2147483647;
                    this.ShrinkThreshold = 3;
                }
            },
            methods: {
                HashSetEquals: function (set1, set2, comparer) {
                    var $t, $t1, $t2;
                    if (set1 == null) {
                        return (set2 == null);
                    } else if (set2 == null) {
                        return false;
                    }
                    if (System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(set1, set2)) {
                        if (set1.Count !== set2.Count) {
                            return false;
                        }
                        $t = Bridge.getEnumerator(set2);
                        try {
                            while ($t.moveNext()) {
                                var item = $t.Current;
                                if (!set1.contains(item)) {
                                    return false;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }return true;
                    } else {
                        $t1 = Bridge.getEnumerator(set2);
                        try {
                            while ($t1.moveNext()) {
                                var set2Item = $t1.Current;
                                var found = false;
                                $t2 = Bridge.getEnumerator(set1);
                                try {
                                    while ($t2.moveNext()) {
                                        var set1Item = $t2.Current;
                                        if (comparer[Bridge.geti(comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](set2Item, set1Item)) {
                                            found = true;
                                            break;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }if (!found) {
                                    return false;
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }return true;
                    }
                },
                AreEqualityComparersEqual: function (set1, set2) {
                    return Bridge.equals(set1.Comparer, set2.Comparer);
                }
            }
        },
        fields: {
            _buckets: null,
            _slots: null,
            _count: 0,
            _lastIndex: 0,
            _freeList: 0,
            _comparer: null,
            _version: 0
        },
        props: {
            Count: {
                get: function () {
                    return this._count;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            },
            Comparer: {
                get: function () {
                    return this._comparer;
                }
            }
        },
        alias: [
            "System$Collections$Generic$ICollection$1$add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "Count", ["System$Collections$Generic$IReadOnlyCollection$1$" + Bridge.getTypeAlias(T) + "$Count", "System$Collections$Generic$IReadOnlyCollection$1$Count"],
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator",
            "add", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$add",
            "unionWith", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$unionWith",
            "intersectWith", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$intersectWith",
            "exceptWith", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$exceptWith",
            "symmetricExceptWith", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$symmetricExceptWith",
            "isSubsetOf", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isSubsetOf",
            "isProperSubsetOf", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isProperSubsetOf",
            "isSupersetOf", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isSupersetOf",
            "isProperSupersetOf", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isProperSupersetOf",
            "overlaps", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$overlaps",
            "setEquals", "System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$setEquals"
        ],
        ctors: {
            ctor: function () {
                System.Collections.Generic.HashSet$1(T).$ctor3.call(this, System.Collections.Generic.EqualityComparer$1(T).def);
            },
            $ctor3: function (comparer) {
                this.$initialize();
                if (comparer == null) {
                    comparer = System.Collections.Generic.EqualityComparer$1(T).def;
                }
                this._comparer = comparer;
                this._lastIndex = 0;
                this._count = 0;
                this._freeList = -1;
                this._version = 0;
            },
            $ctor1: function (collection) {
                System.Collections.Generic.HashSet$1(T).$ctor2.call(this, collection, System.Collections.Generic.EqualityComparer$1(T).def);
            },
            $ctor2: function (collection, comparer) {
                System.Collections.Generic.HashSet$1(T).$ctor3.call(this, comparer);
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }
                var suggestedCapacity = 0;
                var coll = Bridge.as(collection, System.Collections.Generic.ICollection$1(T));
                if (coll != null) {
                    suggestedCapacity = System.Array.getCount(coll, T);
                }
                this.Initialize(suggestedCapacity);
                this.unionWith(collection);
                if ((this._count === 0 && this._slots.length > System.Collections.HashHelpers.GetMinPrime()) || (this._count > 0 && ((Bridge.Int.div(this._slots.length, this._count)) | 0) > System.Collections.Generic.HashSet$1(T).ShrinkThreshold)) {
                    this.TrimExcess();
                }
            }
        },
        methods: {
            System$Collections$Generic$ICollection$1$add: function (item) {
                this.AddIfNotPresent(item);
            },
            add: function (item) {
                return this.AddIfNotPresent(item);
            },
            clear: function () {
                if (this._lastIndex > 0) {
                    for (var i = 0; i < this._lastIndex; i = (i + 1) | 0) {
                        this._slots[System.Array.index(i, this._slots)] = new (System.Collections.Generic.HashSet$1.Slot(T))();
                    }

                    for (var i1 = 0; i1 < this._buckets.length; i1 = (i1 + 1) | 0) {
                        this._buckets[System.Array.index(i1, this._buckets)] = 0;
                    }

                    this._lastIndex = 0;
                    this._count = 0;
                    this._freeList = -1;
                }
                this._version = (this._version + 1) | 0;
            },
            ArrayClear: function (array, index, length) { },
            contains: function (item) {
                if (this._buckets != null) {
                    var hashCode = this.InternalGetHashCode(item);
                    for (var i = (this._buckets[System.Array.index(hashCode % this._buckets.length, this._buckets)] - 1) | 0; i >= 0; i = this._slots[System.Array.index(i, this._slots)].next) {
                        if (this._slots[System.Array.index(i, this._slots)].hashCode === hashCode && this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](this._slots[System.Array.index(i, this._slots)].value, item)) {
                            return true;
                        }
                    }
                }
                return false;
            },
            copyTo: function (array, arrayIndex) {
                this.CopyTo$1(array, arrayIndex, this._count);
            },
            CopyTo: function (array) {
                this.CopyTo$1(array, 0, this._count);
            },
            CopyTo$1: function (array, arrayIndex, count) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }
                if (arrayIndex < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("arrayIndex");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (arrayIndex > array.length || count > ((array.length - arrayIndex) | 0)) {
                    throw new System.ArgumentException.$ctor1("Destination array is not long enough to copy all the items in the collection. Check array index and length.");
                }
                var numCopied = 0;
                for (var i = 0; i < this._lastIndex && numCopied < count; i = (i + 1) | 0) {
                    if (this._slots[System.Array.index(i, this._slots)].hashCode >= 0) {
                        array[System.Array.index(((arrayIndex + numCopied) | 0), array)] = this._slots[System.Array.index(i, this._slots)].value;
                        numCopied = (numCopied + 1) | 0;
                    }
                }
            },
            remove: function (item) {
                if (this._buckets != null) {
                    var hashCode = this.InternalGetHashCode(item);
                    var bucket = hashCode % this._buckets.length;
                    var last = -1;
                    for (var i = (this._buckets[System.Array.index(bucket, this._buckets)] - 1) | 0; i >= 0; last = i, i = this._slots[System.Array.index(i, this._slots)].next) {
                        if (this._slots[System.Array.index(i, this._slots)].hashCode === hashCode && this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](this._slots[System.Array.index(i, this._slots)].value, item)) {
                            if (last < 0) {
                                this._buckets[System.Array.index(bucket, this._buckets)] = (this._slots[System.Array.index(i, this._slots)].next + 1) | 0;
                            } else {
                                this._slots[System.Array.index(last, this._slots)].next = this._slots[System.Array.index(i, this._slots)].next;
                            }
                            this._slots[System.Array.index(i, this._slots)].hashCode = -1;
                            this._slots[System.Array.index(i, this._slots)].value = Bridge.getDefaultValue(T);
                            this._slots[System.Array.index(i, this._slots)].next = this._freeList;
                            this._count = (this._count - 1) | 0;
                            this._version = (this._version + 1) | 0;
                            if (this._count === 0) {
                                this._lastIndex = 0;
                                this._freeList = -1;
                            } else {
                                this._freeList = i;
                            }
                            return true;
                        }
                    }
                }
                return false;
            },
            GetEnumerator: function () {
                return new (System.Collections.Generic.HashSet$1.Enumerator(T)).$ctor1(this);
            },
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                return new (System.Collections.Generic.HashSet$1.Enumerator(T)).$ctor1(this).$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (System.Collections.Generic.HashSet$1.Enumerator(T)).$ctor1(this).$clone();
            },
            unionWith: function (other) {
                var $t;
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                $t = Bridge.getEnumerator(other, T);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.AddIfNotPresent(item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            intersectWith: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                if (this._count === 0) {
                    return;
                }
                var otherAsCollection = Bridge.as(other, System.Collections.Generic.ICollection$1(T));
                if (otherAsCollection != null) {
                    if (System.Array.getCount(otherAsCollection, T) === 0) {
                        this.clear();
                        return;
                    }
                    var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                    if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                        this.IntersectWithHashSetWithSameEC(otherAsSet);
                        return;
                    }
                }
                this.IntersectWithEnumerable(other);
            },
            exceptWith: function (other) {
                var $t;
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                if (this._count === 0) {
                    return;
                }
                if (Bridge.referenceEquals(other, this)) {
                    this.clear();
                    return;
                }
                $t = Bridge.getEnumerator(other, T);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        this.remove(element);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            symmetricExceptWith: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                if (this._count === 0) {
                    this.unionWith(other);
                    return;
                }
                if (Bridge.referenceEquals(other, this)) {
                    this.clear();
                    return;
                }
                var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                    this.SymmetricExceptWithUniqueHashSet(otherAsSet);
                } else {
                    this.SymmetricExceptWithEnumerable(other);
                }
            },
            isSubsetOf: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                if (this._count === 0) {
                    return true;
                }
                var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                    if (this._count > otherAsSet.Count) {
                        return false;
                    }
                    return this.IsSubsetOfHashSetWithSameEC(otherAsSet);
                } else {
                    var result = this.CheckUniqueAndUnfoundElements(other, false);
                    return (result.uniqueCount === this._count && result.unfoundCount >= 0);
                }
            },
            isProperSubsetOf: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                var otherAsCollection = Bridge.as(other, System.Collections.Generic.ICollection$1(T));
                if (otherAsCollection != null) {
                    if (this._count === 0) {
                        return System.Array.getCount(otherAsCollection, T) > 0;
                    }
                    var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                    if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                        if (this._count >= otherAsSet.Count) {
                            return false;
                        }
                        return this.IsSubsetOfHashSetWithSameEC(otherAsSet);
                    }
                }
                var result = this.CheckUniqueAndUnfoundElements(other, false);
                return (result.uniqueCount === this._count && result.unfoundCount > 0);
            },
            isSupersetOf: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                var otherAsCollection = Bridge.as(other, System.Collections.Generic.ICollection$1(T));
                if (otherAsCollection != null) {
                    if (System.Array.getCount(otherAsCollection, T) === 0) {
                        return true;
                    }
                    var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                    if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                        if (otherAsSet.Count > this._count) {
                            return false;
                        }
                    }
                }
                return this.ContainsAllElements(other);
            },
            isProperSupersetOf: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                if (this._count === 0) {
                    return false;
                }
                var otherAsCollection = Bridge.as(other, System.Collections.Generic.ICollection$1(T));
                if (otherAsCollection != null) {
                    if (System.Array.getCount(otherAsCollection, T) === 0) {
                        return true;
                    }
                    var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                    if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                        if (otherAsSet.Count >= this._count) {
                            return false;
                        }
                        return this.ContainsAllElements(otherAsSet);
                    }
                }
                var result = this.CheckUniqueAndUnfoundElements(other, true);
                return (result.uniqueCount < this._count && result.unfoundCount === 0);
            },
            overlaps: function (other) {
                var $t;
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                if (this._count === 0) {
                    return false;
                }
                $t = Bridge.getEnumerator(other, T);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        if (this.contains(element)) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return false;
            },
            setEquals: function (other) {
                if (other == null) {
                    throw new System.ArgumentNullException.$ctor1("other");
                }
                var otherAsSet = Bridge.as(other, System.Collections.Generic.HashSet$1(T));
                if (otherAsSet != null && System.Collections.Generic.HashSet$1(T).AreEqualityComparersEqual(this, otherAsSet)) {
                    if (this._count !== otherAsSet.Count) {
                        return false;
                    }
                    return this.ContainsAllElements(otherAsSet);
                } else {
                    var otherAsCollection = Bridge.as(other, System.Collections.Generic.ICollection$1(T));
                    if (otherAsCollection != null) {
                        if (this._count === 0 && System.Array.getCount(otherAsCollection, T) > 0) {
                            return false;
                        }
                    }
                    var result = this.CheckUniqueAndUnfoundElements(other, true);
                    return (result.uniqueCount === this._count && result.unfoundCount === 0);
                }
            },
            RemoveWhere: function (match) {
                if (Bridge.staticEquals(match, null)) {
                    throw new System.ArgumentNullException.$ctor1("match");
                }
                var numRemoved = 0;
                for (var i = 0; i < this._lastIndex; i = (i + 1) | 0) {
                    if (this._slots[System.Array.index(i, this._slots)].hashCode >= 0) {
                        var value = this._slots[System.Array.index(i, this._slots)].value;
                        if (match(value)) {
                            if (this.remove(value)) {
                                numRemoved = (numRemoved + 1) | 0;
                            }
                        }
                    }
                }
                return numRemoved;
            },
            TrimExcess: function () {
                if (this._count === 0) {
                    this._buckets = null;
                    this._slots = null;
                    this._version = (this._version + 1) | 0;
                } else {
                    var newSize = System.Collections.HashHelpers.GetPrime(this._count);
                    var newSlots = System.Array.init(newSize, function (){
                        return new (System.Collections.Generic.HashSet$1.Slot(T))();
                    }, System.Collections.Generic.HashSet$1.Slot(T));
                    var newBuckets = System.Array.init(newSize, 0, System.Int32);
                    var newIndex = 0;
                    for (var i = 0; i < this._lastIndex; i = (i + 1) | 0) {
                        if (this._slots[System.Array.index(i, this._slots)].hashCode >= 0) {
                            newSlots[System.Array.index(newIndex, newSlots)] = this._slots[System.Array.index(i, this._slots)].$clone();
                            var bucket = newSlots[System.Array.index(newIndex, newSlots)].hashCode % newSize;
                            newSlots[System.Array.index(newIndex, newSlots)].next = (newBuckets[System.Array.index(bucket, newBuckets)] - 1) | 0;
                            newBuckets[System.Array.index(bucket, newBuckets)] = (newIndex + 1) | 0;
                            newIndex = (newIndex + 1) | 0;
                        }
                    }
                    this._lastIndex = newIndex;
                    this._slots = newSlots;
                    this._buckets = newBuckets;
                    this._freeList = -1;
                }
            },
            Initialize: function (capacity) {
                var size = System.Collections.HashHelpers.GetPrime(capacity);
                this._buckets = System.Array.init(size, 0, System.Int32);
                this._slots = System.Array.init(size, function (){
                    return new (System.Collections.Generic.HashSet$1.Slot(T))();
                }, System.Collections.Generic.HashSet$1.Slot(T));
            },
            IncreaseCapacity: function () {
                var newSize = System.Collections.HashHelpers.ExpandPrime(this._count);
                if (newSize <= this._count) {
                    throw new System.ArgumentException.$ctor1("HashSet capacity is too big.");
                }
                this.SetCapacity(newSize, false);
            },
            SetCapacity: function (newSize, forceNewHashCodes) {
                var newSlots = System.Array.init(newSize, function (){
                    return new (System.Collections.Generic.HashSet$1.Slot(T))();
                }, System.Collections.Generic.HashSet$1.Slot(T));
                if (this._slots != null) {
                    for (var i = 0; i < this._lastIndex; i = (i + 1) | 0) {
                        newSlots[System.Array.index(i, newSlots)] = this._slots[System.Array.index(i, this._slots)].$clone();
                    }
                }
                if (forceNewHashCodes) {
                    for (var i1 = 0; i1 < this._lastIndex; i1 = (i1 + 1) | 0) {
                        if (newSlots[System.Array.index(i1, newSlots)].hashCode !== -1) {
                            newSlots[System.Array.index(i1, newSlots)].hashCode = this.InternalGetHashCode(newSlots[System.Array.index(i1, newSlots)].value);
                        }
                    }
                }
                var newBuckets = System.Array.init(newSize, 0, System.Int32);
                for (var i2 = 0; i2 < this._lastIndex; i2 = (i2 + 1) | 0) {
                    var bucket = newSlots[System.Array.index(i2, newSlots)].hashCode % newSize;
                    newSlots[System.Array.index(i2, newSlots)].next = (newBuckets[System.Array.index(bucket, newBuckets)] - 1) | 0;
                    newBuckets[System.Array.index(bucket, newBuckets)] = (i2 + 1) | 0;
                }
                this._slots = newSlots;
                this._buckets = newBuckets;
            },
            AddIfNotPresent: function (value) {
                if (this._buckets == null) {
                    this.Initialize(0);
                }
                var hashCode = this.InternalGetHashCode(value);
                var bucket = hashCode % this._buckets.length;
                for (var i = (this._buckets[System.Array.index(bucket, this._buckets)] - 1) | 0; i >= 0; i = this._slots[System.Array.index(i, this._slots)].next) {
                    if (this._slots[System.Array.index(i, this._slots)].hashCode === hashCode && this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](this._slots[System.Array.index(i, this._slots)].value, value)) {
                        return false;
                    }
                }
                var index;
                if (this._freeList >= 0) {
                    index = this._freeList;
                    this._freeList = this._slots[System.Array.index(index, this._slots)].next;
                } else {
                    if (this._lastIndex === this._slots.length) {
                        this.IncreaseCapacity();
                        bucket = hashCode % this._buckets.length;
                    }
                    index = this._lastIndex;
                    this._lastIndex = (this._lastIndex + 1) | 0;
                }
                this._slots[System.Array.index(index, this._slots)].hashCode = hashCode;
                this._slots[System.Array.index(index, this._slots)].value = value;
                this._slots[System.Array.index(index, this._slots)].next = (this._buckets[System.Array.index(bucket, this._buckets)] - 1) | 0;
                this._buckets[System.Array.index(bucket, this._buckets)] = (index + 1) | 0;
                this._count = (this._count + 1) | 0;
                this._version = (this._version + 1) | 0;
                return true;
            },
            ContainsAllElements: function (other) {
                var $t;
                $t = Bridge.getEnumerator(other, T);
                try {
                    while ($t.moveNext()) {
                        var element = $t.Current;
                        if (!this.contains(element)) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return true;
            },
            IsSubsetOfHashSetWithSameEC: function (other) {
                var $t;
                $t = Bridge.getEnumerator(this);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (!other.contains(item)) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return true;
            },
            IntersectWithHashSetWithSameEC: function (other) {
                for (var i = 0; i < this._lastIndex; i = (i + 1) | 0) {
                    if (this._slots[System.Array.index(i, this._slots)].hashCode >= 0) {
                        var item = this._slots[System.Array.index(i, this._slots)].value;
                        if (!other.contains(item)) {
                            this.remove(item);
                        }
                    }
                }
            },
            IntersectWithEnumerable: function (other) {
                var $t;
                var originalLastIndex = this._lastIndex;
                var intArrayLength = System.Collections.Generic.BitHelper.ToIntArrayLength(originalLastIndex);
                var bitHelper;
                var bitArray = System.Array.init(intArrayLength, 0, System.Int32);
                bitHelper = new System.Collections.Generic.BitHelper(bitArray, intArrayLength);
                $t = Bridge.getEnumerator(other, T);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        var index = this.InternalIndexOf(item);
                        if (index >= 0) {
                            bitHelper.MarkBit(index);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }for (var i = 0; i < originalLastIndex; i = (i + 1) | 0) {
                    if (this._slots[System.Array.index(i, this._slots)].hashCode >= 0 && !bitHelper.IsMarked(i)) {
                        this.remove(this._slots[System.Array.index(i, this._slots)].value);
                    }
                }
            },
            InternalIndexOf: function (item) {
                var hashCode = this.InternalGetHashCode(item);
                for (var i = (this._buckets[System.Array.index(hashCode % this._buckets.length, this._buckets)] - 1) | 0; i >= 0; i = this._slots[System.Array.index(i, this._slots)].next) {
                    if ((this._slots[System.Array.index(i, this._slots)].hashCode) === hashCode && this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](this._slots[System.Array.index(i, this._slots)].value, item)) {
                        return i;
                    }
                }
                return -1;
            },
            SymmetricExceptWithUniqueHashSet: function (other) {
                var $t;
                $t = Bridge.getEnumerator(other);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (!this.remove(item)) {
                            this.AddIfNotPresent(item);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            SymmetricExceptWithEnumerable: function (other) {
                var $t;
                var originalLastIndex = this._lastIndex;
                var intArrayLength = System.Collections.Generic.BitHelper.ToIntArrayLength(originalLastIndex);
                var itemsToRemove;
                var itemsAddedFromOther;
                var itemsToRemoveArray = System.Array.init(intArrayLength, 0, System.Int32);
                itemsToRemove = new System.Collections.Generic.BitHelper(itemsToRemoveArray, intArrayLength);
                var itemsAddedFromOtherArray = System.Array.init(intArrayLength, 0, System.Int32);
                itemsAddedFromOther = new System.Collections.Generic.BitHelper(itemsAddedFromOtherArray, intArrayLength);
                $t = Bridge.getEnumerator(other, T);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        var location = { v : 0 };
                        var added = this.AddOrGetLocation(item, location);
                        if (added) {
                            itemsAddedFromOther.MarkBit(location.v);
                        } else {
                            if (location.v < originalLastIndex && !itemsAddedFromOther.IsMarked(location.v)) {
                                itemsToRemove.MarkBit(location.v);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }for (var i = 0; i < originalLastIndex; i = (i + 1) | 0) {
                    if (itemsToRemove.IsMarked(i)) {
                        this.remove(this._slots[System.Array.index(i, this._slots)].value);
                    }
                }
            },
            AddOrGetLocation: function (value, location) {
                var hashCode = this.InternalGetHashCode(value);
                var bucket = hashCode % this._buckets.length;
                for (var i = (this._buckets[System.Array.index(bucket, this._buckets)] - 1) | 0; i >= 0; i = this._slots[System.Array.index(i, this._slots)].next) {
                    if (this._slots[System.Array.index(i, this._slots)].hashCode === hashCode && this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2")](this._slots[System.Array.index(i, this._slots)].value, value)) {
                        location.v = i;
                        return false;
                    }
                }
                var index;
                if (this._freeList >= 0) {
                    index = this._freeList;
                    this._freeList = this._slots[System.Array.index(index, this._slots)].next;
                } else {
                    if (this._lastIndex === this._slots.length) {
                        this.IncreaseCapacity();
                        bucket = hashCode % this._buckets.length;
                    }
                    index = this._lastIndex;
                    this._lastIndex = (this._lastIndex + 1) | 0;
                }
                this._slots[System.Array.index(index, this._slots)].hashCode = hashCode;
                this._slots[System.Array.index(index, this._slots)].value = value;
                this._slots[System.Array.index(index, this._slots)].next = (this._buckets[System.Array.index(bucket, this._buckets)] - 1) | 0;
                this._buckets[System.Array.index(bucket, this._buckets)] = (index + 1) | 0;
                this._count = (this._count + 1) | 0;
                this._version = (this._version + 1) | 0;
                location.v = index;
                return true;
            },
            CheckUniqueAndUnfoundElements: function (other, returnIfUnfound) {
                var $t, $t1;
                var result = new (System.Collections.Generic.HashSet$1.ElementCount(T))();
                if (this._count === 0) {
                    var numElementsInOther = 0;
                    $t = Bridge.getEnumerator(other, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            numElementsInOther = (numElementsInOther + 1) | 0;
                            break;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }result.uniqueCount = 0;
                    result.unfoundCount = numElementsInOther;
                    return result.$clone();
                }
                var originalLastIndex = this._lastIndex;
                var intArrayLength = System.Collections.Generic.BitHelper.ToIntArrayLength(originalLastIndex);
                var bitHelper;
                var bitArray = System.Array.init(intArrayLength, 0, System.Int32);
                bitHelper = new System.Collections.Generic.BitHelper(bitArray, intArrayLength);
                var unfoundCount = 0;
                var uniqueFoundCount = 0;
                $t1 = Bridge.getEnumerator(other, T);
                try {
                    while ($t1.moveNext()) {
                        var item1 = $t1.Current;
                        var index = this.InternalIndexOf(item1);
                        if (index >= 0) {
                            if (!bitHelper.IsMarked(index)) {
                                bitHelper.MarkBit(index);
                                uniqueFoundCount = (uniqueFoundCount + 1) | 0;
                            }
                        } else {
                            unfoundCount = (unfoundCount + 1) | 0;
                            if (returnIfUnfound) {
                                break;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }result.uniqueCount = uniqueFoundCount;
                result.unfoundCount = unfoundCount;
                return result.$clone();
            },
            ToArray: function () {
                var newArray = System.Array.init(this.Count, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                this.CopyTo(newArray);
                return newArray;
            },
            InternalGetHashCode: function (item) {
                if (item == null) {
                    return 0;
                }
                return this._comparer[Bridge.geti(this._comparer, "System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2")](item) & System.Collections.Generic.HashSet$1(T).Lower31BitMask;
            }
        }
    }; });

    // @source ElementCount.js

    Bridge.define("System.Collections.Generic.HashSet$1.ElementCount", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.HashSet$1.ElementCount(T))(); }
            }
        },
        fields: {
            uniqueCount: 0,
            unfoundCount: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([4920463385, this.uniqueCount, this.unfoundCount]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.HashSet$1.ElementCount(T))) {
                    return false;
                }
                return Bridge.equals(this.uniqueCount, o.uniqueCount) && Bridge.equals(this.unfoundCount, o.unfoundCount);
            },
            $clone: function (to) {
                var s = to || new (System.Collections.Generic.HashSet$1.ElementCount(T))();
                s.uniqueCount = this.uniqueCount;
                s.unfoundCount = this.unfoundCount;
                return s;
            }
        }
    }; });

    // @source Enumerator.js

    Bridge.define("System.Collections.Generic.HashSet$1.Enumerator", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(T)],
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.HashSet$1.Enumerator(T))(); }
            }
        },
        fields: {
            _set: null,
            _index: 0,
            _version: 0,
            _current: Bridge.getDefaultValue(T)
        },
        props: {
            Current: {
                get: function () {
                    return this._current;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    if (this._index === 0 || this._index === ((this._set._lastIndex + 1) | 0)) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has either not started or has already finished.");
                    }
                    return this.Current;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            $ctor1: function (set) {
                this.$initialize();
                this._set = set;
                this._index = 0;
                this._version = set._version;
                this._current = Bridge.getDefaultValue(T);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Dispose: function () { },
            moveNext: function () {
                var $t, $t1;
                if (this._version !== this._set._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                while (this._index < this._set._lastIndex) {
                    if (($t = this._set._slots)[System.Array.index(this._index, $t)].hashCode >= 0) {
                        this._current = ($t1 = this._set._slots)[System.Array.index(this._index, $t1)].value;
                        this._index = (this._index + 1) | 0;
                        return true;
                    }
                    this._index = (this._index + 1) | 0;
                }
                this._index = (this._set._lastIndex + 1) | 0;
                this._current = Bridge.getDefaultValue(T);
                return false;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this._version !== this._set._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                this._index = 0;
                this._current = Bridge.getDefaultValue(T);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3788985113, this._set, this._index, this._version, this._current]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.HashSet$1.Enumerator(T))) {
                    return false;
                }
                return Bridge.equals(this._set, o._set) && Bridge.equals(this._index, o._index) && Bridge.equals(this._version, o._version) && Bridge.equals(this._current, o._current);
            },
            $clone: function (to) {
                var s = to || new (System.Collections.Generic.HashSet$1.Enumerator(T))();
                s._set = this._set;
                s._index = this._index;
                s._version = this._version;
                s._current = this._current;
                return s;
            }
        }
    }; });

    // @source Slot.js

    Bridge.define("System.Collections.Generic.HashSet$1.Slot", function (T) { return {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.HashSet$1.Slot(T))(); }
            }
        },
        fields: {
            hashCode: 0,
            value: Bridge.getDefaultValue(T),
            next: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1953459283, this.hashCode, this.value, this.next]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.HashSet$1.Slot(T))) {
                    return false;
                }
                return Bridge.equals(this.hashCode, o.hashCode) && Bridge.equals(this.value, o.value) && Bridge.equals(this.next, o.next);
            },
            $clone: function (to) {
                var s = to || new (System.Collections.Generic.HashSet$1.Slot(T))();
                s.hashCode = this.hashCode;
                s.value = this.value;
                s.next = this.next;
                return s;
            }
        }
    }; });

    // @source Enumerator.js

    Bridge.define("System.Collections.Generic.List$1.Enumerator", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(T),System.Collections.IEnumerator],
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.List$1.Enumerator(T))(); }
            }
        },
        fields: {
            list: null,
            index: 0,
            version: 0,
            current: Bridge.getDefaultValue(T)
        },
        props: {
            Current: {
                get: function () {
                    return this.current;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    if (this.index === 0 || this.index === ((this.list._size + 1) | 0)) {
                        throw new System.InvalidOperationException.ctor();
                    }
                    return this.Current;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            $ctor1: function (list) {
                this.$initialize();
                this.list = list;
                this.index = 0;
                this.version = list._version;
                this.current = Bridge.getDefaultValue(T);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Dispose: function () { },
            moveNext: function () {

                var localList = this.list;

                if (this.version === localList._version && ((this.index >>> 0) < (localList._size >>> 0))) {
                    this.current = localList._items[System.Array.index(this.index, localList._items)];
                    this.index = (this.index + 1) | 0;
                    return true;
                }
                return this.MoveNextRare();
            },
            MoveNextRare: function () {
                if (this.version !== this.list._version) {
                    throw new System.InvalidOperationException.ctor();
                }

                this.index = (this.list._size + 1) | 0;
                this.current = Bridge.getDefaultValue(T);
                return false;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this.version !== this.list._version) {
                    throw new System.InvalidOperationException.ctor();
                }

                this.index = 0;
                this.current = Bridge.getDefaultValue(T);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3788985113, this.list, this.index, this.version, this.current]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.List$1.Enumerator(T))) {
                    return false;
                }
                return Bridge.equals(this.list, o.list) && Bridge.equals(this.index, o.index) && Bridge.equals(this.version, o.version) && Bridge.equals(this.current, o.current);
            },
            $clone: function (to) {
                var s = to || new (System.Collections.Generic.List$1.Enumerator(T))();
                s.list = this.list;
                s.index = this.index;
                s.version = this.version;
                s.current = this.current;
                return s;
            }
        }
    }; });

    // @source Queue.js

    Bridge.define("System.Collections.Generic.Queue$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T),System.Collections.ICollection,System.Collections.Generic.IReadOnlyCollection$1(T)],
        statics: {
            fields: {
                MinimumGrow: 0,
                GrowFactor: 0,
                DefaultCapacity: 0
            },
            ctors: {
                init: function () {
                    this.MinimumGrow = 4;
                    this.GrowFactor = 200;
                    this.DefaultCapacity = 4;
                }
            }
        },
        fields: {
            _array: null,
            _head: 0,
            _tail: 0,
            _size: 0,
            _version: 0
        },
        props: {
            Count: {
                get: function () {
                    return this._size;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return this;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Count", ["System$Collections$Generic$IReadOnlyCollection$1$" + Bridge.getTypeAlias(T) + "$Count", "System$Collections$Generic$IReadOnlyCollection$1$Count"],
            "Count", "System$Collections$ICollection$Count",
            "copyTo", "System$Collections$ICollection$copyTo",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._array = System.Array.init(0, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor2: function (capacity) {
                this.$initialize();
                if (capacity < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("capacity", "Non-negative number required.");
                }
                this._array = System.Array.init(capacity, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor1: function (collection) {
                this.$initialize();
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }

                this._array = System.Array.init(System.Collections.Generic.Queue$1(T).DefaultCapacity, function (){
                    return Bridge.getDefaultValue(T);
                }, T);

                var en = Bridge.getEnumerator(collection, T);
                try {
                    while (en.System$Collections$IEnumerator$moveNext()) {
                        this.Enqueue(en[Bridge.geti(en, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")]);
                    }
                }
                finally {
                    if (Bridge.hasValue(en)) {
                        en.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            copyTo: function (array, index) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor1("Only single dimensional arrays are supported for the requested action.");
                }

                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                var arrayLen = array.length;
                if (((arrayLen - index) | 0) < this._size) {
                    throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
                }

                var numToCopy = this._size;
                if (numToCopy === 0) {
                    return;
                }

                var firstPart = (((this._array.length - this._head) | 0) < numToCopy) ? ((this._array.length - this._head) | 0) : numToCopy;
                System.Array.copy(this._array, this._head, array, index, firstPart);

                numToCopy = (numToCopy - firstPart) | 0;
                if (numToCopy > 0) {
                    System.Array.copy(this._array, 0, array, ((((index + this._array.length) | 0) - this._head) | 0), numToCopy);
                }
            },
            CopyTo: function (array, arrayIndex) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (arrayIndex < 0 || arrayIndex > array.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("arrayIndex", "Index was out of range. Must be non-negative and less than the size of the collection.");
                }

                var arrayLen = array.length;
                if (((arrayLen - arrayIndex) | 0) < this._size) {
                    throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
                }

                var numToCopy = (((arrayLen - arrayIndex) | 0) < this._size) ? (((arrayLen - arrayIndex) | 0)) : this._size;
                if (numToCopy === 0) {
                    return;
                }

                var firstPart = (((this._array.length - this._head) | 0) < numToCopy) ? ((this._array.length - this._head) | 0) : numToCopy;
                System.Array.copy(this._array, this._head, array, arrayIndex, firstPart);
                numToCopy = (numToCopy - firstPart) | 0;
                if (numToCopy > 0) {
                    System.Array.copy(this._array, 0, array, ((((arrayIndex + this._array.length) | 0) - this._head) | 0), numToCopy);
                }
            },
            Clear: function () {
                if (this._head < this._tail) {
                    System.Array.fill(this._array, Bridge.getDefaultValue(T), this._head, this._size);
                } else {
                    System.Array.fill(this._array, Bridge.getDefaultValue(T), this._head, ((this._array.length - this._head) | 0));
                    System.Array.fill(this._array, Bridge.getDefaultValue(T), 0, this._tail);
                }

                this._head = 0;
                this._tail = 0;
                this._size = 0;
                this._version = (this._version + 1) | 0;
            },
            Enqueue: function (item) {
                if (this._size === this._array.length) {
                    var newcapacity = (Bridge.Int.div(Bridge.Int.mul(this._array.length, System.Collections.Generic.Queue$1(T).GrowFactor), 100)) | 0;
                    if (newcapacity < ((this._array.length + System.Collections.Generic.Queue$1(T).MinimumGrow) | 0)) {
                        newcapacity = (this._array.length + System.Collections.Generic.Queue$1(T).MinimumGrow) | 0;
                    }
                    this.SetCapacity(newcapacity);
                }

                this._array[System.Array.index(this._tail, this._array)] = item;
                this._tail = this.MoveNext(this._tail);
                this._size = (this._size + 1) | 0;
                this._version = (this._version + 1) | 0;
            },
            GetEnumerator: function () {
                return new (System.Collections.Generic.Queue$1.Enumerator(T)).$ctor1(this);
            },
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                return new (System.Collections.Generic.Queue$1.Enumerator(T)).$ctor1(this).$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (System.Collections.Generic.Queue$1.Enumerator(T)).$ctor1(this).$clone();
            },
            Dequeue: function () {
                if (this._size === 0) {
                    throw new System.InvalidOperationException.$ctor1("Queue empty.");
                }

                var removed = this._array[System.Array.index(this._head, this._array)];
                this._array[System.Array.index(this._head, this._array)] = Bridge.getDefaultValue(T);
                this._head = this.MoveNext(this._head);
                this._size = (this._size - 1) | 0;
                this._version = (this._version + 1) | 0;
                return removed;
            },
            Peek: function () {
                if (this._size === 0) {
                    throw new System.InvalidOperationException.$ctor1("Queue empty.");
                }

                return this._array[System.Array.index(this._head, this._array)];
            },
            Contains: function (item) {
                var index = this._head;
                var count = this._size;

                var c = System.Collections.Generic.EqualityComparer$1(T).def;
                while (Bridge.identity(count, (count = (count - 1) | 0)) > 0) {
                    if (item == null) {
                        if (this._array[System.Array.index(index, this._array)] == null) {
                            return true;
                        }
                    } else if (this._array[System.Array.index(index, this._array)] != null && c.equals2(this._array[System.Array.index(index, this._array)], item)) {
                        return true;
                    }
                    index = this.MoveNext(index);
                }

                return false;
            },
            GetElement: function (i) {
                return this._array[System.Array.index((((this._head + i) | 0)) % this._array.length, this._array)];
            },
            ToArray: function () {
                var arr = System.Array.init(this._size, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                if (this._size === 0) {
                    return arr;
                }

                if (this._head < this._tail) {
                    System.Array.copy(this._array, this._head, arr, 0, this._size);
                } else {
                    System.Array.copy(this._array, this._head, arr, 0, ((this._array.length - this._head) | 0));
                    System.Array.copy(this._array, 0, arr, ((this._array.length - this._head) | 0), this._tail);
                }

                return arr;
            },
            SetCapacity: function (capacity) {
                var newarray = System.Array.init(capacity, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                if (this._size > 0) {
                    if (this._head < this._tail) {
                        System.Array.copy(this._array, this._head, newarray, 0, this._size);
                    } else {
                        System.Array.copy(this._array, this._head, newarray, 0, ((this._array.length - this._head) | 0));
                        System.Array.copy(this._array, 0, newarray, ((this._array.length - this._head) | 0), this._tail);
                    }
                }

                this._array = newarray;
                this._head = 0;
                this._tail = (this._size === capacity) ? 0 : this._size;
                this._version = (this._version + 1) | 0;
            },
            MoveNext: function (index) {
                var tmp = (index + 1) | 0;
                return (tmp === this._array.length) ? 0 : tmp;
            },
            TrimExcess: function () {
                var threshold = Bridge.Int.clip32(this._array.length * 0.9);
                if (this._size < threshold) {
                    this.SetCapacity(this._size);
                }
            }
        }
    }; });

    // @source ICollectionDebugView.js

    Bridge.define("System.Collections.Generic.ICollectionDebugView$1", function (T) { return {
        fields: {
            _collection: null
        },
        props: {
            Items: {
                get: function () {
                    var items = System.Array.init(System.Array.getCount(this._collection, T), function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copyTo(this._collection, items, 0, T);
                    return items;
                }
            }
        },
        ctors: {
            ctor: function (collection) {
                this.$initialize();
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }

                this._collection = collection;
            }
        }
    }; });

    // @source IDictionaryDebugView.js

    Bridge.define("System.Collections.Generic.IDictionaryDebugView$2", function (K, V) { return {
        fields: {
            _dict: null
        },
        props: {
            Items: {
                get: function () {
                    var items = System.Array.init(System.Array.getCount(this._dict, System.Collections.Generic.KeyValuePair$2(K,V)), function (){
                        return new (System.Collections.Generic.KeyValuePair$2(K,V))();
                    }, System.Collections.Generic.KeyValuePair$2(K,V));
                    System.Array.copyTo(this._dict, items, 0, System.Collections.Generic.KeyValuePair$2(K,V));
                    return items;
                }
            }
        },
        ctors: {
            ctor: function (dictionary) {
                this.$initialize();
                if (dictionary == null) {
                    throw new System.ArgumentNullException.$ctor1("dictionary");
                }

                this._dict = dictionary;
            }
        }
    }; });

    // @source Enumerator.js

    Bridge.define("System.Collections.Generic.Queue$1.Enumerator", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(T),System.Collections.IEnumerator],
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.Queue$1.Enumerator(T))(); }
            }
        },
        fields: {
            _q: null,
            _index: 0,
            _version: 0,
            _currentElement: Bridge.getDefaultValue(T)
        },
        props: {
            Current: {
                get: function () {
                    if (this._index < 0) {
                        if (this._index === -1) {
                            throw new System.InvalidOperationException.$ctor1("Enumeration has not started. Call MoveNext.");
                        } else {
                            throw new System.InvalidOperationException.$ctor1("Enumeration already finished.");
                        }
                    }
                    return this._currentElement;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return this.Current;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            $ctor1: function (q) {
                this.$initialize();
                this._q = q;
                this._version = this._q._version;
                this._index = -1;
                this._currentElement = Bridge.getDefaultValue(T);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Dispose: function () {
                this._index = -2;
                this._currentElement = Bridge.getDefaultValue(T);
            },
            moveNext: function () {
                if (this._version !== this._q._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }

                if (this._index === -2) {
                    return false;
                }

                this._index = (this._index + 1) | 0;

                if (this._index === this._q._size) {
                    this._index = -2;
                    this._currentElement = Bridge.getDefaultValue(T);
                    return false;
                }

                this._currentElement = this._q.GetElement(this._index);
                return true;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this._version !== this._q._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                this._index = -1;
                this._currentElement = Bridge.getDefaultValue(T);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3788985113, this._q, this._index, this._version, this._currentElement]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.Queue$1.Enumerator(T))) {
                    return false;
                }
                return Bridge.equals(this._q, o._q) && Bridge.equals(this._index, o._index) && Bridge.equals(this._version, o._version) && Bridge.equals(this._currentElement, o._currentElement);
            },
            $clone: function (to) {
                var s = to || new (System.Collections.Generic.Queue$1.Enumerator(T))();
                s._q = this._q;
                s._index = this._index;
                s._version = this._version;
                s._currentElement = this._currentElement;
                return s;
            }
        }
    }; });

    // @source Stack.js

    Bridge.define("System.Collections.Generic.Stack$1", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T),System.Collections.ICollection,System.Collections.Generic.IReadOnlyCollection$1(T)],
        statics: {
            fields: {
                DefaultCapacity: 0
            },
            ctors: {
                init: function () {
                    this.DefaultCapacity = 4;
                }
            }
        },
        fields: {
            _array: null,
            _size: 0,
            _version: 0
        },
        props: {
            Count: {
                get: function () {
                    return this._size;
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return this;
                }
            },
            IsReadOnly: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "Count", ["System$Collections$Generic$IReadOnlyCollection$1$" + Bridge.getTypeAlias(T) + "$Count", "System$Collections$Generic$IReadOnlyCollection$1$Count"],
            "Count", "System$Collections$ICollection$Count",
            "copyTo", "System$Collections$ICollection$copyTo",
            "System$Collections$Generic$IEnumerable$1$GetEnumerator", "System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this._array = System.Array.init(0, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor2: function (capacity) {
                this.$initialize();
                if (capacity < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("capacity", "Non-negative number required.");
                }
                this._array = System.Array.init(capacity, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
            },
            $ctor1: function (collection) {
                this.$initialize();
                if (collection == null) {
                    throw new System.ArgumentNullException.$ctor1("collection");
                }
                var length = { };
                this._array = Bridge.Collections.EnumerableHelpers.ToArray$1(T, collection, length);
                this._size = length.v;
            }
        },
        methods: {
            Clear: function () {
                System.Array.fill(this._array, Bridge.getDefaultValue(T), 0, this._size);
                this._size = 0;
                this._version = (this._version + 1) | 0;
            },
            Contains: function (item) {
                var count = this._size;

                var c = System.Collections.Generic.EqualityComparer$1(T).def;
                while (Bridge.identity(count, (count = (count - 1) | 0)) > 0) {
                    if (item == null) {
                        if (this._array[System.Array.index(count, this._array)] == null) {
                            return true;
                        }
                    } else if (this._array[System.Array.index(count, this._array)] != null && c.equals2(this._array[System.Array.index(count, this._array)], item)) {
                        return true;
                    }
                }
                return false;
            },
            CopyTo: function (array, arrayIndex) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (arrayIndex < 0 || arrayIndex > array.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("arrayIndex", "Non-negative number required.");
                }

                if (((array.length - arrayIndex) | 0) < this._size) {
                    throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
                }

                if (!Bridge.referenceEquals(array, this._array)) {
                    var srcIndex = 0;
                    var dstIndex = (arrayIndex + this._size) | 0;
                    for (var i = 0; i < this._size; i = (i + 1) | 0) {
                        array[System.Array.index(((dstIndex = (dstIndex - 1) | 0)), array)] = this._array[System.Array.index(Bridge.identity(srcIndex, (srcIndex = (srcIndex + 1) | 0)), this._array)];
                    }
                } else {
                    System.Array.copy(this._array, 0, array, arrayIndex, this._size);
                    System.Array.reverse(array, arrayIndex, this._size);
                }
            },
            copyTo: function (array, arrayIndex) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor1("Only single dimensional arrays are supported for the requested action.");
                }

                if (System.Array.getLower(array, 0) !== 0) {
                    throw new System.ArgumentException.$ctor1("The lower bound of target array must be zero.");
                }

                if (arrayIndex < 0 || arrayIndex > array.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("arrayIndex", "Non-negative number required.");
                }

                if (((array.length - arrayIndex) | 0) < this._size) {
                    throw new System.ArgumentException.$ctor1("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
                }

                try {
                    System.Array.copy(this._array, 0, array, arrayIndex, this._size);
                    System.Array.reverse(array, arrayIndex, this._size);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    throw new System.ArgumentException.$ctor1("Target array type is not compatible with the type of items in the collection.");
                }
            },
            GetEnumerator: function () {
                return new (System.Collections.Generic.Stack$1.Enumerator(T)).$ctor1(this);
            },
            System$Collections$Generic$IEnumerable$1$GetEnumerator: function () {
                return new (System.Collections.Generic.Stack$1.Enumerator(T)).$ctor1(this).$clone();
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return new (System.Collections.Generic.Stack$1.Enumerator(T)).$ctor1(this).$clone();
            },
            TrimExcess: function () {
                var threshold = Bridge.Int.clip32(this._array.length * 0.9);
                if (this._size < threshold) {
                    var localArray = { v : this._array };
                    System.Array.resize(localArray, this._size, Bridge.getDefaultValue(T));
                    this._array = localArray.v;
                    this._version = (this._version + 1) | 0;
                }
            },
            Peek: function () {
                if (this._size === 0) {
                    throw new System.InvalidOperationException.$ctor1("Stack empty.");
                }
                return this._array[System.Array.index(((this._size - 1) | 0), this._array)];
            },
            Pop: function () {
                if (this._size === 0) {
                    throw new System.InvalidOperationException.$ctor1("Stack empty.");
                }
                this._version = (this._version + 1) | 0;
                var item = this._array[System.Array.index(((this._size = (this._size - 1) | 0)), this._array)];
                this._array[System.Array.index(this._size, this._array)] = Bridge.getDefaultValue(T);
                return item;
            },
            Push: function (item) {
                if (this._size === this._array.length) {
                    var localArray = { v : this._array };
                    System.Array.resize(localArray, (this._array.length === 0) ? System.Collections.Generic.Stack$1(T).DefaultCapacity : Bridge.Int.mul(2, this._array.length), Bridge.getDefaultValue(T));
                    this._array = localArray.v;
                }
                this._array[System.Array.index(Bridge.identity(this._size, (this._size = (this._size + 1) | 0)), this._array)] = item;
                this._version = (this._version + 1) | 0;
            },
            ToArray: function () {
                var objArray = System.Array.init(this._size, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                var i = 0;
                while (i < this._size) {
                    objArray[System.Array.index(i, objArray)] = this._array[System.Array.index(((((this._size - i) | 0) - 1) | 0), this._array)];
                    i = (i + 1) | 0;
                }
                return objArray;
            }
        }
    }; });

    // @source Enumerator.js

    Bridge.define("System.Collections.Generic.Stack$1.Enumerator", function (T) { return {
        inherits: [System.Collections.Generic.IEnumerator$1(T),System.Collections.IEnumerator],
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (System.Collections.Generic.Stack$1.Enumerator(T))(); }
            }
        },
        fields: {
            _stack: null,
            _index: 0,
            _version: 0,
            _currentElement: Bridge.getDefaultValue(T)
        },
        props: {
            Current: {
                get: function () {
                    if (this._index === -2) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has not started. Call MoveNext.");
                    }
                    if (this._index === -1) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration already finished.");
                    }
                    return this._currentElement;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    if (this._index === -2) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration has not started. Call MoveNext.");
                    }
                    if (this._index === -1) {
                        throw new System.InvalidOperationException.$ctor1("Enumeration already finished.");
                    }
                    return this._currentElement;
                }
            }
        },
        alias: [
            "Dispose", "System$IDisposable$Dispose",
            "moveNext", "System$Collections$IEnumerator$moveNext",
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"]
        ],
        ctors: {
            $ctor1: function (stack) {
                this.$initialize();
                this._stack = stack;
                this._version = this._stack._version;
                this._index = -2;
                this._currentElement = Bridge.getDefaultValue(T);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Dispose: function () {
                this._index = -1;
            },
            moveNext: function () {
                var $t, $t1;
                var retval;
                if (this._version !== this._stack._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                if (this._index === -2) {
                    this._index = (this._stack._size - 1) | 0;
                    retval = (this._index >= 0);
                    if (retval) {
                        this._currentElement = ($t = this._stack._array)[System.Array.index(this._index, $t)];
                    }
                    return retval;
                }
                if (this._index === -1) {
                    return false;
                }

                retval = (((this._index = (this._index - 1) | 0)) >= 0);
                if (retval) {
                    this._currentElement = ($t1 = this._stack._array)[System.Array.index(this._index, $t1)];
                } else {
                    this._currentElement = Bridge.getDefaultValue(T);
                }
                return retval;
            },
            System$Collections$IEnumerator$reset: function () {
                if (this._version !== this._stack._version) {
                    throw new System.InvalidOperationException.$ctor1("Collection was modified; enumeration operation may not execute.");
                }
                this._index = -2;
                this._currentElement = Bridge.getDefaultValue(T);
            },
            getHashCode: function () {
                var h = Bridge.addHash([3788985113, this._stack, this._index, this._version, this._currentElement]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Collections.Generic.Stack$1.Enumerator(T))) {
                    return false;
                }
                return Bridge.equals(this._stack, o._stack) && Bridge.equals(this._index, o._index) && Bridge.equals(this._version, o._version) && Bridge.equals(this._currentElement, o._currentElement);
            },
            $clone: function (to) {
                var s = to || new (System.Collections.Generic.Stack$1.Enumerator(T))();
                s._stack = this._stack;
                s._index = this._index;
                s._version = this._version;
                s._currentElement = this._currentElement;
                return s;
            }
        }
    }; });

    // @source HashHelpers.js

    Bridge.define("System.Collections.HashHelpers", {
        statics: {
            fields: {
                HashPrime: 0,
                RandomSeed: 0,
                primes: null,
                MaxPrimeArrayLength: 0
            },
            ctors: {
                init: function () {
                    this.HashPrime = 101;
                    this.RandomSeed = System.Guid.NewGuid().getHashCode();
                    this.primes = System.Array.init([
                        3, 
                        7, 
                        11, 
                        17, 
                        23, 
                        29, 
                        37, 
                        47, 
                        59, 
                        71, 
                        89, 
                        107, 
                        131, 
                        163, 
                        197, 
                        239, 
                        293, 
                        353, 
                        431, 
                        521, 
                        631, 
                        761, 
                        919, 
                        1103, 
                        1327, 
                        1597, 
                        1931, 
                        2333, 
                        2801, 
                        3371, 
                        4049, 
                        4861, 
                        5839, 
                        7013, 
                        8419, 
                        10103, 
                        12143, 
                        14591, 
                        17519, 
                        21023, 
                        25229, 
                        30293, 
                        36353, 
                        43627, 
                        52361, 
                        62851, 
                        75431, 
                        90523, 
                        108631, 
                        130363, 
                        156437, 
                        187751, 
                        225307, 
                        270371, 
                        324449, 
                        389357, 
                        467237, 
                        560689, 
                        672827, 
                        807403, 
                        968897, 
                        1162687, 
                        1395263, 
                        1674319, 
                        2009191, 
                        2411033, 
                        2893249, 
                        3471899, 
                        4166287, 
                        4999559, 
                        5999471, 
                        7199369
                    ], System.Int32);
                    this.MaxPrimeArrayLength = 2146435069;
                }
            },
            methods: {
                Combine: function (h1, h2) {
                    var rol5 = (((((h1 >>> 0) << 5) >>> 0)) | ((h1 >>> 0) >>> 27)) >>> 0;
                    return ((((rol5 | 0) + h1) | 0)) ^ h2;
                },
                IsPrime: function (candidate) {
                    if ((candidate & 1) !== 0) {
                        var limit = Bridge.Int.clip32(Math.sqrt(candidate));
                        for (var divisor = 3; divisor <= limit; divisor = (divisor + 2) | 0) {
                            if ((candidate % divisor) === 0) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return (candidate === 2);
                },
                GetPrime: function (min) {
                    if (min < 0) {
                        throw new System.ArgumentException.$ctor1("Hashtable's capacity overflowed and went negative. Check load factor, capacity and the current size of the table.");
                    }
                    for (var i = 0; i < System.Collections.HashHelpers.primes.length; i = (i + 1) | 0) {
                        var prime = System.Collections.HashHelpers.primes[System.Array.index(i, System.Collections.HashHelpers.primes)];
                        if (prime >= min) {
                            return prime;
                        }
                    }
                    for (var i1 = (min | 1); i1 < 2147483647; i1 = (i1 + 2) | 0) {
                        if (System.Collections.HashHelpers.IsPrime(i1) && ((((i1 - 1) | 0)) % System.Collections.HashHelpers.HashPrime !== 0)) {
                            return i1;
                        }
                    }
                    return min;
                },
                GetMinPrime: function () {
                    return System.Collections.HashHelpers.primes[System.Array.index(0, System.Collections.HashHelpers.primes)];
                },
                ExpandPrime: function (oldSize) {
                    var newSize = Bridge.Int.mul(2, oldSize);
                    if ((newSize >>> 0) > System.Collections.HashHelpers.MaxPrimeArrayLength && System.Collections.HashHelpers.MaxPrimeArrayLength > oldSize) {
                        return System.Collections.HashHelpers.MaxPrimeArrayLength;
                    }
                    return System.Collections.HashHelpers.GetPrime(newSize);
                }
            }
        }
    });

    // @source Collection.js

    Bridge.define("System.Collections.ObjectModel.Collection$1", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T),System.Collections.IList,System.Collections.Generic.IReadOnlyList$1(T)],
        statics: {
            methods: {
                IsCompatibleObject: function (value) {
                    return ((Bridge.is(value, T)) || (value == null && Bridge.getDefaultValue(T) == null));
                }
            }
        },
        fields: {
            items: null,
            _syncRoot: null
        },
        props: {
            Count: {
                get: function () {
                    return System.Array.getCount(this.items, T);
                }
            },
            Items: {
                get: function () {
                    return this.items;
                }
            },
            System$Collections$Generic$ICollection$1$IsReadOnly: {
                get: function () {
                    return System.Array.getIsReadOnly(this.items, T);
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    if (this._syncRoot == null) {
                        var c = Bridge.as(this.items, System.Collections.ICollection);
                        if (c != null) {
                            this._syncRoot = c.System$Collections$ICollection$SyncRoot;
                        } else {
                            throw System.NotImplemented.ByDesign;
                        }
                    }
                    return this._syncRoot;
                }
            },
            System$Collections$IList$IsReadOnly: {
                get: function () {
                    return System.Array.getIsReadOnly(this.items, T);
                }
            },
            System$Collections$IList$IsFixedSize: {
                get: function () {
                    var list = Bridge.as(this.items, System.Collections.IList);
                    if (list != null) {
                        return System.Array.isFixedSize(list);
                    }
                    return System.Array.getIsReadOnly(this.items, T);
                }
            }
        },
        alias: [
            "Count", ["System$Collections$Generic$IReadOnlyCollection$1$" + Bridge.getTypeAlias(T) + "$Count", "System$Collections$Generic$IReadOnlyCollection$1$Count"],
            "Count", "System$Collections$ICollection$Count",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "getItem", ["System$Collections$Generic$IReadOnlyList$1$" + Bridge.getTypeAlias(T) + "$getItem", "System$Collections$Generic$IReadOnlyList$1$getItem"],
            "setItem", ["System$Collections$Generic$IReadOnlyList$1$" + Bridge.getTypeAlias(T) + "$setItem", "System$Collections$Generic$IReadOnlyList$1$setItem"],
            "getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "clear", "System$Collections$IList$clear",
            "clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "removeAt", "System$Collections$IList$removeAt",
            "removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt",
            "System$Collections$Generic$ICollection$1$IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.items = new (System.Collections.Generic.List$1(T)).ctor();
            },
            $ctor1: function (list) {
                this.$initialize();
                if (list == null) {
                    System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.list);
                }
                this.items = list;
            }
        },
        methods: {
            getItem: function (index) {
                return System.Array.getItem(this.items, index, T);
            },
            setItem: function (index, value) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                if (index < 0 || index >= System.Array.getCount(this.items, T)) {
                    System.ThrowHelper.ThrowArgumentOutOfRange_IndexException();
                }

                this.SetItem(index, value);
            },
            System$Collections$IList$getItem: function (index) {
                return System.Array.getItem(this.items, index, T);
            },
            System$Collections$IList$setItem: function (index, value) {
                System.ThrowHelper.IfNullAndNullsAreIllegalThenThrow(T, value, System.ExceptionArgument.value);

                try {
                    this.setItem(index, Bridge.cast(Bridge.unbox(value, T), T));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        System.ThrowHelper.ThrowWrongValueTypeArgumentException(System.Object, value, T);
                    } else {
                        throw $e1;
                    }
                }
            },
            add: function (item) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                var index = System.Array.getCount(this.items, T);
                this.InsertItem(index, item);
            },
            System$Collections$IList$add: function (value) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }
                System.ThrowHelper.IfNullAndNullsAreIllegalThenThrow(T, value, System.ExceptionArgument.value);

                try {
                    this.add(Bridge.cast(Bridge.unbox(value, T), T));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        System.ThrowHelper.ThrowWrongValueTypeArgumentException(System.Object, value, T);
                    } else {
                        throw $e1;
                    }
                }

                return ((this.Count - 1) | 0);
            },
            clear: function () {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                this.ClearItems();
            },
            copyTo: function (array, index) {
                System.Array.copyTo(this.items, array, index, T);
            },
            System$Collections$ICollection$copyTo: function (array, index) {
                if (array == null) {
                    System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.array);
                }

                if (System.Array.getRank(array) !== 1) {
                    System.ThrowHelper.ThrowArgumentException(System.ExceptionResource.Arg_RankMultiDimNotSupported);
                }

                if (System.Array.getLower(array, 0) !== 0) {
                    System.ThrowHelper.ThrowArgumentException(System.ExceptionResource.Arg_NonZeroLowerBound);
                }

                if (index < 0) {
                    System.ThrowHelper.ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
                }

                if (((array.length - index) | 0) < this.Count) {
                    System.ThrowHelper.ThrowArgumentException(System.ExceptionResource.Arg_ArrayPlusOffTooSmall);
                }

                var tArray = Bridge.as(array, System.Array.type(T));
                if (tArray != null) {
                    System.Array.copyTo(this.items, tArray, index, T);
                } else {
                    var targetType = (Bridge.getType(array).$elementType || null);
                    var sourceType = T;
                    if (!(Bridge.Reflection.isAssignableFrom(targetType, sourceType) || Bridge.Reflection.isAssignableFrom(sourceType, targetType))) {
                        System.ThrowHelper.ThrowArgumentException_Argument_InvalidArrayType();
                    }

                    var objects = Bridge.as(array, System.Array.type(System.Object));
                    if (objects == null) {
                        System.ThrowHelper.ThrowArgumentException_Argument_InvalidArrayType();
                    }

                    var count = System.Array.getCount(this.items, T);
                    try {
                        for (var i = 0; i < count; i = (i + 1) | 0) {
                            objects[System.Array.index(Bridge.identity(index, (index = (index + 1) | 0)), objects)] = System.Array.getItem(this.items, i, T);
                        }
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, System.ArrayTypeMismatchException)) {
                            System.ThrowHelper.ThrowArgumentException_Argument_InvalidArrayType();
                        } else {
                            throw $e1;
                        }
                    }
                }
            },
            contains: function (item) {
                return System.Array.contains(this.items, item, T);
            },
            System$Collections$IList$contains: function (value) {
                if (System.Collections.ObjectModel.Collection$1(T).IsCompatibleObject(value)) {
                    return this.contains(Bridge.cast(Bridge.unbox(value, T), T));
                }
                return false;
            },
            GetEnumerator: function () {
                return Bridge.getEnumerator(this.items, T);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return Bridge.getEnumerator(Bridge.cast(this.items, System.Collections.IEnumerable));
            },
            indexOf: function (item) {
                return System.Array.indexOf(this.items, item, 0, null, T);
            },
            System$Collections$IList$indexOf: function (value) {
                if (System.Collections.ObjectModel.Collection$1(T).IsCompatibleObject(value)) {
                    return this.indexOf(Bridge.cast(Bridge.unbox(value, T), T));
                }
                return -1;
            },
            insert: function (index, item) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                if (index < 0 || index > System.Array.getCount(this.items, T)) {
                    System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.index, System.ExceptionResource.ArgumentOutOfRange_ListInsert);
                }

                this.InsertItem(index, item);
            },
            System$Collections$IList$insert: function (index, value) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }
                System.ThrowHelper.IfNullAndNullsAreIllegalThenThrow(T, value, System.ExceptionArgument.value);

                try {
                    this.insert(index, Bridge.cast(Bridge.unbox(value, T), T));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        System.ThrowHelper.ThrowWrongValueTypeArgumentException(System.Object, value, T);
                    } else {
                        throw $e1;
                    }
                }
            },
            remove: function (item) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                var index = System.Array.indexOf(this.items, item, 0, null, T);
                if (index < 0) {
                    return false;
                }
                this.RemoveItem(index);
                return true;
            },
            System$Collections$IList$remove: function (value) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                if (System.Collections.ObjectModel.Collection$1(T).IsCompatibleObject(value)) {
                    this.remove(Bridge.cast(Bridge.unbox(value, T), T));
                }
            },
            removeAt: function (index) {
                if (System.Array.getIsReadOnly(this.items, T)) {
                    System.ThrowHelper.ThrowNotSupportedException$1(System.ExceptionResource.NotSupported_ReadOnlyCollection);
                }

                if (index < 0 || index >= System.Array.getCount(this.items, T)) {
                    System.ThrowHelper.ThrowArgumentOutOfRange_IndexException();
                }

                this.RemoveItem(index);
            },
            ClearItems: function () {
                System.Array.clear(this.items, T);
            },
            InsertItem: function (index, item) {
                System.Array.insert(this.items, index, item, T);
            },
            RemoveItem: function (index) {
                System.Array.removeAt(this.items, index, T);
            },
            SetItem: function (index, item) {
                System.Array.setItem(this.items, index, item, T);
            }
        }
    }; });

    // @source ReadOnlyCollection.js

    Bridge.define("System.Collections.ObjectModel.ReadOnlyCollection$1", function (T) { return {
        inherits: [System.Collections.Generic.IList$1(T),System.Collections.IList,System.Collections.Generic.IReadOnlyList$1(T)],
        statics: {
            methods: {
                IsCompatibleObject: function (value) {
                    return ((Bridge.is(value, T)) || (value == null && Bridge.getDefaultValue(T) == null));
                }
            }
        },
        fields: {
            list: null
        },
        props: {
            Count: {
                get: function () {
                    return System.Array.getCount(this.list, T);
                }
            },
            System$Collections$ICollection$IsSynchronized: {
                get: function () {
                    return false;
                }
            },
            System$Collections$ICollection$SyncRoot: {
                get: function () {
                    return this;
                }
            },
            Items: {
                get: function () {
                    return this.list;
                }
            },
            System$Collections$IList$IsFixedSize: {
                get: function () {
                    return true;
                }
            },
            System$Collections$Generic$ICollection$1$IsReadOnly: {
                get: function () {
                    return true;
                }
            },
            System$Collections$IList$IsReadOnly: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "Count", ["System$Collections$Generic$IReadOnlyCollection$1$" + Bridge.getTypeAlias(T) + "$Count", "System$Collections$Generic$IReadOnlyCollection$1$Count"],
            "Count", "System$Collections$ICollection$Count",
            "Count", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$Count",
            "getItem", ["System$Collections$Generic$IReadOnlyList$1$" + Bridge.getTypeAlias(T) + "$getItem", "System$Collections$Generic$IReadOnlyList$1$getItem"],
            "contains", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$contains",
            "copyTo", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$copyTo",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(T) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"],
            "indexOf", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$indexOf",
            "System$Collections$Generic$ICollection$1$IsReadOnly", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$IsReadOnly",
            "System$Collections$Generic$IList$1$getItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$getItem",
            "System$Collections$Generic$IList$1$setItem", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$setItem",
            "System$Collections$Generic$ICollection$1$add", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$add",
            "System$Collections$Generic$ICollection$1$clear", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$clear",
            "System$Collections$Generic$IList$1$insert", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$insert",
            "System$Collections$Generic$ICollection$1$remove", "System$Collections$Generic$ICollection$1$" + Bridge.getTypeAlias(T) + "$remove",
            "System$Collections$Generic$IList$1$removeAt", "System$Collections$Generic$IList$1$" + Bridge.getTypeAlias(T) + "$removeAt"
        ],
        ctors: {
            ctor: function (list) {
                this.$initialize();
                if (list == null) {
                    throw new System.ArgumentNullException.$ctor1("list");
                }
                this.list = list;
            }
        },
        methods: {
            getItem: function (index) {
                return System.Array.getItem(this.list, index, T);
            },
            System$Collections$Generic$IList$1$getItem: function (index) {
                return System.Array.getItem(this.list, index, T);
            },
            System$Collections$Generic$IList$1$setItem: function (index, value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$getItem: function (index) {
                return System.Array.getItem(this.list, index, T);
            },
            System$Collections$IList$setItem: function (index, value) {
                throw new System.NotSupportedException.ctor();
            },
            contains: function (value) {
                return System.Array.contains(this.list, value, T);
            },
            System$Collections$IList$contains: function (value) {
                if (System.Collections.ObjectModel.ReadOnlyCollection$1(T).IsCompatibleObject(value)) {
                    return this.contains(Bridge.cast(Bridge.unbox(value, T), T));
                }
                return false;
            },
            copyTo: function (array, index) {
                System.Array.copyTo(this.list, array, index, T);
            },
            System$Collections$ICollection$copyTo: function (array, index) {
                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }

                if (System.Array.getRank(array) !== 1) {
                    throw new System.ArgumentException.$ctor1("array");
                }

                if (System.Array.getLower(array, 0) !== 0) {
                    throw new System.ArgumentException.$ctor1("array");
                }

                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }

                if (((array.length - index) | 0) < this.Count) {
                    throw new System.ArgumentException.ctor();
                }

                var items = Bridge.as(array, System.Array.type(T));
                if (items != null) {
                    System.Array.copyTo(this.list, items, index, T);
                } else {
                    var targetType = (Bridge.getType(array).$elementType || null);
                    var sourceType = T;
                    if (!(Bridge.Reflection.isAssignableFrom(targetType, sourceType) || Bridge.Reflection.isAssignableFrom(sourceType, targetType))) {
                        throw new System.ArgumentException.ctor();
                    }

                    var objects = Bridge.as(array, System.Array.type(System.Object));
                    if (objects == null) {
                        throw new System.ArgumentException.ctor();
                    }

                    var count = System.Array.getCount(this.list, T);
                    for (var i = 0; i < count; i = (i + 1) | 0) {
                        objects[System.Array.index(Bridge.identity(index, (index = (index + 1) | 0)), objects)] = System.Array.getItem(this.list, i, T);
                    }
                }
            },
            GetEnumerator: function () {
                return Bridge.getEnumerator(this.list, T);
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return Bridge.getEnumerator(Bridge.cast(this.list, System.Collections.IEnumerable));
            },
            indexOf: function (value) {
                return System.Array.indexOf(this.list, value, 0, null, T);
            },
            System$Collections$IList$indexOf: function (value) {
                if (System.Collections.ObjectModel.ReadOnlyCollection$1(T).IsCompatibleObject(value)) {
                    return this.indexOf(Bridge.cast(Bridge.unbox(value, T), T));
                }
                return -1;
            },
            System$Collections$Generic$ICollection$1$add: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$add: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$ICollection$1$clear: function () {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$clear: function () {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$IList$1$insert: function (index, value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$insert: function (index, value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$ICollection$1$remove: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$remove: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$Generic$IList$1$removeAt: function (index) {
                throw new System.NotSupportedException.ctor();
            },
            System$Collections$IList$removeAt: function (index) {
                throw new System.NotSupportedException.ctor();
            }
        }
    }; });

    // @source BrowsableAttribute.js

    Bridge.define("System.ComponentModel.BrowsableAttribute", {
        inherits: [System.Attribute],
        statics: {
            fields: {
                yes: null,
                no: null,
                default: null
            },
            ctors: {
                init: function () {
                    this.yes = new System.ComponentModel.BrowsableAttribute(true);
                    this.no = new System.ComponentModel.BrowsableAttribute(false);
                    this.default = System.ComponentModel.BrowsableAttribute.yes;
                }
            }
        },
        fields: {
            browsable: false
        },
        props: {
            Browsable: {
                get: function () {
                    return this.browsable;
                }
            }
        },
        ctors: {
            init: function () {
                this.browsable = true;
            },
            ctor: function (browsable) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.browsable = browsable;
            }
        },
        methods: {
            equals: function (obj) {
                if (Bridge.referenceEquals(obj, this)) {
                    return true;
                }

                var other = Bridge.as(obj, System.ComponentModel.BrowsableAttribute);

                return (other != null) && other.Browsable === this.browsable;
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.browsable);
            }
        }
    });

    // @source DefaultValueAttribute.js

    Bridge.define("System.ComponentModel.DefaultValueAttribute", {
        inherits: [System.Attribute],
        fields: {
            _value: null
        },
        props: {
            Value: {
                get: function () {
                    return this._value;
                }
            }
        },
        ctors: {
            $ctor11: function (type, value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                try {
                    if ((type.prototype instanceof System.Enum)) {
                        this._value = System.Enum.parse(type, value, true);
                    } else if (Bridge.referenceEquals(type, System.TimeSpan)) {
                        throw System.NotImplemented.ByDesign;
                    } else {
                        throw System.NotImplemented.ByDesign;
                    }
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            $ctor2: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Char, String.fromCharCode, System.Char.getHashCode);
            },
            $ctor1: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Byte);
            },
            $ctor4: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Int16);
            },
            $ctor5: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Int32);
            },
            $ctor6: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = value;
            },
            $ctor9: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Single, System.Single.format, System.Single.getHashCode);
            },
            $ctor3: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Double, System.Double.format, System.Double.getHashCode);
            },
            ctor: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.Boolean, System.Boolean.toString);
            },
            $ctor10: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = value;
            },
            $ctor7: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = value;
            },
            $ctor8: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.SByte);
            },
            $ctor12: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.UInt16);
            },
            $ctor13: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = Bridge.box(value, System.UInt32);
            },
            $ctor14: function (value) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this._value = value;
            }
        },
        methods: {
            equals: function (obj) {
                if (Bridge.referenceEquals(obj, this)) {
                    return true;
                }

                var other = Bridge.as(obj, System.ComponentModel.DefaultValueAttribute);

                if (other != null) {
                    if (this.Value != null) {
                        return Bridge.equals(this.Value, other.Value);
                    } else {
                        return (other.Value == null);
                    }
                }
                return false;
            },
            getHashCode: function () {
                return Bridge.getHashCode(this);
            },
            setValue: function (value) {
                this._value = value;
            }
        }
    });

    // @source Console.js

    Bridge.define("System.Console", {
        statics: {
            methods: {
                Write: function (value) {
                    var con = Bridge.global.console;

                    if (con && con.log) {
                        con.log(!Bridge.isDefined(Bridge.unbox(value)) ? "" : Bridge.unbox(value));
                    }
                },
                WriteLine: function (value) {
                    var con = Bridge.global.console;

                    if (con && con.log) {
                        con.log(!Bridge.isDefined(Bridge.unbox(value)) ? "" : Bridge.unbox(value));
                    }
                },
                TransformChars: function (buffer, all, index, count) {
                    if (all !== 1) {
                        if (buffer == null) {
                            throw new System.ArgumentNullException.$ctor1("buffer");
                        }

                        if (index < 0) {
                            throw new System.ArgumentOutOfRangeException.$ctor4("index", "less than zero");
                        }

                        if (count < 0) {
                            throw new System.ArgumentOutOfRangeException.$ctor4("count", "less than zero");
                        }

                        if (((index + count) | 0) > buffer.length) {
                            throw new System.ArgumentException.$ctor1("index plus count specify a position that is not within buffer.");
                        }
                    }

                    var s = "";
                    if (buffer != null) {
                        if (all === 1) {
                            index = 0;
                            count = buffer.length;
                        }

                        for (var i = index; i < ((index + count) | 0); i = (i + 1) | 0) {
                            s = (s || "") + String.fromCharCode(buffer[System.Array.index(i, buffer)]);
                        }
                    }

                    return s;
                },
                Clear: function () {
                    var con = Bridge.global.console;

                    if (con && con.clear) {
                        con.clear();
                    }
                }
            }
        }
    });

    // @source TokenType.js

    Bridge.define("System.TokenType", {
        $kind: "enum",
        statics: {
            fields: {
                NumberToken: 1,
                YearNumberToken: 2,
                Am: 3,
                Pm: 4,
                MonthToken: 5,
                EndOfString: 6,
                DayOfWeekToken: 7,
                TimeZoneToken: 8,
                EraToken: 9,
                DateWordToken: 10,
                UnknownToken: 11,
                HebrewNumber: 12,
                JapaneseEraToken: 13,
                TEraToken: 14,
                IgnorableSymbol: 15,
                SEP_Unk: 256,
                SEP_End: 512,
                SEP_Space: 768,
                SEP_Am: 1024,
                SEP_Pm: 1280,
                SEP_Date: 1536,
                SEP_Time: 1792,
                SEP_YearSuff: 2048,
                SEP_MonthSuff: 2304,
                SEP_DaySuff: 2560,
                SEP_HourSuff: 2816,
                SEP_MinuteSuff: 3072,
                SEP_SecondSuff: 3328,
                SEP_LocalTimeMark: 3584,
                SEP_DateOrOffset: 3840,
                RegularTokenMask: 255,
                SeparatorTokenMask: 65280
            }
        }
    });

    // @source UnitySerializationHolder.js

    Bridge.define("System.UnitySerializationHolder", {
        inherits: [System.Runtime.Serialization.ISerializable,System.Runtime.Serialization.IObjectReference],
        statics: {
            fields: {
                NullUnity: 0
            },
            ctors: {
                init: function () {
                    this.NullUnity = 2;
                }
            }
        },
        alias: ["GetRealObject", "System$Runtime$Serialization$IObjectReference$GetRealObject"],
        methods: {
            GetRealObject: function (context) {
                throw System.NotImplemented.ByDesign;

            }
        }
    });

    // @source DateTimeKind.js

    Bridge.define("System.DateTimeKind", {
        $kind: "enum",
        statics: {
            fields: {
                Unspecified: 0,
                Utc: 1,
                Local: 2
            }
        }
    });

    // @source DateTimeOffset.js

    Bridge.define("System.DateTimeOffset", {
        inherits: function () { return [System.IComparable,System.IFormattable,System.Runtime.Serialization.ISerializable,System.Runtime.Serialization.IDeserializationCallback,System.IComparable$1(System.DateTimeOffset),System.IEquatable$1(System.DateTimeOffset)]; },
        $kind: "struct",
        statics: {
            fields: {
                MaxOffset: System.Int64(0),
                MinOffset: System.Int64(0),
                UnixEpochTicks: System.Int64(0),
                UnixEpochSeconds: System.Int64(0),
                UnixEpochMilliseconds: System.Int64(0),
                MinValue: null,
                MaxValue: null
            },
            props: {
                Now: {
                    get: function () {
                        return new System.DateTimeOffset.$ctor1(System.DateTime.getNow());
                    }
                },
                UtcNow: {
                    get: function () {
                        return new System.DateTimeOffset.$ctor1(System.DateTime.getUtcNow());
                    }
                }
            },
            ctors: {
                init: function () {
                    this.MinValue = new System.DateTimeOffset();
                    this.MaxValue = new System.DateTimeOffset();
                    this.MaxOffset = System.Int64([1488826368,117]);
                    this.MinOffset = System.Int64([-1488826368,-118]);
                    this.UnixEpochTicks = System.Int64([-139100160,144670709]);
                    this.UnixEpochSeconds = System.Int64([2006054656,14]);
                    this.UnixEpochMilliseconds = System.Int64([304928768,14467]);
                    this.MinValue = new System.DateTimeOffset.$ctor5(System.DateTime.MinTicks, System.TimeSpan.zero);
                    this.MaxValue = new System.DateTimeOffset.$ctor5(System.DateTime.MaxTicks, System.TimeSpan.zero);
                }
            },
            methods: {
                Compare: function (first, second) {
                    return Bridge.compare(first.UtcDateTime, second.UtcDateTime);
                },
                Equals: function (first, second) {
                    return Bridge.equalsT(first.UtcDateTime, second.UtcDateTime);
                },
                FromFileTime: function (fileTime) {
                    return new System.DateTimeOffset.$ctor1(System.DateTime.FromFileTime(fileTime));
                },
                FromUnixTimeSeconds: function (seconds) {
                    var MinSeconds = System.Int64([-2006054656,-15]);
                    var MaxSeconds = System.Int64([-769665,58]);

                    if (seconds.lt(MinSeconds) || seconds.gt(MaxSeconds)) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("seconds", System.String.format(System.Environment.GetResourceString("ArgumentOutOfRange_Range"), MinSeconds, MaxSeconds));
                    }

                    var ticks = seconds.mul(System.Int64(10000000)).add(System.DateTimeOffset.UnixEpochTicks);
                    return new System.DateTimeOffset.$ctor5(ticks, System.TimeSpan.zero);
                },
                FromUnixTimeMilliseconds: function (milliseconds) {
                    var MinMilliseconds = System.Int64([-304928768,-14468]);
                    var MaxMilliseconds = System.Int64([-769664001,58999]);

                    if (milliseconds.lt(MinMilliseconds) || milliseconds.gt(MaxMilliseconds)) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("milliseconds", System.String.format(System.Environment.GetResourceString("ArgumentOutOfRange_Range"), MinMilliseconds, MaxMilliseconds));
                    }

                    var ticks = milliseconds.mul(System.Int64(10000)).add(System.DateTimeOffset.UnixEpochTicks);
                    return new System.DateTimeOffset.$ctor5(ticks, System.TimeSpan.zero);
                },
                Parse: function (input) {
                    var offset = { };
                    var dateResult = System.DateTimeParse.Parse$1(input, System.Globalization.DateTimeFormatInfo.currentInfo, 0, offset);
                    return new System.DateTimeOffset.$ctor5(System.DateTime.getTicks(dateResult), offset.v);
                },
                Parse$1: function (input, formatProvider) {
                    return System.DateTimeOffset.Parse$2(input, formatProvider, 0);
                },
                Parse$2: function (input, formatProvider, styles) {
                    throw System.NotImplemented.ByDesign;
                },
                ParseExact: function (input, format, formatProvider) {
                    return System.DateTimeOffset.ParseExact$1(input, format, formatProvider, 0);
                },
                ParseExact$1: function (input, format, formatProvider, styles) {
                    throw System.NotImplemented.ByDesign;
                },
                TryParse: function (input, result) {
                    var offset = { };
                    var dateResult = { };
                    var parsed = System.DateTimeParse.TryParse$1(input, System.Globalization.DateTimeFormatInfo.currentInfo, 0, dateResult, offset);
                    result.v = new System.DateTimeOffset.$ctor5(System.DateTime.getTicks(dateResult.v), offset.v);
                    return parsed;
                },
                ValidateOffset: function (offset) {
                    var ticks = offset.getTicks();
                    if (ticks.mod(System.Int64(600000000)).ne(System.Int64(0))) {
                        throw new System.ArgumentException.$ctor3(System.Environment.GetResourceString("Argument_OffsetPrecision"), "offset");
                    }
                    if (ticks.lt(System.DateTimeOffset.MinOffset) || ticks.gt(System.DateTimeOffset.MaxOffset)) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("offset", System.Environment.GetResourceString("Argument_OffsetOutOfRange"));
                    }
                    return System.Int64.clip16(offset.getTicks().div(System.Int64(600000000)));
                },
                ValidateDate: function (dateTime, offset) {
                    var utcTicks = System.DateTime.getTicks(dateTime).sub(offset.getTicks());
                    if (utcTicks.lt(System.DateTime.MinTicks) || utcTicks.gt(System.DateTime.MaxTicks)) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("offset", System.Environment.GetResourceString("Argument_UTCOutOfRange"));
                    }
                    return System.DateTime.create$2(utcTicks, 0);
                },
                op_Implicit: function (dateTime) {
                    return new System.DateTimeOffset.$ctor1(dateTime);
                },
                op_Addition: function (dateTimeOffset, timeSpan) {
                    return new System.DateTimeOffset.$ctor2(System.DateTime.adddt(dateTimeOffset.ClockDateTime, timeSpan), dateTimeOffset.Offset);
                },
                op_Subtraction: function (dateTimeOffset, timeSpan) {
                    return new System.DateTimeOffset.$ctor2(System.DateTime.subdt(dateTimeOffset.ClockDateTime, timeSpan), dateTimeOffset.Offset);
                },
                op_Subtraction$1: function (left, right) {
                    return System.DateTime.subdd(left.UtcDateTime, right.UtcDateTime);
                },
                op_Equality: function (left, right) {
                    return Bridge.equals(left.UtcDateTime, right.UtcDateTime);
                },
                op_Inequality: function (left, right) {
                    return !Bridge.equals(left.UtcDateTime, right.UtcDateTime);
                },
                op_LessThan: function (left, right) {
                    return System.DateTime.lt(left.UtcDateTime, right.UtcDateTime);
                },
                op_LessThanOrEqual: function (left, right) {
                    return System.DateTime.lte(left.UtcDateTime, right.UtcDateTime);
                },
                op_GreaterThan: function (left, right) {
                    return System.DateTime.gt(left.UtcDateTime, right.UtcDateTime);
                },
                op_GreaterThanOrEqual: function (left, right) {
                    return System.DateTime.gte(left.UtcDateTime, right.UtcDateTime);
                },
                getDefaultValue: function () { return new System.DateTimeOffset(); }
            }
        },
        fields: {
            m_dateTime: null,
            m_offsetMinutes: 0
        },
        props: {
            DateTime: {
                get: function () {
                    return this.ClockDateTime;
                }
            },
            UtcDateTime: {
                get: function () {
                    return System.DateTime.specifyKind(this.m_dateTime, 1);
                }
            },
            LocalDateTime: {
                get: function () {
                    return System.DateTime.toLocalTime(this.UtcDateTime);
                }
            },
            ClockDateTime: {
                get: function () {
                    return System.DateTime.create$2(System.DateTime.getTicks((System.DateTime.adddt(this.m_dateTime, this.Offset))), 0);
                }
            },
            Date: {
                get: function () {
                    return System.DateTime.getDate(this.ClockDateTime);
                }
            },
            Day: {
                get: function () {
                    return System.DateTime.getDay(this.ClockDateTime);
                }
            },
            DayOfWeek: {
                get: function () {
                    return System.DateTime.getDayOfWeek(this.ClockDateTime);
                }
            },
            DayOfYear: {
                get: function () {
                    return System.DateTime.getDayOfYear(this.ClockDateTime);
                }
            },
            Hour: {
                get: function () {
                    return System.DateTime.getHour(this.ClockDateTime);
                }
            },
            Millisecond: {
                get: function () {
                    return System.DateTime.getMillisecond(this.ClockDateTime);
                }
            },
            Minute: {
                get: function () {
                    return System.DateTime.getMinute(this.ClockDateTime);
                }
            },
            Month: {
                get: function () {
                    return System.DateTime.getMonth(this.ClockDateTime);
                }
            },
            Offset: {
                get: function () {
                    return new System.TimeSpan(0, this.m_offsetMinutes, 0);
                }
            },
            Second: {
                get: function () {
                    return System.DateTime.getSecond(this.ClockDateTime);
                }
            },
            Ticks: {
                get: function () {
                    return System.DateTime.getTicks(this.ClockDateTime);
                }
            },
            UtcTicks: {
                get: function () {
                    return System.DateTime.getTicks(this.UtcDateTime);
                }
            },
            TimeOfDay: {
                get: function () {
                    return System.DateTime.getTimeOfDay(this.ClockDateTime);
                }
            },
            Year: {
                get: function () {
                    return System.DateTime.getYear(this.ClockDateTime);
                }
            }
        },
        alias: [
            "compareTo", ["System$IComparable$1$System$DateTimeOffset$compareTo", "System$IComparable$1$compareTo"],
            "equalsT", "System$IEquatable$1$System$DateTimeOffset$equalsT",
            "format", "System$IFormattable$format"
        ],
        ctors: {
            init: function () {
                this.m_dateTime = System.DateTime.getDefaultValue();
            },
            $ctor5: function (ticks, offset) {
                this.$initialize();
                this.m_offsetMinutes = System.DateTimeOffset.ValidateOffset(offset);
                var dateTime = System.DateTime.create$2(ticks);
                this.m_dateTime = System.DateTimeOffset.ValidateDate(dateTime, offset);
            },
            $ctor1: function (dateTime) {
                this.$initialize();
                var offset;

                offset = new System.TimeSpan(System.Int64(0));
                this.m_offsetMinutes = System.DateTimeOffset.ValidateOffset(offset);
                this.m_dateTime = System.DateTimeOffset.ValidateDate(dateTime, offset);
            },
            $ctor2: function (dateTime, offset) {
                this.$initialize();
                this.m_offsetMinutes = System.DateTimeOffset.ValidateOffset(offset);
                this.m_dateTime = System.DateTimeOffset.ValidateDate(dateTime, offset);
            },
            $ctor4: function (year, month, day, hour, minute, second, offset) {
                this.$initialize();
                this.m_offsetMinutes = System.DateTimeOffset.ValidateOffset(offset);
                this.m_dateTime = System.DateTimeOffset.ValidateDate(System.DateTime.create(year, month, day, hour, minute, second), offset);
            },
            $ctor3: function (year, month, day, hour, minute, second, millisecond, offset) {
                this.$initialize();
                this.m_offsetMinutes = System.DateTimeOffset.ValidateOffset(offset);
                this.m_dateTime = System.DateTimeOffset.ValidateDate(System.DateTime.create(year, month, day, hour, minute, second, millisecond), offset);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            ToOffset: function (offset) {
                return new System.DateTimeOffset.$ctor5(System.DateTime.getTicks((System.DateTime.adddt(this.m_dateTime, offset))), offset);
            },
            Add: function (timeSpan) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.add(this.ClockDateTime, timeSpan), this.Offset);
            },
            AddDays: function (days) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addDays(this.ClockDateTime, days), this.Offset);
            },
            AddHours: function (hours) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addHours(this.ClockDateTime, hours), this.Offset);
            },
            AddMilliseconds: function (milliseconds) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addMilliseconds(this.ClockDateTime, milliseconds), this.Offset);
            },
            AddMinutes: function (minutes) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addMinutes(this.ClockDateTime, minutes), this.Offset);
            },
            AddMonths: function (months) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addMonths(this.ClockDateTime, months), this.Offset);
            },
            AddSeconds: function (seconds) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addSeconds(this.ClockDateTime, seconds), this.Offset);
            },
            AddTicks: function (ticks) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addTicks(this.ClockDateTime, ticks), this.Offset);
            },
            AddYears: function (years) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.addYears(this.ClockDateTime, years), this.Offset);
            },
            System$IComparable$compareTo: function (obj) {
                if (obj == null) {
                    return 1;
                }
                if (!(Bridge.is(obj, System.DateTimeOffset))) {
                    throw new System.ArgumentException.$ctor1(System.Environment.GetResourceString("Arg_MustBeDateTimeOffset"));
                }

                var objUtc = System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.DateTimeOffset), System.DateTimeOffset)).UtcDateTime;
                var utc = this.UtcDateTime;
                if (System.DateTime.gt(utc, objUtc)) {
                    return 1;
                }
                if (System.DateTime.lt(utc, objUtc)) {
                    return -1;
                }
                return 0;
            },
            compareTo: function (other) {
                var otherUtc = other.UtcDateTime;
                var utc = this.UtcDateTime;
                if (System.DateTime.gt(utc, otherUtc)) {
                    return 1;
                }
                if (System.DateTime.lt(utc, otherUtc)) {
                    return -1;
                }
                return 0;
            },
            equals: function (obj) {
                if (Bridge.is(obj, System.DateTimeOffset)) {
                    return Bridge.equalsT(this.UtcDateTime, System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.DateTimeOffset), System.DateTimeOffset)).UtcDateTime);
                }
                return false;
            },
            equalsT: function (other) {
                return Bridge.equalsT(this.UtcDateTime, other.UtcDateTime);
            },
            EqualsExact: function (other) {
                return (Bridge.equals(this.ClockDateTime, other.ClockDateTime) && System.TimeSpan.eq(this.Offset, other.Offset) && System.DateTime.getKind(this.ClockDateTime) === System.DateTime.getKind(other.ClockDateTime));
            },
            System$Runtime$Serialization$IDeserializationCallback$OnDeserialization: function (sender) {
                try {
                    this.m_offsetMinutes = System.DateTimeOffset.ValidateOffset(this.Offset);
                    this.m_dateTime = System.DateTimeOffset.ValidateDate(this.ClockDateTime, this.Offset);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var e;
                    if (Bridge.is($e1, System.ArgumentException)) {
                        e = $e1;
                        throw new System.Runtime.Serialization.SerializationException.$ctor2(System.Environment.GetResourceString("Serialization_InvalidData"), e);
                    } else {
                        throw $e1;
                    }
                }
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.UtcDateTime);
            },
            Subtract$1: function (value) {
                return System.DateTime.subdd(this.UtcDateTime, value.UtcDateTime);
            },
            Subtract: function (value) {
                return new System.DateTimeOffset.$ctor2(System.DateTime.subtract(this.ClockDateTime, value), this.Offset);
            },
            ToFileTime: function () {
                return System.DateTime.ToFileTime(this.UtcDateTime);
            },
            ToUnixTimeSeconds: function () {
                var seconds = System.DateTime.getTicks(this.UtcDateTime).div(System.Int64(10000000));
                return seconds.sub(System.DateTimeOffset.UnixEpochSeconds);
            },
            ToUnixTimeMilliseconds: function () {
                var milliseconds = System.DateTime.getTicks(this.UtcDateTime).div(System.Int64(10000));
                return milliseconds.sub(System.DateTimeOffset.UnixEpochMilliseconds);
            },
            ToLocalTime: function () {
                return this.ToLocalTime$1(false);
            },
            ToLocalTime$1: function (throwOnOverflow) {
                return new System.DateTimeOffset.$ctor1(System.DateTime.toLocalTime(this.UtcDateTime, throwOnOverflow));
            },
            toString: function () {
                return System.DateTime.format(System.DateTime.specifyKind(this.ClockDateTime, 2));

            },
            ToString$1: function (format) {
                return System.DateTime.format(System.DateTime.specifyKind(this.ClockDateTime, 2), format);

            },
            ToString: function (formatProvider) {
                return System.DateTime.format(System.DateTime.specifyKind(this.ClockDateTime, 2), null, formatProvider);

            },
            format: function (format, formatProvider) {
                return System.DateTime.format(System.DateTime.specifyKind(this.ClockDateTime, 2), format, formatProvider);

            },
            ToUniversalTime: function () {
                return new System.DateTimeOffset.$ctor1(this.UtcDateTime);
            },
            $clone: function (to) {
                var s = to || new System.DateTimeOffset();
                s.m_dateTime = this.m_dateTime;
                s.m_offsetMinutes = this.m_offsetMinutes;
                return s;
            }
        }
    });

    // @source DateTimeParse.js

    Bridge.define("System.DateTimeParse", {
        statics: {
            methods: {
                TryParseExact: function (s, format, dtfi, style, result) {
                    return System.DateTime.tryParseExact(s, format, null, result);

                },
                Parse: function (s, dtfi, styles) {
                    return System.DateTime.parse(s, dtfi);
                },
                Parse$1: function (s, dtfi, styles, offset) {
                    throw System.NotImplemented.ByDesign;

                },
                TryParse: function (s, dtfi, styles, result) {
                    return System.DateTime.tryParse(s, null, result);

                },
                TryParse$1: function (s, dtfi, styles, result, offset) {
                    throw System.NotImplemented.ByDesign;
                }
            }
        }
    });

    // @source DateTimeResult.js

    Bridge.define("System.DateTimeResult", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.DateTimeResult(); }
            }
        },
        fields: {
            Year: 0,
            Month: 0,
            Day: 0,
            Hour: 0,
            Minute: 0,
            Second: 0,
            fraction: 0,
            era: 0,
            flags: 0,
            timeZoneOffset: null,
            calendar: null,
            parsedDate: null,
            failure: 0,
            failureMessageID: null,
            failureMessageFormatArgument: null,
            failureArgumentName: null
        },
        ctors: {
            init: function () {
                this.timeZoneOffset = new System.TimeSpan();
                this.parsedDate = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Init: function () {
                this.Year = -1;
                this.Month = -1;
                this.Day = -1;
                this.fraction = -1;
                this.era = -1;
            },
            SetDate: function (year, month, day) {
                this.Year = year;
                this.Month = month;
                this.Day = day;
            },
            SetFailure: function (failure, failureMessageID, failureMessageFormatArgument) {
                this.failure = failure;
                this.failureMessageID = failureMessageID;
                this.failureMessageFormatArgument = failureMessageFormatArgument;
            },
            SetFailure$1: function (failure, failureMessageID, failureMessageFormatArgument, failureArgumentName) {
                this.failure = failure;
                this.failureMessageID = failureMessageID;
                this.failureMessageFormatArgument = failureMessageFormatArgument;
                this.failureArgumentName = failureArgumentName;
            },
            getHashCode: function () {
                var h = Bridge.addHash([5374321750, this.Year, this.Month, this.Day, this.Hour, this.Minute, this.Second, this.fraction, this.era, this.flags, this.timeZoneOffset, this.calendar, this.parsedDate, this.failure, this.failureMessageID, this.failureMessageFormatArgument, this.failureArgumentName]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.DateTimeResult)) {
                    return false;
                }
                return Bridge.equals(this.Year, o.Year) && Bridge.equals(this.Month, o.Month) && Bridge.equals(this.Day, o.Day) && Bridge.equals(this.Hour, o.Hour) && Bridge.equals(this.Minute, o.Minute) && Bridge.equals(this.Second, o.Second) && Bridge.equals(this.fraction, o.fraction) && Bridge.equals(this.era, o.era) && Bridge.equals(this.flags, o.flags) && Bridge.equals(this.timeZoneOffset, o.timeZoneOffset) && Bridge.equals(this.calendar, o.calendar) && Bridge.equals(this.parsedDate, o.parsedDate) && Bridge.equals(this.failure, o.failure) && Bridge.equals(this.failureMessageID, o.failureMessageID) && Bridge.equals(this.failureMessageFormatArgument, o.failureMessageFormatArgument) && Bridge.equals(this.failureArgumentName, o.failureArgumentName);
            },
            $clone: function (to) {
                var s = to || new System.DateTimeResult();
                s.Year = this.Year;
                s.Month = this.Month;
                s.Day = this.Day;
                s.Hour = this.Hour;
                s.Minute = this.Minute;
                s.Second = this.Second;
                s.fraction = this.fraction;
                s.era = this.era;
                s.flags = this.flags;
                s.timeZoneOffset = this.timeZoneOffset;
                s.calendar = this.calendar;
                s.parsedDate = this.parsedDate;
                s.failure = this.failure;
                s.failureMessageID = this.failureMessageID;
                s.failureMessageFormatArgument = this.failureMessageFormatArgument;
                s.failureArgumentName = this.failureArgumentName;
                return s;
            }
        }
    });

    // @source DayOfWeek.js

    Bridge.define("System.DayOfWeek", {
        $kind: "enum",
        statics: {
            fields: {
                Sunday: 0,
                Monday: 1,
                Tuesday: 2,
                Wednesday: 3,
                Thursday: 4,
                Friday: 5,
                Saturday: 6
            }
        }
    });

    // @source DBNull.js

    Bridge.define("System.DBNull", {
        inherits: [System.Runtime.Serialization.ISerializable,System.IConvertible],
        statics: {
            fields: {
                Value: null
            },
            ctors: {
                init: function () {
                    this.Value = new System.DBNull();
                }
            }
        },
        alias: [
            "ToString", "System$IConvertible$ToString",
            "GetTypeCode", "System$IConvertible$GetTypeCode"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                return "";
            },
            ToString: function (provider) {
                return "";
            },
            GetTypeCode: function () {
                return System.TypeCode.DBNull;
            },
            System$IConvertible$ToBoolean: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToChar: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToSByte: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToByte: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToInt16: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToUInt16: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToInt32: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToUInt32: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToInt64: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToUInt64: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToSingle: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToDouble: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToDecimal: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToDateTime: function (provider) {
                throw new System.InvalidCastException.$ctor1("Object cannot be cast from DBNull to other types.");
            },
            System$IConvertible$ToType: function (type, provider) {
                return System.Convert.defaultToType(Bridge.cast(this, System.IConvertible), type, provider);
            }
        }
    });

    // @source Empty.js

    Bridge.define("System.Empty", {
        statics: {
            fields: {
                Value: null
            },
            ctors: {
                init: function () {
                    this.Value = new System.Empty();
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                return "";
            }
        }
    });

    // @source ApplicationException.js

    Bridge.define("System.ApplicationException", {
        inherits: [System.Exception],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this, "Error in the application.");
                this.HResult = -2146232832;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
                this.HResult = -2146232832;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerException);
                this.HResult = -2146232832;
            }
        }
    });

    // @source ArgumentException.js

    Bridge.define("System.ArgumentException", {
        inherits: [System.SystemException],
        fields: {
            _paramName: null
        },
        props: {
            Message: {
                get: function () {
                    var s = Bridge.ensureBaseProperty(this, "Message").$System$Exception$Message;
                    if (!System.String.isNullOrEmpty(this._paramName)) {
                        var resourceString = System.SR.Format("Parameter name: {0}", this._paramName);
                        return (s || "") + ("\n" || "") + (resourceString || "");
                    } else {
                        return s;
                    }
                }
            },
            ParamName: {
                get: function () {
                    return this._paramName;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Value does not fall within the expected range.");
                this.HResult = -2147024809;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147024809;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2147024809;
            },
            $ctor4: function (message, paramName, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this._paramName = paramName;
                this.HResult = -2147024809;
            },
            $ctor3: function (message, paramName) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this._paramName = paramName;
                this.HResult = -2147024809;
            }
        }
    });

    // @source ArgumentNullException.js

    Bridge.define("System.ArgumentNullException", {
        inherits: [System.ArgumentException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.ArgumentException.$ctor1.call(this, "Value cannot be null.");
                this.HResult = -2147467261;
            },
            $ctor1: function (paramName) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, "Value cannot be null.", paramName);
                this.HResult = -2147467261;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.ArgumentException.$ctor2.call(this, message, innerException);
                this.HResult = -2147467261;
            },
            $ctor3: function (paramName, message) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, message, paramName);
                this.HResult = -2147467261;
            }
        }
    });

    // @source ArgumentOutOfRangeException.js

    Bridge.define("System.ArgumentOutOfRangeException", {
        inherits: [System.ArgumentException],
        fields: {
            _actualValue: null
        },
        props: {
            Message: {
                get: function () {
                    var s = Bridge.ensureBaseProperty(this, "Message").$System$ArgumentException$Message;
                    if (this._actualValue != null) {
                        var valueMessage = System.SR.Format("Actual value was {0}.", Bridge.toString(this._actualValue));
                        if (s == null) {
                            return valueMessage;
                        }
                        return (s || "") + ("\n" || "") + (valueMessage || "");
                    }
                    return s;
                }
            },
            ActualValue: {
                get: function () {
                    return this._actualValue;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.ArgumentException.$ctor1.call(this, "Specified argument was out of the range of valid values.");
                this.HResult = -2146233086;
            },
            $ctor1: function (paramName) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, "Specified argument was out of the range of valid values.", paramName);
                this.HResult = -2146233086;
            },
            $ctor4: function (paramName, message) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, message, paramName);
                this.HResult = -2146233086;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.ArgumentException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233086;
            },
            $ctor3: function (paramName, actualValue, message) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, message, paramName);
                this._actualValue = actualValue;
                this.HResult = -2146233086;
            }
        }
    });

    // @source ArithmeticException.js

    Bridge.define("System.ArithmeticException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Overflow or underflow in the arithmetic operation.");
                this.HResult = -2147024362;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147024362;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2147024362;
            }
        }
    });

    // @source Base64FormattingOptions.js

    Bridge.define("System.Base64FormattingOptions", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                InsertLineBreaks: 1
            }
        },
        $flags: true
    });

    // @source DivideByZeroException.js

    Bridge.define("System.DivideByZeroException", {
        inherits: [System.ArithmeticException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.ArithmeticException.$ctor1.call(this, "Attempted to divide by zero.");
                this.HResult = -2147352558;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.ArithmeticException.$ctor1.call(this, message);
                this.HResult = -2147352558;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.ArithmeticException.$ctor2.call(this, message, innerException);
                this.HResult = -2147352558;
            }
        }
    });

    // @source ExceptionArgument.js

    Bridge.define("System.ExceptionArgument", {
        $kind: "enum",
        statics: {
            fields: {
                obj: 0,
                dictionary: 1,
                array: 2,
                info: 3,
                key: 4,
                collection: 5,
                list: 6,
                match: 7,
                converter: 8,
                capacity: 9,
                index: 10,
                startIndex: 11,
                value: 12,
                count: 13,
                arrayIndex: 14,
                $name: 15,
                item: 16,
                options: 17,
                view: 18,
                sourceBytesToCopy: 19,
                action: 20,
                comparison: 21,
                offset: 22,
                newSize: 23,
                elementType: 24,
                $length: 25,
                length1: 26,
                length2: 27,
                length3: 28,
                lengths: 29,
                len: 30,
                lowerBounds: 31,
                sourceArray: 32,
                destinationArray: 33,
                sourceIndex: 34,
                destinationIndex: 35,
                indices: 36,
                index1: 37,
                index2: 38,
                index3: 39,
                other: 40,
                comparer: 41,
                endIndex: 42,
                keys: 43,
                creationOptions: 44,
                timeout: 45,
                tasks: 46,
                scheduler: 47,
                continuationFunction: 48,
                millisecondsTimeout: 49,
                millisecondsDelay: 50,
                function: 51,
                exceptions: 52,
                exception: 53,
                cancellationToken: 54,
                delay: 55,
                asyncResult: 56,
                endMethod: 57,
                endFunction: 58,
                beginMethod: 59,
                continuationOptions: 60,
                continuationAction: 61,
                concurrencyLevel: 62,
                text: 63,
                callBack: 64,
                type: 65,
                stateMachine: 66,
                pHandle: 67,
                values: 68,
                task: 69,
                s: 70,
                keyValuePair: 71,
                input: 72,
                ownedMemory: 73,
                pointer: 74,
                start: 75,
                format: 76,
                culture: 77,
                comparable: 78,
                source: 79,
                state: 80
            }
        }
    });

    // @source ExceptionResource.js

    Bridge.define("System.ExceptionResource", {
        $kind: "enum",
        statics: {
            fields: {
                Argument_ImplementIComparable: 0,
                Argument_InvalidType: 1,
                Argument_InvalidArgumentForComparison: 2,
                Argument_InvalidRegistryKeyPermissionCheck: 3,
                ArgumentOutOfRange_NeedNonNegNum: 4,
                Arg_ArrayPlusOffTooSmall: 5,
                Arg_NonZeroLowerBound: 6,
                Arg_RankMultiDimNotSupported: 7,
                Arg_RegKeyDelHive: 8,
                Arg_RegKeyStrLenBug: 9,
                Arg_RegSetStrArrNull: 10,
                Arg_RegSetMismatchedKind: 11,
                Arg_RegSubKeyAbsent: 12,
                Arg_RegSubKeyValueAbsent: 13,
                Argument_AddingDuplicate: 14,
                Serialization_InvalidOnDeser: 15,
                Serialization_MissingKeys: 16,
                Serialization_NullKey: 17,
                Argument_InvalidArrayType: 18,
                NotSupported_KeyCollectionSet: 19,
                NotSupported_ValueCollectionSet: 20,
                ArgumentOutOfRange_SmallCapacity: 21,
                ArgumentOutOfRange_Index: 22,
                Argument_InvalidOffLen: 23,
                Argument_ItemNotExist: 24,
                ArgumentOutOfRange_Count: 25,
                ArgumentOutOfRange_InvalidThreshold: 26,
                ArgumentOutOfRange_ListInsert: 27,
                NotSupported_ReadOnlyCollection: 28,
                InvalidOperation_CannotRemoveFromStackOrQueue: 29,
                InvalidOperation_EmptyQueue: 30,
                InvalidOperation_EnumOpCantHappen: 31,
                InvalidOperation_EnumFailedVersion: 32,
                InvalidOperation_EmptyStack: 33,
                ArgumentOutOfRange_BiggerThanCollection: 34,
                InvalidOperation_EnumNotStarted: 35,
                InvalidOperation_EnumEnded: 36,
                NotSupported_SortedListNestedWrite: 37,
                InvalidOperation_NoValue: 38,
                InvalidOperation_RegRemoveSubKey: 39,
                Security_RegistryPermission: 40,
                UnauthorizedAccess_RegistryNoWrite: 41,
                ObjectDisposed_RegKeyClosed: 42,
                NotSupported_InComparableType: 43,
                Argument_InvalidRegistryOptionsCheck: 44,
                Argument_InvalidRegistryViewCheck: 45,
                InvalidOperation_NullArray: 46,
                Arg_MustBeType: 47,
                Arg_NeedAtLeast1Rank: 48,
                ArgumentOutOfRange_HugeArrayNotSupported: 49,
                Arg_RanksAndBounds: 50,
                Arg_RankIndices: 51,
                Arg_Need1DArray: 52,
                Arg_Need2DArray: 53,
                Arg_Need3DArray: 54,
                NotSupported_FixedSizeCollection: 55,
                ArgumentException_OtherNotArrayOfCorrectLength: 56,
                Rank_MultiDimNotSupported: 57,
                InvalidOperation_IComparerFailed: 58,
                ArgumentOutOfRange_EndIndexStartIndex: 59,
                Arg_LowerBoundsMustMatch: 60,
                Arg_BogusIComparer: 61,
                Task_WaitMulti_NullTask: 62,
                Task_ThrowIfDisposed: 63,
                Task_Start_TaskCompleted: 64,
                Task_Start_Promise: 65,
                Task_Start_ContinuationTask: 66,
                Task_Start_AlreadyStarted: 67,
                Task_RunSynchronously_TaskCompleted: 68,
                Task_RunSynchronously_Continuation: 69,
                Task_RunSynchronously_Promise: 70,
                Task_RunSynchronously_AlreadyStarted: 71,
                Task_MultiTaskContinuation_NullTask: 72,
                Task_MultiTaskContinuation_EmptyTaskList: 73,
                Task_Dispose_NotCompleted: 74,
                Task_Delay_InvalidMillisecondsDelay: 75,
                Task_Delay_InvalidDelay: 76,
                Task_ctor_LRandSR: 77,
                Task_ContinueWith_NotOnAnything: 78,
                Task_ContinueWith_ESandLR: 79,
                TaskT_TransitionToFinal_AlreadyCompleted: 80,
                TaskCompletionSourceT_TrySetException_NullException: 81,
                TaskCompletionSourceT_TrySetException_NoExceptions: 82,
                MemoryDisposed: 83,
                Memory_OutstandingReferences: 84,
                InvalidOperation_WrongAsyncResultOrEndCalledMultiple: 85,
                ConcurrentDictionary_ConcurrencyLevelMustBePositive: 86,
                ConcurrentDictionary_CapacityMustNotBeNegative: 87,
                ConcurrentDictionary_TypeOfValueIncorrect: 88,
                ConcurrentDictionary_TypeOfKeyIncorrect: 89,
                ConcurrentDictionary_KeyAlreadyExisted: 90,
                ConcurrentDictionary_ItemKeyIsNull: 91,
                ConcurrentDictionary_IndexIsNegative: 92,
                ConcurrentDictionary_ArrayNotLargeEnough: 93,
                ConcurrentDictionary_ArrayIncorrectType: 94,
                ConcurrentCollection_SyncRoot_NotSupported: 95,
                ArgumentOutOfRange_Enum: 96,
                InvalidOperation_HandleIsNotInitialized: 97,
                AsyncMethodBuilder_InstanceNotInitialized: 98,
                ArgumentNull_SafeHandle: 99
            }
        }
    });

    // @source FormatException.js

    Bridge.define("System.FormatException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "One of the identified items was in an invalid format.");
                this.HResult = -2146233033;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233033;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233033;
            }
        }
    });

    // @source FormattableString.js

    Bridge.define("System.FormattableString", {
        inherits: [System.IFormattable],
        statics: {
            methods: {
                Invariant: function (formattable) {
                    if (formattable == null) {
                        throw new System.ArgumentNullException.$ctor1("formattable");
                    }

                    return formattable.ToString(System.Globalization.CultureInfo.invariantCulture);
                }
            }
        },
        methods: {
            System$IFormattable$format: function (ignored, formatProvider) {
                return this.ToString(formatProvider);
            },
            toString: function () {
                return this.ToString(System.Globalization.CultureInfo.getCurrentCulture());
            }
        }
    });

    // @source ConcreteFormattableString.js

    Bridge.define("System.Runtime.CompilerServices.FormattableStringFactory.ConcreteFormattableString", {
        inherits: [System.FormattableString],
        $kind: "nested class",
        fields: {
            _format: null,
            _arguments: null
        },
        props: {
            Format: {
                get: function () {
                    return this._format;
                }
            },
            ArgumentCount: {
                get: function () {
                    return this._arguments.length;
                }
            }
        },
        ctors: {
            ctor: function (format, $arguments) {
                this.$initialize();
                System.FormattableString.ctor.call(this);
                this._format = format;
                this._arguments = $arguments;
            }
        },
        methods: {
            GetArguments: function () {
                return this._arguments;
            },
            GetArgument: function (index) {
                return this._arguments[System.Array.index(index, this._arguments)];
            },
            ToString: function (formatProvider) {
                return System.String.formatProvider.apply(System.String, [formatProvider, this._format].concat(this._arguments));
            }
        }
    });

    // @source FormattableStringFactory.js

    Bridge.define("System.Runtime.CompilerServices.FormattableStringFactory", {
        statics: {
            methods: {
                Create: function (format, $arguments) {
                    if ($arguments === void 0) { $arguments = []; }
                    if (format == null) {
                        throw new System.ArgumentNullException.$ctor1("format");
                    }

                    if ($arguments == null) {
                        throw new System.ArgumentNullException.$ctor1("arguments");
                    }

                    return new System.Runtime.CompilerServices.FormattableStringFactory.ConcreteFormattableString(format, $arguments);
                }
            }
        }
    });

    // @source Guid.js

    Bridge.define("System.Guid", {
        inherits: function () { return [System.IEquatable$1(System.Guid),System.IComparable$1(System.Guid),System.IFormattable]; },
        $kind: "struct",
        statics: {
            fields: {
                error1: null,
                Valid: null,
                Split: null,
                NonFormat: null,
                Replace: null,
                Rnd: null,
                Empty: null
            },
            ctors: {
                init: function () {
                    this.Empty = new System.Guid();
                    this.error1 = "Byte array for GUID must be exactly {0} bytes long";
                    this.Valid = new System.Text.RegularExpressions.Regex.ctor("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", 1);
                    this.Split = new System.Text.RegularExpressions.Regex.ctor("^(.{8})(.{4})(.{4})(.{4})(.{12})$");
                    this.NonFormat = new System.Text.RegularExpressions.Regex.ctor("^[{(]?([0-9a-f]{8})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{12})[)}]?$", 1);
                    this.Replace = new System.Text.RegularExpressions.Regex.ctor("-");
                    this.Rnd = new System.Random.ctor();
                }
            },
            methods: {
                Parse: function (input) {
                    return System.Guid.ParseExact(input, null);
                },
                ParseExact: function (input, format) {
                    var r = new System.Guid.ctor();
                    r.ParseInternal(input, format, true);
                    return r;
                },
                TryParse: function (input, result) {
                    return System.Guid.TryParseExact(input, null, result);
                },
                TryParseExact: function (input, format, result) {
                    result.v = new System.Guid.ctor();
                    return result.v.ParseInternal(input, format, false);
                },
                NewGuid: function () {
                    var a = System.Array.init(16, 0, System.Byte);

                    System.Guid.Rnd.NextBytes(a);

                    a[System.Array.index(7, a)] = (a[System.Array.index(7, a)] & 15 | 64) & 255;
                    a[System.Array.index(8, a)] = (a[System.Array.index(8, a)] & 191 | 128) & 255;

                    return new System.Guid.$ctor1(a);
                },
                MakeBinary: function (x) {
                    return System.Int32.format((x & 255), "x2");
                },
                op_Equality: function (a, b) {
                    if (Bridge.referenceEquals(a, null)) {
                        return Bridge.referenceEquals(b, null);
                    }

                    return a.equalsT(b);
                },
                op_Inequality: function (a, b) {
                    return !(System.Guid.op_Equality(a, b));
                },
                getDefaultValue: function () { return new System.Guid(); }
            }
        },
        fields: {
            _a: 0,
            _b: 0,
            _c: 0,
            _d: 0,
            _e: 0,
            _f: 0,
            _g: 0,
            _h: 0,
            _i: 0,
            _j: 0,
            _k: 0
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$Guid$equalsT",
            "compareTo", ["System$IComparable$1$System$Guid$compareTo", "System$IComparable$1$compareTo"],
            "format", "System$IFormattable$format"
        ],
        ctors: {
            $ctor4: function (uuid) {
                this.$initialize();
                (new System.Guid.ctor()).$clone(this);

                this.ParseInternal(uuid, null, true);
            },
            $ctor1: function (b) {
                this.$initialize();
                if (b == null) {
                    throw new System.ArgumentNullException.$ctor1("b");
                }

                if (b.length !== 16) {
                    throw new System.ArgumentException.$ctor1(System.String.format(System.Guid.error1, [Bridge.box(16, System.Int32)]));
                }

                this._a = (b[System.Array.index(3, b)] << 24) | (b[System.Array.index(2, b)] << 16) | (b[System.Array.index(1, b)] << 8) | b[System.Array.index(0, b)];
                this._b = Bridge.Int.sxs(((b[System.Array.index(5, b)] << 8) | b[System.Array.index(4, b)]) & 65535);
                this._c = Bridge.Int.sxs(((b[System.Array.index(7, b)] << 8) | b[System.Array.index(6, b)]) & 65535);
                this._d = b[System.Array.index(8, b)];
                this._e = b[System.Array.index(9, b)];
                this._f = b[System.Array.index(10, b)];
                this._g = b[System.Array.index(11, b)];
                this._h = b[System.Array.index(12, b)];
                this._i = b[System.Array.index(13, b)];
                this._j = b[System.Array.index(14, b)];
                this._k = b[System.Array.index(15, b)];
            },
            $ctor5: function (a, b, c, d, e, f, g, h, i, j, k) {
                this.$initialize();
                this._a = a | 0;
                this._b = Bridge.Int.sxs(b & 65535);
                this._c = Bridge.Int.sxs(c & 65535);
                this._d = d;
                this._e = e;
                this._f = f;
                this._g = g;
                this._h = h;
                this._i = i;
                this._j = j;
                this._k = k;
            },
            $ctor3: function (a, b, c, d) {
                this.$initialize();
                if (d == null) {
                    throw new System.ArgumentNullException.$ctor1("d");
                }

                if (d.length !== 8) {
                    throw new System.ArgumentException.$ctor1(System.String.format(System.Guid.error1, [Bridge.box(8, System.Int32)]));
                }

                this._a = a;
                this._b = b;
                this._c = c;
                this._d = d[System.Array.index(0, d)];
                this._e = d[System.Array.index(1, d)];
                this._f = d[System.Array.index(2, d)];
                this._g = d[System.Array.index(3, d)];
                this._h = d[System.Array.index(4, d)];
                this._i = d[System.Array.index(5, d)];
                this._j = d[System.Array.index(6, d)];
                this._k = d[System.Array.index(7, d)];
            },
            $ctor2: function (a, b, c, d, e, f, g, h, i, j, k) {
                this.$initialize();
                this._a = a;
                this._b = b;
                this._c = c;
                this._d = d;
                this._e = e;
                this._f = f;
                this._g = g;
                this._h = h;
                this._i = i;
                this._j = j;
                this._k = k;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                return this._a ^ ((this._b << 16) | (this._c & 65535)) ^ ((this._f << 24) | this._k);
            },
            equals: function (o) {
                if (!(Bridge.is(o, System.Guid))) {
                    return false;
                }

                return this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(o, System.Guid), System.Guid)));
            },
            equalsT: function (o) {
                if ((this._a !== o._a) || (this._b !== o._b) || (this._c !== o._c) || (this._d !== o._d) || (this._e !== o._e) || (this._f !== o._f) || (this._g !== o._g) || (this._h !== o._h) || (this._i !== o._i) || (this._j !== o._j) || (this._k !== o._k)) {
                    return false;
                }

                return true;
            },
            compareTo: function (value) {
                return System.String.compare(this.toString(), value.toString());
            },
            toString: function () {
                return this.Format(null);
            },
            ToString: function (format) {
                return this.Format(format);
            },
            format: function (format, formatProvider) {
                return this.Format(format);
            },
            ToByteArray: function () {
                var g = System.Array.init(16, 0, System.Byte);

                g[System.Array.index(0, g)] = this._a & 255;
                g[System.Array.index(1, g)] = (this._a >> 8) & 255;
                g[System.Array.index(2, g)] = (this._a >> 16) & 255;
                g[System.Array.index(3, g)] = (this._a >> 24) & 255;
                g[System.Array.index(4, g)] = this._b & 255;
                g[System.Array.index(5, g)] = (this._b >> 8) & 255;
                g[System.Array.index(6, g)] = this._c & 255;
                g[System.Array.index(7, g)] = (this._c >> 8) & 255;
                g[System.Array.index(8, g)] = this._d;
                g[System.Array.index(9, g)] = this._e;
                g[System.Array.index(10, g)] = this._f;
                g[System.Array.index(11, g)] = this._g;
                g[System.Array.index(12, g)] = this._h;
                g[System.Array.index(13, g)] = this._i;
                g[System.Array.index(14, g)] = this._j;
                g[System.Array.index(15, g)] = this._k;

                return g;
            },
            ParseInternal: function (input, format, check) {
                var r = null;

                if (System.String.isNullOrEmpty(input)) {
                    if (check) {
                        throw new System.ArgumentNullException.$ctor1("input");
                    }
                    return false;
                }

                if (System.String.isNullOrEmpty(format)) {
                    var m = System.Guid.NonFormat.match(input);

                    if (m.getSuccess()) {
                        var list = new (System.Collections.Generic.List$1(System.String)).ctor();
                        for (var i = 1; i <= m.getGroups().getCount(); i = (i + 1) | 0) {
                            if (m.getGroups().get(i).getSuccess()) {
                                list.add(m.getGroups().get(i).getValue());
                            }
                        }

                        r = list.ToArray().join("-").toLowerCase();
                    }
                } else {
                    format = format.toUpperCase();

                    var p = false;

                    if (Bridge.referenceEquals(format, "N")) {
                        var m1 = System.Guid.Split.match(input);

                        if (m1.getSuccess()) {
                            var list1 = new (System.Collections.Generic.List$1(System.String)).ctor();
                            for (var i1 = 1; i1 <= m1.getGroups().getCount(); i1 = (i1 + 1) | 0) {
                                if (m1.getGroups().get(i1).getSuccess()) {
                                    list1.add(m1.getGroups().get(i1).getValue());
                                }
                            }

                            p = true;
                            input = list1.ToArray().join("-");
                        }
                    } else if (Bridge.referenceEquals(format, "B") || Bridge.referenceEquals(format, "P")) {
                        var b = Bridge.referenceEquals(format, "B") ? System.Array.init([123, 125], System.Char) : System.Array.init([40, 41], System.Char);

                        if ((input.charCodeAt(0) === b[System.Array.index(0, b)]) && (input.charCodeAt(((input.length - 1) | 0)) === b[System.Array.index(1, b)])) {
                            p = true;
                            input = input.substr(1, ((input.length - 2) | 0));
                        }
                    } else {
                        p = true;
                    }

                    if (p && System.Guid.Valid.isMatch(input)) {
                        r = input.toLowerCase();
                    }
                }

                if (r != null) {
                    this.FromString(r);
                    return true;
                }

                if (check) {
                    throw new System.FormatException.$ctor1("input is not in a recognized format");
                }

                return false;
            },
            Format: function (format) {
                var s = (System.UInt32.format((this._a >>> 0), "x8") || "") + (System.UInt16.format((this._b & 65535), "x4") || "") + (System.UInt16.format((this._c & 65535), "x4") || "");
                s = (s || "") + ((System.Array.init([this._d, this._e, this._f, this._g, this._h, this._i, this._j, this._k], System.Byte)).map(System.Guid.MakeBinary).join("") || "");

                var m = System.Guid.Split.match(s);
                var list = new (System.Collections.Generic.List$1(System.String)).ctor();
                for (var i = 1; i <= m.getGroups().getCount(); i = (i + 1) | 0) {
                    if (m.getGroups().get(i).getSuccess()) {
                        list.add(m.getGroups().get(i).getValue());
                    }
                }
                s = list.ToArray().join("-");

                switch (format) {
                    case "n": 
                    case "N": 
                        return System.Guid.Replace.replace(s, "");
                    case "b": 
                    case "B": 
                        return String.fromCharCode(123) + (s || "") + String.fromCharCode(125);
                    case "p": 
                    case "P": 
                        return String.fromCharCode(40) + (s || "") + String.fromCharCode(41);
                    default: 
                        return s;
                }
            },
            FromString: function (s) {
                if (System.String.isNullOrEmpty(s)) {
                    return;
                }

                s = System.Guid.Replace.replace(s, "");

                var r = System.Array.init(8, 0, System.Byte);

                this._a = (System.UInt32.parse(s.substr(0, 8), 16)) | 0;
                this._b = Bridge.Int.sxs((System.UInt16.parse(s.substr(8, 4), 16)) & 65535);
                this._c = Bridge.Int.sxs((System.UInt16.parse(s.substr(12, 4), 16)) & 65535);
                for (var i = 8; i < 16; i = (i + 1) | 0) {
                    r[System.Array.index(((i - 8) | 0), r)] = System.Byte.parse(s.substr(Bridge.Int.mul(i, 2), 2), 16);
                }

                this._d = r[System.Array.index(0, r)];
                this._e = r[System.Array.index(1, r)];
                this._f = r[System.Array.index(2, r)];
                this._g = r[System.Array.index(3, r)];
                this._h = r[System.Array.index(4, r)];
                this._i = r[System.Array.index(5, r)];
                this._j = r[System.Array.index(6, r)];
                this._k = r[System.Array.index(7, r)];
            },
            toJSON: function () {
                return this.toString();
            },
            $clone: function (to) { return this; }
        }
    });

    // @source ITupleInternal.js

    Bridge.define("System.ITupleInternal", {
        $kind: "interface"
    });

    // @source ValueTuple.js

    Bridge.define("System.ValueTuple", {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple)]; },
        $kind: "struct",
        statics: {
            methods: {
                Create: function () {
                    return new System.ValueTuple();
                },
                Create$1: function (T1, item1) {
                    return new (System.ValueTuple$1(T1)).$ctor1(item1);
                },
                Create$2: function (T1, T2, item1, item2) {
                    return new (System.ValueTuple$2(T1,T2)).$ctor1(item1, item2);
                },
                Create$3: function (T1, T2, T3, item1, item2, item3) {
                    return new (System.ValueTuple$3(T1,T2,T3)).$ctor1(item1, item2, item3);
                },
                Create$4: function (T1, T2, T3, T4, item1, item2, item3, item4) {
                    return new (System.ValueTuple$4(T1,T2,T3,T4)).$ctor1(item1, item2, item3, item4);
                },
                Create$5: function (T1, T2, T3, T4, T5, item1, item2, item3, item4, item5) {
                    return new (System.ValueTuple$5(T1,T2,T3,T4,T5)).$ctor1(item1, item2, item3, item4, item5);
                },
                Create$6: function (T1, T2, T3, T4, T5, T6, item1, item2, item3, item4, item5, item6) {
                    return new (System.ValueTuple$6(T1,T2,T3,T4,T5,T6)).$ctor1(item1, item2, item3, item4, item5, item6);
                },
                Create$7: function (T1, T2, T3, T4, T5, T6, T7, item1, item2, item3, item4, item5, item6, item7) {
                    return new (System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)).$ctor1(item1, item2, item3, item4, item5, item6, item7);
                },
                Create$8: function (T1, T2, T3, T4, T5, T6, T7, T8, item1, item2, item3, item4, item5, item6, item7, item8) {
                    return new (System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,System.ValueTuple$1(T8))).$ctor1(item1, item2, item3, item4, item5, item6, item7, System.ValueTuple.Create$1(T8, item8));
                },
                CombineHashCodes: function (h1, h2) {
                    return System.Collections.HashHelpers.Combine(System.Collections.HashHelpers.Combine(System.Collections.HashHelpers.RandomSeed, h1), h2);
                },
                CombineHashCodes$1: function (h1, h2, h3) {
                    return System.Collections.HashHelpers.Combine(System.ValueTuple.CombineHashCodes(h1, h2), h3);
                },
                CombineHashCodes$2: function (h1, h2, h3, h4) {
                    return System.Collections.HashHelpers.Combine(System.ValueTuple.CombineHashCodes$1(h1, h2, h3), h4);
                },
                CombineHashCodes$3: function (h1, h2, h3, h4, h5) {
                    return System.Collections.HashHelpers.Combine(System.ValueTuple.CombineHashCodes$2(h1, h2, h3, h4), h5);
                },
                CombineHashCodes$4: function (h1, h2, h3, h4, h5, h6) {
                    return System.Collections.HashHelpers.Combine(System.ValueTuple.CombineHashCodes$3(h1, h2, h3, h4, h5), h6);
                },
                CombineHashCodes$5: function (h1, h2, h3, h4, h5, h6, h7) {
                    return System.Collections.HashHelpers.Combine(System.ValueTuple.CombineHashCodes$4(h1, h2, h3, h4, h5, h6), h7);
                },
                CombineHashCodes$6: function (h1, h2, h3, h4, h5, h6, h7, h8) {
                    return System.Collections.HashHelpers.Combine(System.ValueTuple.CombineHashCodes$5(h1, h2, h3, h4, h5, h6, h7), h8);
                },
                getDefaultValue: function () { return new System.ValueTuple(); }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple);
            },
            equalsT: function (other) {
                return true;
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                return Bridge.is(other, System.ValueTuple);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return 0;
            },
            compareTo: function (other) {
                return 0;
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return 0;
            },
            getHashCode: function () {
                return 0;
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return 0;
            },
            toString: function () {
                return "()";
            },
            $clone: function (to) { return this; }
        }
    });

    Bridge.define("System.ValueTuple$1", function (T1) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$1(T1)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$1(T1)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$1(T1))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 1;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$1$" + Bridge.getTypeAlias(T1) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$1$" + Bridge.getTypeAlias(T1) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1) {
                this.$initialize();
                this.Item1 = item1;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$1(T1)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$1(T1)), System.ValueTuple$1(T1))));
            },
            equalsT: function (other) {
                return System.ValueTuple$1(T1).s_t1Comparer.equals2(this.Item1, other.Item1);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$1(T1)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$1(T1)), System.ValueTuple$1(T1)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$1(T1)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$1(T1)), System.ValueTuple$1(T1)));

                return new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, objTuple.Item1);
            },
            compareTo: function (other) {
                return new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$1(T1)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$1(T1)), System.ValueTuple$1(T1)));

                return comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
            },
            getHashCode: function () {
                return System.ValueTuple$1(T1).s_t1Comparer.getHashCode2(this.Item1);
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1);
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$1(T1))();
                s.Item1 = this.Item1;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$2", function (T1, T2) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$2(T1,T2)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$2(T1,T2)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$2(T1,T2))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 2;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$2$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$2$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2) {
                this.$initialize();
                this.Item1 = item1;
                this.Item2 = item2;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$2(T1,T2)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$2(T1,T2)), System.ValueTuple$2(T1,T2))));
            },
            equalsT: function (other) {
                return System.ValueTuple$2(T1,T2).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$2(T1,T2).s_t2Comparer.equals2(this.Item2, other.Item2);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$2(T1,T2)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$2(T1,T2)), System.ValueTuple$2(T1,T2)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$2(T1,T2)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$2(T1,T2)), System.ValueTuple$2(T1,T2))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$2(T1,T2)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$2(T1,T2)), System.ValueTuple$2(T1,T2)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
            },
            getHashCode: function () {
                return System.ValueTuple.CombineHashCodes(System.ValueTuple$2(T1,T2).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$2(T1,T2).s_t2Comparer.getHashCode2(this.Item2));
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                return System.ValueTuple.CombineHashCodes(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2));
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$2(T1,T2))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$3", function (T1, T2, T3) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$3(T1,T2,T3)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$3(T1,T2,T3)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null,
                s_t3Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                    this.s_t3Comparer = System.Collections.Generic.EqualityComparer$1(T3).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$3(T1,T2,T3))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2),
            Item3: Bridge.getDefaultValue(T3)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 3;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$3$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$3$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2, item3) {
                this.$initialize();
                this.Item1 = item1;
                this.Item2 = item2;
                this.Item3 = item3;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$3(T1,T2,T3)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$3(T1,T2,T3)), System.ValueTuple$3(T1,T2,T3))));
            },
            equalsT: function (other) {
                return System.ValueTuple$3(T1,T2,T3).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$3(T1,T2,T3).s_t2Comparer.equals2(this.Item2, other.Item2) && System.ValueTuple$3(T1,T2,T3).s_t3Comparer.equals2(this.Item3, other.Item3);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$3(T1,T2,T3)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$3(T1,T2,T3)), System.ValueTuple$3(T1,T2,T3)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2) && comparer.System$Collections$IEqualityComparer$equals(this.Item3, objTuple.Item3);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$3(T1,T2,T3)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$3(T1,T2,T3)), System.ValueTuple$3(T1,T2,T3))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(T3))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item3, other.Item3);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$3(T1,T2,T3)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$3(T1,T2,T3)), System.ValueTuple$3(T1,T2,T3)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Item3, objTuple.Item3);
            },
            getHashCode: function () {
                return System.ValueTuple.CombineHashCodes$1(System.ValueTuple$3(T1,T2,T3).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$3(T1,T2,T3).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$3(T1,T2,T3).s_t3Comparer.getHashCode2(this.Item3));
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                return System.ValueTuple.CombineHashCodes$1(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3));
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$3(T1,T2,T3))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                s.Item3 = this.Item3;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$4", function (T1, T2, T3, T4) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$4(T1,T2,T3,T4)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$4(T1,T2,T3,T4)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null,
                s_t3Comparer: null,
                s_t4Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                    this.s_t3Comparer = System.Collections.Generic.EqualityComparer$1(T3).def;
                    this.s_t4Comparer = System.Collections.Generic.EqualityComparer$1(T4).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$4(T1,T2,T3,T4))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2),
            Item3: Bridge.getDefaultValue(T3),
            Item4: Bridge.getDefaultValue(T4)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 4;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$4$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$4$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2, item3, item4) {
                this.$initialize();
                this.Item1 = item1;
                this.Item2 = item2;
                this.Item3 = item3;
                this.Item4 = item4;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$4(T1,T2,T3,T4)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$4(T1,T2,T3,T4)), System.ValueTuple$4(T1,T2,T3,T4))));
            },
            equalsT: function (other) {
                return System.ValueTuple$4(T1,T2,T3,T4).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$4(T1,T2,T3,T4).s_t2Comparer.equals2(this.Item2, other.Item2) && System.ValueTuple$4(T1,T2,T3,T4).s_t3Comparer.equals2(this.Item3, other.Item3) && System.ValueTuple$4(T1,T2,T3,T4).s_t4Comparer.equals2(this.Item4, other.Item4);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$4(T1,T2,T3,T4)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$4(T1,T2,T3,T4)), System.ValueTuple$4(T1,T2,T3,T4)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2) && comparer.System$Collections$IEqualityComparer$equals(this.Item3, objTuple.Item3) && comparer.System$Collections$IEqualityComparer$equals(this.Item4, objTuple.Item4);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$4(T1,T2,T3,T4)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$4(T1,T2,T3,T4)), System.ValueTuple$4(T1,T2,T3,T4))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T3))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item3, other.Item3);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(T4))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item4, other.Item4);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$4(T1,T2,T3,T4)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$4(T1,T2,T3,T4)), System.ValueTuple$4(T1,T2,T3,T4)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item3, objTuple.Item3);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Item4, objTuple.Item4);
            },
            getHashCode: function () {
                return System.ValueTuple.CombineHashCodes$2(System.ValueTuple$4(T1,T2,T3,T4).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$4(T1,T2,T3,T4).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$4(T1,T2,T3,T4).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$4(T1,T2,T3,T4).s_t4Comparer.getHashCode2(this.Item4));
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                return System.ValueTuple.CombineHashCodes$2(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4));
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$4(T1,T2,T3,T4))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                s.Item3 = this.Item3;
                s.Item4 = this.Item4;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$5", function (T1, T2, T3, T4, T5) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$5(T1,T2,T3,T4,T5)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$5(T1,T2,T3,T4,T5)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null,
                s_t3Comparer: null,
                s_t4Comparer: null,
                s_t5Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                    this.s_t3Comparer = System.Collections.Generic.EqualityComparer$1(T3).def;
                    this.s_t4Comparer = System.Collections.Generic.EqualityComparer$1(T4).def;
                    this.s_t5Comparer = System.Collections.Generic.EqualityComparer$1(T5).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$5(T1,T2,T3,T4,T5))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2),
            Item3: Bridge.getDefaultValue(T3),
            Item4: Bridge.getDefaultValue(T4),
            Item5: Bridge.getDefaultValue(T5)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 5;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$5$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$5$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2, item3, item4, item5) {
                this.$initialize();
                this.Item1 = item1;
                this.Item2 = item2;
                this.Item3 = item3;
                this.Item4 = item4;
                this.Item5 = item5;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$5(T1,T2,T3,T4,T5)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$5(T1,T2,T3,T4,T5)), System.ValueTuple$5(T1,T2,T3,T4,T5))));
            },
            equalsT: function (other) {
                return System.ValueTuple$5(T1,T2,T3,T4,T5).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$5(T1,T2,T3,T4,T5).s_t2Comparer.equals2(this.Item2, other.Item2) && System.ValueTuple$5(T1,T2,T3,T4,T5).s_t3Comparer.equals2(this.Item3, other.Item3) && System.ValueTuple$5(T1,T2,T3,T4,T5).s_t4Comparer.equals2(this.Item4, other.Item4) && System.ValueTuple$5(T1,T2,T3,T4,T5).s_t5Comparer.equals2(this.Item5, other.Item5);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$5(T1,T2,T3,T4,T5)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$5(T1,T2,T3,T4,T5)), System.ValueTuple$5(T1,T2,T3,T4,T5)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2) && comparer.System$Collections$IEqualityComparer$equals(this.Item3, objTuple.Item3) && comparer.System$Collections$IEqualityComparer$equals(this.Item4, objTuple.Item4) && comparer.System$Collections$IEqualityComparer$equals(this.Item5, objTuple.Item5);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$5(T1,T2,T3,T4,T5)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$5(T1,T2,T3,T4,T5)), System.ValueTuple$5(T1,T2,T3,T4,T5))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T3))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item3, other.Item3);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T4))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item4, other.Item4);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(T5))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item5, other.Item5);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$5(T1,T2,T3,T4,T5)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$5(T1,T2,T3,T4,T5)), System.ValueTuple$5(T1,T2,T3,T4,T5)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item3, objTuple.Item3);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item4, objTuple.Item4);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Item5, objTuple.Item5);
            },
            getHashCode: function () {
                return System.ValueTuple.CombineHashCodes$3(System.ValueTuple$5(T1,T2,T3,T4,T5).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$5(T1,T2,T3,T4,T5).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$5(T1,T2,T3,T4,T5).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$5(T1,T2,T3,T4,T5).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$5(T1,T2,T3,T4,T5).s_t5Comparer.getHashCode2(this.Item5));
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                return System.ValueTuple.CombineHashCodes$3(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5));
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$5(T1,T2,T3,T4,T5))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                s.Item3 = this.Item3;
                s.Item4 = this.Item4;
                s.Item5 = this.Item5;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$6", function (T1, T2, T3, T4, T5, T6) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$6(T1,T2,T3,T4,T5,T6)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$6(T1,T2,T3,T4,T5,T6)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null,
                s_t3Comparer: null,
                s_t4Comparer: null,
                s_t5Comparer: null,
                s_t6Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                    this.s_t3Comparer = System.Collections.Generic.EqualityComparer$1(T3).def;
                    this.s_t4Comparer = System.Collections.Generic.EqualityComparer$1(T4).def;
                    this.s_t5Comparer = System.Collections.Generic.EqualityComparer$1(T5).def;
                    this.s_t6Comparer = System.Collections.Generic.EqualityComparer$1(T6).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$6(T1,T2,T3,T4,T5,T6))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2),
            Item3: Bridge.getDefaultValue(T3),
            Item4: Bridge.getDefaultValue(T4),
            Item5: Bridge.getDefaultValue(T5),
            Item6: Bridge.getDefaultValue(T6)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 6;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$6$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$" + Bridge.getTypeAlias(T6) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$6$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$" + Bridge.getTypeAlias(T6) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2, item3, item4, item5, item6) {
                this.$initialize();
                this.Item1 = item1;
                this.Item2 = item2;
                this.Item3 = item3;
                this.Item4 = item4;
                this.Item5 = item5;
                this.Item6 = item6;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)), System.ValueTuple$6(T1,T2,T3,T4,T5,T6))));
            },
            equalsT: function (other) {
                return System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t2Comparer.equals2(this.Item2, other.Item2) && System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t3Comparer.equals2(this.Item3, other.Item3) && System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t4Comparer.equals2(this.Item4, other.Item4) && System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t5Comparer.equals2(this.Item5, other.Item5) && System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t6Comparer.equals2(this.Item6, other.Item6);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)), System.ValueTuple$6(T1,T2,T3,T4,T5,T6)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2) && comparer.System$Collections$IEqualityComparer$equals(this.Item3, objTuple.Item3) && comparer.System$Collections$IEqualityComparer$equals(this.Item4, objTuple.Item4) && comparer.System$Collections$IEqualityComparer$equals(this.Item5, objTuple.Item5) && comparer.System$Collections$IEqualityComparer$equals(this.Item6, objTuple.Item6);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)), System.ValueTuple$6(T1,T2,T3,T4,T5,T6))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T3))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item3, other.Item3);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T4))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item4, other.Item4);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T5))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item5, other.Item5);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(T6))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item6, other.Item6);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$6(T1,T2,T3,T4,T5,T6)), System.ValueTuple$6(T1,T2,T3,T4,T5,T6)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item3, objTuple.Item3);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item4, objTuple.Item4);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item5, objTuple.Item5);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Item6, objTuple.Item6);
            },
            getHashCode: function () {
                return System.ValueTuple.CombineHashCodes$4(System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$6(T1,T2,T3,T4,T5,T6).s_t6Comparer.getHashCode2(this.Item6));
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                return System.ValueTuple.CombineHashCodes$4(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6));
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$6(T1,T2,T3,T4,T5,T6))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                s.Item3 = this.Item3;
                s.Item4 = this.Item4;
                s.Item5 = this.Item5;
                s.Item6 = this.Item6;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$7", function (T1, T2, T3, T4, T5, T6, T7) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null,
                s_t3Comparer: null,
                s_t4Comparer: null,
                s_t5Comparer: null,
                s_t6Comparer: null,
                s_t7Comparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                    this.s_t3Comparer = System.Collections.Generic.EqualityComparer$1(T3).def;
                    this.s_t4Comparer = System.Collections.Generic.EqualityComparer$1(T4).def;
                    this.s_t5Comparer = System.Collections.Generic.EqualityComparer$1(T5).def;
                    this.s_t6Comparer = System.Collections.Generic.EqualityComparer$1(T6).def;
                    this.s_t7Comparer = System.Collections.Generic.EqualityComparer$1(T7).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2),
            Item3: Bridge.getDefaultValue(T3),
            Item4: Bridge.getDefaultValue(T4),
            Item5: Bridge.getDefaultValue(T5),
            Item6: Bridge.getDefaultValue(T6),
            Item7: Bridge.getDefaultValue(T7)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    return 7;
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$7$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$" + Bridge.getTypeAlias(T6) + "$" + Bridge.getTypeAlias(T7) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$7$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$" + Bridge.getTypeAlias(T6) + "$" + Bridge.getTypeAlias(T7) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2, item3, item4, item5, item6, item7) {
                this.$initialize();
                this.Item1 = item1;
                this.Item2 = item2;
                this.Item3 = item3;
                this.Item4 = item4;
                this.Item5 = item5;
                this.Item6 = item6;
                this.Item7 = item7;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7))));
            },
            equalsT: function (other) {
                return System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t2Comparer.equals2(this.Item2, other.Item2) && System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t3Comparer.equals2(this.Item3, other.Item3) && System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t4Comparer.equals2(this.Item4, other.Item4) && System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t5Comparer.equals2(this.Item5, other.Item5) && System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t6Comparer.equals2(this.Item6, other.Item6) && System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t7Comparer.equals2(this.Item7, other.Item7);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2) && comparer.System$Collections$IEqualityComparer$equals(this.Item3, objTuple.Item3) && comparer.System$Collections$IEqualityComparer$equals(this.Item4, objTuple.Item4) && comparer.System$Collections$IEqualityComparer$equals(this.Item5, objTuple.Item5) && comparer.System$Collections$IEqualityComparer$equals(this.Item6, objTuple.Item6) && comparer.System$Collections$IEqualityComparer$equals(this.Item7, objTuple.Item7);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T3))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item3, other.Item3);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T4))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item4, other.Item4);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T5))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item5, other.Item5);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T6))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item6, other.Item6);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(T7))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item7, other.Item7);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item3, objTuple.Item3);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item4, objTuple.Item4);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item5, objTuple.Item5);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item6, objTuple.Item6);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Item7, objTuple.Item7);
            },
            getHashCode: function () {
                return System.ValueTuple.CombineHashCodes$5(System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7).s_t7Comparer.getHashCode2(this.Item7));
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                return System.ValueTuple.CombineHashCodes$5(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7));
            },
            toString: function () {
                return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ", " + ((this.Item7 != null ? Bridge.toString(this.Item7) : null) || "") + ")";
            },
            System$ITupleInternal$ToStringEnd: function () {
                return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ", " + ((this.Item7 != null ? Bridge.toString(this.Item7) : null) || "") + ")";
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$7(T1,T2,T3,T4,T5,T6,T7))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                s.Item3 = this.Item3;
                s.Item4 = this.Item4;
                s.Item5 = this.Item5;
                s.Item6 = this.Item6;
                s.Item7 = this.Item7;
                return s;
            }
        }
    }; });

    Bridge.define("System.ValueTuple$8", function (T1, T2, T3, T4, T5, T6, T7, TRest) { return {
        inherits: function () { return [System.IEquatable$1(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)),System.Collections.IStructuralEquatable,System.Collections.IStructuralComparable,System.IComparable,System.IComparable$1(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)),System.ITupleInternal]; },
        $kind: "struct",
        statics: {
            fields: {
                s_t1Comparer: null,
                s_t2Comparer: null,
                s_t3Comparer: null,
                s_t4Comparer: null,
                s_t5Comparer: null,
                s_t6Comparer: null,
                s_t7Comparer: null,
                s_tRestComparer: null
            },
            ctors: {
                init: function () {
                    this.s_t1Comparer = System.Collections.Generic.EqualityComparer$1(T1).def;
                    this.s_t2Comparer = System.Collections.Generic.EqualityComparer$1(T2).def;
                    this.s_t3Comparer = System.Collections.Generic.EqualityComparer$1(T3).def;
                    this.s_t4Comparer = System.Collections.Generic.EqualityComparer$1(T4).def;
                    this.s_t5Comparer = System.Collections.Generic.EqualityComparer$1(T5).def;
                    this.s_t6Comparer = System.Collections.Generic.EqualityComparer$1(T6).def;
                    this.s_t7Comparer = System.Collections.Generic.EqualityComparer$1(T7).def;
                    this.s_tRestComparer = System.Collections.Generic.EqualityComparer$1(TRest).def;
                }
            },
            methods: {
                getDefaultValue: function () { return new (System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest))(); }
            }
        },
        fields: {
            Item1: Bridge.getDefaultValue(T1),
            Item2: Bridge.getDefaultValue(T2),
            Item3: Bridge.getDefaultValue(T3),
            Item4: Bridge.getDefaultValue(T4),
            Item5: Bridge.getDefaultValue(T5),
            Item6: Bridge.getDefaultValue(T6),
            Item7: Bridge.getDefaultValue(T7),
            Rest: Bridge.getDefaultValue(TRest)
        },
        props: {
            System$ITupleInternal$Size: {
                get: function () {
                    var rest = Bridge.as(this.Rest, System.ITupleInternal);
                    return rest == null ? 8 : ((7 + rest.System$ITupleInternal$Size) | 0);
                }
            }
        },
        alias: [
            "equalsT", "System$IEquatable$1$System$ValueTuple$8$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$" + Bridge.getTypeAlias(T6) + "$" + Bridge.getTypeAlias(T7) + "$" + Bridge.getTypeAlias(TRest) + "$equalsT",
            "compareTo", ["System$IComparable$1$System$ValueTuple$8$" + Bridge.getTypeAlias(T1) + "$" + Bridge.getTypeAlias(T2) + "$" + Bridge.getTypeAlias(T3) + "$" + Bridge.getTypeAlias(T4) + "$" + Bridge.getTypeAlias(T5) + "$" + Bridge.getTypeAlias(T6) + "$" + Bridge.getTypeAlias(T7) + "$" + Bridge.getTypeAlias(TRest) + "$compareTo", "System$IComparable$1$compareTo"]
        ],
        ctors: {
            $ctor1: function (item1, item2, item3, item4, item5, item6, item7, rest) {
                this.$initialize();
                if (!(Bridge.is(rest, System.ITupleInternal))) {
                    throw new System.ArgumentException.$ctor1(System.SR.ArgumentException_ValueTupleLastArgumentNotAValueTuple);
                }

                this.Item1 = item1;
                this.Item2 = item2;
                this.Item3 = item3;
                this.Item4 = item4;
                this.Item5 = item5;
                this.Item6 = item6;
                this.Item7 = item7;
                this.Rest = rest;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                return Bridge.is(obj, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)) && this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest))));
            },
            equalsT: function (other) {
                return System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t1Comparer.equals2(this.Item1, other.Item1) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t2Comparer.equals2(this.Item2, other.Item2) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t3Comparer.equals2(this.Item3, other.Item3) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t4Comparer.equals2(this.Item4, other.Item4) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.equals2(this.Item5, other.Item5) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.equals2(this.Item6, other.Item6) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.equals2(this.Item7, other.Item7) && System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_tRestComparer.equals2(this.Rest, other.Rest);
            },
            System$Collections$IStructuralEquatable$Equals: function (other, comparer) {
                if (other == null || !(Bridge.is(other, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)))) {
                    return false;
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)));

                return comparer.System$Collections$IEqualityComparer$equals(this.Item1, objTuple.Item1) && comparer.System$Collections$IEqualityComparer$equals(this.Item2, objTuple.Item2) && comparer.System$Collections$IEqualityComparer$equals(this.Item3, objTuple.Item3) && comparer.System$Collections$IEqualityComparer$equals(this.Item4, objTuple.Item4) && comparer.System$Collections$IEqualityComparer$equals(this.Item5, objTuple.Item5) && comparer.System$Collections$IEqualityComparer$equals(this.Item6, objTuple.Item6) && comparer.System$Collections$IEqualityComparer$equals(this.Item7, objTuple.Item7) && comparer.System$Collections$IEqualityComparer$equals(this.Rest, objTuple.Rest);
            },
            System$IComparable$compareTo: function (other) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                return this.compareTo(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest))));
            },
            compareTo: function (other) {
                var c = new (System.Collections.Generic.Comparer$1(T1))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item1, other.Item1);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T2))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item2, other.Item2);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T3))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item3, other.Item3);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T4))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item4, other.Item4);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T5))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item5, other.Item5);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T6))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item6, other.Item6);
                if (c !== 0) {
                    return c;
                }

                c = new (System.Collections.Generic.Comparer$1(T7))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Item7, other.Item7);
                if (c !== 0) {
                    return c;
                }

                return new (System.Collections.Generic.Comparer$1(TRest))(System.Collections.Generic.Comparer$1.$default.fn).compare(this.Rest, other.Rest);
            },
            System$Collections$IStructuralComparable$CompareTo: function (other, comparer) {
                if (other == null) {
                    return 1;
                }

                if (!(Bridge.is(other, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)))) {
                    throw new System.ArgumentException.$ctor3(System.SR.ArgumentException_ValueTupleIncorrectType, "other");
                }

                var objTuple = System.Nullable.getValue(Bridge.cast(Bridge.unbox(other, System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)));

                var c = comparer.System$Collections$IComparer$compare(this.Item1, objTuple.Item1);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item2, objTuple.Item2);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item3, objTuple.Item3);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item4, objTuple.Item4);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item5, objTuple.Item5);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item6, objTuple.Item6);
                if (c !== 0) {
                    return c;
                }

                c = comparer.System$Collections$IComparer$compare(this.Item7, objTuple.Item7);
                if (c !== 0) {
                    return c;
                }

                return comparer.System$Collections$IComparer$compare(this.Rest, objTuple.Rest);
            },
            getHashCode: function () {
                var rest = Bridge.as(this.Rest, System.ITupleInternal);
                if (rest == null) {
                    return System.ValueTuple.CombineHashCodes$5(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7));
                }

                var size = rest.System$ITupleInternal$Size;
                if (size >= 8) {
                    return Bridge.getHashCode(rest);
                }

                var k = (8 - size) | 0;
                switch (k) {
                    case 1: 
                        return System.ValueTuple.CombineHashCodes(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                    case 2: 
                        return System.ValueTuple.CombineHashCodes$1(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                    case 3: 
                        return System.ValueTuple.CombineHashCodes$2(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                    case 4: 
                        return System.ValueTuple.CombineHashCodes$3(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                    case 5: 
                        return System.ValueTuple.CombineHashCodes$4(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                    case 6: 
                        return System.ValueTuple.CombineHashCodes$5(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                    case 7: 
                    case 8: 
                        return System.ValueTuple.CombineHashCodes$6(System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t1Comparer.getHashCode2(this.Item1), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t2Comparer.getHashCode2(this.Item2), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t3Comparer.getHashCode2(this.Item3), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t4Comparer.getHashCode2(this.Item4), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t5Comparer.getHashCode2(this.Item5), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t6Comparer.getHashCode2(this.Item6), System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest).s_t7Comparer.getHashCode2(this.Item7), Bridge.getHashCode(rest));
                }

                return -1;
            },
            System$Collections$IStructuralEquatable$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            System$ITupleInternal$GetHashCode: function (comparer) {
                return this.GetHashCodeCore(comparer);
            },
            GetHashCodeCore: function (comparer) {
                var rest = Bridge.as(this.Rest, System.ITupleInternal);
                if (rest == null) {
                    return System.ValueTuple.CombineHashCodes$5(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7));
                }

                var size = rest.System$ITupleInternal$Size;
                if (size >= 8) {
                    return rest.System$ITupleInternal$GetHashCode(comparer);
                }

                var k = (8 - size) | 0;
                switch (k) {
                    case 1: 
                        return System.ValueTuple.CombineHashCodes(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                    case 2: 
                        return System.ValueTuple.CombineHashCodes$1(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                    case 3: 
                        return System.ValueTuple.CombineHashCodes$2(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                    case 4: 
                        return System.ValueTuple.CombineHashCodes$3(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                    case 5: 
                        return System.ValueTuple.CombineHashCodes$4(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                    case 6: 
                        return System.ValueTuple.CombineHashCodes$5(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                    case 7: 
                    case 8: 
                        return System.ValueTuple.CombineHashCodes$6(comparer.System$Collections$IEqualityComparer$getHashCode(this.Item1), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item2), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item3), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item4), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item5), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item6), comparer.System$Collections$IEqualityComparer$getHashCode(this.Item7), rest.System$ITupleInternal$GetHashCode(comparer));
                }

                return -1;
            },
            toString: function () {
                var rest = Bridge.as(this.Rest, System.ITupleInternal);
                if (rest == null) {
                    return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ", " + ((this.Item7 != null ? Bridge.toString(this.Item7) : null) || "") + ", " + (Bridge.toString(this.Rest) || "") + ")";
                } else {
                    return "(" + ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ", " + ((this.Item7 != null ? Bridge.toString(this.Item7) : null) || "") + ", " + (rest.System$ITupleInternal$ToStringEnd() || "");
                }
            },
            System$ITupleInternal$ToStringEnd: function () {
                var rest = Bridge.as(this.Rest, System.ITupleInternal);
                if (rest == null) {
                    return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ", " + ((this.Item7 != null ? Bridge.toString(this.Item7) : null) || "") + ", " + (Bridge.toString(this.Rest) || "") + ")";
                } else {
                    return ((this.Item1 != null ? Bridge.toString(this.Item1) : null) || "") + ", " + ((this.Item2 != null ? Bridge.toString(this.Item2) : null) || "") + ", " + ((this.Item3 != null ? Bridge.toString(this.Item3) : null) || "") + ", " + ((this.Item4 != null ? Bridge.toString(this.Item4) : null) || "") + ", " + ((this.Item5 != null ? Bridge.toString(this.Item5) : null) || "") + ", " + ((this.Item6 != null ? Bridge.toString(this.Item6) : null) || "") + ", " + ((this.Item7 != null ? Bridge.toString(this.Item7) : null) || "") + ", " + (rest.System$ITupleInternal$ToStringEnd() || "");
                }
            },
            $clone: function (to) {
                var s = to || new (System.ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest))();
                s.Item1 = this.Item1;
                s.Item2 = this.Item2;
                s.Item3 = this.Item3;
                s.Item4 = this.Item4;
                s.Item5 = this.Item5;
                s.Item6 = this.Item6;
                s.Item7 = this.Item7;
                s.Rest = this.Rest;
                return s;
            }
        }
    }; });

    // @source IndexOutOfRangeException.js

    Bridge.define("System.IndexOutOfRangeException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Index was outside the bounds of the array.");
                this.HResult = -2146233080;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233080;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233080;
            }
        }
    });

    // @source InvalidCastException.js

    Bridge.define("System.InvalidCastException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Specified cast is not valid.");
                this.HResult = -2147467262;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147467262;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2147467262;
            },
            $ctor3: function (message, errorCode) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = errorCode;
            }
        }
    });

    // @source InvalidOperationException.js

    Bridge.define("System.InvalidOperationException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Operation is not valid due to the current state of the object.");
                this.HResult = -2146233079;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233079;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233079;
            }
        }
    });

    // @source ObjectDisposedException.js

    Bridge.define("System.ObjectDisposedException", {
        inherits: [System.InvalidOperationException],
        fields: {
            _objectName: null
        },
        props: {
            Message: {
                get: function () {
                    var name = this.ObjectName;
                    if (name == null || name.length === 0) {
                        return Bridge.ensureBaseProperty(this, "Message").$System$Exception$Message;
                    }

                    var objectDisposed = System.SR.Format("Object name: '{0}'.", name);
                    return (Bridge.ensureBaseProperty(this, "Message").$System$Exception$Message || "") + ("\n" || "") + (objectDisposed || "");
                }
            },
            ObjectName: {
                get: function () {
                    if (this._objectName == null) {
                        return "";
                    }
                    return this._objectName;
                }
            }
        },
        ctors: {
            ctor: function () {
                System.ObjectDisposedException.$ctor3.call(this, null, "Cannot access a disposed object.");
            },
            $ctor1: function (objectName) {
                System.ObjectDisposedException.$ctor3.call(this, objectName, "Cannot access a disposed object.");
            },
            $ctor3: function (objectName, message) {
                this.$initialize();
                System.InvalidOperationException.$ctor1.call(this, message);
                this.HResult = -2146232798;
                this._objectName = objectName;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.InvalidOperationException.$ctor2.call(this, message, innerException);
                this.HResult = -2146232798;
            }
        }
    });

    // @source InvalidProgramException.js

    Bridge.define("System.InvalidProgramException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Common Language Runtime detected an invalid program.");
                this.HResult = -2146233030;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233030;
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, inner);
                this.HResult = -2146233030;
            }
        }
    });

    // @source Calendar.js

    Bridge.define("System.Globalization.Calendar", {
        inherits: [System.ICloneable],
        statics: {
            fields: {
                TicksPerMillisecond: System.Int64(0),
                TicksPerSecond: System.Int64(0),
                TicksPerMinute: System.Int64(0),
                TicksPerHour: System.Int64(0),
                TicksPerDay: System.Int64(0),
                MillisPerSecond: 0,
                MillisPerMinute: 0,
                MillisPerHour: 0,
                MillisPerDay: 0,
                DaysPerYear: 0,
                DaysPer4Years: 0,
                DaysPer100Years: 0,
                DaysPer400Years: 0,
                DaysTo10000: 0,
                MaxMillis: System.Int64(0),
                CurrentEra: 0
            },
            ctors: {
                init: function () {
                    this.TicksPerMillisecond = System.Int64(10000);
                    this.TicksPerSecond = System.Int64(10000000);
                    this.TicksPerMinute = System.Int64(600000000);
                    this.TicksPerHour = System.Int64([1640261632,8]);
                    this.TicksPerDay = System.Int64([711573504,201]);
                    this.MillisPerSecond = 1000;
                    this.MillisPerMinute = 60000;
                    this.MillisPerHour = 3600000;
                    this.MillisPerDay = 86400000;
                    this.DaysPerYear = 365;
                    this.DaysPer4Years = 1461;
                    this.DaysPer100Years = 36524;
                    this.DaysPer400Years = 146097;
                    this.DaysTo10000 = 3652059;
                    this.MaxMillis = System.Int64([-464735232,73466]);
                    this.CurrentEra = 0;
                }
            },
            methods: {
                ReadOnly: function (calendar) {
                    if (calendar == null) {
                        throw new System.ArgumentNullException.$ctor1("calendar");
                    }
                    if (calendar.IsReadOnly) {
                        return (calendar);
                    }

                    var clonedCalendar = Bridge.cast((Bridge.clone(calendar)), System.Globalization.Calendar);
                    clonedCalendar.SetReadOnlyState(true);

                    return (clonedCalendar);
                },
                CheckAddResult: function (ticks, minValue, maxValue) {
                    if (ticks.lt(System.DateTime.getTicks(minValue)) || ticks.gt(System.DateTime.getTicks(maxValue))) {
                        throw new System.ArgumentException.$ctor1(System.String.formatProvider(System.Globalization.CultureInfo.invariantCulture, System.SR.Format$1("The result is out of the supported range for this calendar. The result should be between {0} (Gregorian date) and {1} (Gregorian date), inclusive.", Bridge.box(minValue, System.DateTime, System.DateTime.format), Bridge.box(maxValue, System.DateTime, System.DateTime.format)), null));
                    }
                },
                GetSystemTwoDigitYearSetting: function (CalID, defaultYearValue) {
                    var twoDigitYearMax = 2029;
                    if (twoDigitYearMax < 0) {
                        twoDigitYearMax = defaultYearValue;
                    }
                    return (twoDigitYearMax);
                }
            }
        },
        fields: {
            _isReadOnly: false,
            twoDigitYearMax: 0
        },
        props: {
            MinSupportedDateTime: {
                get: function () {
                    return (System.DateTime.getMinValue());
                }
            },
            MaxSupportedDateTime: {
                get: function () {
                    return (System.DateTime.getMaxValue());
                }
            },
            AlgorithmType: {
                get: function () {
                    return 0;
                }
            },
            ID: {
                get: function () {
                    return 0;
                }
            },
            BaseCalendarID: {
                get: function () {
                    return this.ID;
                }
            },
            IsReadOnly: {
                get: function () {
                    return (this._isReadOnly);
                }
            },
            CurrentEraValue: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            DaysInYearBeforeMinSupportedYear: {
                get: function () {
                    return 365;
                }
            },
            TwoDigitYearMax: {
                get: function () {
                    return (this.twoDigitYearMax);
                },
                set: function (value) {
                    this.VerifyWritable();
                    this.twoDigitYearMax = value;
                }
            }
        },
        alias: ["clone", "System$ICloneable$clone"],
        ctors: {
            init: function () {
                this._isReadOnly = false;
                this.twoDigitYearMax = -1;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            clone: function () {
                var o = Bridge.clone(this);
                Bridge.cast(o, System.Globalization.Calendar).SetReadOnlyState(false);
                return (o);
            },
            VerifyWritable: function () {
                if (this._isReadOnly) {
                    throw new System.InvalidOperationException.$ctor1("Instance is read-only.");
                }
            },
            SetReadOnlyState: function (readOnly) {
                this._isReadOnly = readOnly;
            },
            Add: function (time, value, scale) {
                var tempMillis = (value * scale + (value >= 0 ? 0.5 : -0.5));
                if (!((tempMillis > -315537897600000.0) && (tempMillis < 315537897600000.0))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("value", "Value to add was out of range.");
                }

                var millis = Bridge.Int.clip64(tempMillis);
                var ticks = System.DateTime.getTicks(time).add(millis.mul(System.Globalization.Calendar.TicksPerMillisecond));
                System.Globalization.Calendar.CheckAddResult(ticks, this.MinSupportedDateTime, this.MaxSupportedDateTime);
                return (System.DateTime.create$2(ticks));
            },
            AddMilliseconds: function (time, milliseconds) {
                return (this.Add(time, milliseconds, 1));
            },
            AddDays: function (time, days) {
                return (this.Add(time, days, System.Globalization.Calendar.MillisPerDay));
            },
            AddHours: function (time, hours) {
                return (this.Add(time, hours, System.Globalization.Calendar.MillisPerHour));
            },
            AddMinutes: function (time, minutes) {
                return (this.Add(time, minutes, System.Globalization.Calendar.MillisPerMinute));
            },
            AddSeconds: function (time, seconds) {
                return this.Add(time, seconds, System.Globalization.Calendar.MillisPerSecond);
            },
            AddWeeks: function (time, weeks) {
                return (this.AddDays(time, Bridge.Int.mul(weeks, 7)));
            },
            GetDaysInMonth: function (year, month) {
                return (this.GetDaysInMonth$1(year, month, System.Globalization.Calendar.CurrentEra));
            },
            GetDaysInYear: function (year) {
                return (this.GetDaysInYear$1(year, System.Globalization.Calendar.CurrentEra));
            },
            GetHour: function (time) {
                return (System.Int64.clip32((System.DateTime.getTicks(time).div(System.Globalization.Calendar.TicksPerHour)).mod(System.Int64(24))));
            },
            GetMilliseconds: function (time) {
                return System.Int64.toNumber((System.DateTime.getTicks(time).div(System.Globalization.Calendar.TicksPerMillisecond)).mod(System.Int64(1000)));
            },
            GetMinute: function (time) {
                return (System.Int64.clip32((System.DateTime.getTicks(time).div(System.Globalization.Calendar.TicksPerMinute)).mod(System.Int64(60))));
            },
            GetMonthsInYear: function (year) {
                return (this.GetMonthsInYear$1(year, System.Globalization.Calendar.CurrentEra));
            },
            GetSecond: function (time) {
                return (System.Int64.clip32((System.DateTime.getTicks(time).div(System.Globalization.Calendar.TicksPerSecond)).mod(System.Int64(60))));
            },
            GetFirstDayWeekOfYear: function (time, firstDayOfWeek) {
                var dayOfYear = (this.GetDayOfYear(time) - 1) | 0;
                var dayForJan1 = (this.GetDayOfWeek(time) - (dayOfYear % 7)) | 0;
                var offset = (((((dayForJan1 - firstDayOfWeek) | 0) + 14) | 0)) % 7;
                return (((((Bridge.Int.div((((dayOfYear + offset) | 0)), 7)) | 0) + 1) | 0));
            },
            GetWeekOfYearFullDays: function (time, firstDayOfWeek, fullDays) {
                var dayForJan1;
                var offset;
                var day;

                var dayOfYear = (this.GetDayOfYear(time) - 1) | 0;



                dayForJan1 = (this.GetDayOfWeek(time) - (dayOfYear % 7)) | 0;

                offset = (((((firstDayOfWeek - dayForJan1) | 0) + 14) | 0)) % 7;
                if (offset !== 0 && offset >= fullDays) {
                    offset = (offset - 7) | 0;
                }
                day = (dayOfYear - offset) | 0;
                if (day >= 0) {
                    return (((((Bridge.Int.div(day, 7)) | 0) + 1) | 0));
                }
                if (System.DateTime.lte(time, System.DateTime.addDays(this.MinSupportedDateTime, dayOfYear))) {
                    return this.GetWeekOfYearOfMinSupportedDateTime(firstDayOfWeek, fullDays);
                }
                return (this.GetWeekOfYearFullDays(System.DateTime.addDays(time, ((-(((dayOfYear + 1) | 0))) | 0)), firstDayOfWeek, fullDays));
            },
            GetWeekOfYearOfMinSupportedDateTime: function (firstDayOfWeek, minimumDaysInFirstWeek) {
                var dayOfYear = (this.GetDayOfYear(this.MinSupportedDateTime) - 1) | 0;
                var dayOfWeekOfFirstOfYear = (this.GetDayOfWeek(this.MinSupportedDateTime) - dayOfYear % 7) | 0;

                var offset = (((((firstDayOfWeek + 7) | 0) - dayOfWeekOfFirstOfYear) | 0)) % 7;
                if (offset === 0 || offset >= minimumDaysInFirstWeek) {
                    return 1;
                }

                var daysInYearBeforeMinSupportedYear = (this.DaysInYearBeforeMinSupportedYear - 1) | 0;
                var dayOfWeekOfFirstOfPreviousYear = (((dayOfWeekOfFirstOfYear - 1) | 0) - (daysInYearBeforeMinSupportedYear % 7)) | 0;

                var daysInInitialPartialWeek = (((((firstDayOfWeek - dayOfWeekOfFirstOfPreviousYear) | 0) + 14) | 0)) % 7;
                var day = (daysInYearBeforeMinSupportedYear - daysInInitialPartialWeek) | 0;
                if (daysInInitialPartialWeek >= minimumDaysInFirstWeek) {
                    day = (day + 7) | 0;
                }

                return (((((Bridge.Int.div(day, 7)) | 0) + 1) | 0));
            },
            GetWeekOfYear: function (time, rule, firstDayOfWeek) {
                if (firstDayOfWeek < 0 || firstDayOfWeek > 6) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("firstDayOfWeek", System.SR.Format$1("Valid values are between {0} and {1}, inclusive.", Bridge.box(System.DayOfWeek.Sunday, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek)), Bridge.box(System.DayOfWeek.Saturday, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek))));
                }
                switch (rule) {
                    case 0: 
                        return (this.GetFirstDayWeekOfYear(time, firstDayOfWeek));
                    case 1: 
                        return (this.GetWeekOfYearFullDays(time, firstDayOfWeek, 7));
                    case 2: 
                        return (this.GetWeekOfYearFullDays(time, firstDayOfWeek, 4));
                }
                throw new System.ArgumentOutOfRangeException.$ctor4("rule", System.SR.Format$1("Valid values are between {0} and {1}, inclusive.", Bridge.box(0, System.Globalization.CalendarWeekRule, System.Enum.toStringFn(System.Globalization.CalendarWeekRule)), Bridge.box(2, System.Globalization.CalendarWeekRule, System.Enum.toStringFn(System.Globalization.CalendarWeekRule))));
            },
            IsLeapDay: function (year, month, day) {
                return (this.IsLeapDay$1(year, month, day, System.Globalization.Calendar.CurrentEra));
            },
            IsLeapMonth: function (year, month) {
                return (this.IsLeapMonth$1(year, month, System.Globalization.Calendar.CurrentEra));
            },
            GetLeapMonth: function (year) {
                return (this.GetLeapMonth$1(year, System.Globalization.Calendar.CurrentEra));
            },
            GetLeapMonth$1: function (year, era) {
                if (!this.IsLeapYear$1(year, era)) {
                    return 0;
                }

                var monthsCount = this.GetMonthsInYear$1(year, era);
                for (var month = 1; month <= monthsCount; month = (month + 1) | 0) {
                    if (this.IsLeapMonth$1(year, month, era)) {
                        return month;
                    }
                }

                return 0;
            },
            IsLeapYear: function (year) {
                return (this.IsLeapYear$1(year, System.Globalization.Calendar.CurrentEra));
            },
            ToDateTime: function (year, month, day, hour, minute, second, millisecond) {
                return (this.ToDateTime$1(year, month, day, hour, minute, second, millisecond, System.Globalization.Calendar.CurrentEra));
            },
            TryToDateTime: function (year, month, day, hour, minute, second, millisecond, era, result) {
                result.v = System.DateTime.getMinValue();
                try {
                    result.v = this.ToDateTime$1(year, month, day, hour, minute, second, millisecond, era);
                    return true;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArgumentException)) {
                        return false;
                    } else {
                        throw $e1;
                    }
                }
            },
            IsValidYear: function (year, era) {
                return (year >= this.GetYear(this.MinSupportedDateTime) && year <= this.GetYear(this.MaxSupportedDateTime));
            },
            IsValidMonth: function (year, month, era) {
                return (this.IsValidYear(year, era) && month >= 1 && month <= this.GetMonthsInYear$1(year, era));
            },
            IsValidDay: function (year, month, day, era) {
                return (this.IsValidMonth(year, month, era) && day >= 1 && day <= this.GetDaysInMonth$1(year, month, era));
            },
            ToFourDigitYear: function (year) {
                if (year < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("year", "Non-negative number required.");
                }
                if (year < 100) {
                    return (((Bridge.Int.mul((((((Bridge.Int.div(this.TwoDigitYearMax, 100)) | 0) - (year > this.TwoDigitYearMax % 100 ? 1 : 0)) | 0)), 100) + year) | 0));
                }
                return (year);
            }
        }
    });

    // @source CalendarAlgorithmType.js

    Bridge.define("System.Globalization.CalendarAlgorithmType", {
        $kind: "enum",
        statics: {
            fields: {
                Unknown: 0,
                SolarCalendar: 1,
                LunarCalendar: 2,
                LunisolarCalendar: 3
            }
        }
    });

    // @source CalendarId.js

    Bridge.define("System.Globalization.CalendarId", {
        $kind: "enum",
        statics: {
            fields: {
                UNINITIALIZED_VALUE: 0,
                GREGORIAN: 1,
                GREGORIAN_US: 2,
                JAPAN: 3,
                TAIWAN: 4,
                KOREA: 5,
                HIJRI: 6,
                THAI: 7,
                HEBREW: 8,
                GREGORIAN_ME_FRENCH: 9,
                GREGORIAN_ARABIC: 10,
                GREGORIAN_XLIT_ENGLISH: 11,
                GREGORIAN_XLIT_FRENCH: 12,
                JULIAN: 13,
                JAPANESELUNISOLAR: 14,
                CHINESELUNISOLAR: 15,
                SAKA: 16,
                LUNAR_ETO_CHN: 17,
                LUNAR_ETO_KOR: 18,
                LUNAR_ETO_ROKUYOU: 19,
                KOREANLUNISOLAR: 20,
                TAIWANLUNISOLAR: 21,
                PERSIAN: 22,
                UMALQURA: 23,
                LAST_CALENDAR: 23
            }
        },
        $utype: System.UInt16
    });

    // @source CalendarWeekRule.js

    Bridge.define("System.Globalization.CalendarWeekRule", {
        $kind: "enum",
        statics: {
            fields: {
                FirstDay: 0,
                FirstFullWeek: 1,
                FirstFourDayWeek: 2
            }
        }
    });

    // @source CultureNotFoundException.js

    Bridge.define("System.Globalization.CultureNotFoundException", {
        inherits: [System.ArgumentException],
        statics: {
            props: {
                DefaultMessage: {
                    get: function () {
                        return "Culture is not supported.";
                    }
                }
            }
        },
        fields: {
            _invalidCultureName: null,
            _invalidCultureId: null
        },
        props: {
            InvalidCultureId: {
                get: function () {
                    return this._invalidCultureId;
                }
            },
            InvalidCultureName: {
                get: function () {
                    return this._invalidCultureName;
                }
            },
            FormatedInvalidCultureId: {
                get: function () {
                    return this.InvalidCultureId != null ? System.String.formatProvider(System.Globalization.CultureInfo.invariantCulture, "{0} (0x{0:x4})", [Bridge.box(System.Nullable.getValue(this.InvalidCultureId), System.Int32)]) : this.InvalidCultureName;
                }
            },
            Message: {
                get: function () {
                    var s = Bridge.ensureBaseProperty(this, "Message").$System$ArgumentException$Message;
                    if (this._invalidCultureId != null || this._invalidCultureName != null) {
                        var valueMessage = System.SR.Format("{0} is an invalid culture identifier.", this.FormatedInvalidCultureId);
                        if (s == null) {
                            return valueMessage;
                        }

                        return (s || "") + ("\n" || "") + (valueMessage || "");
                    }
                    return s;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.ArgumentException.$ctor1.call(this, System.Globalization.CultureNotFoundException.DefaultMessage);
            },
            $ctor1: function (message) {
                this.$initialize();
                System.ArgumentException.$ctor1.call(this, message);
            },
            $ctor5: function (paramName, message) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, message, paramName);
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.ArgumentException.$ctor2.call(this, message, innerException);
            },
            $ctor7: function (paramName, invalidCultureName, message) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, message, paramName);
                this._invalidCultureName = invalidCultureName;
            },
            $ctor6: function (message, invalidCultureName, innerException) {
                this.$initialize();
                System.ArgumentException.$ctor2.call(this, message, innerException);
                this._invalidCultureName = invalidCultureName;
            },
            $ctor3: function (message, invalidCultureId, innerException) {
                this.$initialize();
                System.ArgumentException.$ctor2.call(this, message, innerException);
                this._invalidCultureId = invalidCultureId;
            },
            $ctor4: function (paramName, invalidCultureId, message) {
                this.$initialize();
                System.ArgumentException.$ctor3.call(this, message, paramName);
                this._invalidCultureId = invalidCultureId;
            }
        }
    });

    // @source DateTimeFormatInfoScanner.js

    Bridge.define("System.Globalization.DateTimeFormatInfoScanner", {
        statics: {
            fields: {
                MonthPostfixChar: 0,
                IgnorableSymbolChar: 0,
                CJKYearSuff: null,
                CJKMonthSuff: null,
                CJKDaySuff: null,
                KoreanYearSuff: null,
                KoreanMonthSuff: null,
                KoreanDaySuff: null,
                KoreanHourSuff: null,
                KoreanMinuteSuff: null,
                KoreanSecondSuff: null,
                CJKHourSuff: null,
                ChineseHourSuff: null,
                CJKMinuteSuff: null,
                CJKSecondSuff: null,
                s_knownWords: null
            },
            props: {
                KnownWords: {
                    get: function () {
                        if (System.Globalization.DateTimeFormatInfoScanner.s_knownWords == null) {
                            var temp = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();

                            temp.add("/", "");
                            temp.add("-", "");
                            temp.add(".", "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.CJKYearSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.CJKMonthSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.CJKDaySuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.KoreanYearSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.KoreanMonthSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.KoreanDaySuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.KoreanHourSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.KoreanMinuteSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.KoreanSecondSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.CJKHourSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.ChineseHourSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.CJKMinuteSuff, "");
                            temp.add(System.Globalization.DateTimeFormatInfoScanner.CJKSecondSuff, "");

                            System.Globalization.DateTimeFormatInfoScanner.s_knownWords = temp;
                        }
                        return (System.Globalization.DateTimeFormatInfoScanner.s_knownWords);
                    }
                }
            },
            ctors: {
                init: function () {
                    this.MonthPostfixChar = 57344;
                    this.IgnorableSymbolChar = 57345;
                    this.CJKYearSuff = "年";
                    this.CJKMonthSuff = "月";
                    this.CJKDaySuff = "日";
                    this.KoreanYearSuff = "년";
                    this.KoreanMonthSuff = "월";
                    this.KoreanDaySuff = "일";
                    this.KoreanHourSuff = "시";
                    this.KoreanMinuteSuff = "분";
                    this.KoreanSecondSuff = "초";
                    this.CJKHourSuff = "時";
                    this.ChineseHourSuff = "时";
                    this.CJKMinuteSuff = "分";
                    this.CJKSecondSuff = "秒";
                }
            },
            methods: {
                SkipWhiteSpacesAndNonLetter: function (pattern, currentIndex) {
                    while (currentIndex < pattern.length) {
                        var ch = pattern.charCodeAt(currentIndex);
                        if (ch === 92) {
                            currentIndex = (currentIndex + 1) | 0;
                            if (currentIndex < pattern.length) {
                                ch = pattern.charCodeAt(currentIndex);
                                if (ch === 39) {
                                    continue;
                                }
                            } else {
                                break;
                            }
                        }
                        if (System.Char.isLetter(ch) || ch === 39 || ch === 46) {
                            break;
                        }
                        currentIndex = (currentIndex + 1) | 0;
                    }
                    return (currentIndex);
                },
                ScanRepeatChar: function (pattern, ch, index, count) {
                    count.v = 1;
                    while (((index = (index + 1) | 0)) < pattern.length && pattern.charCodeAt(index) === ch) {
                        count.v = (count.v + 1) | 0;
                    }
                    return (index);
                },
                GetFormatFlagGenitiveMonth: function (monthNames, genitveMonthNames, abbrevMonthNames, genetiveAbbrevMonthNames) {
                    return ((!System.Globalization.DateTimeFormatInfoScanner.EqualStringArrays(monthNames, genitveMonthNames) || !System.Globalization.DateTimeFormatInfoScanner.EqualStringArrays(abbrevMonthNames, genetiveAbbrevMonthNames)) ? 1 : 0);
                },
                GetFormatFlagUseSpaceInMonthNames: function (monthNames, genitveMonthNames, abbrevMonthNames, genetiveAbbrevMonthNames) {
                    var formatFlags = 0;
                    formatFlags |= (System.Globalization.DateTimeFormatInfoScanner.ArrayElementsBeginWithDigit(monthNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsBeginWithDigit(genitveMonthNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsBeginWithDigit(abbrevMonthNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsBeginWithDigit(genetiveAbbrevMonthNames) ? 32 : 0);

                    formatFlags |= (System.Globalization.DateTimeFormatInfoScanner.ArrayElementsHaveSpace(monthNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsHaveSpace(genitveMonthNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsHaveSpace(abbrevMonthNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsHaveSpace(genetiveAbbrevMonthNames) ? 4 : 0);
                    return (formatFlags);
                },
                GetFormatFlagUseSpaceInDayNames: function (dayNames, abbrevDayNames) {
                    return ((System.Globalization.DateTimeFormatInfoScanner.ArrayElementsHaveSpace(dayNames) || System.Globalization.DateTimeFormatInfoScanner.ArrayElementsHaveSpace(abbrevDayNames)) ? 16 : 0);
                },
                GetFormatFlagUseHebrewCalendar: function (calID) {
                    return (calID === 8 ? 10 : 0);
                },
                EqualStringArrays: function (array1, array2) {
                    if (Bridge.referenceEquals(array1, array2)) {
                        return true;
                    }

                    if (array1.length !== array2.length) {
                        return false;
                    }

                    for (var i = 0; i < array1.length; i = (i + 1) | 0) {
                        if (!System.String.equals(array1[System.Array.index(i, array1)], array2[System.Array.index(i, array2)])) {
                            return false;
                        }
                    }

                    return true;
                },
                ArrayElementsHaveSpace: function (array) {
                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        for (var j = 0; j < array[System.Array.index(i, array)].length; j = (j + 1) | 0) {
                            if (System.Char.isWhiteSpace(String.fromCharCode(array[System.Array.index(i, array)].charCodeAt(j)))) {
                                return true;
                            }
                        }
                    }

                    return false;
                },
                ArrayElementsBeginWithDigit: function (array) {
                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        if (array[System.Array.index(i, array)].length > 0 && array[System.Array.index(i, array)].charCodeAt(0) >= 48 && array[System.Array.index(i, array)].charCodeAt(0) <= 57) {
                            var index = 1;
                            while (index < array[System.Array.index(i, array)].length && array[System.Array.index(i, array)].charCodeAt(index) >= 48 && array[System.Array.index(i, array)].charCodeAt(index) <= 57) {
                                index = (index + 1) | 0;
                            }
                            if (index === array[System.Array.index(i, array)].length) {
                                return (false);
                            }

                            if (index === ((array[System.Array.index(i, array)].length - 1) | 0)) {
                                switch (array[System.Array.index(i, array)].charCodeAt(index)) {
                                    case 26376: 
                                    case 50900: 
                                        return (false);
                                }
                            }

                            if (index === ((array[System.Array.index(i, array)].length - 4) | 0)) {
                                if (array[System.Array.index(i, array)].charCodeAt(index) === 39 && array[System.Array.index(i, array)].charCodeAt(((index + 1) | 0)) === 32 && array[System.Array.index(i, array)].charCodeAt(((index + 2) | 0)) === 26376 && array[System.Array.index(i, array)].charCodeAt(((index + 3) | 0)) === 39) {
                                    return (false);
                                }
                            }
                            return (true);
                        }
                    }

                    return false;
                }
            }
        },
        fields: {
            m_dateWords: null,
            _ymdFlags: 0
        },
        ctors: {
            init: function () {
                this.m_dateWords = new (System.Collections.Generic.List$1(System.String)).ctor();
                this._ymdFlags = System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.None;
            }
        },
        methods: {
            AddDateWordOrPostfix: function (formatPostfix, str) {
                if (str.length > 0) {
                    if (System.String.equals(str, ".")) {
                        this.AddIgnorableSymbols(".");
                        return;
                    }
                    var words = { };
                    if (System.Globalization.DateTimeFormatInfoScanner.KnownWords.tryGetValue(str, words) === false) {
                        if (this.m_dateWords == null) {
                            this.m_dateWords = new (System.Collections.Generic.List$1(System.String)).ctor();
                        }
                        if (Bridge.referenceEquals(formatPostfix, "MMMM")) {
                            var temp = String.fromCharCode(System.Globalization.DateTimeFormatInfoScanner.MonthPostfixChar) + (str || "");
                            if (!this.m_dateWords.contains(temp)) {
                                this.m_dateWords.add(temp);
                            }
                        } else {
                            if (!this.m_dateWords.contains(str)) {
                                this.m_dateWords.add(str);
                            }
                            if (str.charCodeAt(((str.length - 1) | 0)) === 46) {
                                var strWithoutDot = str.substr(0, ((str.length - 1) | 0));
                                if (!this.m_dateWords.contains(strWithoutDot)) {
                                    this.m_dateWords.add(strWithoutDot);
                                }
                            }
                        }
                    }
                }
            },
            AddDateWords: function (pattern, index, formatPostfix) {
                var newIndex = System.Globalization.DateTimeFormatInfoScanner.SkipWhiteSpacesAndNonLetter(pattern, index);
                if (newIndex !== index && formatPostfix != null) {
                    formatPostfix = null;
                }
                index = newIndex;

                var dateWord = new System.Text.StringBuilder();

                while (index < pattern.length) {
                    var ch = pattern.charCodeAt(index);
                    if (ch === 39) {
                        this.AddDateWordOrPostfix(formatPostfix, dateWord.toString());
                        index = (index + 1) | 0;
                        break;
                    } else if (ch === 92) {

                        index = (index + 1) | 0;
                        if (index < pattern.length) {
                            dateWord.append(String.fromCharCode(pattern.charCodeAt(index)));
                            index = (index + 1) | 0;
                        }
                    } else if (System.Char.isWhiteSpace(String.fromCharCode(ch))) {
                        this.AddDateWordOrPostfix(formatPostfix, dateWord.toString());
                        if (formatPostfix != null) {
                            formatPostfix = null;
                        }
                        dateWord.setLength(0);
                        index = (index + 1) | 0;
                    } else {
                        dateWord.append(String.fromCharCode(ch));
                        index = (index + 1) | 0;
                    }
                }
                return (index);
            },
            AddIgnorableSymbols: function (text) {
                if (this.m_dateWords == null) {
                    this.m_dateWords = new (System.Collections.Generic.List$1(System.String)).ctor();
                }
                var temp = String.fromCharCode(System.Globalization.DateTimeFormatInfoScanner.IgnorableSymbolChar) + (text || "");
                if (!this.m_dateWords.contains(temp)) {
                    this.m_dateWords.add(temp);
                }
            },
            ScanDateWord: function (pattern) {
                this._ymdFlags = System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.None;

                var i = 0;
                while (i < pattern.length) {
                    var ch = pattern.charCodeAt(i);
                    var chCount = { };

                    switch (ch) {
                        case 39: 
                            i = this.AddDateWords(pattern, ((i + 1) | 0), null);
                            break;
                        case 77: 
                            i = System.Globalization.DateTimeFormatInfoScanner.ScanRepeatChar(pattern, 77, i, chCount);
                            if (chCount.v >= 4) {
                                if (i < pattern.length && pattern.charCodeAt(i) === 39) {
                                    i = this.AddDateWords(pattern, ((i + 1) | 0), "MMMM");
                                }
                            }
                            this._ymdFlags |= System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.FoundMonthPatternFlag;
                            break;
                        case 121: 
                            i = System.Globalization.DateTimeFormatInfoScanner.ScanRepeatChar(pattern, 121, i, chCount);
                            this._ymdFlags |= System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.FoundYearPatternFlag;
                            break;
                        case 100: 
                            i = System.Globalization.DateTimeFormatInfoScanner.ScanRepeatChar(pattern, 100, i, chCount);
                            if (chCount.v <= 2) {
                                this._ymdFlags |= System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.FoundDayPatternFlag;
                            }
                            break;
                        case 92: 
                            i = (i + 2) | 0;
                            break;
                        case 46: 
                            if (this._ymdFlags === System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.FoundYMDPatternFlag) {
                                this.AddIgnorableSymbols(".");
                                this._ymdFlags = System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.None;
                            }
                            i = (i + 1) | 0;
                            break;
                        default: 
                            if (this._ymdFlags === System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.FoundYMDPatternFlag && !System.Char.isWhiteSpace(String.fromCharCode(ch))) {
                                this._ymdFlags = System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern.None;
                            }
                            i = (i + 1) | 0;
                            break;
                    }
                }
            },
            GetDateWordsOfDTFI: function (dtfi) {
                var datePatterns = dtfi.getAllDateTimePatterns(68);
                var i;

                for (i = 0; i < datePatterns.length; i = (i + 1) | 0) {
                    this.ScanDateWord(datePatterns[System.Array.index(i, datePatterns)]);
                }

                datePatterns = dtfi.getAllDateTimePatterns(100);
                for (i = 0; i < datePatterns.length; i = (i + 1) | 0) {
                    this.ScanDateWord(datePatterns[System.Array.index(i, datePatterns)]);
                }
                datePatterns = dtfi.getAllDateTimePatterns(121);
                for (i = 0; i < datePatterns.length; i = (i + 1) | 0) {
                    this.ScanDateWord(datePatterns[System.Array.index(i, datePatterns)]);
                }

                this.ScanDateWord(dtfi.monthDayPattern);

                datePatterns = dtfi.getAllDateTimePatterns(84);
                for (i = 0; i < datePatterns.length; i = (i + 1) | 0) {
                    this.ScanDateWord(datePatterns[System.Array.index(i, datePatterns)]);
                }

                datePatterns = dtfi.getAllDateTimePatterns(116);
                for (i = 0; i < datePatterns.length; i = (i + 1) | 0) {
                    this.ScanDateWord(datePatterns[System.Array.index(i, datePatterns)]);
                }

                var result = null;
                if (this.m_dateWords != null && this.m_dateWords.Count > 0) {
                    result = System.Array.init(this.m_dateWords.Count, null, System.String);
                    for (i = 0; i < this.m_dateWords.Count; i = (i + 1) | 0) {
                        result[System.Array.index(i, result)] = this.m_dateWords.getItem(i);
                    }
                }
                return (result);
            }
        }
    });

    // @source DateTimeStyles.js

    Bridge.define("System.Globalization.DateTimeStyles", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                AllowLeadingWhite: 1,
                AllowTrailingWhite: 2,
                AllowInnerWhite: 4,
                AllowWhiteSpaces: 7,
                NoCurrentDateDefault: 8,
                AdjustToUniversal: 16,
                AssumeLocal: 32,
                AssumeUniversal: 64,
                RoundtripKind: 128
            }
        },
        $flags: true
    });

    // @source FORMATFLAGS.js

    Bridge.define("System.Globalization.FORMATFLAGS", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                UseGenitiveMonth: 1,
                UseLeapYearMonth: 2,
                UseSpacesInMonthNames: 4,
                UseHebrewParsing: 8,
                UseSpacesInDayNames: 16,
                UseDigitPrefixInTokens: 32
            }
        }
    });

    // @source GlobalizationMode.js

    Bridge.define("System.Globalization.GlobalizationMode", {
        statics: {
            props: {
                Invariant: false
            },
            ctors: {
                init: function () {
                    this.Invariant = System.Globalization.GlobalizationMode.GetGlobalizationInvariantMode();
                }
            },
            methods: {
                GetInvariantSwitchValue: function () {
                    return true;


                },
                GetGlobalizationInvariantMode: function () {
                    return System.Globalization.GlobalizationMode.GetInvariantSwitchValue();
                }
            }
        }
    });

    // @source FoundDatePattern.js

    Bridge.define("System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern", {
        $kind: "nested enum",
        statics: {
            fields: {
                None: 0,
                FoundYearPatternFlag: 1,
                FoundMonthPatternFlag: 2,
                FoundDayPatternFlag: 4,
                FoundYMDPatternFlag: 7
            }
        }
    });

    // @source NotImplemented.js

    Bridge.define("System.NotImplemented", {
        statics: {
            props: {
                ByDesign: {
                    get: function () {
                        return new System.NotImplementedException.ctor();
                    }
                }
            },
            methods: {
                ByDesignWithMessage: function (message) {
                    return new System.NotImplementedException.$ctor1(message);
                }
            }
        }
    });

    // @source NotImplementedException.js

    Bridge.define("System.NotImplementedException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "The method or operation is not implemented.");
                this.HResult = -2147467263;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147467263;
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, inner);
                this.HResult = -2147467263;
            }
        }
    });

    // @source NotSupportedException.js

    Bridge.define("System.NotSupportedException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Specified method is not supported.");
                this.HResult = -2146233067;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233067;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233067;
            }
        }
    });

    // @source NullReferenceException.js

    Bridge.define("System.NullReferenceException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Object reference not set to an instance of an object.");
                this.HResult = -2147467261;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147467261;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2147467261;
            }
        }
    });

    // @source OperationCanceledException.js

    Bridge.define("System.OperationCanceledException", {
        inherits: [System.SystemException],
        fields: {
            _cancellationToken: null
        },
        props: {
            CancellationToken: {
                get: function () {
                    return this._cancellationToken;
                },
                set: function (value) {
                    this._cancellationToken = value;
                }
            }
        },
        ctors: {
            init: function () {
                this._cancellationToken = new System.Threading.CancellationToken();
            },
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "The operation was canceled.");
                this.HResult = -2146233029;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233029;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233029;
            },
            $ctor5: function (token) {
                System.OperationCanceledException.ctor.call(this);
                this.CancellationToken = token;
            },
            $ctor4: function (message, token) {
                System.OperationCanceledException.$ctor1.call(this, message);
                this.CancellationToken = token;
            },
            $ctor3: function (message, innerException, token) {
                System.OperationCanceledException.$ctor2.call(this, message, innerException);
                this.CancellationToken = token;
            }
        }
    });

    // @source OverflowException.js

    Bridge.define("System.OverflowException", {
        inherits: [System.ArithmeticException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.ArithmeticException.$ctor1.call(this, "Arithmetic operation resulted in an overflow.");
                this.HResult = -2146233066;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.ArithmeticException.$ctor1.call(this, message);
                this.HResult = -2146233066;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.ArithmeticException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233066;
            }
        }
    });

    // @source ParseFailureKind.js

    Bridge.define("System.ParseFailureKind", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                ArgumentNull: 1,
                Format: 2,
                FormatWithParameter: 3,
                FormatBadDateTimeCalendar: 4
            }
        }
    });

    // @source ParseFlags.js

    Bridge.define("System.ParseFlags", {
        $kind: "enum",
        statics: {
            fields: {
                HaveYear: 1,
                HaveMonth: 2,
                HaveDay: 4,
                HaveHour: 8,
                HaveMinute: 16,
                HaveSecond: 32,
                HaveTime: 64,
                HaveDate: 128,
                TimeZoneUsed: 256,
                TimeZoneUtc: 512,
                ParsedMonthName: 1024,
                CaptureOffset: 2048,
                YearDefault: 4096,
                Rfc1123Pattern: 8192,
                UtcSortPattern: 16384
            }
        },
        $flags: true
    });

    // @source StringBuilderCache.js

    Bridge.define("System.Text.StringBuilderCache", {
        statics: {
            fields: {
                MAX_BUILDER_SIZE: 0,
                DEFAULT_CAPACITY: 0,
                t_cachedInstance: null
            },
            ctors: {
                init: function () {
                    this.MAX_BUILDER_SIZE = 260;
                    this.DEFAULT_CAPACITY = 16;
                }
            },
            methods: {
                Acquire: function (capacity) {
                    if (capacity === void 0) { capacity = 16; }
                    if (capacity <= System.Text.StringBuilderCache.MAX_BUILDER_SIZE) {
                        var sb = System.Text.StringBuilderCache.t_cachedInstance;
                        if (sb != null) {
                            if (capacity <= sb.getCapacity()) {
                                System.Text.StringBuilderCache.t_cachedInstance = null;
                                sb.clear();
                                return sb;
                            }
                        }
                    }
                    return new System.Text.StringBuilder("", capacity);
                },
                Release: function (sb) {
                    if (sb.getCapacity() <= System.Text.StringBuilderCache.MAX_BUILDER_SIZE) {
                        System.Text.StringBuilderCache.t_cachedInstance = sb;
                    }
                },
                GetStringAndRelease: function (sb) {
                    var result = sb.toString();
                    System.Text.StringBuilderCache.Release(sb);
                    return result;
                }
            }
        }
    });

    // @source BinaryReader.js

    Bridge.define("System.IO.BinaryReader", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                MaxCharBytesSize: 0
            },
            ctors: {
                init: function () {
                    this.MaxCharBytesSize = 128;
                }
            }
        },
        fields: {
            m_stream: null,
            m_buffer: null,
            m_encoding: null,
            m_charBytes: null,
            m_singleChar: null,
            m_charBuffer: null,
            m_maxCharsSize: 0,
            m_2BytesPerChar: false,
            m_isMemoryStream: false,
            m_leaveOpen: false,
            lastCharsRead: 0
        },
        props: {
            BaseStream: {
                get: function () {
                    return this.m_stream;
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            init: function () {
                this.lastCharsRead = 0;
            },
            ctor: function (input) {
                System.IO.BinaryReader.$ctor2.call(this, input, new System.Text.UTF8Encoding.ctor(), false);
            },
            $ctor1: function (input, encoding) {
                System.IO.BinaryReader.$ctor2.call(this, input, encoding, false);
            },
            $ctor2: function (input, encoding, leaveOpen) {
                this.$initialize();
                if (input == null) {
                    throw new System.ArgumentNullException.$ctor1("input");
                }
                if (encoding == null) {
                    throw new System.ArgumentNullException.$ctor1("encoding");
                }
                if (!input.CanRead) {
                    throw new System.ArgumentException.$ctor1("Argument_StreamNotReadable");
                }
                this.m_stream = input;
                this.m_encoding = encoding;
                this.m_maxCharsSize = encoding.GetMaxCharCount(System.IO.BinaryReader.MaxCharBytesSize);
                var minBufferSize = encoding.GetMaxByteCount(1);
                if (minBufferSize < 23) {
                    minBufferSize = 23;
                }
                this.m_buffer = System.Array.init(minBufferSize, 0, System.Byte);

                this.m_2BytesPerChar = Bridge.is(encoding, System.Text.UnicodeEncoding);
                this.m_isMemoryStream = (Bridge.referenceEquals(Bridge.getType(this.m_stream), System.IO.MemoryStream));
                this.m_leaveOpen = leaveOpen;

            }
        },
        methods: {
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                if (disposing) {
                    var copyOfStream = this.m_stream;
                    this.m_stream = null;
                    if (copyOfStream != null && !this.m_leaveOpen) {
                        copyOfStream.Close();
                    }
                }
                this.m_stream = null;
                this.m_buffer = null;
                this.m_encoding = null;
                this.m_charBytes = null;
                this.m_singleChar = null;
                this.m_charBuffer = null;
            },
            Dispose: function () {
                this.Dispose$1(true);
            },
            PeekChar: function () {

                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                if (!this.m_stream.CanSeek) {
                    return -1;
                }
                var origPos = this.m_stream.Position;
                var ch = this.Read();
                this.m_stream.Position = origPos;
                return ch;
            },
            Read: function () {

                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }
                return this.InternalReadOneChar();
            },
            Read$2: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("index", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Argument_InvalidOffLen");
                }

                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                return this.InternalReadChars(buffer, index, count);
            },
            Read$1: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("index", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Argument_InvalidOffLen");
                }

                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }
                return this.m_stream.Read(buffer, index, count);
            },
            ReadBoolean: function () {
                this.FillBuffer(1);
                return (this.m_buffer[System.Array.index(0, this.m_buffer)] !== 0);
            },
            ReadByte: function () {
                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                var b = this.m_stream.ReadByte();
                if (b === -1) {
                    System.IO.__Error.EndOfFile();
                }
                return (b & 255);
            },
            ReadSByte: function () {
                this.FillBuffer(1);
                return Bridge.Int.sxb((this.m_buffer[System.Array.index(0, this.m_buffer)]) & 255);
            },
            ReadChar: function () {
                var value = this.Read();
                if (value === -1) {
                    System.IO.__Error.EndOfFile();
                }
                return (value & 65535);
            },
            ReadInt16: function () {
                this.FillBuffer(2);
                return Bridge.Int.sxs((this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8) & 65535);
            },
            ReadUInt16: function () {
                this.FillBuffer(2);
                return ((this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8) & 65535);
            },
            ReadInt32: function () {
                if (this.m_isMemoryStream) {
                    if (this.m_stream == null) {
                        System.IO.__Error.FileNotOpen();
                    }
                    var mStream = Bridge.as(this.m_stream, System.IO.MemoryStream);

                    return mStream.InternalReadInt32();
                } else {
                    this.FillBuffer(4);
                    return this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(2, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(3, this.m_buffer)] << 24;
                }
            },
            ReadUInt32: function () {
                this.FillBuffer(4);
                return ((this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(2, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(3, this.m_buffer)] << 24) >>> 0);
            },
            ReadInt64: function () {
                this.FillBuffer(8);
                var lo = (this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(2, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(3, this.m_buffer)] << 24) >>> 0;
                var hi = (this.m_buffer[System.Array.index(4, this.m_buffer)] | this.m_buffer[System.Array.index(5, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(6, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(7, this.m_buffer)] << 24) >>> 0;
                return System.Int64.clip64(System.UInt64(hi)).shl(32).or(System.Int64(lo));
            },
            ReadUInt64: function () {
                this.FillBuffer(8);
                var lo = (this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(2, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(3, this.m_buffer)] << 24) >>> 0;
                var hi = (this.m_buffer[System.Array.index(4, this.m_buffer)] | this.m_buffer[System.Array.index(5, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(6, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(7, this.m_buffer)] << 24) >>> 0;
                return System.UInt64(hi).shl(32).or(System.UInt64(lo));
            },
            ReadSingle: function () {
                this.FillBuffer(4);
                var tmpBuffer = (this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(2, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(3, this.m_buffer)] << 24) >>> 0;
                return System.BitConverter.toSingle(System.BitConverter.getBytes$8(tmpBuffer), 0);
            },
            ReadDouble: function () {
                this.FillBuffer(8);
                var lo = (this.m_buffer[System.Array.index(0, this.m_buffer)] | this.m_buffer[System.Array.index(1, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(2, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(3, this.m_buffer)] << 24) >>> 0;
                var hi = (this.m_buffer[System.Array.index(4, this.m_buffer)] | this.m_buffer[System.Array.index(5, this.m_buffer)] << 8 | this.m_buffer[System.Array.index(6, this.m_buffer)] << 16 | this.m_buffer[System.Array.index(7, this.m_buffer)] << 24) >>> 0;

                var tmpBuffer = System.UInt64(hi).shl(32).or(System.UInt64(lo));
                return System.BitConverter.toDouble(System.BitConverter.getBytes$9(tmpBuffer), 0);
            },
            ReadDecimal: function () {
                this.FillBuffer(23);
                try {
                    return System.Decimal.fromBytes(this.m_buffer);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var e;
                    if (Bridge.is($e1, System.ArgumentException)) {
                        e = $e1;
                        throw new System.IO.IOException.$ctor2("Arg_DecBitCtor", e);
                    } else {
                        throw $e1;
                    }
                }
            },
            ReadString: function () {

                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                var currPos = 0;
                var n;
                var stringLength;
                var readLength;
                var charsRead;

                stringLength = this.Read7BitEncodedInt();
                if (stringLength < 0) {
                    throw new System.IO.IOException.$ctor1("IO.IO_InvalidStringLen_Len");
                }

                if (stringLength === 0) {
                    return "";
                }

                if (this.m_charBytes == null) {
                    this.m_charBytes = System.Array.init(System.IO.BinaryReader.MaxCharBytesSize, 0, System.Byte);
                }

                if (this.m_charBuffer == null) {
                    this.m_charBuffer = System.Array.init(this.m_maxCharsSize, 0, System.Char);
                }

                var sb = null;
                do {
                    readLength = ((((stringLength - currPos) | 0)) > System.IO.BinaryReader.MaxCharBytesSize) ? System.IO.BinaryReader.MaxCharBytesSize : (((stringLength - currPos) | 0));

                    n = this.m_stream.Read(this.m_charBytes, 0, readLength);
                    if (n === 0) {
                        System.IO.__Error.EndOfFile();
                    }

                    charsRead = this.m_encoding.GetChars$2(this.m_charBytes, 0, n, this.m_charBuffer, 0);

                    if (currPos === 0 && n === stringLength) {
                        return System.String.fromCharArray(this.m_charBuffer, 0, charsRead);
                    }

                    if (sb == null) {
                        sb = new System.Text.StringBuilder("", stringLength);
                    }

                    for (var i = 0; i < charsRead; i = (i + 1) | 0) {
                        sb.append(String.fromCharCode(this.m_charBuffer[System.Array.index(i, this.m_charBuffer)]));
                    }

                    currPos = (currPos + n) | 0;

                } while (currPos < stringLength);

                return sb.toString();
            },
            InternalReadChars: function (buffer, index, count) {

                var charsRemaining = count;

                if (this.m_charBytes == null) {
                    this.m_charBytes = System.Array.init(System.IO.BinaryReader.MaxCharBytesSize, 0, System.Byte);
                }

                if (index < 0 || charsRemaining < 0 || ((index + charsRemaining) | 0) > buffer.length) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charsRemaining");
                }

                while (charsRemaining > 0) {

                    var ch = this.InternalReadOneChar(true);

                    if (ch === -1) {
                        break;
                    }

                    buffer[System.Array.index(index, buffer)] = ch & 65535;

                    if (this.lastCharsRead === 2) {
                        buffer[System.Array.index(((index = (index + 1) | 0)), buffer)] = this.m_singleChar[System.Array.index(1, this.m_singleChar)];
                        charsRemaining = (charsRemaining - 1) | 0;
                    }

                    charsRemaining = (charsRemaining - 1) | 0;
                    index = (index + 1) | 0;
                }


                return (((count - charsRemaining) | 0));
            },
            InternalReadOneChar: function (allowSurrogate) {
                if (allowSurrogate === void 0) { allowSurrogate = false; }
                var charsRead = 0;
                var numBytes = 0;
                var posSav = System.Int64(0);

                if (this.m_stream.CanSeek) {
                    posSav = this.m_stream.Position;
                }

                if (this.m_charBytes == null) {
                    this.m_charBytes = System.Array.init(System.IO.BinaryReader.MaxCharBytesSize, 0, System.Byte);
                }
                if (this.m_singleChar == null) {
                    this.m_singleChar = System.Array.init(2, 0, System.Char);
                }

                var addByte = false;
                var internalPos = 0;
                while (charsRead === 0) {
                    numBytes = this.m_2BytesPerChar ? 2 : 1;

                    if (Bridge.is(this.m_encoding, System.Text.UTF32Encoding)) {
                        numBytes = 4;
                    }

                    if (addByte) {
                        var r = this.m_stream.ReadByte();
                        this.m_charBytes[System.Array.index(((internalPos = (internalPos + 1) | 0)), this.m_charBytes)] = r & 255;
                        if (r === -1) {
                            numBytes = 0;
                        }

                        if (numBytes === 2) {
                            r = this.m_stream.ReadByte();
                            this.m_charBytes[System.Array.index(((internalPos = (internalPos + 1) | 0)), this.m_charBytes)] = r & 255;
                            if (r === -1) {
                                numBytes = 1;
                            }
                        }
                    } else {
                        var r1 = this.m_stream.ReadByte();
                        this.m_charBytes[System.Array.index(0, this.m_charBytes)] = r1 & 255;
                        internalPos = 0;
                        if (r1 === -1) {
                            numBytes = 0;
                        }

                        if (numBytes === 2) {
                            r1 = this.m_stream.ReadByte();
                            this.m_charBytes[System.Array.index(1, this.m_charBytes)] = r1 & 255;
                            if (r1 === -1) {
                                numBytes = 1;
                            }
                            internalPos = 1;
                        } else if (numBytes === 4) {
                            r1 = this.m_stream.ReadByte();
                            this.m_charBytes[System.Array.index(1, this.m_charBytes)] = r1 & 255;
                            if (r1 === -1) {
                                return -1;
                            }

                            r1 = this.m_stream.ReadByte();
                            this.m_charBytes[System.Array.index(2, this.m_charBytes)] = r1 & 255;
                            if (r1 === -1) {
                                return -1;
                            }

                            r1 = this.m_stream.ReadByte();
                            this.m_charBytes[System.Array.index(3, this.m_charBytes)] = r1 & 255;
                            if (r1 === -1) {
                                return -1;
                            }

                            internalPos = 3;
                        }
                    }


                    if (numBytes === 0) {
                        return -1;
                    }

                    addByte = false;
                    try {
                        charsRead = this.m_encoding.GetChars$2(this.m_charBytes, 0, ((internalPos + 1) | 0), this.m_singleChar, 0);

                        if (!allowSurrogate && charsRead === 2) {
                            throw new System.ArgumentException.ctor();
                        }
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);

                        if (this.m_stream.CanSeek) {
                            this.m_stream.Seek((posSav.sub(this.m_stream.Position)), 1);
                        }

                        throw $e1;
                    }

                    if (this.m_encoding._hasError) {
                        charsRead = 0;
                        addByte = true;
                    }

                    if (!allowSurrogate) {
                    }
                }

                this.lastCharsRead = charsRead;

                if (charsRead === 0) {
                    return -1;
                }

                return this.m_singleChar[System.Array.index(0, this.m_singleChar)];
            },
            ReadChars: function (count) {
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                if (count === 0) {
                    return System.Array.init(0, 0, System.Char);
                }

                var chars = System.Array.init(count, 0, System.Char);
                var n = this.InternalReadChars(chars, 0, count);
                if (n !== count) {
                    var copy = System.Array.init(n, 0, System.Char);
                    System.Array.copy(chars, 0, copy, 0, Bridge.Int.mul(2, n));
                    chars = copy;
                }

                return chars;
            },
            ReadBytes: function (count) {
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                if (count === 0) {
                    return System.Array.init(0, 0, System.Byte);
                }

                var result = System.Array.init(count, 0, System.Byte);

                var numRead = 0;
                do {
                    var n = this.m_stream.Read(result, numRead, count);
                    if (n === 0) {
                        break;
                    }
                    numRead = (numRead + n) | 0;
                    count = (count - n) | 0;
                } while (count > 0);

                if (numRead !== result.length) {
                    var copy = System.Array.init(numRead, 0, System.Byte);
                    System.Array.copy(result, 0, copy, 0, numRead);
                    result = copy;
                }

                return result;
            },
            FillBuffer: function (numBytes) {
                if (this.m_buffer != null && (numBytes < 0 || numBytes > this.m_buffer.length)) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("numBytes", "ArgumentOutOfRange_BinaryReaderFillBuffer");
                }
                var bytesRead = 0;
                var n = 0;

                if (this.m_stream == null) {
                    System.IO.__Error.FileNotOpen();
                }

                if (numBytes === 1) {
                    n = this.m_stream.ReadByte();
                    if (n === -1) {
                        System.IO.__Error.EndOfFile();
                    }
                    this.m_buffer[System.Array.index(0, this.m_buffer)] = n & 255;
                    return;
                }

                do {
                    n = this.m_stream.Read(this.m_buffer, bytesRead, ((numBytes - bytesRead) | 0));
                    if (n === 0) {
                        System.IO.__Error.EndOfFile();
                    }
                    bytesRead = (bytesRead + n) | 0;
                } while (bytesRead < numBytes);
            },
            Read7BitEncodedInt: function () {
                var count = 0;
                var shift = 0;
                var b;
                do {
                    if (shift === 35) {
                        throw new System.FormatException.$ctor1("Format_Bad7BitInt32");
                    }

                    b = this.ReadByte();
                    count = count | ((b & 127) << shift);
                    shift = (shift + 7) | 0;
                } while ((b & 128) !== 0);
                return count;
            }
        }
    });

    // @source BinaryWriter.js

    Bridge.define("System.IO.BinaryWriter", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                Null: null,
                LargeByteBufferSize: 0
            },
            ctors: {
                init: function () {
                    this.Null = new System.IO.BinaryWriter.ctor();
                    this.LargeByteBufferSize = 256;
                }
            }
        },
        fields: {
            OutStream: null,
            _buffer: null,
            _encoding: null,
            _leaveOpen: false,
            _tmpOneCharBuffer: null
        },
        props: {
            BaseStream: {
                get: function () {
                    this.Flush();
                    return this.OutStream;
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.OutStream = System.IO.Stream.Null;
                this._buffer = System.Array.init(16, 0, System.Byte);
                this._encoding = new System.Text.UTF8Encoding.$ctor2(false, true);
            },
            $ctor1: function (output) {
                System.IO.BinaryWriter.$ctor3.call(this, output, new System.Text.UTF8Encoding.$ctor2(false, true), false);
            },
            $ctor2: function (output, encoding) {
                System.IO.BinaryWriter.$ctor3.call(this, output, encoding, false);
            },
            $ctor3: function (output, encoding, leaveOpen) {
                this.$initialize();
                if (output == null) {
                    throw new System.ArgumentNullException.$ctor1("output");
                }
                if (encoding == null) {
                    throw new System.ArgumentNullException.$ctor1("encoding");
                }
                if (!output.CanWrite) {
                    throw new System.ArgumentException.$ctor1("Argument_StreamNotWritable");
                }

                this.OutStream = output;
                this._buffer = System.Array.init(16, 0, System.Byte);
                this._encoding = encoding;
                this._leaveOpen = leaveOpen;
            }
        },
        methods: {
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                if (disposing) {
                    if (this._leaveOpen) {
                        this.OutStream.Flush();
                    } else {
                        this.OutStream.Close();
                    }
                }
            },
            Dispose: function () {
                this.Dispose$1(true);
            },
            Flush: function () {
                this.OutStream.Flush();
            },
            Seek: function (offset, origin) {
                return this.OutStream.Seek(System.Int64(offset), origin);
            },
            Write: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = (value ? 1 : 0) & 255;
                this.OutStream.Write(this._buffer, 0, 1);
            },
            Write$1: function (value) {
                this.OutStream.WriteByte(value);
            },
            Write$12: function (value) {
                this.OutStream.WriteByte((value & 255));
            },
            Write$2: function (buffer) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                this.OutStream.Write(buffer, 0, buffer.length);
            },
            Write$3: function (buffer, index, count) {
                this.OutStream.Write(buffer, index, count);
            },
            Write$4: function (ch) {
                if (System.Char.isSurrogate(ch)) {
                    throw new System.ArgumentException.$ctor1("Arg_SurrogatesNotAllowedAsSingleChar");
                }

                var numBytes = 0;
                numBytes = this._encoding.GetBytes$3(System.Array.init([ch], System.Char), 0, 1, this._buffer, 0);

                this.OutStream.Write(this._buffer, 0, numBytes);
            },
            Write$5: function (chars) {
                if (chars == null) {
                    throw new System.ArgumentNullException.$ctor1("chars");
                }

                var bytes = this._encoding.GetBytes$1(chars, 0, chars.length);
                this.OutStream.Write(bytes, 0, bytes.length);
            },
            Write$6: function (chars, index, count) {
                var bytes = this._encoding.GetBytes$1(chars, index, count);
                this.OutStream.Write(bytes, 0, bytes.length);
            },
            Write$8: function (value) {
                var TmpValue = System.Int64.clipu64(System.BitConverter.doubleToInt64Bits(value));
                this._buffer[System.Array.index(0, this._buffer)] = System.Int64.clipu8(TmpValue);
                this._buffer[System.Array.index(1, this._buffer)] = System.Int64.clipu8(TmpValue.shru(8));
                this._buffer[System.Array.index(2, this._buffer)] = System.Int64.clipu8(TmpValue.shru(16));
                this._buffer[System.Array.index(3, this._buffer)] = System.Int64.clipu8(TmpValue.shru(24));
                this._buffer[System.Array.index(4, this._buffer)] = System.Int64.clipu8(TmpValue.shru(32));
                this._buffer[System.Array.index(5, this._buffer)] = System.Int64.clipu8(TmpValue.shru(40));
                this._buffer[System.Array.index(6, this._buffer)] = System.Int64.clipu8(TmpValue.shru(48));
                this._buffer[System.Array.index(7, this._buffer)] = System.Int64.clipu8(TmpValue.shru(56));
                this.OutStream.Write(this._buffer, 0, 8);
            },
            Write$7: function (value) {
                var buf = value.getBytes();
                this.OutStream.Write(buf, 0, 23);
            },
            Write$9: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = value & 255;
                this._buffer[System.Array.index(1, this._buffer)] = (value >> 8) & 255;
                this.OutStream.Write(this._buffer, 0, 2);
            },
            Write$15: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = value & 255;
                this._buffer[System.Array.index(1, this._buffer)] = (value >> 8) & 255;
                this.OutStream.Write(this._buffer, 0, 2);
            },
            Write$10: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = value & 255;
                this._buffer[System.Array.index(1, this._buffer)] = (value >> 8) & 255;
                this._buffer[System.Array.index(2, this._buffer)] = (value >> 16) & 255;
                this._buffer[System.Array.index(3, this._buffer)] = (value >> 24) & 255;
                this.OutStream.Write(this._buffer, 0, 4);
            },
            Write$16: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = value & 255;
                this._buffer[System.Array.index(1, this._buffer)] = (value >>> 8) & 255;
                this._buffer[System.Array.index(2, this._buffer)] = (value >>> 16) & 255;
                this._buffer[System.Array.index(3, this._buffer)] = (value >>> 24) & 255;
                this.OutStream.Write(this._buffer, 0, 4);
            },
            Write$11: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = System.Int64.clipu8(value);
                this._buffer[System.Array.index(1, this._buffer)] = System.Int64.clipu8(value.shr(8));
                this._buffer[System.Array.index(2, this._buffer)] = System.Int64.clipu8(value.shr(16));
                this._buffer[System.Array.index(3, this._buffer)] = System.Int64.clipu8(value.shr(24));
                this._buffer[System.Array.index(4, this._buffer)] = System.Int64.clipu8(value.shr(32));
                this._buffer[System.Array.index(5, this._buffer)] = System.Int64.clipu8(value.shr(40));
                this._buffer[System.Array.index(6, this._buffer)] = System.Int64.clipu8(value.shr(48));
                this._buffer[System.Array.index(7, this._buffer)] = System.Int64.clipu8(value.shr(56));
                this.OutStream.Write(this._buffer, 0, 8);
            },
            Write$17: function (value) {
                this._buffer[System.Array.index(0, this._buffer)] = System.Int64.clipu8(value);
                this._buffer[System.Array.index(1, this._buffer)] = System.Int64.clipu8(value.shru(8));
                this._buffer[System.Array.index(2, this._buffer)] = System.Int64.clipu8(value.shru(16));
                this._buffer[System.Array.index(3, this._buffer)] = System.Int64.clipu8(value.shru(24));
                this._buffer[System.Array.index(4, this._buffer)] = System.Int64.clipu8(value.shru(32));
                this._buffer[System.Array.index(5, this._buffer)] = System.Int64.clipu8(value.shru(40));
                this._buffer[System.Array.index(6, this._buffer)] = System.Int64.clipu8(value.shru(48));
                this._buffer[System.Array.index(7, this._buffer)] = System.Int64.clipu8(value.shru(56));
                this.OutStream.Write(this._buffer, 0, 8);
            },
            Write$13: function (value) {
                var TmpValue = System.BitConverter.toUInt32(System.BitConverter.getBytes$6(value), 0);
                this._buffer[System.Array.index(0, this._buffer)] = TmpValue & 255;
                this._buffer[System.Array.index(1, this._buffer)] = (TmpValue >>> 8) & 255;
                this._buffer[System.Array.index(2, this._buffer)] = (TmpValue >>> 16) & 255;
                this._buffer[System.Array.index(3, this._buffer)] = (TmpValue >>> 24) & 255;
                this.OutStream.Write(this._buffer, 0, 4);
            },
            Write$14: function (value) {
                if (value == null) {
                    throw new System.ArgumentNullException.$ctor1("value");
                }

                var buffer = this._encoding.GetBytes$2(value);
                var len = buffer.length;
                this.Write7BitEncodedInt(len);
                this.OutStream.Write(buffer, 0, len);
            },
            Write7BitEncodedInt: function (value) {
                var v = value >>> 0;
                while (v >= 128) {
                    this.Write$1(((((v | 128) >>> 0)) & 255));
                    v = v >>> 7;
                }
                this.Write$1((v & 255));
            }
        }
    });

    // @source Stream.js

    Bridge.define("System.IO.Stream", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                Null: null,
                _DefaultCopyBufferSize: 0
            },
            ctors: {
                init: function () {
                    this.Null = new System.IO.Stream.NullStream();
                    this._DefaultCopyBufferSize = 81920;
                }
            },
            methods: {
                Synchronized: function (stream) {
                    if (stream == null) {
                        throw new System.ArgumentNullException.$ctor1("stream");
                    }

                    return stream;
                },
                BlockingEndRead: function (asyncResult) {

                    return System.IO.Stream.SynchronousAsyncResult.EndRead(asyncResult);
                },
                BlockingEndWrite: function (asyncResult) {
                    System.IO.Stream.SynchronousAsyncResult.EndWrite(asyncResult);
                }
            }
        },
        props: {
            CanTimeout: {
                get: function () {
                    return false;
                }
            },
            ReadTimeout: {
                get: function () {
                    throw new System.InvalidOperationException.ctor();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.ctor();
                }
            },
            WriteTimeout: {
                get: function () {
                    throw new System.InvalidOperationException.ctor();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.ctor();
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        methods: {
            CopyTo: function (destination) {
                if (destination == null) {
                    throw new System.ArgumentNullException.$ctor1("destination");
                }
                if (!this.CanRead && !this.CanWrite) {
                    throw new System.Exception();
                }
                if (!destination.CanRead && !destination.CanWrite) {
                    throw new System.Exception("destination");
                }
                if (!this.CanRead) {
                    throw new System.NotSupportedException.ctor();
                }
                if (!destination.CanWrite) {
                    throw new System.NotSupportedException.ctor();
                }

                this.InternalCopyTo(destination, System.IO.Stream._DefaultCopyBufferSize);
            },
            CopyTo$1: function (destination, bufferSize) {
                if (destination == null) {
                    throw new System.ArgumentNullException.$ctor1("destination");
                }
                if (bufferSize <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("bufferSize");
                }
                if (!this.CanRead && !this.CanWrite) {
                    throw new System.Exception();
                }
                if (!destination.CanRead && !destination.CanWrite) {
                    throw new System.Exception("destination");
                }
                if (!this.CanRead) {
                    throw new System.NotSupportedException.ctor();
                }
                if (!destination.CanWrite) {
                    throw new System.NotSupportedException.ctor();
                }

                this.InternalCopyTo(destination, bufferSize);
            },
            InternalCopyTo: function (destination, bufferSize) {

                var buffer = System.Array.init(bufferSize, 0, System.Byte);
                var read;
                while (((read = this.Read(buffer, 0, buffer.length))) !== 0) {
                    destination.Write(buffer, 0, read);
                }
            },
            Close: function () {
                /* These are correct, but we'd have to fix PipeStream & NetworkStream very carefully.
                Contract.Ensures(CanRead == false);
                Contract.Ensures(CanWrite == false);
                Contract.Ensures(CanSeek == false);
                */

                this.Dispose$1(true);
            },
            Dispose: function () {
                /* These are correct, but we'd have to fix PipeStream & NetworkStream very carefully.
                Contract.Ensures(CanRead == false);
                Contract.Ensures(CanWrite == false);
                Contract.Ensures(CanSeek == false);
                */

                this.Close();
            },
            Dispose$1: function (disposing) { },
            BeginRead: function (buffer, offset, count, callback, state) {
                return this.BeginReadInternal(buffer, offset, count, callback, state, false);
            },
            BeginReadInternal: function (buffer, offset, count, callback, state, serializeAsynchronously) {
                if (!this.CanRead) {
                    System.IO.__Error.ReadNotSupported();
                }

                return this.BlockingBeginRead(buffer, offset, count, callback, state);
            },
            EndRead: function (asyncResult) {
                if (asyncResult == null) {
                    throw new System.ArgumentNullException.$ctor1("asyncResult");
                }

                return System.IO.Stream.BlockingEndRead(asyncResult);
            },
            BeginWrite: function (buffer, offset, count, callback, state) {
                return this.BeginWriteInternal(buffer, offset, count, callback, state, false);
            },
            BeginWriteInternal: function (buffer, offset, count, callback, state, serializeAsynchronously) {
                if (!this.CanWrite) {
                    System.IO.__Error.WriteNotSupported();
                }
                return this.BlockingBeginWrite(buffer, offset, count, callback, state);
            },
            EndWrite: function (asyncResult) {
                if (asyncResult == null) {
                    throw new System.ArgumentNullException.$ctor1("asyncResult");
                }

                System.IO.Stream.BlockingEndWrite(asyncResult);
            },
            ReadByte: function () {

                var oneByteArray = System.Array.init(1, 0, System.Byte);
                var r = this.Read(oneByteArray, 0, 1);
                if (r === 0) {
                    return -1;
                }
                return oneByteArray[System.Array.index(0, oneByteArray)];
            },
            WriteByte: function (value) {
                var oneByteArray = System.Array.init(1, 0, System.Byte);
                oneByteArray[System.Array.index(0, oneByteArray)] = value;
                this.Write(oneByteArray, 0, 1);
            },
            BlockingBeginRead: function (buffer, offset, count, callback, state) {

                var asyncResult;
                try {
                    var numRead = this.Read(buffer, offset, count);
                    asyncResult = new System.IO.Stream.SynchronousAsyncResult.$ctor1(numRead, state);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.IO.IOException)) {
                        ex = $e1;
                        asyncResult = new System.IO.Stream.SynchronousAsyncResult.ctor(ex, state, false);
                    } else {
                        throw $e1;
                    }
                }

                if (!Bridge.staticEquals(callback, null)) {
                    callback(asyncResult);
                }

                return asyncResult;
            },
            BlockingBeginWrite: function (buffer, offset, count, callback, state) {

                var asyncResult;
                try {
                    this.Write(buffer, offset, count);
                    asyncResult = new System.IO.Stream.SynchronousAsyncResult.$ctor2(state);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.IO.IOException)) {
                        ex = $e1;
                        asyncResult = new System.IO.Stream.SynchronousAsyncResult.ctor(ex, state, true);
                    } else {
                        throw $e1;
                    }
                }

                if (!Bridge.staticEquals(callback, null)) {
                    callback(asyncResult);
                }

                return asyncResult;
            }
        }
    });

    // @source BufferedStream.js

    Bridge.define("System.IO.BufferedStream", {
        inherits: [System.IO.Stream],
        statics: {
            fields: {
                _DefaultBufferSize: 0,
                MaxShadowBufferSize: 0
            },
            ctors: {
                init: function () {
                    this._DefaultBufferSize = 4096;
                    this.MaxShadowBufferSize = 81920;
                }
            }
        },
        fields: {
            _stream: null,
            _buffer: null,
            _bufferSize: 0,
            _readPos: 0,
            _readLen: 0,
            _writePos: 0
        },
        props: {
            UnderlyingStream: {
                get: function () {
                    return this._stream;
                }
            },
            BufferSize: {
                get: function () {
                    return this._bufferSize;
                }
            },
            CanRead: {
                get: function () {
                    return this._stream != null && this._stream.CanRead;
                }
            },
            CanWrite: {
                get: function () {
                    return this._stream != null && this._stream.CanWrite;
                }
            },
            CanSeek: {
                get: function () {
                    return this._stream != null && this._stream.CanSeek;
                }
            },
            Length: {
                get: function () {
                    this.EnsureNotClosed();

                    if (this._writePos > 0) {
                        this.FlushWrite();
                    }

                    return this._stream.Length;
                }
            },
            Position: {
                get: function () {
                    this.EnsureNotClosed();
                    this.EnsureCanSeek();

                    return this._stream.Position.add(System.Int64((((((this._readPos - this._readLen) | 0) + this._writePos) | 0))));
                },
                set: function (value) {
                    if (value.lt(System.Int64(0))) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("value");
                    }

                    this.EnsureNotClosed();
                    this.EnsureCanSeek();

                    if (this._writePos > 0) {
                        this.FlushWrite();
                    }

                    this._readPos = 0;
                    this._readLen = 0;
                    this._stream.Seek(value, 0);
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
            },
            $ctor1: function (stream) {
                System.IO.BufferedStream.$ctor2.call(this, stream, System.IO.BufferedStream._DefaultBufferSize);
            },
            $ctor2: function (stream, bufferSize) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);

                if (stream == null) {
                    throw new System.ArgumentNullException.$ctor1("stream");
                }

                if (bufferSize <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("bufferSize");
                }

                this._stream = stream;
                this._bufferSize = bufferSize;


                if (!this._stream.CanRead && !this._stream.CanWrite) {
                    System.IO.__Error.StreamIsClosed();
                }
            }
        },
        methods: {
            EnsureNotClosed: function () {

                if (this._stream == null) {
                    System.IO.__Error.StreamIsClosed();
                }
            },
            EnsureCanSeek: function () {


                if (!this._stream.CanSeek) {
                    System.IO.__Error.SeekNotSupported();
                }
            },
            EnsureCanRead: function () {


                if (!this._stream.CanRead) {
                    System.IO.__Error.ReadNotSupported();
                }
            },
            EnsureCanWrite: function () {


                if (!this._stream.CanWrite) {
                    System.IO.__Error.WriteNotSupported();
                }
            },
            EnsureShadowBufferAllocated: function () {


                if (this._buffer.length !== this._bufferSize || this._bufferSize >= System.IO.BufferedStream.MaxShadowBufferSize) {
                    return;
                }

                var shadowBuffer = System.Array.init(Math.min(((this._bufferSize + this._bufferSize) | 0), System.IO.BufferedStream.MaxShadowBufferSize), 0, System.Byte);
                System.Array.copy(this._buffer, 0, shadowBuffer, 0, this._writePos);
                this._buffer = shadowBuffer;
            },
            EnsureBufferAllocated: function () {


                if (this._buffer == null) {
                    this._buffer = System.Array.init(this._bufferSize, 0, System.Byte);
                }
            },
            Dispose$1: function (disposing) {

                try {
                    if (disposing && this._stream != null) {
                        try {
                            this.Flush();
                        }
                        finally {
                            this._stream.Close();
                        }
                    }
                }
                finally {
                    this._stream = null;
                    this._buffer = null;

                    System.IO.Stream.prototype.Dispose$1.call(this, disposing);
                }
            },
            Flush: function () {

                this.EnsureNotClosed();

                if (this._writePos > 0) {

                    this.FlushWrite();
                    return;
                }

                if (this._readPos < this._readLen) {

                    if (!this._stream.CanSeek) {
                        return;
                    }

                    this.FlushRead();

                    if (this._stream.CanWrite || Bridge.is(this._stream, System.IO.BufferedStream)) {
                        this._stream.Flush();
                    }

                    return;
                }

                if (this._stream.CanWrite || Bridge.is(this._stream, System.IO.BufferedStream)) {
                    this._stream.Flush();
                }

                this._writePos = (this._readPos = (this._readLen = 0));
            },
            FlushRead: function () {


                if (((this._readPos - this._readLen) | 0) !== 0) {
                    this._stream.Seek(System.Int64(this._readPos - this._readLen), 1);
                }

                this._readPos = 0;
                this._readLen = 0;
            },
            ClearReadBufferBeforeWrite: function () {



                if (this._readPos === this._readLen) {

                    this._readPos = (this._readLen = 0);
                    return;
                }


                if (!this._stream.CanSeek) {
                    throw new System.NotSupportedException.ctor();
                }

                this.FlushRead();
            },
            FlushWrite: function () {


                this._stream.Write(this._buffer, 0, this._writePos);
                this._writePos = 0;
                this._stream.Flush();
            },
            ReadFromBuffer: function (array, offset, count) {

                var readBytes = (this._readLen - this._readPos) | 0;

                if (readBytes === 0) {
                    return 0;
                }


                if (readBytes > count) {
                    readBytes = count;
                }

                System.Array.copy(this._buffer, this._readPos, array, offset, readBytes);
                this._readPos = (this._readPos + readBytes) | 0;

                return readBytes;
            },
            ReadFromBuffer$1: function (array, offset, count, error) {

                try {

                    error.v = null;
                    return this.ReadFromBuffer(array, offset, count);

                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    error.v = ex;
                    return 0;
                }
            },
            Read: function (array, offset, count) {

                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }
                if (offset < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("offset");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((array.length - offset) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                this.EnsureNotClosed();
                this.EnsureCanRead();

                var bytesFromBuffer = this.ReadFromBuffer(array, offset, count);


                if (bytesFromBuffer === count) {
                    return bytesFromBuffer;
                }

                var alreadySatisfied = bytesFromBuffer;
                if (bytesFromBuffer > 0) {
                    count = (count - bytesFromBuffer) | 0;
                    offset = (offset + bytesFromBuffer) | 0;
                }

                this._readPos = (this._readLen = 0);

                if (this._writePos > 0) {
                    this.FlushWrite();
                }

                if (count >= this._bufferSize) {

                    return ((this._stream.Read(array, offset, count) + alreadySatisfied) | 0);
                }

                this.EnsureBufferAllocated();
                this._readLen = this._stream.Read(this._buffer, 0, this._bufferSize);

                bytesFromBuffer = this.ReadFromBuffer(array, offset, count);


                return ((bytesFromBuffer + alreadySatisfied) | 0);
            },
            ReadByte: function () {

                this.EnsureNotClosed();
                this.EnsureCanRead();

                if (this._readPos === this._readLen) {

                    if (this._writePos > 0) {
                        this.FlushWrite();
                    }

                    this.EnsureBufferAllocated();
                    this._readLen = this._stream.Read(this._buffer, 0, this._bufferSize);
                    this._readPos = 0;
                }

                if (this._readPos === this._readLen) {
                    return -1;
                }

                var b = this._buffer[System.Array.index(Bridge.identity(this._readPos, (this._readPos = (this._readPos + 1) | 0)), this._buffer)];
                return b;
            },
            WriteToBuffer: function (array, offset, count) {

                var bytesToWrite = Math.min(((this._bufferSize - this._writePos) | 0), count.v);

                if (bytesToWrite <= 0) {
                    return;
                }

                this.EnsureBufferAllocated();
                System.Array.copy(array, offset.v, this._buffer, this._writePos, bytesToWrite);

                this._writePos = (this._writePos + bytesToWrite) | 0;
                count.v = (count.v - bytesToWrite) | 0;
                offset.v = (offset.v + bytesToWrite) | 0;
            },
            WriteToBuffer$1: function (array, offset, count, error) {

                try {

                    error.v = null;
                    this.WriteToBuffer(array, offset, count);

                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    error.v = ex;
                }
            },
            Write: function (array, offset, count) {
                offset = {v:offset};
                count = {v:count};

                if (array == null) {
                    throw new System.ArgumentNullException.$ctor1("array");
                }
                if (offset.v < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("offset");
                }
                if (count.v < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((array.length - offset.v) | 0) < count.v) {
                    throw new System.ArgumentException.ctor();
                }

                this.EnsureNotClosed();
                this.EnsureCanWrite();

                if (this._writePos === 0) {
                    this.ClearReadBufferBeforeWrite();
                }



                var totalUserBytes;
                var useBuffer;
                totalUserBytes = Bridge.Int.check(this._writePos + count.v, System.Int32);
                useBuffer = (Bridge.Int.check(totalUserBytes + count.v, System.Int32) < (Bridge.Int.check(this._bufferSize + this._bufferSize, System.Int32)));

                if (useBuffer) {

                    this.WriteToBuffer(array, offset, count);

                    if (this._writePos < this._bufferSize) {

                        return;
                    }


                    this._stream.Write(this._buffer, 0, this._writePos);
                    this._writePos = 0;

                    this.WriteToBuffer(array, offset, count);


                } else {

                    if (this._writePos > 0) {


                        if (totalUserBytes <= (((this._bufferSize + this._bufferSize) | 0)) && totalUserBytes <= System.IO.BufferedStream.MaxShadowBufferSize) {

                            this.EnsureShadowBufferAllocated();
                            System.Array.copy(array, offset.v, this._buffer, this._writePos, count.v);
                            this._stream.Write(this._buffer, 0, totalUserBytes);
                            this._writePos = 0;
                            return;
                        }

                        this._stream.Write(this._buffer, 0, this._writePos);
                        this._writePos = 0;
                    }

                    this._stream.Write(array, offset.v, count.v);
                }
            },
            WriteByte: function (value) {

                this.EnsureNotClosed();

                if (this._writePos === 0) {

                    this.EnsureCanWrite();
                    this.ClearReadBufferBeforeWrite();
                    this.EnsureBufferAllocated();
                }

                if (this._writePos >= ((this._bufferSize - 1) | 0)) {
                    this.FlushWrite();
                }

                this._buffer[System.Array.index(Bridge.identity(this._writePos, (this._writePos = (this._writePos + 1) | 0)), this._buffer)] = value;

            },
            Seek: function (offset, origin) {

                this.EnsureNotClosed();
                this.EnsureCanSeek();

                if (this._writePos > 0) {

                    this.FlushWrite();
                    return this._stream.Seek(offset, origin);
                }


                if (((this._readLen - this._readPos) | 0) > 0 && origin === 1) {

                    offset = offset.sub(System.Int64((((this._readLen - this._readPos) | 0))));
                }

                var oldPos = this.Position;

                var newPos = this._stream.Seek(offset, origin);


                this._readPos = System.Int64.clip32(newPos.sub((oldPos.sub(System.Int64(this._readPos)))));

                if (0 <= this._readPos && this._readPos < this._readLen) {

                    this._stream.Seek(System.Int64(this._readLen - this._readPos), 1);

                } else {

                    this._readPos = (this._readLen = 0);
                }

                return newPos;
            },
            SetLength: function (value) {

                if (value.lt(System.Int64(0))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("value");
                }

                this.EnsureNotClosed();
                this.EnsureCanSeek();
                this.EnsureCanWrite();

                this.Flush();
                this._stream.SetLength(value);
            }
        }
    });

    // @source IOException.js

    Bridge.define("System.IO.IOException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "I/O error occurred.");
                this.HResult = -2146232800;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146232800;
            },
            $ctor3: function (message, hresult) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = hresult;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146232800;
            }
        }
    });

    // @source EndOfStreamException.js

    Bridge.define("System.IO.EndOfStreamException", {
        inherits: [System.IO.IOException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.IOException.$ctor1.call(this, "Arg_EndOfStreamException");
            },
            $ctor1: function (message) {
                this.$initialize();
                System.IO.IOException.$ctor1.call(this, message);
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.IO.IOException.$ctor2.call(this, message, innerException);
            }
        }
    });

    // @source File.js

    Bridge.define("System.IO.File", {
        statics: {
            methods: {
                OpenText: function (path) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    return new System.IO.StreamReader.$ctor7(path);
                },
                OpenRead: function (path) {
                    return new System.IO.FileStream.$ctor1(path, 3);
                },
                ReadAllText: function (path) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    if (path.length === 0) {
                        throw new System.ArgumentException.$ctor1("Argument_EmptyPath");
                    }

                    return System.IO.File.InternalReadAllText(path, System.Text.Encoding.UTF8, true);
                },
                ReadAllText$1: function (path, encoding) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    if (encoding == null) {
                        throw new System.ArgumentNullException.$ctor1("encoding");
                    }
                    if (path.length === 0) {
                        throw new System.ArgumentException.$ctor1("Argument_EmptyPath");
                    }

                    return System.IO.File.InternalReadAllText(path, encoding, true);
                },
                InternalReadAllText: function (path, encoding, checkHost) {

                    var sr = new System.IO.StreamReader.$ctor12(path, encoding, true, System.IO.StreamReader.DefaultBufferSize, checkHost);
                    try {
                        return sr.ReadToEnd();
                    }
                    finally {
                        if (Bridge.hasValue(sr)) {
                            sr.System$IDisposable$Dispose();
                        }
                    }
                },
                ReadAllBytes: function (path) {
                    return System.IO.File.InternalReadAllBytes(path, true);
                },
                InternalReadAllBytes: function (path, checkHost) {
                    var bytes;
                    var fs = new System.IO.FileStream.$ctor1(path, 3);
                    try {
                        var index = 0;
                        var fileLength = fs.Length;
                        if (fileLength.gt(System.Int64(2147483647))) {
                            throw new System.IO.IOException.$ctor1("IO.IO_FileTooLong2GB");
                        }
                        var count = System.Int64.clip32(fileLength);
                        bytes = System.Array.init(count, 0, System.Byte);
                        while (count > 0) {
                            var n = fs.Read(bytes, index, count);
                            if (n === 0) {
                                System.IO.__Error.EndOfFile();
                            }
                            index = (index + n) | 0;
                            count = (count - n) | 0;
                        }
                    }
                    finally {
                        if (Bridge.hasValue(fs)) {
                            fs.System$IDisposable$Dispose();
                        }
                    }
                    return bytes;
                },
                ReadAllLines: function (path) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    if (path.length === 0) {
                        throw new System.ArgumentException.$ctor1("Argument_EmptyPath");
                    }

                    return System.IO.File.InternalReadAllLines(path, System.Text.Encoding.UTF8);
                },
                ReadAllLines$1: function (path, encoding) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    if (encoding == null) {
                        throw new System.ArgumentNullException.$ctor1("encoding");
                    }
                    if (path.length === 0) {
                        throw new System.ArgumentException.$ctor1("Argument_EmptyPath");
                    }

                    return System.IO.File.InternalReadAllLines(path, encoding);
                },
                InternalReadAllLines: function (path, encoding) {

                    var line;
                    var lines = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var sr = new System.IO.StreamReader.$ctor9(path, encoding);
                    try {
                        while (((line = sr.ReadLine())) != null) {
                            lines.add(line);
                        }
                    }
                    finally {
                        if (Bridge.hasValue(sr)) {
                            sr.System$IDisposable$Dispose();
                        }
                    }

                    return lines.ToArray();
                },
                ReadLines: function (path) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    if (path.length === 0) {
                        throw new System.ArgumentException.$ctor3("Argument_EmptyPath", "path");
                    }

                    return System.IO.ReadLinesIterator.CreateIterator(path, System.Text.Encoding.UTF8);
                },
                ReadLines$1: function (path, encoding) {
                    if (path == null) {
                        throw new System.ArgumentNullException.$ctor1("path");
                    }
                    if (encoding == null) {
                        throw new System.ArgumentNullException.$ctor1("encoding");
                    }
                    if (path.length === 0) {
                        throw new System.ArgumentException.$ctor3("Argument_EmptyPath", "path");
                    }

                    return System.IO.ReadLinesIterator.CreateIterator(path, encoding);
                }
            }
        }
    });

    // @source FileMode.js

    Bridge.define("System.IO.FileMode", {
        $kind: "enum",
        statics: {
            fields: {
                CreateNew: 1,
                Create: 2,
                Open: 3,
                OpenOrCreate: 4,
                Truncate: 5,
                Append: 6
            }
        }
    });

    // @source FileOptions.js

    Bridge.define("System.IO.FileOptions", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                WriteThrough: -2147483648,
                Asynchronous: 1073741824,
                RandomAccess: 268435456,
                DeleteOnClose: 67108864,
                SequentialScan: 134217728,
                Encrypted: 16384
            }
        },
        $flags: true
    });

    // @source FileShare.js

    Bridge.define("System.IO.FileShare", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Read: 1,
                Write: 2,
                ReadWrite: 3,
                Delete: 4,
                Inheritable: 16
            }
        },
        $flags: true
    });

    // @source FileStream.js

    Bridge.define("System.IO.FileStream", {
        inherits: [System.IO.Stream],
        statics: {
            methods: {
                FromFile: function (file) {
                    var completer = new System.Threading.Tasks.TaskCompletionSource();
                    var fileReader = new FileReader();
                    fileReader.onload = function () {
                        completer.setResult(new System.IO.FileStream.ctor(fileReader.result, file.name));
                    };
                    fileReader.onerror = function (e) {
                        completer.setException(new System.SystemException.$ctor1(Bridge.unbox(e).target.error.As()));
                    };
                    fileReader.readAsArrayBuffer(file);

                    return completer.task;
                },
                ReadBytes: function (path) {
                    if (Bridge.isNode) {
                        var fs = require("fs");
                        return Bridge.cast(fs.readFileSync(path), ArrayBuffer);
                    } else {
                        var req = new XMLHttpRequest();
                        req.open("GET", path, false);
                        req.overrideMimeType("text/plain; charset=x-user-defined");
                        req.send(null);
                        if (req.status !== 200) {
                            throw new System.IO.IOException.$ctor1(System.String.concat("Status of request to " + (path || "") + " returned status: ", req.status));
                        }

                        var text = req.responseText;
                        var resultArray = new Uint8Array(text.length);
                        System.String.toCharArray(text, 0, text.length).forEach(function (v, index, array) {
                                var $t;
                                return ($t = (v & 255) & 255, resultArray[index] = $t, $t);
                            });
                        return resultArray.buffer;
                    }
                },
                ReadBytesAsync: function (path) {
                    var tcs = new System.Threading.Tasks.TaskCompletionSource();

                    if (Bridge.isNode) {
                        var fs = require("fs");
                        fs.readFile(path, function (err, data) {
                            if (err != null) {
                                throw new System.IO.IOException.ctor();
                            }

                            tcs.setResult(data);
                        });
                    } else {
                        var req = new XMLHttpRequest();
                        req.open("GET", path, true);
                        req.overrideMimeType("text/plain; charset=binary-data");
                        req.send(null);

                        req.onreadystatechange = function () {
                        if (req.readyState !== 4) {
                            return;
                        }

                        if (req.status !== 200) {
                            throw new System.IO.IOException.$ctor1(System.String.concat("Status of request to " + (path || "") + " returned status: ", req.status));
                        }

                        var text = req.responseText;
                        var resultArray = new Uint8Array(text.length);
                        System.String.toCharArray(text, 0, text.length).forEach(function (v, index, array) {
                                var $t;
                                return ($t = (v & 255) & 255, resultArray[index] = $t, $t);
                            });
                        tcs.setResult(resultArray.buffer);
                        };
                    }

                    return tcs.task;
                }
            }
        },
        fields: {
            name: null,
            _buffer: null
        },
        props: {
            CanRead: {
                get: function () {
                    return true;
                }
            },
            CanWrite: {
                get: function () {
                    return false;
                }
            },
            CanSeek: {
                get: function () {
                    return false;
                }
            },
            IsAsync: {
                get: function () {
                    return false;
                }
            },
            Name: {
                get: function () {
                    return this.name;
                }
            },
            Length: {
                get: function () {
                    return System.Int64(this.GetInternalBuffer().byteLength);
                }
            },
            Position: System.Int64(0)
        },
        ctors: {
            $ctor1: function (path, mode) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
                this.name = path;
            },
            ctor: function (buffer, name) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
                this._buffer = buffer;
                this.name = name;
            }
        },
        methods: {
            Flush: function () { },
            Seek: function (offset, origin) {
                throw new System.NotImplementedException.ctor();
            },
            SetLength: function (value) {
                throw new System.NotImplementedException.ctor();
            },
            Write: function (buffer, offset, count) {
                throw new System.NotImplementedException.ctor();
            },
            GetInternalBuffer: function () {
                if (this._buffer == null) {
                    this._buffer = System.IO.FileStream.ReadBytes(this.name);

                }

                return this._buffer;
            },
            EnsureBufferAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this._buffer == null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = System.IO.FileStream.ReadBytesAsync(this.name);
                                        $step = 2;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this._buffer = $taskResult1;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Read: function (buffer, offset, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }

                if (offset < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("offset");
                }

                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }

                if ((((buffer.length - offset) | 0)) < count) {
                    throw new System.ArgumentException.ctor();
                }

                var num = this.Length.sub(this.Position);
                if (num.gt(System.Int64(count))) {
                    num = System.Int64(count);
                }

                if (num.lte(System.Int64(0))) {
                    return 0;
                }

                var byteBuffer = new Uint8Array(this.GetInternalBuffer());
                if (num.gt(System.Int64(8))) {
                    for (var n = 0; System.Int64(n).lt(num); n = (n + 1) | 0) {
                        buffer[System.Array.index(((n + offset) | 0), buffer)] = byteBuffer[this.Position.add(System.Int64(n))];
                    }
                } else {
                    var num1 = num;
                    while (true) {
                        var num2 = num1.sub(System.Int64(1));
                        num1 = num2;
                        if (num2.lt(System.Int64(0))) {
                            break;
                        }
                        buffer[System.Array.index(System.Int64.toNumber(System.Int64(offset).add(num1)), buffer)] = byteBuffer[this.Position.add(num1)];
                    }
                }
                this.Position = this.Position.add(num);
                return System.Int64.clip32(num);
            }
        }
    });

    // @source Iterator.js

    Bridge.define("System.IO.Iterator$1", function (TSource) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(TSource),System.Collections.Generic.IEnumerator$1(TSource)],
        fields: {
            state: 0,
            current: Bridge.getDefaultValue(TSource)
        },
        props: {
            Current: {
                get: function () {
                    return this.current;
                }
            },
            System$Collections$IEnumerator$Current: {
                get: function () {
                    return this.Current;
                }
            }
        },
        alias: [
            "Current", ["System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(TSource) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1"],
            "Dispose", "System$IDisposable$Dispose",
            "GetEnumerator", ["System$Collections$Generic$IEnumerable$1$" + Bridge.getTypeAlias(TSource) + "$GetEnumerator", "System$Collections$Generic$IEnumerable$1$GetEnumerator"]
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Dispose: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                this.current = Bridge.getDefaultValue(TSource);
                this.state = -1;
            },
            GetEnumerator: function () {
                if (this.state === 0) {
                    this.state = 1;
                    return this;
                }

                var duplicate = this.Clone();
                duplicate.state = 1;
                return duplicate;
            },
            System$Collections$IEnumerable$GetEnumerator: function () {
                return this.GetEnumerator();
            },
            System$Collections$IEnumerator$reset: function () {
                throw new System.NotSupportedException.ctor();
            }
        }
    }; });

    // @source MemoryStream.js

    Bridge.define("System.IO.MemoryStream", {
        inherits: [System.IO.Stream],
        statics: {
            fields: {
                MemStreamMaxLength: 0
            },
            ctors: {
                init: function () {
                    this.MemStreamMaxLength = 2147483647;
                }
            }
        },
        fields: {
            _buffer: null,
            _origin: 0,
            _position: 0,
            _length: 0,
            _capacity: 0,
            _expandable: false,
            _writable: false,
            _exposable: false,
            _isOpen: false
        },
        props: {
            CanRead: {
                get: function () {
                    return this._isOpen;
                }
            },
            CanSeek: {
                get: function () {
                    return this._isOpen;
                }
            },
            CanWrite: {
                get: function () {
                    return this._writable;
                }
            },
            Capacity: {
                get: function () {
                    if (!this._isOpen) {
                        System.IO.__Error.StreamIsClosed();
                    }
                    return ((this._capacity - this._origin) | 0);
                },
                set: function (value) {
                    if (System.Int64(value).lt(this.Length)) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("value", "ArgumentOutOfRange_SmallCapacity");
                    }

                    if (!this._isOpen) {
                        System.IO.__Error.StreamIsClosed();
                    }
                    if (!this._expandable && (value !== this.Capacity)) {
                        System.IO.__Error.MemoryStreamNotExpandable();
                    }

                    if (this._expandable && value !== this._capacity) {
                        if (value > 0) {
                            var newBuffer = System.Array.init(value, 0, System.Byte);
                            if (this._length > 0) {
                                System.Array.copy(this._buffer, 0, newBuffer, 0, this._length);
                            }
                            this._buffer = newBuffer;
                        } else {
                            this._buffer = null;
                        }
                        this._capacity = value;
                    }
                }
            },
            Length: {
                get: function () {
                    if (!this._isOpen) {
                        System.IO.__Error.StreamIsClosed();
                    }
                    return System.Int64(this._length - this._origin);
                }
            },
            Position: {
                get: function () {
                    if (!this._isOpen) {
                        System.IO.__Error.StreamIsClosed();
                    }
                    return System.Int64(this._position - this._origin);
                },
                set: function (value) {
                    if (value.lt(System.Int64(0))) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("value", "ArgumentOutOfRange_NeedNonNegNum");
                    }

                    if (!this._isOpen) {
                        System.IO.__Error.StreamIsClosed();
                    }

                    if (value.gt(System.Int64(System.IO.MemoryStream.MemStreamMaxLength))) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("value", "ArgumentOutOfRange_StreamLength");
                    }
                    this._position = (this._origin + System.Int64.clip32(value)) | 0;
                }
            }
        },
        ctors: {
            ctor: function () {
                System.IO.MemoryStream.$ctor6.call(this, 0);
            },
            $ctor6: function (capacity) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
                if (capacity < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("capacity", "ArgumentOutOfRange_NegativeCapacity");
                }

                this._buffer = System.Array.init(capacity, 0, System.Byte);
                this._capacity = capacity;
                this._expandable = true;
                this._writable = true;
                this._exposable = true;
                this._origin = 0;
                this._isOpen = true;
            },
            $ctor1: function (buffer) {
                System.IO.MemoryStream.$ctor2.call(this, buffer, true);
            },
            $ctor2: function (buffer, writable) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                this._buffer = buffer;
                this._length = (this._capacity = buffer.length);
                this._writable = writable;
                this._exposable = false;
                this._origin = 0;
                this._isOpen = true;
            },
            $ctor3: function (buffer, index, count) {
                System.IO.MemoryStream.$ctor5.call(this, buffer, index, count, true, false);
            },
            $ctor4: function (buffer, index, count, writable) {
                System.IO.MemoryStream.$ctor5.call(this, buffer, index, count, writable, false);
            },
            $ctor5: function (buffer, index, count, writable, publiclyVisible) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("index", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Argument_InvalidOffLen");
                }

                this._buffer = buffer;
                this._origin = (this._position = index);
                this._length = (this._capacity = (index + count) | 0);
                this._writable = writable;
                this._exposable = publiclyVisible;
                this._expandable = false;
                this._isOpen = true;
            }
        },
        methods: {
            EnsureWriteable: function () {
                if (!this.CanWrite) {
                    System.IO.__Error.WriteNotSupported();
                }
            },
            Dispose$1: function (disposing) {
                try {
                    if (disposing) {
                        this._isOpen = false;
                        this._writable = false;
                        this._expandable = false;
                    }
                }
                finally {
                    System.IO.Stream.prototype.Dispose$1.call(this, disposing);
                }
            },
            EnsureCapacity: function (value) {
                if (value < 0) {
                    throw new System.IO.IOException.$ctor1("IO.IO_StreamTooLong");
                }
                if (value > this._capacity) {
                    var newCapacity = value;
                    if (newCapacity < 256) {
                        newCapacity = 256;
                    }
                    if (newCapacity < Bridge.Int.mul(this._capacity, 2)) {
                        newCapacity = Bridge.Int.mul(this._capacity, 2);
                    }
                    if ((((Bridge.Int.mul(this._capacity, 2))) >>> 0) > 2147483591) {
                        newCapacity = value > 2147483591 ? value : 2147483591;
                    }

                    this.Capacity = newCapacity;
                    return true;
                }
                return false;
            },
            Flush: function () { },
            GetBuffer: function () {
                if (!this._exposable) {
                    throw new System.Exception("UnauthorizedAccess_MemStreamBuffer");
                }
                return this._buffer;
            },
            TryGetBuffer: function (buffer) {
                if (!this._exposable) {
                    buffer.v = Bridge.getDefaultValue(System.ArraySegment);
                    return false;
                }

                buffer.v = new System.ArraySegment(this._buffer, this._origin, (((this._length - this._origin) | 0)));
                return true;
            },
            InternalGetBuffer: function () {
                return this._buffer;
            },
            InternalGetPosition: function () {
                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }
                return this._position;
            },
            InternalReadInt32: function () {
                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }

                var pos = ((this._position = (this._position + 4) | 0));
                if (pos > this._length) {
                    this._position = this._length;
                    System.IO.__Error.EndOfFile();
                }
                return this._buffer[System.Array.index(((pos - 4) | 0), this._buffer)] | this._buffer[System.Array.index(((pos - 3) | 0), this._buffer)] << 8 | this._buffer[System.Array.index(((pos - 2) | 0), this._buffer)] << 16 | this._buffer[System.Array.index(((pos - 1) | 0), this._buffer)] << 24;
            },
            InternalEmulateRead: function (count) {
                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }

                var n = (this._length - this._position) | 0;
                if (n > count) {
                    n = count;
                }
                if (n < 0) {
                    n = 0;
                }

                this._position = (this._position + n) | 0;
                return n;
            },
            Read: function (buffer, offset, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                if (offset < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("offset", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (((buffer.length - offset) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Argument_InvalidOffLen");
                }

                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }

                var n = (this._length - this._position) | 0;
                if (n > count) {
                    n = count;
                }
                if (n <= 0) {
                    return 0;
                }


                if (n <= 8) {
                    var byteCount = n;
                    while (((byteCount = (byteCount - 1) | 0)) >= 0) {
                        buffer[System.Array.index(((offset + byteCount) | 0), buffer)] = this._buffer[System.Array.index(((this._position + byteCount) | 0), this._buffer)];
                    }
                } else {
                    System.Array.copy(this._buffer, this._position, buffer, offset, n);
                }
                this._position = (this._position + n) | 0;

                return n;
            },
            ReadByte: function () {
                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }

                if (this._position >= this._length) {
                    return -1;
                }

                return this._buffer[System.Array.index(Bridge.identity(this._position, (this._position = (this._position + 1) | 0)), this._buffer)];
            },
            Seek: function (offset, loc) {
                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }

                if (offset.gt(System.Int64(System.IO.MemoryStream.MemStreamMaxLength))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("offset", "ArgumentOutOfRange_StreamLength");
                }
                switch (loc) {
                    case 0: 
                        {
                            var tempPosition = ((this._origin + System.Int64.clip32(offset)) | 0);
                            if (offset.lt(System.Int64(0)) || tempPosition < this._origin) {
                                throw new System.IO.IOException.$ctor1("IO.IO_SeekBeforeBegin");
                            }
                            this._position = tempPosition;
                            break;
                        }
                    case 1: 
                        {
                            var tempPosition1 = ((this._position + System.Int64.clip32(offset)) | 0);
                            if (System.Int64(this._position).add(offset).lt(System.Int64(this._origin)) || tempPosition1 < this._origin) {
                                throw new System.IO.IOException.$ctor1("IO.IO_SeekBeforeBegin");
                            }
                            this._position = tempPosition1;
                            break;
                        }
                    case 2: 
                        {
                            var tempPosition2 = ((this._length + System.Int64.clip32(offset)) | 0);
                            if (System.Int64(this._length).add(offset).lt(System.Int64(this._origin)) || tempPosition2 < this._origin) {
                                throw new System.IO.IOException.$ctor1("IO.IO_SeekBeforeBegin");
                            }
                            this._position = tempPosition2;
                            break;
                        }
                    default: 
                        throw new System.ArgumentException.$ctor1("Argument_InvalidSeekOrigin");
                }

                return System.Int64(this._position);
            },
            SetLength: function (value) {
                if (value.lt(System.Int64(0)) || value.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("value", "ArgumentOutOfRange_StreamLength");
                }
                this.EnsureWriteable();

                if (value.gt(System.Int64((((2147483647 - this._origin) | 0))))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("value", "ArgumentOutOfRange_StreamLength");
                }

                var newLength = (this._origin + System.Int64.clip32(value)) | 0;
                var allocatedNewArray = this.EnsureCapacity(newLength);
                if (!allocatedNewArray && newLength > this._length) {
                    System.Array.fill(this._buffer, 0, this._length, ((newLength - this._length) | 0));
                }
                this._length = newLength;
                if (this._position > newLength) {
                    this._position = newLength;
                }

            },
            ToArray: function () {
                var copy = System.Array.init(((this._length - this._origin) | 0), 0, System.Byte);
                System.Array.copy(this._buffer, this._origin, copy, 0, ((this._length - this._origin) | 0));
                return copy;
            },
            Write: function (buffer, offset, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                if (offset < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("offset", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (((buffer.length - offset) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Argument_InvalidOffLen");
                }

                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }
                this.EnsureWriteable();

                var i = (this._position + count) | 0;
                if (i < 0) {
                    throw new System.IO.IOException.$ctor1("IO.IO_StreamTooLong");
                }

                if (i > this._length) {
                    var mustZero = this._position > this._length;
                    if (i > this._capacity) {
                        var allocatedNewArray = this.EnsureCapacity(i);
                        if (allocatedNewArray) {
                            mustZero = false;
                        }
                    }
                    if (mustZero) {
                        System.Array.fill(this._buffer, 0, this._length, ((i - this._length) | 0));
                    }
                    this._length = i;
                }
                if ((count <= 8) && (!Bridge.referenceEquals(buffer, this._buffer))) {
                    var byteCount = count;
                    while (((byteCount = (byteCount - 1) | 0)) >= 0) {
                        this._buffer[System.Array.index(((this._position + byteCount) | 0), this._buffer)] = buffer[System.Array.index(((offset + byteCount) | 0), buffer)];
                    }
                } else {
                    System.Array.copy(buffer, offset, this._buffer, this._position, count);
                }
                this._position = i;

            },
            WriteByte: function (value) {
                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }
                this.EnsureWriteable();

                if (this._position >= this._length) {
                    var newLength = (this._position + 1) | 0;
                    var mustZero = this._position > this._length;
                    if (newLength >= this._capacity) {
                        var allocatedNewArray = this.EnsureCapacity(newLength);
                        if (allocatedNewArray) {
                            mustZero = false;
                        }
                    }
                    if (mustZero) {
                        System.Array.fill(this._buffer, 0, this._length, ((this._position - this._length) | 0));
                    }
                    this._length = newLength;
                }
                this._buffer[System.Array.index(Bridge.identity(this._position, (this._position = (this._position + 1) | 0)), this._buffer)] = value;

            },
            WriteTo: function (stream) {
                if (stream == null) {
                    throw new System.ArgumentNullException.$ctor3("stream", "ArgumentNull_Stream");
                }

                if (!this._isOpen) {
                    System.IO.__Error.StreamIsClosed();
                }
                stream.Write(this._buffer, this._origin, ((this._length - this._origin) | 0));
            }
        }
    });

    // @source ReadLinesIterator.js

    Bridge.define("System.IO.ReadLinesIterator", {
        inherits: [System.IO.Iterator$1(System.String)],
        statics: {
            methods: {
                CreateIterator: function (path, encoding) {
                    return System.IO.ReadLinesIterator.CreateIterator$1(path, encoding, null);
                },
                CreateIterator$1: function (path, encoding, reader) {
                    return new System.IO.ReadLinesIterator(path, encoding, reader || new System.IO.StreamReader.$ctor9(path, encoding));
                }
            }
        },
        fields: {
            _path: null,
            _encoding: null,
            _reader: null
        },
        alias: ["moveNext", "System$Collections$IEnumerator$moveNext"],
        ctors: {
            ctor: function (path, encoding, reader) {
                this.$initialize();
                System.IO.Iterator$1(System.String).ctor.call(this);

                this._path = path;
                this._encoding = encoding;
                this._reader = reader;
            }
        },
        methods: {
            moveNext: function () {
                if (this._reader != null) {
                    this.current = this._reader.ReadLine();
                    if (this.current != null) {
                        return true;
                    }

                    this.Dispose();
                }

                return false;
            },
            Clone: function () {
                return System.IO.ReadLinesIterator.CreateIterator$1(this._path, this._encoding, this._reader);
            },
            Dispose$1: function (disposing) {
                try {
                    if (disposing) {
                        if (this._reader != null) {
                            this._reader.Dispose();
                        }
                    }
                }
                finally {
                    this._reader = null;
                    System.IO.Iterator$1(System.String).prototype.Dispose$1.call(this, disposing);
                }
            }
        }
    });

    // @source SeekOrigin.js

    Bridge.define("System.IO.SeekOrigin", {
        $kind: "enum",
        statics: {
            fields: {
                Begin: 0,
                Current: 1,
                End: 2
            }
        }
    });

    // @source NullStream.js

    Bridge.define("System.IO.Stream.NullStream", {
        inherits: [System.IO.Stream],
        $kind: "nested class",
        props: {
            CanRead: {
                get: function () {
                    return true;
                }
            },
            CanWrite: {
                get: function () {
                    return true;
                }
            },
            CanSeek: {
                get: function () {
                    return true;
                }
            },
            Length: {
                get: function () {
                    return System.Int64(0);
                }
            },
            Position: {
                get: function () {
                    return System.Int64(0);
                },
                set: function (value) { }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
            }
        },
        methods: {
            Dispose$1: function (disposing) { },
            Flush: function () { },
            BeginRead: function (buffer, offset, count, callback, state) {
                if (!this.CanRead) {
                    System.IO.__Error.ReadNotSupported();
                }

                return this.BlockingBeginRead(buffer, offset, count, callback, state);
            },
            EndRead: function (asyncResult) {
                if (asyncResult == null) {
                    throw new System.ArgumentNullException.$ctor1("asyncResult");
                }

                return System.IO.Stream.BlockingEndRead(asyncResult);
            },
            BeginWrite: function (buffer, offset, count, callback, state) {
                if (!this.CanWrite) {
                    System.IO.__Error.WriteNotSupported();
                }

                return this.BlockingBeginWrite(buffer, offset, count, callback, state);
            },
            EndWrite: function (asyncResult) {
                if (asyncResult == null) {
                    throw new System.ArgumentNullException.$ctor1("asyncResult");
                }

                System.IO.Stream.BlockingEndWrite(asyncResult);
            },
            Read: function (buffer, offset, count) {
                return 0;
            },
            ReadByte: function () {
                return -1;
            },
            Write: function (buffer, offset, count) { },
            WriteByte: function (value) { },
            Seek: function (offset, origin) {
                return System.Int64(0);
            },
            SetLength: function (length) { }
        }
    });

    // @source SynchronousAsyncResult.js

    Bridge.define("System.IO.Stream.SynchronousAsyncResult", {
        inherits: [System.IAsyncResult],
        $kind: "nested class",
        statics: {
            methods: {
                EndRead: function (asyncResult) {

                    var ar = Bridge.as(asyncResult, System.IO.Stream.SynchronousAsyncResult);
                    if (ar == null || ar._isWrite) {
                        System.IO.__Error.WrongAsyncResult();
                    }

                    if (ar._endXxxCalled) {
                        System.IO.__Error.EndReadCalledTwice();
                    }

                    ar._endXxxCalled = true;

                    ar.ThrowIfError();
                    return ar._bytesRead;
                },
                EndWrite: function (asyncResult) {

                    var ar = Bridge.as(asyncResult, System.IO.Stream.SynchronousAsyncResult);
                    if (ar == null || !ar._isWrite) {
                        System.IO.__Error.WrongAsyncResult();
                    }

                    if (ar._endXxxCalled) {
                        System.IO.__Error.EndWriteCalledTwice();
                    }

                    ar._endXxxCalled = true;

                    ar.ThrowIfError();
                }
            }
        },
        fields: {
            _stateObject: null,
            _isWrite: false,
            _exceptionInfo: null,
            _endXxxCalled: false,
            _bytesRead: 0
        },
        props: {
            IsCompleted: {
                get: function () {
                    return true;
                }
            },
            AsyncState: {
                get: function () {
                    return this._stateObject;
                }
            },
            CompletedSynchronously: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "IsCompleted", "System$IAsyncResult$IsCompleted",
            "AsyncState", "System$IAsyncResult$AsyncState",
            "CompletedSynchronously", "System$IAsyncResult$CompletedSynchronously"
        ],
        ctors: {
            $ctor1: function (bytesRead, asyncStateObject) {
                this.$initialize();
                this._bytesRead = bytesRead;
                this._stateObject = asyncStateObject;
            },
            $ctor2: function (asyncStateObject) {
                this.$initialize();
                this._stateObject = asyncStateObject;
                this._isWrite = true;
            },
            ctor: function (ex, asyncStateObject, isWrite) {
                this.$initialize();
                this._exceptionInfo = ex;
                this._stateObject = asyncStateObject;
                this._isWrite = isWrite;
            }
        },
        methods: {
            ThrowIfError: function () {
                if (this._exceptionInfo != null) {
                    throw this._exceptionInfo;
                }
            }
        }
    });

    // @source TextReader.js

    Bridge.define("System.IO.TextReader", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                Null: null
            },
            ctors: {
                init: function () {
                    this.Null = new System.IO.TextReader.NullTextReader();
                }
            },
            methods: {
                Synchronized: function (reader) {
                    if (reader == null) {
                        throw new System.ArgumentNullException.$ctor1("reader");
                    }

                    return reader;
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) { },
            Peek: function () {

                return -1;
            },
            Read: function () {
                return -1;
            },
            Read$1: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                var n = 0;
                do {
                    var ch = this.Read();
                    if (ch === -1) {
                        break;
                    }
                    buffer[System.Array.index(((index + Bridge.identity(n, (n = (n + 1) | 0))) | 0), buffer)] = ch & 65535;
                } while (n < count);
                return n;
            },
            ReadToEndAsync: function () {
                return System.Threading.Tasks.Task.fromResult(this.ReadToEnd(), System.String);
            },
            ReadToEnd: function () {

                var chars = System.Array.init(4096, 0, System.Char);
                var len;
                var sb = new System.Text.StringBuilder("", 4096);
                while (((len = this.Read$1(chars, 0, chars.length))) !== 0) {
                    sb.append(System.String.fromCharArray(chars, 0, len));
                }
                return sb.toString();
            },
            ReadBlock: function (buffer, index, count) {

                var i, n = 0;
                do {
                    n = (n + ((i = this.Read$1(buffer, ((index + n) | 0), ((count - n) | 0))))) | 0;
                } while (i > 0 && n < count);
                return n;
            },
            ReadLine: function () {
                var sb = new System.Text.StringBuilder();
                while (true) {
                    var ch = this.Read();
                    if (ch === -1) {
                        break;
                    }
                    if (ch === 13 || ch === 10) {
                        if (ch === 13 && this.Peek() === 10) {
                            this.Read();
                        }
                        return sb.toString();
                    }
                    sb.append(String.fromCharCode((ch & 65535)));
                }
                if (sb.getLength() > 0) {
                    return sb.toString();
                }
                return null;
            }
        }
    });

    // @source StreamReader.js

    Bridge.define("System.IO.StreamReader", {
        inherits: [System.IO.TextReader],
        statics: {
            fields: {
                Null: null,
                DefaultFileStreamBufferSize: 0,
                MinBufferSize: 0
            },
            props: {
                DefaultBufferSize: {
                    get: function () {
                        return 1024;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.Null = new System.IO.StreamReader.NullStreamReader();
                    this.DefaultFileStreamBufferSize = 4096;
                    this.MinBufferSize = 128;
                }
            }
        },
        fields: {
            stream: null,
            encoding: null,
            byteBuffer: null,
            charBuffer: null,
            charPos: 0,
            charLen: 0,
            byteLen: 0,
            bytePos: 0,
            _maxCharsPerBuffer: 0,
            _detectEncoding: false,
            _isBlocked: false,
            _closable: false
        },
        props: {
            CurrentEncoding: {
                get: function () {
                    return this.encoding;
                }
            },
            BaseStream: {
                get: function () {
                    return this.stream;
                }
            },
            LeaveOpen: {
                get: function () {
                    return !this._closable;
                }
            },
            EndOfStream: {
                get: function () {
                    if (this.stream == null) {
                        System.IO.__Error.ReaderClosed();
                    }


                    if (this.charPos < this.charLen) {
                        return false;
                    }

                    var numRead = this.ReadBuffer();
                    return numRead === 0;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.TextReader.ctor.call(this);
            },
            $ctor1: function (stream) {
                System.IO.StreamReader.$ctor2.call(this, stream, true);
            },
            $ctor2: function (stream, detectEncodingFromByteOrderMarks) {
                System.IO.StreamReader.$ctor6.call(this, stream, System.Text.Encoding.UTF8, detectEncodingFromByteOrderMarks, System.IO.StreamReader.DefaultBufferSize, false);
            },
            $ctor3: function (stream, encoding) {
                System.IO.StreamReader.$ctor6.call(this, stream, encoding, true, System.IO.StreamReader.DefaultBufferSize, false);
            },
            $ctor4: function (stream, encoding, detectEncodingFromByteOrderMarks) {
                System.IO.StreamReader.$ctor6.call(this, stream, encoding, detectEncodingFromByteOrderMarks, System.IO.StreamReader.DefaultBufferSize, false);
            },
            $ctor5: function (stream, encoding, detectEncodingFromByteOrderMarks, bufferSize) {
                System.IO.StreamReader.$ctor6.call(this, stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, false);
            },
            $ctor6: function (stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen) {
                this.$initialize();
                System.IO.TextReader.ctor.call(this);
                if (stream == null || encoding == null) {
                    throw new System.ArgumentNullException.$ctor1((stream == null ? "stream" : "encoding"));
                }
                if (!stream.CanRead) {
                    throw new System.ArgumentException.ctor();
                }
                if (bufferSize <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("bufferSize");
                }

                this.Init$1(stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen);
            },
            $ctor7: function (path) {
                System.IO.StreamReader.$ctor8.call(this, path, true);
            },
            $ctor8: function (path, detectEncodingFromByteOrderMarks) {
                System.IO.StreamReader.$ctor11.call(this, path, System.Text.Encoding.UTF8, detectEncodingFromByteOrderMarks, System.IO.StreamReader.DefaultBufferSize);
            },
            $ctor9: function (path, encoding) {
                System.IO.StreamReader.$ctor11.call(this, path, encoding, true, System.IO.StreamReader.DefaultBufferSize);
            },
            $ctor10: function (path, encoding, detectEncodingFromByteOrderMarks) {
                System.IO.StreamReader.$ctor11.call(this, path, encoding, detectEncodingFromByteOrderMarks, System.IO.StreamReader.DefaultBufferSize);
            },
            $ctor11: function (path, encoding, detectEncodingFromByteOrderMarks, bufferSize) {
                System.IO.StreamReader.$ctor12.call(this, path, encoding, detectEncodingFromByteOrderMarks, bufferSize, true);
            },
            $ctor12: function (path, encoding, detectEncodingFromByteOrderMarks, bufferSize, checkHost) {
                this.$initialize();
                System.IO.TextReader.ctor.call(this);
                if (path == null || encoding == null) {
                    throw new System.ArgumentNullException.$ctor1((path == null ? "path" : "encoding"));
                }
                if (path.length === 0) {
                    throw new System.ArgumentException.ctor();
                }
                if (bufferSize <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("bufferSize");
                }

                var stream = new System.IO.FileStream.$ctor1(path, 3);
                this.Init$1(stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, false);
            }
        },
        methods: {
            Init$1: function (stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen) {
                this.stream = stream;
                this.encoding = encoding;
                if (bufferSize < System.IO.StreamReader.MinBufferSize) {
                    bufferSize = System.IO.StreamReader.MinBufferSize;
                }
                this.byteBuffer = System.Array.init(bufferSize, 0, System.Byte);
                this._maxCharsPerBuffer = encoding.GetMaxCharCount(bufferSize);
                this.charBuffer = System.Array.init(this._maxCharsPerBuffer, 0, System.Char);
                this.byteLen = 0;
                this.bytePos = 0;
                this._detectEncoding = detectEncodingFromByteOrderMarks;
                this._isBlocked = false;
                this._closable = !leaveOpen;
            },
            Init: function (stream) {
                this.stream = stream;
                this._closable = true;
            },
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                try {
                    if (!this.LeaveOpen && disposing && (this.stream != null)) {
                        this.stream.Close();
                    }
                }
                finally {
                    if (!this.LeaveOpen && (this.stream != null)) {
                        this.stream = null;
                        this.encoding = null;
                        this.byteBuffer = null;
                        this.charBuffer = null;
                        this.charPos = 0;
                        this.charLen = 0;
                        System.IO.TextReader.prototype.Dispose$1.call(this, disposing);
                    }
                }
            },
            DiscardBufferedData: function () {

                this.byteLen = 0;
                this.charLen = 0;
                this.charPos = 0;
                this._isBlocked = false;
            },
            Peek: function () {
                if (this.stream == null) {
                    System.IO.__Error.ReaderClosed();
                }

                if (this.charPos === this.charLen) {
                    if (this._isBlocked || this.ReadBuffer() === 0) {
                        return -1;
                    }
                }
                return this.charBuffer[System.Array.index(this.charPos, this.charBuffer)];
            },
            Read: function () {
                if (this.stream == null) {
                    System.IO.__Error.ReaderClosed();
                }


                if (this.charPos === this.charLen) {
                    if (this.ReadBuffer() === 0) {
                        return -1;
                    }
                }
                var result = this.charBuffer[System.Array.index(this.charPos, this.charBuffer)];
                this.charPos = (this.charPos + 1) | 0;
                return result;
            },
            Read$1: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                if (index < 0 || count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1((index < 0 ? "index" : "count"));
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                if (this.stream == null) {
                    System.IO.__Error.ReaderClosed();
                }


                var charsRead = 0;
                var readToUserBuffer = { v : false };
                while (count > 0) {
                    var n = (this.charLen - this.charPos) | 0;
                    if (n === 0) {
                        n = this.ReadBuffer$1(buffer, ((index + charsRead) | 0), count, readToUserBuffer);
                    }
                    if (n === 0) {
                        break;
                    }
                    if (n > count) {
                        n = count;
                    }
                    if (!readToUserBuffer.v) {
                        System.Array.copy(this.charBuffer, this.charPos, buffer, (((index + charsRead) | 0)), n);
                        this.charPos = (this.charPos + n) | 0;
                    }
                    charsRead = (charsRead + n) | 0;
                    count = (count - n) | 0;
                    if (this._isBlocked) {
                        break;
                    }
                }

                return charsRead;
            },
            ReadToEndAsync: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (Bridge.is(this.stream, System.IO.FileStream)) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.stream.EnsureBufferAsync();
                                        $step = 2;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = System.IO.TextReader.prototype.ReadToEndAsync.call(this);
                                        $step = 4;
                                        $task2.continueWith($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $tcs.setResult($taskResult2);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReadToEnd: function () {
                if (this.stream == null) {
                    System.IO.__Error.ReaderClosed();
                }

                var sb = new System.Text.StringBuilder("", ((this.charLen - this.charPos) | 0));
                do {
                    sb.append(System.String.fromCharArray(this.charBuffer, this.charPos, ((this.charLen - this.charPos) | 0)));
                    this.charPos = this.charLen;
                    this.ReadBuffer();
                } while (this.charLen > 0);
                return sb.toString();
            },
            ReadBlock: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                if (index < 0 || count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1((index < 0 ? "index" : "count"));
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                if (this.stream == null) {
                    System.IO.__Error.ReaderClosed();
                }

                return System.IO.TextReader.prototype.ReadBlock.call(this, buffer, index, count);
            },
            CompressBuffer: function (n) {
                System.Array.copy(this.byteBuffer, n, this.byteBuffer, 0, ((this.byteLen - n) | 0));
                this.byteLen = (this.byteLen - n) | 0;
            },
            DetectEncoding: function () {
                if (this.byteLen < 2) {
                    return;
                }
                this._detectEncoding = false;
                var changedEncoding = false;
                if (this.byteBuffer[System.Array.index(0, this.byteBuffer)] === 254 && this.byteBuffer[System.Array.index(1, this.byteBuffer)] === 255) {

                    this.encoding = new System.Text.UnicodeEncoding.$ctor1(true, true);
                    this.CompressBuffer(2);
                    changedEncoding = true;
                } else if (this.byteBuffer[System.Array.index(0, this.byteBuffer)] === 255 && this.byteBuffer[System.Array.index(1, this.byteBuffer)] === 254) {
                    if (this.byteLen < 4 || this.byteBuffer[System.Array.index(2, this.byteBuffer)] !== 0 || this.byteBuffer[System.Array.index(3, this.byteBuffer)] !== 0) {
                        this.encoding = new System.Text.UnicodeEncoding.$ctor1(false, true);
                        this.CompressBuffer(2);
                        changedEncoding = true;
                    } else {
                        this.encoding = new System.Text.UTF32Encoding.$ctor1(false, true);
                        this.CompressBuffer(4);
                        changedEncoding = true;
                    }
                } else if (this.byteLen >= 3 && this.byteBuffer[System.Array.index(0, this.byteBuffer)] === 239 && this.byteBuffer[System.Array.index(1, this.byteBuffer)] === 187 && this.byteBuffer[System.Array.index(2, this.byteBuffer)] === 191) {
                    this.encoding = System.Text.Encoding.UTF8;
                    this.CompressBuffer(3);
                    changedEncoding = true;
                } else if (this.byteLen >= 4 && this.byteBuffer[System.Array.index(0, this.byteBuffer)] === 0 && this.byteBuffer[System.Array.index(1, this.byteBuffer)] === 0 && this.byteBuffer[System.Array.index(2, this.byteBuffer)] === 254 && this.byteBuffer[System.Array.index(3, this.byteBuffer)] === 255) {
                    this.encoding = new System.Text.UTF32Encoding.$ctor1(true, true);
                    this.CompressBuffer(4);
                    changedEncoding = true;
                } else if (this.byteLen === 2) {
                    this._detectEncoding = true;
                }

                if (changedEncoding) {
                    this._maxCharsPerBuffer = this.encoding.GetMaxCharCount(this.byteBuffer.length);
                    this.charBuffer = System.Array.init(this._maxCharsPerBuffer, 0, System.Char);
                }
            },
            IsPreamble: function () {
                return false;
            },
            ReadBuffer: function () {
                this.charLen = 0;
                this.charPos = 0;

                this.byteLen = 0;
                do {
                    this.byteLen = this.stream.Read(this.byteBuffer, 0, this.byteBuffer.length);

                    if (this.byteLen === 0) {
                        return this.charLen;
                    }

                    this._isBlocked = (this.byteLen < this.byteBuffer.length);

                    if (this.IsPreamble()) {
                        continue;
                    }

                    if (this._detectEncoding && this.byteLen >= 2) {
                        this.DetectEncoding();
                    }

                    this.charLen = (this.charLen + (this.encoding.GetChars$2(this.byteBuffer, 0, this.byteLen, this.charBuffer, this.charLen))) | 0;
                } while (this.charLen === 0);
                return this.charLen;
            },
            ReadBuffer$1: function (userBuffer, userOffset, desiredChars, readToUserBuffer) {
                this.charLen = 0;
                this.charPos = 0;

                this.byteLen = 0;

                var charsRead = 0;

                readToUserBuffer.v = desiredChars >= this._maxCharsPerBuffer;

                do {


                    this.byteLen = this.stream.Read(this.byteBuffer, 0, this.byteBuffer.length);


                    if (this.byteLen === 0) {
                        break;
                    }

                    this._isBlocked = (this.byteLen < this.byteBuffer.length);

                    if (this.IsPreamble()) {
                        continue;
                    }

                    if (this._detectEncoding && this.byteLen >= 2) {
                        this.DetectEncoding();
                        readToUserBuffer.v = desiredChars >= this._maxCharsPerBuffer;
                    }

                    this.charPos = 0;
                    if (readToUserBuffer.v) {
                        charsRead = (charsRead + (this.encoding.GetChars$2(this.byteBuffer, 0, this.byteLen, userBuffer, ((userOffset + charsRead) | 0)))) | 0;
                        this.charLen = 0;
                    } else {
                        charsRead = this.encoding.GetChars$2(this.byteBuffer, 0, this.byteLen, this.charBuffer, charsRead);
                        this.charLen = (this.charLen + charsRead) | 0;
                    }
                } while (charsRead === 0);

                this._isBlocked = !!(this._isBlocked & charsRead < desiredChars);

                return charsRead;
            },
            ReadLine: function () {
                if (this.stream == null) {
                    System.IO.__Error.ReaderClosed();
                }

                if (this.charPos === this.charLen) {
                    if (this.ReadBuffer() === 0) {
                        return null;
                    }
                }

                var sb = null;
                do {
                    var i = this.charPos;
                    do {
                        var ch = this.charBuffer[System.Array.index(i, this.charBuffer)];
                        if (ch === 13 || ch === 10) {
                            var s;
                            if (sb != null) {
                                sb.append(System.String.fromCharArray(this.charBuffer, this.charPos, ((i - this.charPos) | 0)));
                                s = sb.toString();
                            } else {
                                s = System.String.fromCharArray(this.charBuffer, this.charPos, ((i - this.charPos) | 0));
                            }
                            this.charPos = (i + 1) | 0;
                            if (ch === 13 && (this.charPos < this.charLen || this.ReadBuffer() > 0)) {
                                if (this.charBuffer[System.Array.index(this.charPos, this.charBuffer)] === 10) {
                                    this.charPos = (this.charPos + 1) | 0;
                                }
                            }
                            return s;
                        }
                        i = (i + 1) | 0;
                    } while (i < this.charLen);
                    i = (this.charLen - this.charPos) | 0;
                    if (sb == null) {
                        sb = new System.Text.StringBuilder("", ((i + 80) | 0));
                    }
                    sb.append(System.String.fromCharArray(this.charBuffer, this.charPos, i));
                } while (this.ReadBuffer() > 0);
                return sb.toString();
            }
        }
    });

    // @source NullStreamReader.js

    Bridge.define("System.IO.StreamReader.NullStreamReader", {
        inherits: [System.IO.StreamReader],
        $kind: "nested class",
        props: {
            BaseStream: {
                get: function () {
                    return System.IO.Stream.Null;
                }
            },
            CurrentEncoding: {
                get: function () {
                    return System.Text.Encoding.Unicode;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.StreamReader.ctor.call(this);
                this.Init(System.IO.Stream.Null);
            }
        },
        methods: {
            Dispose$1: function (disposing) { },
            Peek: function () {
                return -1;
            },
            Read: function () {
                return -1;
            },
            Read$1: function (buffer, index, count) {
                return 0;
            },
            ReadLine: function () {
                return null;
            },
            ReadToEnd: function () {
                return "";
            },
            ReadBuffer: function () {
                return 0;
            }
        }
    });

    // @source TextWriter.js

    Bridge.define("System.IO.TextWriter", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                Null: null,
                InitialNewLine: null
            },
            ctors: {
                init: function () {
                    this.Null = new System.IO.TextWriter.NullTextWriter();
                    this.InitialNewLine = "\r\n";
                }
            },
            methods: {
                Synchronized: function (writer) {
                    if (writer == null) {
                        throw new System.ArgumentNullException.$ctor1("writer");
                    }

                    return writer;
                }
            }
        },
        fields: {
            CoreNewLine: null,
            InternalFormatProvider: null
        },
        props: {
            FormatProvider: {
                get: function () {
                    if (this.InternalFormatProvider == null) {
                        return System.Globalization.CultureInfo.getCurrentCulture();
                    } else {
                        return this.InternalFormatProvider;
                    }
                }
            },
            NewLine: {
                get: function () {
                    return System.String.fromCharArray(this.CoreNewLine);
                },
                set: function (value) {
                    if (value == null) {
                        value = System.IO.TextWriter.InitialNewLine;
                    }
                    this.CoreNewLine = System.String.toCharArray(value, 0, value.length);
                }
            }
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            init: function () {
                this.CoreNewLine = System.Array.init([13, 10], System.Char);
            },
            ctor: function () {
                this.$initialize();
                this.InternalFormatProvider = null;
            },
            $ctor1: function (formatProvider) {
                this.$initialize();
                this.InternalFormatProvider = formatProvider;
            }
        },
        methods: {
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) { },
            Dispose: function () {
                this.Dispose$1(true);
            },
            Flush: function () { },
            Write$1: function (value) { },
            Write$2: function (buffer) {
                if (buffer != null) {
                    this.Write$3(buffer, 0, buffer.length);
                }
            },
            Write$3: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                for (var i = 0; i < count; i = (i + 1) | 0) {
                    this.Write$1(buffer[System.Array.index(((index + i) | 0), buffer)]);
                }
            },
            Write: function (value) {
                this.Write$10(value ? System.Boolean.trueString : System.Boolean.falseString);
            },
            Write$6: function (value) {
                this.Write$10(System.Int32.format(value, "G", this.FormatProvider));
            },
            Write$15: function (value) {
                this.Write$10(System.UInt32.format(value, "G", this.FormatProvider));
            },
            Write$7: function (value) {
                this.Write$10(value.format("G", this.FormatProvider));
            },
            Write$16: function (value) {
                this.Write$10(value.format("G", this.FormatProvider));
            },
            Write$9: function (value) {
                this.Write$10(System.Single.format(value, "G", this.FormatProvider));
            },
            Write$5: function (value) {
                this.Write$10(System.Double.format(value, "G", this.FormatProvider));
            },
            Write$4: function (value) {
                this.Write$10(Bridge.Int.format(value, "G", this.FormatProvider));
            },
            Write$10: function (value) {
                if (value != null) {
                    this.Write$2(System.String.toCharArray(value, 0, value.length));
                }
            },
            Write$8: function (value) {
                if (value != null) {
                    var f = Bridge.as(value, System.IFormattable);
                    if (f != null) {
                        this.Write$10(Bridge.format(f, null, this.FormatProvider));
                    } else {
                        this.Write$10(Bridge.toString(value));
                    }
                }
            },
            Write$11: function (format, arg0) {
                this.Write$10(System.String.formatProvider(this.FormatProvider, format, [arg0]));
            },
            Write$12: function (format, arg0, arg1) {
                this.Write$10(System.String.formatProvider(this.FormatProvider, format, arg0, arg1));
            },
            Write$13: function (format, arg0, arg1, arg2) {
                this.Write$10(System.String.formatProvider(this.FormatProvider, format, arg0, arg1, arg2));
            },
            Write$14: function (format, arg) {
                if (arg === void 0) { arg = []; }
                this.Write$10(System.String.formatProvider.apply(System.String, [this.FormatProvider, format].concat(arg)));
            },
            WriteLine: function () {
                this.Write$2(this.CoreNewLine);
            },
            WriteLine$2: function (value) {
                this.Write$1(value);
                this.WriteLine();
            },
            WriteLine$3: function (buffer) {
                this.Write$2(buffer);
                this.WriteLine();
            },
            WriteLine$4: function (buffer, index, count) {
                this.Write$3(buffer, index, count);
                this.WriteLine();
            },
            WriteLine$1: function (value) {
                this.Write(value);
                this.WriteLine();
            },
            WriteLine$7: function (value) {
                this.Write$6(value);
                this.WriteLine();
            },
            WriteLine$16: function (value) {
                this.Write$15(value);
                this.WriteLine();
            },
            WriteLine$8: function (value) {
                this.Write$7(value);
                this.WriteLine();
            },
            WriteLine$17: function (value) {
                this.Write$16(value);
                this.WriteLine();
            },
            WriteLine$10: function (value) {
                this.Write$9(value);
                this.WriteLine();
            },
            WriteLine$6: function (value) {
                this.Write$5(value);
                this.WriteLine();
            },
            WriteLine$5: function (value) {
                this.Write$4(value);
                this.WriteLine();
            },
            WriteLine$11: function (value) {

                if (value == null) {
                    this.WriteLine();
                } else {
                    var vLen = value.length;
                    var nlLen = this.CoreNewLine.length;
                    var chars = System.Array.init(((vLen + nlLen) | 0), 0, System.Char);
                    System.String.copyTo(value, 0, chars, 0, vLen);
                    if (nlLen === 2) {
                        chars[System.Array.index(vLen, chars)] = this.CoreNewLine[System.Array.index(0, this.CoreNewLine)];
                        chars[System.Array.index(((vLen + 1) | 0), chars)] = this.CoreNewLine[System.Array.index(1, this.CoreNewLine)];
                    } else if (nlLen === 1) {
                        chars[System.Array.index(vLen, chars)] = this.CoreNewLine[System.Array.index(0, this.CoreNewLine)];
                    } else {
                        System.Array.copy(this.CoreNewLine, 0, chars, Bridge.Int.mul(vLen, 2), Bridge.Int.mul(nlLen, 2));
                    }
                    this.Write$3(chars, 0, ((vLen + nlLen) | 0));
                }
                /* 
                Write(value);  // We could call Write(String) on StreamWriter...
                WriteLine();
                */
            },
            WriteLine$9: function (value) {
                if (value == null) {
                    this.WriteLine();
                } else {
                    var f = Bridge.as(value, System.IFormattable);
                    if (f != null) {
                        this.WriteLine$11(Bridge.format(f, null, this.FormatProvider));
                    } else {
                        this.WriteLine$11(Bridge.toString(value));
                    }
                }
            },
            WriteLine$12: function (format, arg0) {
                this.WriteLine$11(System.String.formatProvider(this.FormatProvider, format, [arg0]));
            },
            WriteLine$13: function (format, arg0, arg1) {
                this.WriteLine$11(System.String.formatProvider(this.FormatProvider, format, arg0, arg1));
            },
            WriteLine$14: function (format, arg0, arg1, arg2) {
                this.WriteLine$11(System.String.formatProvider(this.FormatProvider, format, arg0, arg1, arg2));
            },
            WriteLine$15: function (format, arg) {
                if (arg === void 0) { arg = []; }
                this.WriteLine$11(System.String.formatProvider.apply(System.String, [this.FormatProvider, format].concat(arg)));
            }
        }
    });

    // @source StreamWriter.js

    Bridge.define("System.IO.StreamWriter", {
        inherits: [System.IO.TextWriter],
        statics: {
            fields: {
                DefaultBufferSize: 0,
                DefaultFileStreamBufferSize: 0,
                MinBufferSize: 0,
                Null: null,
                _UTF8NoBOM: null
            },
            props: {
                UTF8NoBOM: {
                    get: function () {
                        if (System.IO.StreamWriter._UTF8NoBOM == null) {
                            var noBOM = new System.Text.UTF8Encoding.$ctor2(false, true);
                            System.IO.StreamWriter._UTF8NoBOM = noBOM;
                        }
                        return System.IO.StreamWriter._UTF8NoBOM;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.DefaultBufferSize = 1024;
                    this.DefaultFileStreamBufferSize = 4096;
                    this.MinBufferSize = 128;
                    this.Null = new System.IO.StreamWriter.$ctor4(System.IO.Stream.Null, new System.Text.UTF8Encoding.$ctor2(false, true), System.IO.StreamWriter.MinBufferSize, true);
                }
            }
        },
        fields: {
            stream: null,
            encoding: null,
            byteBuffer: null,
            charBuffer: null,
            charPos: 0,
            charLen: 0,
            autoFlush: false,
            haveWrittenPreamble: false,
            closable: false
        },
        props: {
            AutoFlush: {
                get: function () {
                    return this.autoFlush;
                },
                set: function (value) {
                    this.autoFlush = value;
                    if (value) {
                        this.Flush$1(true, false);
                    }
                }
            },
            BaseStream: {
                get: function () {
                    return this.stream;
                }
            },
            LeaveOpen: {
                get: function () {
                    return !this.closable;
                }
            },
            HaveWrittenPreamble: {
                set: function (value) {
                    this.haveWrittenPreamble = value;
                }
            },
            Encoding: {
                get: function () {
                    return this.encoding;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.TextWriter.$ctor1.call(this, null);
            },
            $ctor1: function (stream) {
                System.IO.StreamWriter.$ctor4.call(this, stream, System.IO.StreamWriter.UTF8NoBOM, System.IO.StreamWriter.DefaultBufferSize, false);
            },
            $ctor2: function (stream, encoding) {
                System.IO.StreamWriter.$ctor4.call(this, stream, encoding, System.IO.StreamWriter.DefaultBufferSize, false);
            },
            $ctor3: function (stream, encoding, bufferSize) {
                System.IO.StreamWriter.$ctor4.call(this, stream, encoding, bufferSize, false);
            },
            $ctor4: function (stream, encoding, bufferSize, leaveOpen) {
                this.$initialize();
                System.IO.TextWriter.$ctor1.call(this, null);
                if (stream == null || encoding == null) {
                    throw new System.ArgumentNullException.$ctor1((stream == null ? "stream" : "encoding"));
                }
                if (!stream.CanWrite) {
                    throw new System.ArgumentException.$ctor1("Argument_StreamNotWritable");
                }
                if (bufferSize <= 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("bufferSize", "ArgumentOutOfRange_NeedPosNum");
                }

                this.Init(stream, encoding, bufferSize, leaveOpen);
            },
            $ctor5: function (path) {
                System.IO.StreamWriter.$ctor8.call(this, path, false, System.IO.StreamWriter.UTF8NoBOM, System.IO.StreamWriter.DefaultBufferSize);
            },
            $ctor6: function (path, append) {
                System.IO.StreamWriter.$ctor8.call(this, path, append, System.IO.StreamWriter.UTF8NoBOM, System.IO.StreamWriter.DefaultBufferSize);
            },
            $ctor7: function (path, append, encoding) {
                System.IO.StreamWriter.$ctor8.call(this, path, append, encoding, System.IO.StreamWriter.DefaultBufferSize);
            },
            $ctor8: function (path, append, encoding, bufferSize) {
                System.IO.StreamWriter.$ctor9.call(this, path, append, encoding, bufferSize, true);
            },
            $ctor9: function (path, append, encoding, bufferSize, checkHost) {
                this.$initialize();
                System.IO.TextWriter.$ctor1.call(this, null);
                throw new System.NotSupportedException.ctor();
            }
        },
        methods: {
            Init: function (streamArg, encodingArg, bufferSize, shouldLeaveOpen) {
                this.stream = streamArg;
                this.encoding = encodingArg;
                if (bufferSize < System.IO.StreamWriter.MinBufferSize) {
                    bufferSize = System.IO.StreamWriter.MinBufferSize;
                }
                this.charBuffer = System.Array.init(bufferSize, 0, System.Char);
                this.byteBuffer = System.Array.init(this.encoding.GetMaxByteCount(bufferSize), 0, System.Byte);
                this.charLen = bufferSize;
                if (this.stream.CanSeek && this.stream.Position.gt(System.Int64(0))) {
                    this.haveWrittenPreamble = true;
                }
                this.closable = !shouldLeaveOpen;
            },
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                try {
                    if (this.stream != null) {
                        if (disposing) {
                            this.Flush$1(true, true);
                        }
                    }
                }
                finally {
                    if (!this.LeaveOpen && this.stream != null) {
                        try {
                            if (disposing) {
                                this.stream.Close();
                            }
                        }
                        finally {
                            this.stream = null;
                            this.byteBuffer = null;
                            this.charBuffer = null;
                            this.encoding = null;
                            this.charLen = 0;
                            System.IO.TextWriter.prototype.Dispose$1.call(this, disposing);
                        }
                    }
                }
            },
            Flush: function () {
                this.Flush$1(true, true);
            },
            Flush$1: function (flushStream, flushEncoder) {
                if (this.stream == null) {
                    System.IO.__Error.WriterClosed();
                }

                if (this.charPos === 0 && (!flushStream && !flushEncoder)) {
                    return;
                }

                /* if (!haveWrittenPreamble) {
                   haveWrittenPreamble = true;
                   byte[] preamble = encoding.GetPreamble();
                   if (preamble.Length > 0)
                       stream.Write(preamble, 0, preamble.Length);
                }*/

                var count = this.encoding.GetBytes$3(this.charBuffer, 0, this.charPos, this.byteBuffer, 0);
                this.charPos = 0;
                if (count > 0) {
                    this.stream.Write(this.byteBuffer, 0, count);
                }
                if (flushStream) {
                    this.stream.Flush();
                }
            },
            Write$1: function (value) {
                if (this.charPos === this.charLen) {
                    this.Flush$1(false, false);
                }
                this.charBuffer[System.Array.index(this.charPos, this.charBuffer)] = value;
                this.charPos = (this.charPos + 1) | 0;
                if (this.autoFlush) {
                    this.Flush$1(true, false);
                }
            },
            Write$2: function (buffer) {
                if (buffer == null) {
                    return;
                }

                var index = 0;
                var count = buffer.length;
                while (count > 0) {
                    if (this.charPos === this.charLen) {
                        this.Flush$1(false, false);
                    }
                    var n = (this.charLen - this.charPos) | 0;
                    if (n > count) {
                        n = count;
                    }
                    System.Array.copy(buffer, index, this.charBuffer, this.charPos, n);
                    this.charPos = (this.charPos + n) | 0;
                    index = (index + n) | 0;
                    count = (count - n) | 0;
                }
                if (this.autoFlush) {
                    this.Flush$1(true, false);
                }
            },
            Write$3: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor3("buffer", "ArgumentNull_Buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("index", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("count", "ArgumentOutOfRange_NeedNonNegNum");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Argument_InvalidOffLen");
                }

                while (count > 0) {
                    if (this.charPos === this.charLen) {
                        this.Flush$1(false, false);
                    }
                    var n = (this.charLen - this.charPos) | 0;
                    if (n > count) {
                        n = count;
                    }
                    System.Array.copy(buffer, index, this.charBuffer, this.charPos, n);
                    this.charPos = (this.charPos + n) | 0;
                    index = (index + n) | 0;
                    count = (count - n) | 0;
                }
                if (this.autoFlush) {
                    this.Flush$1(true, false);
                }
            },
            Write$10: function (value) {
                if (value != null) {
                    var count = value.length;
                    var index = 0;
                    while (count > 0) {
                        if (this.charPos === this.charLen) {
                            this.Flush$1(false, false);
                        }
                        var n = (this.charLen - this.charPos) | 0;
                        if (n > count) {
                            n = count;
                        }
                        System.String.copyTo(value, index, this.charBuffer, this.charPos, n);
                        this.charPos = (this.charPos + n) | 0;
                        index = (index + n) | 0;
                        count = (count - n) | 0;
                    }
                    if (this.autoFlush) {
                        this.Flush$1(true, false);
                    }
                }
            }
        }
    });

    // @source StringReader.js

    Bridge.define("System.IO.StringReader", {
        inherits: [System.IO.TextReader],
        fields: {
            _s: null,
            _pos: 0,
            _length: 0
        },
        ctors: {
            ctor: function (s) {
                this.$initialize();
                System.IO.TextReader.ctor.call(this);
                if (s == null) {
                    throw new System.ArgumentNullException.$ctor1("s");
                }
                this._s = s;
                this._length = s == null ? 0 : s.length;
            }
        },
        methods: {
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                this._s = null;
                this._pos = 0;
                this._length = 0;
                System.IO.TextReader.prototype.Dispose$1.call(this, disposing);
            },
            Peek: function () {
                if (this._s == null) {
                    System.IO.__Error.ReaderClosed();
                }
                if (this._pos === this._length) {
                    return -1;
                }
                return this._s.charCodeAt(this._pos);
            },
            Read: function () {
                if (this._s == null) {
                    System.IO.__Error.ReaderClosed();
                }
                if (this._pos === this._length) {
                    return -1;
                }
                return this._s.charCodeAt(Bridge.identity(this._pos, (this._pos = (this._pos + 1) | 0)));
            },
            Read$1: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }
                if (this._s == null) {
                    System.IO.__Error.ReaderClosed();
                }

                var n = (this._length - this._pos) | 0;
                if (n > 0) {
                    if (n > count) {
                        n = count;
                    }
                    System.String.copyTo(this._s, this._pos, buffer, index, n);
                    this._pos = (this._pos + n) | 0;
                }
                return n;
            },
            ReadToEnd: function () {
                if (this._s == null) {
                    System.IO.__Error.ReaderClosed();
                }
                var s;
                if (this._pos === 0) {
                    s = this._s;
                } else {
                    s = this._s.substr(this._pos, ((this._length - this._pos) | 0));
                }
                this._pos = this._length;
                return s;
            },
            ReadLine: function () {
                if (this._s == null) {
                    System.IO.__Error.ReaderClosed();
                }
                var i = this._pos;
                while (i < this._length) {
                    var ch = this._s.charCodeAt(i);
                    if (ch === 13 || ch === 10) {
                        var result = this._s.substr(this._pos, ((i - this._pos) | 0));
                        this._pos = (i + 1) | 0;
                        if (ch === 13 && this._pos < this._length && this._s.charCodeAt(this._pos) === 10) {
                            this._pos = (this._pos + 1) | 0;
                        }
                        return result;
                    }
                    i = (i + 1) | 0;
                }
                if (i > this._pos) {
                    var result1 = this._s.substr(this._pos, ((i - this._pos) | 0));
                    this._pos = i;
                    return result1;
                }
                return null;
            }
        }
    });

    // @source StringWriter.js

    Bridge.define("System.IO.StringWriter", {
        inherits: [System.IO.TextWriter],
        statics: {
            fields: {
                m_encoding: null
            }
        },
        fields: {
            _sb: null,
            _isOpen: false
        },
        props: {
            Encoding: {
                get: function () {
                    if (System.IO.StringWriter.m_encoding == null) {
                        System.IO.StringWriter.m_encoding = new System.Text.UnicodeEncoding.$ctor1(false, false);
                    }
                    return System.IO.StringWriter.m_encoding;
                }
            }
        },
        ctors: {
            ctor: function () {
                System.IO.StringWriter.$ctor3.call(this, new System.Text.StringBuilder(), System.Globalization.CultureInfo.getCurrentCulture());
            },
            $ctor1: function (formatProvider) {
                System.IO.StringWriter.$ctor3.call(this, new System.Text.StringBuilder(), formatProvider);
            },
            $ctor2: function (sb) {
                System.IO.StringWriter.$ctor3.call(this, sb, System.Globalization.CultureInfo.getCurrentCulture());
            },
            $ctor3: function (sb, formatProvider) {
                this.$initialize();
                System.IO.TextWriter.$ctor1.call(this, formatProvider);
                if (sb == null) {
                    throw new System.ArgumentNullException.$ctor1("sb");
                }
                this._sb = sb;
                this._isOpen = true;
            }
        },
        methods: {
            Close: function () {
                this.Dispose$1(true);
            },
            Dispose$1: function (disposing) {
                this._isOpen = false;
                System.IO.TextWriter.prototype.Dispose$1.call(this, disposing);
            },
            GetStringBuilder: function () {
                return this._sb;
            },
            Write$1: function (value) {
                if (!this._isOpen) {
                    System.IO.__Error.WriterClosed();
                }
                this._sb.append(String.fromCharCode(value));
            },
            Write$3: function (buffer, index, count) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                if (index < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("index");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((buffer.length - index) | 0) < count) {
                    throw new System.ArgumentException.ctor();
                }

                if (!this._isOpen) {
                    System.IO.__Error.WriterClosed();
                }

                this._sb.append(System.String.fromCharArray(buffer, index, count));
            },
            Write$10: function (value) {
                if (!this._isOpen) {
                    System.IO.__Error.WriterClosed();
                }
                if (value != null) {
                    this._sb.append(value);
                }
            },
            toString: function () {
                return this._sb.toString();
            }
        }
    });

    // @source NullTextReader.js

    Bridge.define("System.IO.TextReader.NullTextReader", {
        inherits: [System.IO.TextReader],
        $kind: "nested class",
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.TextReader.ctor.call(this);
            }
        },
        methods: {
            Read$1: function (buffer, index, count) {
                return 0;
            },
            ReadLine: function () {
                return null;
            }
        }
    });

    // @source NullTextWriter.js

    Bridge.define("System.IO.TextWriter.NullTextWriter", {
        inherits: [System.IO.TextWriter],
        $kind: "nested class",
        props: {
            Encoding: {
                get: function () {
                    return System.Text.Encoding.Default;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.IO.TextWriter.$ctor1.call(this, System.Globalization.CultureInfo.invariantCulture);
            }
        },
        methods: {
            Write$3: function (buffer, index, count) { },
            Write$10: function (value) { },
            WriteLine: function () { },
            WriteLine$11: function (value) { },
            WriteLine$9: function (value) { }
        }
    });

    // @source __Error.js

    Bridge.define("System.IO.__Error", {
        statics: {
            methods: {
                EndOfFile: function () {
                    throw new System.IO.EndOfStreamException.$ctor1("IO.EOF_ReadBeyondEOF");
                },
                FileNotOpen: function () {
                    throw new System.Exception("ObjectDisposed_FileClosed");
                },
                StreamIsClosed: function () {
                    throw new System.Exception("ObjectDisposed_StreamClosed");
                },
                MemoryStreamNotExpandable: function () {
                    throw new System.NotSupportedException.$ctor1("NotSupported_MemStreamNotExpandable");
                },
                ReaderClosed: function () {
                    throw new System.Exception("ObjectDisposed_ReaderClosed");
                },
                ReadNotSupported: function () {
                    throw new System.NotSupportedException.$ctor1("NotSupported_UnreadableStream");
                },
                SeekNotSupported: function () {
                    throw new System.NotSupportedException.$ctor1("NotSupported_UnseekableStream");
                },
                WrongAsyncResult: function () {
                    throw new System.ArgumentException.$ctor1("Arg_WrongAsyncResult");
                },
                EndReadCalledTwice: function () {
                    throw new System.ArgumentException.$ctor1("InvalidOperation_EndReadCalledMultiple");
                },
                EndWriteCalledTwice: function () {
                    throw new System.ArgumentException.$ctor1("InvalidOperation_EndWriteCalledMultiple");
                },
                WriteNotSupported: function () {
                    throw new System.NotSupportedException.$ctor1("NotSupported_UnwritableStream");
                },
                WriterClosed: function () {
                    throw new System.Exception("ObjectDisposed_WriterClosed");
                }
            }
        }
    });

    // @source AmbiguousMatchException.js

    Bridge.define("System.Reflection.AmbiguousMatchException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Ambiguous match found.");
                this.HResult = -2147475171;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2147475171;
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, inner);
                this.HResult = -2147475171;
            }
        }
    });

    // @source Binder.js

    Bridge.define("System.Reflection.Binder", {
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        }
    });

    // @source BindingFlags.js

    Bridge.define("System.Reflection.BindingFlags", {
        $kind: "enum",
        statics: {
            fields: {
                Default: 0,
                IgnoreCase: 1,
                DeclaredOnly: 2,
                Instance: 4,
                Static: 8,
                Public: 16,
                NonPublic: 32,
                FlattenHierarchy: 64,
                InvokeMethod: 256,
                CreateInstance: 512,
                GetField: 1024,
                SetField: 2048,
                GetProperty: 4096,
                SetProperty: 8192,
                PutDispProperty: 16384,
                PutRefDispProperty: 32768,
                ExactBinding: 65536,
                SuppressChangeType: 131072,
                OptionalParamBinding: 262144,
                IgnoreReturn: 16777216,
                DoNotWrapExceptions: 33554432
            }
        },
        $flags: true
    });

    // @source CallingConventions.js

    Bridge.define("System.Reflection.CallingConventions", {
        $kind: "enum",
        statics: {
            fields: {
                Standard: 1,
                VarArgs: 2,
                Any: 3,
                HasThis: 32,
                ExplicitThis: 64
            }
        },
        $flags: true
    });

    // @source ICustomAttributeProvider.js

    Bridge.define("System.Reflection.ICustomAttributeProvider", {
        $kind: "interface"
    });

    // @source InvalidFilterCriteriaException.js

    Bridge.define("System.Reflection.InvalidFilterCriteriaException", {
        inherits: [System.ApplicationException],
        ctors: {
            ctor: function () {
                System.Reflection.InvalidFilterCriteriaException.$ctor1.call(this, "Specified filter criteria was invalid.");
            },
            $ctor1: function (message) {
                System.Reflection.InvalidFilterCriteriaException.$ctor2.call(this, message, null);
            },
            $ctor2: function (message, inner) {
                this.$initialize();
                System.ApplicationException.$ctor2.call(this, message, inner);
                this.HResult = -2146232831;
            }
        }
    });

    // @source IReflect.js

    Bridge.define("System.Reflection.IReflect", {
        $kind: "interface"
    });

    // @source MemberTypes.js

    Bridge.define("System.Reflection.MemberTypes", {
        $kind: "enum",
        statics: {
            fields: {
                Constructor: 1,
                Event: 2,
                Field: 4,
                Method: 8,
                Property: 16,
                TypeInfo: 32,
                Custom: 64,
                NestedType: 128,
                All: 191
            }
        },
        $flags: true
    });

    // @source Module.js

    Bridge.define("System.Reflection.Module", {
        inherits: [System.Reflection.ICustomAttributeProvider,System.Runtime.Serialization.ISerializable],
        statics: {
            fields: {
                FilterTypeName: null,
                FilterTypeNameIgnoreCase: null,
                DefaultLookup: 0
            },
            ctors: {
                init: function () {
                    this.FilterTypeName = System.Reflection.Module.FilterTypeNameImpl;
                    this.FilterTypeNameIgnoreCase = System.Reflection.Module.FilterTypeNameIgnoreCaseImpl;
                    this.DefaultLookup = 28;
                }
            },
            methods: {
                FilterTypeNameImpl: function (cls, filterCriteria) {
                    if (filterCriteria == null || !(Bridge.is(filterCriteria, System.String))) {
                        throw new System.Reflection.InvalidFilterCriteriaException.$ctor1("A String must be provided for the filter criteria.");
                    }

                    var str = Bridge.cast(filterCriteria, System.String);

                    if (str.length > 0 && str.charCodeAt(((str.length - 1) | 0)) === 42) {
                        str = str.substr(0, ((str.length - 1) | 0));
                        return System.String.startsWith(Bridge.Reflection.getTypeName(cls), str, 4);
                    }

                    return System.String.equals(Bridge.Reflection.getTypeName(cls), str);
                },
                FilterTypeNameIgnoreCaseImpl: function (cls, filterCriteria) {
                    var $t;
                    if (filterCriteria == null || !(Bridge.is(filterCriteria, System.String))) {
                        throw new System.Reflection.InvalidFilterCriteriaException.$ctor1("A String must be provided for the filter criteria.");
                    }

                    var str = Bridge.cast(filterCriteria, System.String);

                    if (str.length > 0 && str.charCodeAt(((str.length - 1) | 0)) === 42) {
                        str = str.substr(0, ((str.length - 1) | 0));
                        var name = Bridge.Reflection.getTypeName(cls);
                        if (name.length >= str.length) {
                            return (($t = str.length, System.String.compare(name.substr(0, $t), str.substr(0, $t), 5)) === 0);
                        } else {
                            return false;
                        }
                    }
                    return (System.String.compare(str, Bridge.Reflection.getTypeName(cls), 5) === 0);
                },
                op_Equality: function (left, right) {
                    if (Bridge.referenceEquals(left, right)) {
                        return true;
                    }

                    if (left == null || right == null) {
                        return false;
                    }

                    return left.equals(right);
                },
                op_Inequality: function (left, right) {
                    return !(System.Reflection.Module.op_Equality(left, right));
                }
            }
        },
        props: {
            Assembly: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            FullyQualifiedName: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            Name: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            MDStreamVersion: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            ModuleVersionId: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            ScopeName: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            },
            MetadataToken: {
                get: function () {
                    throw System.NotImplemented.ByDesign;
                }
            }
        },
        alias: [
            "IsDefined", "System$Reflection$ICustomAttributeProvider$IsDefined",
            "GetCustomAttributes", "System$Reflection$ICustomAttributeProvider$GetCustomAttributes",
            "GetCustomAttributes$1", "System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            IsResource: function () {
                throw System.NotImplemented.ByDesign;
            },
            IsDefined: function (attributeType, inherit) {
                throw System.NotImplemented.ByDesign;
            },
            GetCustomAttributes: function (inherit) {
                throw System.NotImplemented.ByDesign;
            },
            GetCustomAttributes$1: function (attributeType, inherit) {
                throw System.NotImplemented.ByDesign;
            },
            GetMethod: function (name) {
                if (name == null) {
                    throw new System.ArgumentNullException.$ctor1("name");
                }

                return this.GetMethodImpl(name, System.Reflection.Module.DefaultLookup, null, 3, null, null);
            },
            GetMethod$2: function (name, types) {
                return this.GetMethod$1(name, System.Reflection.Module.DefaultLookup, null, 3, types, null);
            },
            GetMethod$1: function (name, bindingAttr, binder, callConvention, types, modifiers) {
                if (name == null) {
                    throw new System.ArgumentNullException.$ctor1("name");
                }
                if (types == null) {
                    throw new System.ArgumentNullException.$ctor1("types");
                }
                for (var i = 0; i < types.length; i = (i + 1) | 0) {
                    if (types[System.Array.index(i, types)] == null) {
                        throw new System.ArgumentNullException.$ctor1("types");
                    }
                }
                return this.GetMethodImpl(name, bindingAttr, binder, callConvention, types, modifiers);
            },
            GetMethodImpl: function (name, bindingAttr, binder, callConvention, types, modifiers) {
                throw System.NotImplemented.ByDesign;
            },
            GetMethods: function () {
                return this.GetMethods$1(System.Reflection.Module.DefaultLookup);
            },
            GetMethods$1: function (bindingFlags) {
                throw System.NotImplemented.ByDesign;
            },
            GetField: function (name) {
                return this.GetField$1(name, System.Reflection.Module.DefaultLookup);
            },
            GetField$1: function (name, bindingAttr) {
                throw System.NotImplemented.ByDesign;
            },
            GetFields: function () {
                return this.GetFields$1(System.Reflection.Module.DefaultLookup);
            },
            GetFields$1: function (bindingFlags) {
                throw System.NotImplemented.ByDesign;
            },
            GetTypes: function () {
                throw System.NotImplemented.ByDesign;
            },
            GetType: function (className) {
                return this.GetType$2(className, false, false);
            },
            GetType$1: function (className, ignoreCase) {
                return this.GetType$2(className, false, ignoreCase);
            },
            GetType$2: function (className, throwOnError, ignoreCase) {
                throw System.NotImplemented.ByDesign;
            },
            FindTypes: function (filter, filterCriteria) {
                var c = this.GetTypes();
                var cnt = 0;
                for (var i = 0; i < c.length; i = (i + 1) | 0) {
                    if (!Bridge.staticEquals(filter, null) && !filter(c[System.Array.index(i, c)], filterCriteria)) {
                        c[System.Array.index(i, c)] = null;
                    } else {
                        cnt = (cnt + 1) | 0;
                    }
                }
                if (cnt === c.length) {
                    return c;
                }

                var ret = System.Array.init(cnt, null, Function);
                cnt = 0;
                for (var i1 = 0; i1 < c.length; i1 = (i1 + 1) | 0) {
                    if (c[System.Array.index(i1, c)] != null) {
                        ret[System.Array.index(Bridge.identity(cnt, (cnt = (cnt + 1) | 0)), ret)] = c[System.Array.index(i1, c)];
                    }
                }
                return ret;
            },
            ResolveField: function (metadataToken) {
                return this.ResolveField$1(metadataToken, null, null);
            },
            ResolveField$1: function (metadataToken, genericTypeArguments, genericMethodArguments) {
                throw System.NotImplemented.ByDesign;
            },
            ResolveMember: function (metadataToken) {
                return this.ResolveMember$1(metadataToken, null, null);
            },
            ResolveMember$1: function (metadataToken, genericTypeArguments, genericMethodArguments) {
                throw System.NotImplemented.ByDesign;
            },
            ResolveMethod: function (metadataToken) {
                return this.ResolveMethod$1(metadataToken, null, null);
            },
            ResolveMethod$1: function (metadataToken, genericTypeArguments, genericMethodArguments) {
                throw System.NotImplemented.ByDesign;
            },
            ResolveSignature: function (metadataToken) {
                throw System.NotImplemented.ByDesign;
            },
            ResolveString: function (metadataToken) {
                throw System.NotImplemented.ByDesign;
            },
            ResolveType: function (metadataToken) {
                return this.ResolveType$1(metadataToken, null, null);
            },
            ResolveType$1: function (metadataToken, genericTypeArguments, genericMethodArguments) {
                throw System.NotImplemented.ByDesign;
            },
            equals: function (o) {
                return Bridge.equals(this, o);
            },
            getHashCode: function () {
                return Bridge.getHashCode(this);
            },
            toString: function () {
                return this.ScopeName;
            }
        }
    });

    // @source ParameterModifier.js

    Bridge.define("System.Reflection.ParameterModifier", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.Reflection.ParameterModifier(); }
            }
        },
        fields: {
            _byRef: null
        },
        ctors: {
            $ctor1: function (parameterCount) {
                this.$initialize();
                if (parameterCount <= 0) {
                    throw new System.ArgumentException.$ctor1("Must specify one or more parameters.");
                }

                this._byRef = System.Array.init(parameterCount, false, System.Boolean);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getItem: function (index) {
                return this._byRef[System.Array.index(index, this._byRef)];
            },
            setItem: function (index, value) {
                this._byRef[System.Array.index(index, this._byRef)] = value;
            },
            getHashCode: function () {
                var h = Bridge.addHash([6723435274, this._byRef]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Reflection.ParameterModifier)) {
                    return false;
                }
                return Bridge.equals(this._byRef, o._byRef);
            },
            $clone: function (to) {
                var s = to || new System.Reflection.ParameterModifier();
                s._byRef = this._byRef;
                return s;
            }
        }
    });

    // @source TypeAttributes.js

    Bridge.define("System.Reflection.TypeAttributes", {
        $kind: "enum",
        statics: {
            fields: {
                VisibilityMask: 7,
                NotPublic: 0,
                Public: 1,
                NestedPublic: 2,
                NestedPrivate: 3,
                NestedFamily: 4,
                NestedAssembly: 5,
                NestedFamANDAssem: 6,
                NestedFamORAssem: 7,
                LayoutMask: 24,
                AutoLayout: 0,
                SequentialLayout: 8,
                ExplicitLayout: 16,
                ClassSemanticsMask: 32,
                Class: 0,
                Interface: 32,
                Abstract: 128,
                Sealed: 256,
                SpecialName: 1024,
                Import: 4096,
                Serializable: 8192,
                WindowsRuntime: 16384,
                StringFormatMask: 196608,
                AnsiClass: 0,
                UnicodeClass: 65536,
                AutoClass: 131072,
                CustomFormatClass: 196608,
                CustomFormatMask: 12582912,
                BeforeFieldInit: 1048576,
                RTSpecialName: 2048,
                HasSecurity: 262144,
                ReservedMask: 264192
            }
        },
        $flags: true
    });

    // @source Random.js

    Bridge.define("System.Random", {
        statics: {
            fields: {
                MBIG: 0,
                MSEED: 0,
                MZ: 0
            },
            ctors: {
                init: function () {
                    this.MBIG = 2147483647;
                    this.MSEED = 161803398;
                    this.MZ = 0;
                }
            }
        },
        fields: {
            inext: 0,
            inextp: 0,
            SeedArray: null
        },
        ctors: {
            init: function () {
                this.SeedArray = System.Array.init(56, 0, System.Int32);
            },
            ctor: function () {
                System.Random.$ctor1.call(this, System.Int64.clip32(System.DateTime.getTicks(System.DateTime.getNow())));
            },
            $ctor1: function (seed) {
                this.$initialize();
                var ii;
                var mj, mk;

                var subtraction = (seed === -2147483648) ? 2147483647 : Math.abs(seed);
                mj = (System.Random.MSEED - subtraction) | 0;
                this.SeedArray[System.Array.index(55, this.SeedArray)] = mj;
                mk = 1;
                for (var i = 1; i < 55; i = (i + 1) | 0) {
                    ii = (Bridge.Int.mul(21, i)) % 55;
                    this.SeedArray[System.Array.index(ii, this.SeedArray)] = mk;
                    mk = (mj - mk) | 0;
                    if (mk < 0) {
                        mk = (mk + System.Random.MBIG) | 0;
                    }
                    mj = this.SeedArray[System.Array.index(ii, this.SeedArray)];
                }
                for (var k = 1; k < 5; k = (k + 1) | 0) {
                    for (var i1 = 1; i1 < 56; i1 = (i1 + 1) | 0) {
                        this.SeedArray[System.Array.index(i1, this.SeedArray)] = (this.SeedArray[System.Array.index(i1, this.SeedArray)] - this.SeedArray[System.Array.index(((1 + (((i1 + 30) | 0)) % 55) | 0), this.SeedArray)]) | 0;
                        if (this.SeedArray[System.Array.index(i1, this.SeedArray)] < 0) {
                            this.SeedArray[System.Array.index(i1, this.SeedArray)] = (this.SeedArray[System.Array.index(i1, this.SeedArray)] + System.Random.MBIG) | 0;
                        }
                    }
                }
                this.inext = 0;
                this.inextp = 21;
                seed = 1;
            }
        },
        methods: {
            Sample: function () {
                return (this.InternalSample() * (4.6566128752457969E-10));
            },
            InternalSample: function () {
                var retVal;
                var locINext = this.inext;
                var locINextp = this.inextp;

                if (((locINext = (locINext + 1) | 0)) >= 56) {
                    locINext = 1;
                }

                if (((locINextp = (locINextp + 1) | 0)) >= 56) {
                    locINextp = 1;
                }

                retVal = (this.SeedArray[System.Array.index(locINext, this.SeedArray)] - this.SeedArray[System.Array.index(locINextp, this.SeedArray)]) | 0;

                if (retVal === System.Random.MBIG) {
                    retVal = (retVal - 1) | 0;
                }

                if (retVal < 0) {
                    retVal = (retVal + System.Random.MBIG) | 0;
                }

                this.SeedArray[System.Array.index(locINext, this.SeedArray)] = retVal;

                this.inext = locINext;
                this.inextp = locINextp;

                return retVal;
            },
            Next: function () {
                return this.InternalSample();
            },
            Next$2: function (minValue, maxValue) {
                if (minValue > maxValue) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("minValue", "'minValue' cannot be greater than maxValue.");
                }

                var range = System.Int64(maxValue).sub(System.Int64(minValue));
                if (range.lte(System.Int64(2147483647))) {
                    return (((Bridge.Int.clip32((this.Sample() * System.Int64.toNumber(range))) + minValue) | 0));
                } else {
                    return System.Int64.clip32(Bridge.Int.clip64((this.GetSampleForLargeRange() * System.Int64.toNumber(range))).add(System.Int64(minValue)));
                }
            },
            Next$1: function (maxValue) {
                if (maxValue < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("maxValue", "'maxValue' must be greater than zero.");
                }
                return Bridge.Int.clip32(this.Sample() * maxValue);
            },
            GetSampleForLargeRange: function () {

                var result = this.InternalSample();
                var negative = (this.InternalSample() % 2 === 0) ? true : false;
                if (negative) {
                    result = (-result) | 0;
                }
                var d = result;
                d += (2147483646);
                d /= 4294967293;
                return d;
            },
            NextDouble: function () {
                return this.Sample();
            },
            NextBytes: function (buffer) {
                if (buffer == null) {
                    throw new System.ArgumentNullException.$ctor1("buffer");
                }
                for (var i = 0; i < buffer.length; i = (i + 1) | 0) {
                    buffer[System.Array.index(i, buffer)] = (this.InternalSample() % (256)) & 255;
                }
            }
        }
    });

    // @source RankException.js

    Bridge.define("System.RankException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "Attempted to operate on an array with the incorrect number of dimensions.");
                this.HResult = -2146233065;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233065;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233065;
            }
        }
    });

    // @source SR.js

    Bridge.define("System.SR", {
        statics: {
            fields: {
                ArgumentException_ValueTupleIncorrectType: null,
                ArgumentException_ValueTupleLastArgumentNotAValueTuple: null,
                _lock: null
            },
            props: {
                ResourceManager: null
            },
            ctors: {
                init: function () {
                    this.ArgumentException_ValueTupleIncorrectType = "Argument must be of type {0}.";
                    this.ArgumentException_ValueTupleLastArgumentNotAValueTuple = "The last element of an eight element ValueTuple must be a ValueTuple.";
                    this._lock = { };
                }
            },
            methods: {
                UsingResourceKeys: function () {
                    return false;
                },
                GetResourceString: function (resourceKey) {
                    return System.SR.GetResourceString$1(resourceKey, "");
                },
                GetResourceString$1: function (resourceKey, defaultString) {
                    var resourceString = null;
                    try {
                        resourceString = System.SR.InternalGetResourceString(resourceKey);
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, System.Resources.MissingManifestResourceException)) {
                        } else {
                            throw $e1;
                        }
                    }

                    if (defaultString != null && System.String.equals(resourceKey, resourceString, 4)) {
                        return defaultString;
                    }

                    return resourceString;
                },
                InternalGetResourceString: function (key) {
                    if (key == null || key.length === 0) {
                        return key;
                    }

                    return key;










                },
                Format$3: function (resourceFormat, args) {
                    if (args === void 0) { args = []; }
                    if (args != null) {
                        if (System.SR.UsingResourceKeys()) {
                            return (resourceFormat || "") + (args.join(", ") || "");
                        }

                        return System.String.format.apply(System.String, [resourceFormat].concat(args));
                    }

                    return resourceFormat;
                },
                Format: function (resourceFormat, p1) {
                    if (System.SR.UsingResourceKeys()) {
                        return [resourceFormat, p1].join(", ");
                    }

                    return System.String.format(resourceFormat, [p1]);
                },
                Format$1: function (resourceFormat, p1, p2) {
                    if (System.SR.UsingResourceKeys()) {
                        return [resourceFormat, p1, p2].join(", ");
                    }

                    return System.String.format(resourceFormat, p1, p2);
                },
                Format$2: function (resourceFormat, p1, p2, p3) {
                    if (System.SR.UsingResourceKeys()) {
                        return [resourceFormat, p1, p2, p3].join(", ");
                    }
                    return System.String.format(resourceFormat, p1, p2, p3);
                }
            }
        }
    });

    // @source StringComparison.js

    Bridge.define("System.StringComparison", {
        $kind: "enum",
        statics: {
            fields: {
                CurrentCulture: 0,
                CurrentCultureIgnoreCase: 1,
                InvariantCulture: 2,
                InvariantCultureIgnoreCase: 3,
                Ordinal: 4,
                OrdinalIgnoreCase: 5
            }
        }
    });

    // @source AggregateException.js

    Bridge.define("System.AggregateException", {
        inherits: [System.Exception],

        ctor: function (message, innerExceptions) {
            this.$initialize();
            this.innerExceptions = new(System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception))(Bridge.hasValue(innerExceptions) ? Bridge.toArray(innerExceptions) : []);
            System.Exception.ctor.call(this, message || 'One or more errors occurred.', this.innerExceptions.Count > 0 ? this.innerExceptions.getItem(0) : null);
        },

        handle: function (predicate) {
            if (!Bridge.hasValue(predicate)) {
                throw new System.ArgumentNullException.$ctor1("predicate");
            }

            var count = this.innerExceptions.Count,
                unhandledExceptions = [];

            for (var i = 0; i < count; i++) {
                if (!predicate(this.innerExceptions.get(i))) {
                    unhandledExceptions.push(this.innerExceptions.getItem(i));
                }
            }

            if (unhandledExceptions.length > 0) {
                throw new System.AggregateException(this.Message, unhandledExceptions);
            }
        },

        getBaseException: function () {
            var back = this;
            var backAsAggregate = this;

            while (backAsAggregate != null && backAsAggregate.innerExceptions.Count === 1)
            {
                back = back.InnerException;
                backAsAggregate = Bridge.as(back, System.AggregateException);
            }

            return back;
        },

        flatten: function () {
            // Initialize a collection to contain the flattened exceptions.
            var flattenedExceptions = new(System.Collections.Generic.List$1(System.Exception))();

            // Create a list to remember all aggregates to be flattened, this will be accessed like a FIFO queue
            var exceptionsToFlatten = new(System.Collections.Generic.List$1(System.AggregateException))();
            exceptionsToFlatten.add(this);
            var nDequeueIndex = 0;

            // Continue removing and recursively flattening exceptions, until there are no more.
            while (exceptionsToFlatten.Count > nDequeueIndex) {
                // dequeue one from exceptionsToFlatten
                var currentInnerExceptions = exceptionsToFlatten.getItem(nDequeueIndex++).innerExceptions,
                    count = currentInnerExceptions.Count;

                for (var i = 0; i < count; i++) {
                    var currentInnerException = currentInnerExceptions.getItem(i);

                    if (!Bridge.hasValue(currentInnerException)) {
                        continue;
                    }

                    var currentInnerAsAggregate = Bridge.as(currentInnerException, System.AggregateException);

                    // If this exception is an aggregate, keep it around for later.  Otherwise,
                    // simply add it to the list of flattened exceptions to be returned.
                    if (Bridge.hasValue(currentInnerAsAggregate)) {
                        exceptionsToFlatten.add(currentInnerAsAggregate);
                    } else {
                        flattenedExceptions.add(currentInnerException);
                    }
                }
            }

            return new System.AggregateException(this.Message, flattenedExceptions);
        }
    });


    // @source PromiseException.js

    Bridge.define("Bridge.PromiseException", {
        inherits: [System.Exception],

        ctor: function (args, message, innerException) {
            this.$initialize();
            this.arguments = System.Array.clone(args);

            if (message == null) {
                message = "Promise exception: [";
                message += this.arguments.map(function (item) { return item == null ? "null" : item.toString(); }).join(", ");
                message += "]";
            }

            System.Exception.ctor.call(this, message, innerException);
        },

        getArguments: function () {
            return this.arguments;
        }
    });

    // @source ThrowHelper.js

    Bridge.define("System.ThrowHelper", {
        statics: {
            methods: {
                ThrowArrayTypeMismatchException: function () {
                    throw new System.ArrayTypeMismatchException.ctor();
                },
                ThrowInvalidTypeWithPointersNotSupported: function (targetType) {
                    throw new System.ArgumentException.$ctor1(System.SR.Format("Cannot use type '{0}'. Only value types without pointers or references are supported.", targetType));
                },
                ThrowIndexOutOfRangeException: function () {
                    throw new System.IndexOutOfRangeException.ctor();
                },
                ThrowArgumentOutOfRangeException: function () {
                    throw new System.ArgumentOutOfRangeException.ctor();
                },
                ThrowArgumentOutOfRangeException$1: function (argument) {
                    throw new System.ArgumentOutOfRangeException.$ctor1(System.ThrowHelper.GetArgumentName(argument));
                },
                ThrowArgumentOutOfRangeException$2: function (argument, resource) {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException(argument, resource);
                },
                ThrowArgumentOutOfRangeException$3: function (argument, paramNumber, resource) {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException$1(argument, paramNumber, resource);
                },
                ThrowArgumentException_DestinationTooShort: function () {
                    throw new System.ArgumentException.$ctor1("Destination is too short.");
                },
                ThrowArgumentException_OverlapAlignmentMismatch: function () {
                    throw new System.ArgumentException.$ctor1("Overlapping spans have mismatching alignment.");
                },
                ThrowArgumentOutOfRange_IndexException: function () {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.index, System.ExceptionResource.ArgumentOutOfRange_Index);
                },
                ThrowIndexArgumentOutOfRange_NeedNonNegNumException: function () {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.index, System.ExceptionResource.ArgumentOutOfRange_NeedNonNegNum);
                },
                ThrowLengthArgumentOutOfRange_ArgumentOutOfRange_NeedNonNegNum: function () {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.$length, System.ExceptionResource.ArgumentOutOfRange_NeedNonNegNum);
                },
                ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index: function () {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.startIndex, System.ExceptionResource.ArgumentOutOfRange_Index);
                },
                ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count: function () {
                    throw System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.count, System.ExceptionResource.ArgumentOutOfRange_Count);
                },
                ThrowWrongKeyTypeArgumentException: function (T, key, targetType) {
                    throw System.ThrowHelper.GetWrongKeyTypeArgumentException(key, targetType);
                },
                ThrowWrongValueTypeArgumentException: function (T, value, targetType) {
                    throw System.ThrowHelper.GetWrongValueTypeArgumentException(value, targetType);
                },
                GetAddingDuplicateWithKeyArgumentException: function (key) {
                    return new System.ArgumentException.$ctor1(System.SR.Format("An item with the same key has already been added. Key: {0}", key));
                },
                ThrowAddingDuplicateWithKeyArgumentException: function (T, key) {
                    throw System.ThrowHelper.GetAddingDuplicateWithKeyArgumentException(key);
                },
                ThrowKeyNotFoundException: function (T, key) {
                    throw System.ThrowHelper.GetKeyNotFoundException(key);
                },
                ThrowArgumentException: function (resource) {
                    throw System.ThrowHelper.GetArgumentException(resource);
                },
                ThrowArgumentException$1: function (resource, argument) {
                    throw System.ThrowHelper.GetArgumentException$1(resource, argument);
                },
                GetArgumentNullException: function (argument) {
                    return new System.ArgumentNullException.$ctor1(System.ThrowHelper.GetArgumentName(argument));
                },
                ThrowArgumentNullException: function (argument) {
                    throw System.ThrowHelper.GetArgumentNullException(argument);
                },
                ThrowArgumentNullException$2: function (resource) {
                    throw new System.ArgumentNullException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                ThrowArgumentNullException$1: function (argument, resource) {
                    throw new System.ArgumentNullException.$ctor3(System.ThrowHelper.GetArgumentName(argument), System.ThrowHelper.GetResourceString(resource));
                },
                ThrowInvalidOperationException: function (resource) {
                    throw System.ThrowHelper.GetInvalidOperationException(resource);
                },
                ThrowInvalidOperationException$1: function (resource, e) {
                    throw new System.InvalidOperationException.$ctor2(System.ThrowHelper.GetResourceString(resource), e);
                },
                ThrowInvalidOperationException_OutstandingReferences: function () {
                    System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Memory_OutstandingReferences);
                },
                ThrowSerializationException: function (resource) {
                    throw new System.Runtime.Serialization.SerializationException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                ThrowSecurityException: function (resource) {
                    throw new System.Security.SecurityException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                ThrowRankException: function (resource) {
                    throw new System.RankException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                ThrowNotSupportedException$1: function (resource) {
                    throw new System.NotSupportedException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                ThrowNotSupportedException: function () {
                    throw new System.NotSupportedException.ctor();
                },
                ThrowUnauthorizedAccessException: function (resource) {
                    throw new System.UnauthorizedAccessException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                ThrowObjectDisposedException$1: function (objectName, resource) {
                    throw new System.ObjectDisposedException.$ctor3(objectName, System.ThrowHelper.GetResourceString(resource));
                },
                ThrowObjectDisposedException: function (resource) {
                    throw new System.ObjectDisposedException.$ctor3(null, System.ThrowHelper.GetResourceString(resource));
                },
                ThrowObjectDisposedException_MemoryDisposed: function () {
                    throw new System.ObjectDisposedException.$ctor3("OwnedMemory<T>", System.ThrowHelper.GetResourceString(System.ExceptionResource.MemoryDisposed));
                },
                ThrowAggregateException: function (exceptions) {
                    throw new System.AggregateException(null, exceptions);
                },
                ThrowOutOfMemoryException: function () {
                    throw new System.OutOfMemoryException.ctor();
                },
                ThrowArgumentException_Argument_InvalidArrayType: function () {
                    throw System.ThrowHelper.GetArgumentException(System.ExceptionResource.Argument_InvalidArrayType);
                },
                ThrowInvalidOperationException_InvalidOperation_EnumNotStarted: function () {
                    throw System.ThrowHelper.GetInvalidOperationException(System.ExceptionResource.InvalidOperation_EnumNotStarted);
                },
                ThrowInvalidOperationException_InvalidOperation_EnumEnded: function () {
                    throw System.ThrowHelper.GetInvalidOperationException(System.ExceptionResource.InvalidOperation_EnumEnded);
                },
                ThrowInvalidOperationException_EnumCurrent: function (index) {
                    throw System.ThrowHelper.GetInvalidOperationException_EnumCurrent(index);
                },
                ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion: function () {
                    throw System.ThrowHelper.GetInvalidOperationException(System.ExceptionResource.InvalidOperation_EnumFailedVersion);
                },
                ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen: function () {
                    throw System.ThrowHelper.GetInvalidOperationException(System.ExceptionResource.InvalidOperation_EnumOpCantHappen);
                },
                ThrowInvalidOperationException_InvalidOperation_NoValue: function () {
                    throw System.ThrowHelper.GetInvalidOperationException(System.ExceptionResource.InvalidOperation_NoValue);
                },
                ThrowArraySegmentCtorValidationFailedExceptions: function (array, offset, count) {
                    throw System.ThrowHelper.GetArraySegmentCtorValidationFailedException(array, offset, count);
                },
                GetArraySegmentCtorValidationFailedException: function (array, offset, count) {
                    if (array == null) {
                        return System.ThrowHelper.GetArgumentNullException(System.ExceptionArgument.array);
                    }
                    if (offset < 0) {
                        return System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.offset, System.ExceptionResource.ArgumentOutOfRange_NeedNonNegNum);
                    }
                    if (count < 0) {
                        return System.ThrowHelper.GetArgumentOutOfRangeException(System.ExceptionArgument.count, System.ExceptionResource.ArgumentOutOfRange_NeedNonNegNum);
                    }

                    return System.ThrowHelper.GetArgumentException(System.ExceptionResource.Argument_InvalidOffLen);
                },
                GetArgumentException: function (resource) {
                    return new System.ArgumentException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                GetArgumentException$1: function (resource, argument) {
                    return new System.ArgumentException.$ctor3(System.ThrowHelper.GetResourceString(resource), System.ThrowHelper.GetArgumentName(argument));
                },
                GetInvalidOperationException: function (resource) {
                    return new System.InvalidOperationException.$ctor1(System.ThrowHelper.GetResourceString(resource));
                },
                GetWrongKeyTypeArgumentException: function (key, targetType) {
                    return new System.ArgumentException.$ctor3(System.SR.Format$1("The value \"{0}\" is not of type \"{1}\" and cannot be used in this generic collection.", key, targetType), "key");
                },
                GetWrongValueTypeArgumentException: function (value, targetType) {
                    return new System.ArgumentException.$ctor3(System.SR.Format$1("The value \"{0}\" is not of type \"{1}\" and cannot be used in this generic collection.", value, targetType), "value");
                },
                GetKeyNotFoundException: function (key) {
                    return new System.Collections.Generic.KeyNotFoundException.$ctor1(System.SR.Format("The given key '{0}' was not present in the dictionary.", Bridge.toString(key)));
                },
                GetArgumentOutOfRangeException: function (argument, resource) {
                    return new System.ArgumentOutOfRangeException.$ctor4(System.ThrowHelper.GetArgumentName(argument), System.ThrowHelper.GetResourceString(resource));
                },
                GetArgumentOutOfRangeException$1: function (argument, paramNumber, resource) {
                    return new System.ArgumentOutOfRangeException.$ctor4((System.ThrowHelper.GetArgumentName(argument) || "") + "[" + (Bridge.toString(paramNumber) || "") + "]", System.ThrowHelper.GetResourceString(resource));
                },
                GetInvalidOperationException_EnumCurrent: function (index) {
                    return System.ThrowHelper.GetInvalidOperationException(index < 0 ? System.ExceptionResource.InvalidOperation_EnumNotStarted : System.ExceptionResource.InvalidOperation_EnumEnded);
                },
                IfNullAndNullsAreIllegalThenThrow: function (T, value, argName) {
                    if (!(Bridge.getDefaultValue(T) == null) && value == null) {
                        System.ThrowHelper.ThrowArgumentNullException(argName);
                    }
                },
                GetArgumentName: function (argument) {

                    return System.Enum.toString(System.ExceptionArgument, argument);
                },
                GetResourceString: function (resource) {

                    return System.SR.GetResourceString(System.Enum.toString(System.ExceptionResource, resource));
                },
                ThrowNotSupportedExceptionIfNonNumericType: function (T) {
                    if (!Bridge.referenceEquals(T, System.Byte) && !Bridge.referenceEquals(T, System.SByte) && !Bridge.referenceEquals(T, System.Int16) && !Bridge.referenceEquals(T, System.UInt16) && !Bridge.referenceEquals(T, System.Int32) && !Bridge.referenceEquals(T, System.UInt32) && !Bridge.referenceEquals(T, System.Int64) && !Bridge.referenceEquals(T, System.UInt64) && !Bridge.referenceEquals(T, System.Single) && !Bridge.referenceEquals(T, System.Double)) {
                        throw new System.NotSupportedException.$ctor1("Specified type is not supported");
                    }
                }
            }
        }
    });

    // @source TimeoutException.js

    Bridge.define("System.TimeoutException", {
        inherits: [System.SystemException],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.SystemException.$ctor1.call(this, "The operation has timed out.");
                this.HResult = -2146233083;
            },
            $ctor1: function (message) {
                this.$initialize();
                System.SystemException.$ctor1.call(this, message);
                this.HResult = -2146233083;
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.SystemException.$ctor2.call(this, message, innerException);
                this.HResult = -2146233083;
            }
        }
    });

    // @source RegexMatchTimeoutException.js

    Bridge.define("System.RegexMatchTimeoutException", {
        inherits: [System.TimeoutException],

        _regexInput: "",

        _regexPattern: "",

        _matchTimeout: null,

        config: {
            init: function () {
                this._matchTimeout = System.TimeSpan.fromTicks(-1);
            }
        },

        ctor: function (message, innerException, matchTimeout) {
            this.$initialize();

            if (arguments.length == 3) {
                this._regexInput = message;
                this._regexPattern = innerException;
                this._matchTimeout = matchTimeout;

                message = "The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.";
                innerException = null;
            }

            System.TimeoutException.ctor.call(this, message, innerException);
        },

        getPattern: function () {
            return this._regexPattern;
        },

        getInput: function () {
            return this._regexInput;
        },

        getMatchTimeout: function () {
            return this._matchTimeout;
        }
    });

    // @source Encoding.js

    Bridge.define("System.Text.Encoding", {
        statics: {
            fields: {
                _encodings: null
            },
            props: {
                Default: null,
                Unicode: null,
                ASCII: null,
                BigEndianUnicode: null,
                UTF7: null,
                UTF8: null,
                UTF32: null
            },
            ctors: {
                init: function () {
                    this.Default = new System.Text.UnicodeEncoding.$ctor1(false, true);
                    this.Unicode = new System.Text.UnicodeEncoding.$ctor1(false, true);
                    this.ASCII = new System.Text.ASCIIEncoding();
                    this.BigEndianUnicode = new System.Text.UnicodeEncoding.$ctor1(true, true);
                    this.UTF7 = new System.Text.UTF7Encoding.ctor();
                    this.UTF8 = new System.Text.UTF8Encoding.ctor();
                    this.UTF32 = new System.Text.UTF32Encoding.$ctor1(false, true);
                }
            },
            methods: {
                Convert: function (srcEncoding, dstEncoding, bytes) {
                    return System.Text.Encoding.Convert$1(srcEncoding, dstEncoding, bytes, 0, bytes.length);
                },
                Convert$1: function (srcEncoding, dstEncoding, bytes, index, count) {
                    if (srcEncoding == null || dstEncoding == null) {
                        throw new System.ArgumentNullException.$ctor1(srcEncoding == null ? "srcEncoding" : "dstEncoding");
                    }

                    if (bytes == null) {
                        throw new System.ArgumentNullException.$ctor1("bytes");
                    }

                    return dstEncoding.GetBytes(srcEncoding.GetChars$1(bytes, index, count));
                },
                GetEncoding: function (codepage) {
                    switch (codepage) {
                        case 1200: 
                            return System.Text.Encoding.Unicode;
                        case 20127: 
                            return System.Text.Encoding.ASCII;
                        case 1201: 
                            return System.Text.Encoding.BigEndianUnicode;
                        case 65000: 
                            return System.Text.Encoding.UTF7;
                        case 65001: 
                            return System.Text.Encoding.UTF8;
                        case 12000: 
                            return System.Text.Encoding.UTF32;
                    }
                    throw new System.NotSupportedException.ctor();
                },
                GetEncoding$1: function (codepage) {
                    switch (codepage) {
                        case "utf-16": 
                            return System.Text.Encoding.Unicode;
                        case "us-ascii": 
                            return System.Text.Encoding.ASCII;
                        case "utf-16BE": 
                            return System.Text.Encoding.BigEndianUnicode;
                        case "utf-7": 
                            return System.Text.Encoding.UTF7;
                        case "utf-8": 
                            return System.Text.Encoding.UTF8;
                        case "utf-32": 
                            return System.Text.Encoding.UTF32;
                    }
                    throw new System.NotSupportedException.ctor();
                },
                GetEncodings: function () {
                    if (System.Text.Encoding._encodings != null) {
                        return System.Text.Encoding._encodings;
                    }
                    System.Text.Encoding._encodings = System.Array.init(6, null, System.Text.EncodingInfo);
                    var result = System.Text.Encoding._encodings;

                    result[System.Array.index(0, result)] = new System.Text.EncodingInfo(20127, "us-ascii", "US-ASCII");
                    result[System.Array.index(1, result)] = new System.Text.EncodingInfo(1200, "utf-16", "Unicode");
                    result[System.Array.index(2, result)] = new System.Text.EncodingInfo(1201, "utf-16BE", "Unicode (Big-Endian)");
                    result[System.Array.index(3, result)] = new System.Text.EncodingInfo(65000, "utf-7", "Unicode (UTF-7)");
                    result[System.Array.index(4, result)] = new System.Text.EncodingInfo(65001, "utf-8", "Unicode (UTF-8)");
                    result[System.Array.index(5, result)] = new System.Text.EncodingInfo(1200, "utf-32", "Unicode (UTF-32)");
                    return result;
                }
            }
        },
        fields: {
            _hasError: false,
            fallbackCharacter: 0
        },
        props: {
            CodePage: {
                get: function () {
                    return 0;
                }
            },
            EncodingName: {
                get: function () {
                    return null;
                }
            }
        },
        ctors: {
            init: function () {
                this.fallbackCharacter = 63;
            }
        },
        methods: {
            Encode$1: function (chars, index, count) {
                var writtenCount = { };
                return this.Encode$3(System.String.fromCharArray(chars, index, count), null, 0, writtenCount);
            },
            Encode$5: function (s, index, count, outputBytes, outputIndex) {
                var writtenBytes = { };
                this.Encode$3(s.substr(index, count), outputBytes, outputIndex, writtenBytes);
                return writtenBytes.v;
            },
            Encode$4: function (chars, index, count, outputBytes, outputIndex) {
                var writtenBytes = { };
                this.Encode$3(System.String.fromCharArray(chars, index, count), outputBytes, outputIndex, writtenBytes);
                return writtenBytes.v;
            },
            Encode: function (chars) {
                var count = { };
                return this.Encode$3(System.String.fromCharArray(chars), null, 0, count);
            },
            Encode$2: function (str) {
                var count = { };
                return this.Encode$3(str, null, 0, count);
            },
            Decode$1: function (bytes, index, count) {
                return this.Decode$2(bytes, index, count, null, 0);
            },
            Decode: function (bytes) {
                return this.Decode$2(bytes, 0, bytes.length, null, 0);
            },
            GetByteCount: function (chars) {
                return this.GetByteCount$1(chars, 0, chars.length);
            },
            GetByteCount$2: function (s) {
                return this.Encode$2(s).length;
            },
            GetByteCount$1: function (chars, index, count) {
                return this.Encode$1(chars, index, count).length;
            },
            GetBytes: function (chars) {
                return this.GetBytes$1(chars, 0, chars.length);
            },
            GetBytes$1: function (chars, index, count) {
                return this.Encode$2(System.String.fromCharArray(chars, index, count));
            },
            GetBytes$3: function (chars, charIndex, charCount, bytes, byteIndex) {
                return this.Encode$4(chars, charIndex, charCount, bytes, byteIndex);
            },
            GetBytes$2: function (s) {
                return this.Encode$2(s);
            },
            GetBytes$4: function (s, charIndex, charCount, bytes, byteIndex) {
                return this.Encode$5(s, charIndex, charCount, bytes, byteIndex);
            },
            GetCharCount: function (bytes) {
                return this.Decode(bytes).length;
            },
            GetCharCount$1: function (bytes, index, count) {
                return this.Decode$1(bytes, index, count).length;
            },
            GetChars: function (bytes) {
                var $t;
                return ($t = this.Decode(bytes), System.String.toCharArray($t, 0, $t.length));
            },
            GetChars$1: function (bytes, index, count) {
                var $t;
                return ($t = this.Decode$1(bytes, index, count), System.String.toCharArray($t, 0, $t.length));
            },
            GetChars$2: function (bytes, byteIndex, byteCount, chars, charIndex) {
                var s = this.Decode$1(bytes, byteIndex, byteCount);
                var arr = System.String.toCharArray(s, 0, s.length);

                if (chars.length < (((arr.length + charIndex) | 0))) {
                    throw new System.ArgumentException.$ctor3(null, "chars");
                }

                for (var i = 0; i < arr.length; i = (i + 1) | 0) {
                    chars[System.Array.index(((charIndex + i) | 0), chars)] = arr[System.Array.index(i, arr)];
                }

                return arr.length;
            },
            GetString: function (bytes) {
                return this.Decode(bytes);
            },
            GetString$1: function (bytes, index, count) {
                return this.Decode$1(bytes, index, count);
            }
        }
    });

    // @source ASCIIEncoding.js

    Bridge.define("System.Text.ASCIIEncoding", {
        inherits: [System.Text.Encoding],
        props: {
            CodePage: {
                get: function () {
                    return 20127;
                }
            },
            EncodingName: {
                get: function () {
                    return "US-ASCII";
                }
            }
        },
        methods: {
            Encode$3: function (s, outputBytes, outputIndex, writtenBytes) {
                var hasBuffer = outputBytes != null;

                if (!hasBuffer) {
                    outputBytes = System.Array.init(0, 0, System.Byte);
                }

                var recorded = 0;
                for (var i = 0; i < s.length; i = (i + 1) | 0) {
                    var ch = s.charCodeAt(i);
                    var byteCode = (ch <= 127 ? ch : this.fallbackCharacter) & 255;

                    if (hasBuffer) {
                        if ((((i + outputIndex) | 0)) >= outputBytes.length) {
                            throw new System.ArgumentException.$ctor1("bytes");
                        }
                        outputBytes[System.Array.index(((i + outputIndex) | 0), outputBytes)] = byteCode;
                    } else {
                        outputBytes.push(byteCode);
                    }
                    recorded = (recorded + 1) | 0;
                }

                writtenBytes.v = recorded;

                if (hasBuffer) {
                    return null;
                }

                return outputBytes;
            },
            Decode$2: function (bytes, index, count, chars, charIndex) {
                var position = index;
                var result = "";
                var endpoint = (position + count) | 0;

                for (; position < endpoint; position = (position + 1) | 0) {
                    var byteCode = bytes[System.Array.index(position, bytes)];

                    if (byteCode > 127) {
                        result = (result || "") + String.fromCharCode(this.fallbackCharacter);
                    } else {
                        result = (result || "") + ((String.fromCharCode(byteCode)) || "");
                    }
                }

                return result;
            },
            GetMaxByteCount: function (charCount) {
                if (charCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                var byteCount = System.Int64(charCount).add(System.Int64(1));

                if (byteCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                return System.Int64.clip32(byteCount);
            },
            GetMaxCharCount: function (byteCount) {
                if (byteCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                var charCount = System.Int64(byteCount);

                if (charCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                return System.Int64.clip32(charCount);
            }
        }
    });

    // @source EncodingInfo.js

    Bridge.define("System.Text.EncodingInfo", {
        props: {
            CodePage: 0,
            Name: null,
            DisplayName: null
        },
        ctors: {
            ctor: function (codePage, name, displayName) {
                var $t;
                this.$initialize();
                this.CodePage = codePage;
                this.Name = name;
                this.DisplayName = ($t = displayName, $t != null ? $t : name);
            }
        },
        methods: {
            GetEncoding: function () {
                return System.Text.Encoding.GetEncoding(this.CodePage);
            },
            getHashCode: function () {
                return this.CodePage;
            },
            equals: function (o) {
                var that = Bridge.as(o, System.Text.EncodingInfo);
                return System.Nullable.eq(this.CodePage, (that != null ? that.CodePage : null));
            }
        }
    });

    // @source UnicodeEncoding.js

    Bridge.define("System.Text.UnicodeEncoding", {
        inherits: [System.Text.Encoding],
        fields: {
            bigEndian: false,
            byteOrderMark: false,
            throwOnInvalid: false
        },
        props: {
            CodePage: {
                get: function () {
                    return this.bigEndian ? 1201 : 1200;
                }
            },
            EncodingName: {
                get: function () {
                    return this.bigEndian ? "Unicode (Big-Endian)" : "Unicode";
                }
            }
        },
        ctors: {
            ctor: function () {
                System.Text.UnicodeEncoding.$ctor1.call(this, false, true);
            },
            $ctor1: function (bigEndian, byteOrderMark) {
                System.Text.UnicodeEncoding.$ctor2.call(this, bigEndian, byteOrderMark, false);
            },
            $ctor2: function (bigEndian, byteOrderMark, throwOnInvalidBytes) {
                this.$initialize();
                System.Text.Encoding.ctor.call(this);
                this.bigEndian = bigEndian;
                this.byteOrderMark = byteOrderMark;
                this.throwOnInvalid = throwOnInvalidBytes;
                this.fallbackCharacter = 65533;
            }
        },
        methods: {
            Encode$3: function (s, outputBytes, outputIndex, writtenBytes) {
                var hasBuffer = outputBytes != null;
                var recorded = 0;
                var surrogate_1st = 0;
                var fallbackCharacterCode = this.fallbackCharacter;

                var write = function (ch) {
                    if (hasBuffer) {
                        if (outputIndex >= outputBytes.length) {
                            throw new System.ArgumentException.$ctor1("bytes");
                        }

                        outputBytes[System.Array.index(Bridge.identity(outputIndex, (outputIndex = (outputIndex + 1) | 0)), outputBytes)] = ch;
                    } else {
                        outputBytes.push(ch);
                    }
                    recorded = (recorded + 1) | 0;
                };

                var writePair = function (a, b) {
                    write(a);
                    write(b);
                };

                var swap = $asm.$.System.Text.UnicodeEncoding.f1;

                var fallback = Bridge.fn.bind(this, function () {
                    if (this.throwOnInvalid) {
                        throw new System.Exception("Invalid character in UTF16 text");
                    }

                    writePair((fallbackCharacterCode & 255), ((fallbackCharacterCode >> 8) & 255));
                });

                if (!hasBuffer) {
                    outputBytes = System.Array.init(0, 0, System.Byte);
                }

                if (this.bigEndian) {
                    fallbackCharacterCode = swap(fallbackCharacterCode);
                }

                for (var i = 0; i < s.length; i = (i + 1) | 0) {
                    var ch = s.charCodeAt(i);

                    if (surrogate_1st !== 0) {
                        if (ch >= 56320 && ch <= 57343) {
                            if (this.bigEndian) {
                                surrogate_1st = swap(surrogate_1st);
                                ch = swap(ch);
                            }
                            writePair((surrogate_1st & 255), ((surrogate_1st >> 8) & 255));
                            writePair((ch & 255), ((ch >> 8) & 255));
                            surrogate_1st = 0;
                            continue;
                        }
                        fallback();
                        surrogate_1st = 0;
                    }

                    if (55296 <= ch && ch <= 56319) {
                        surrogate_1st = ch;
                        continue;
                    } else if (56320 <= ch && ch <= 57343) {
                        fallback();
                        surrogate_1st = 0;
                        continue;
                    }

                    if (ch < 65536) {
                        if (this.bigEndian) {
                            ch = swap(ch);
                        }
                        writePair((ch & 255), ((ch >> 8) & 255));
                    } else if (ch <= 1114111) {
                        ch = ch - 0x10000;

                        var lowBits = ((ch & 1023) | 56320) & 65535;
                        var highBits = (((ch >> 10) & 1023) | 55296) & 65535;

                        if (this.bigEndian) {
                            highBits = swap(highBits);
                            lowBits = swap(lowBits);
                        }
                        writePair((highBits & 255), ((highBits >> 8) & 255));
                        writePair((lowBits & 255), ((lowBits >> 8) & 255));
                    } else {
                        fallback();
                    }
                }

                if (surrogate_1st !== 0) {
                    fallback();
                }

                writtenBytes.v = recorded;

                if (hasBuffer) {
                    return null;
                }

                return outputBytes;
            },
            Decode$2: function (bytes, index, count, chars, charIndex) {
                var position = index;
                var result = "";
                var endpoint = (position + count) | 0;
                this._hasError = false;

                var fallback = Bridge.fn.bind(this, function () {
                    if (this.throwOnInvalid) {
                        throw new System.Exception("Invalid character in UTF16 text");
                    }

                    result = (result || "") + String.fromCharCode(this.fallbackCharacter);
                });

                var swap = $asm.$.System.Text.UnicodeEncoding.f2;

                var readPair = Bridge.fn.bind(this, function () {
                    if ((((position + 2) | 0)) > endpoint) {
                        position = (position + 2) | 0;
                        return null;
                    }

                    var a = bytes[System.Array.index(Bridge.identity(position, (position = (position + 1) | 0)), bytes)];
                    var b = bytes[System.Array.index(Bridge.identity(position, (position = (position + 1) | 0)), bytes)];

                    var point = ((a << 8) | b) & 65535;
                    if (!this.bigEndian) {
                        point = swap(point);
                    }

                    return point;
                });

                while (position < endpoint) {
                    var firstWord = readPair();

                    if (!System.Nullable.hasValue(firstWord)) {
                        fallback();
                        this._hasError = true;
                    } else if ((System.Nullable.lt(firstWord, 55296)) || (System.Nullable.gt(firstWord, 57343))) {
                        result = (result || "") + ((System.String.fromCharCode(System.Nullable.getValue(firstWord))) || "");
                    } else if ((System.Nullable.gte(firstWord, 55296)) && (System.Nullable.lte(firstWord, 56319))) {
                        var end = position >= endpoint;
                        var secondWord = readPair();
                        if (end) {
                            fallback();
                            this._hasError = true;
                        } else if (!System.Nullable.hasValue(secondWord)) {
                            fallback();
                            fallback();
                        } else if ((System.Nullable.gte(secondWord, 56320)) && (System.Nullable.lte(secondWord, 57343))) {
                            var highBits = System.Nullable.band(firstWord, 1023);
                            var lowBits = System.Nullable.band(secondWord, 1023);

                            var charCode = Bridge.Int.clip32(System.Nullable.add((System.Nullable.bor((System.Nullable.sl(highBits, 10)), lowBits)), 65536));

                            result = (result || "") + ((System.String.fromCharCode(System.Nullable.getValue(charCode))) || "");
                        } else {
                            fallback();
                            position = (position - 2) | 0;
                        }
                    } else {
                        fallback();
                    }
                }

                return result;
            },
            GetMaxByteCount: function (charCount) {
                if (charCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                var byteCount = System.Int64(charCount).add(System.Int64(1));
                byteCount = byteCount.shl(1);

                if (byteCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                return System.Int64.clip32(byteCount);
            },
            GetMaxCharCount: function (byteCount) {
                if (byteCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                var charCount = System.Int64((byteCount >> 1)).add(System.Int64((byteCount & 1))).add(System.Int64(1));

                if (charCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                return System.Int64.clip32(charCount);
            }
        }
    });

    Bridge.ns("System.Text.UnicodeEncoding", $asm.$);

    Bridge.apply($asm.$.System.Text.UnicodeEncoding, {
        f1: function (ch) {
            return ((((ch & 255) << 8) | ((ch >> 8) & 255)) & 65535);
        },
        f2: function (ch) {
            return ((((ch & 255) << 8) | (((ch >> 8)) & 255)) & 65535);
        }
    });

    // @source UTF32Encoding.js

    Bridge.define("System.Text.UTF32Encoding", {
        inherits: [System.Text.Encoding],
        fields: {
            bigEndian: false,
            byteOrderMark: false,
            throwOnInvalid: false
        },
        props: {
            CodePage: {
                get: function () {
                    return this.bigEndian ? 1201 : 1200;
                }
            },
            EncodingName: {
                get: function () {
                    return this.bigEndian ? "Unicode (UTF-32 Big-Endian)" : "Unicode (UTF-32)";
                }
            }
        },
        ctors: {
            ctor: function () {
                System.Text.UTF32Encoding.$ctor2.call(this, false, true, false);
            },
            $ctor1: function (bigEndian, byteOrderMark) {
                System.Text.UTF32Encoding.$ctor2.call(this, bigEndian, byteOrderMark, false);
            },
            $ctor2: function (bigEndian, byteOrderMark, throwOnInvalidBytes) {
                this.$initialize();
                System.Text.Encoding.ctor.call(this);
                this.bigEndian = bigEndian;
                this.byteOrderMark = byteOrderMark;
                this.throwOnInvalid = throwOnInvalidBytes;
                this.fallbackCharacter = 65533;
            }
        },
        methods: {
            ToCodePoints: function (str) {
                var surrogate_1st = 0;
                var unicode_codes = System.Array.init(0, 0, System.Char);
                var fallback = Bridge.fn.bind(this, function () {
                    if (this.throwOnInvalid) {
                        throw new System.Exception("Invalid character in UTF32 text");
                    }
                    unicode_codes.push(this.fallbackCharacter);
                });

                for (var i = 0; i < str.length; i = (i + 1) | 0) {
                    var utf16_code = str.charCodeAt(i);

                    if (surrogate_1st !== 0) {
                        if (utf16_code >= 56320 && utf16_code <= 57343) {
                            var surrogate_2nd = utf16_code;
                            var unicode_code = (((Bridge.Int.mul((((surrogate_1st - 55296) | 0)), (1024)) + (65536)) | 0) + (((surrogate_2nd - 56320) | 0))) | 0;
                            unicode_codes.push(unicode_code);
                        } else {
                            fallback();
                            i = (i - 1) | 0;
                        }
                        surrogate_1st = 0;
                    } else if (utf16_code >= 55296 && utf16_code <= 56319) {
                        surrogate_1st = utf16_code;
                    } else if ((utf16_code >= 56320) && (utf16_code <= 57343)) {
                        fallback();
                    } else {
                        unicode_codes.push(utf16_code);
                    }
                }

                if (surrogate_1st !== 0) {
                    fallback();
                }

                return unicode_codes;
            },
            Encode$3: function (s, outputBytes, outputIndex, writtenBytes) {
                var hasBuffer = outputBytes != null;
                var recorded = 0;

                var write = function (ch) {
                    if (hasBuffer) {
                        if (outputIndex >= outputBytes.length) {
                            throw new System.ArgumentException.$ctor1("bytes");
                        }

                        outputBytes[System.Array.index(Bridge.identity(outputIndex, (outputIndex = (outputIndex + 1) | 0)), outputBytes)] = ch;
                    } else {
                        outputBytes.push(ch);
                    }
                    recorded = (recorded + 1) | 0;
                };

                var write32 = Bridge.fn.bind(this, function (a) {
                    var r = System.Array.init(4, 0, System.Byte);
                    r[System.Array.index(0, r)] = (((a & 255) >>> 0));
                    r[System.Array.index(1, r)] = ((((a & 65280) >>> 0)) >>> 8);
                    r[System.Array.index(2, r)] = ((((a & 16711680) >>> 0)) >>> 16);
                    r[System.Array.index(3, r)] = ((((a & 4278190080) >>> 0)) >>> 24);

                    if (this.bigEndian) {
                        r.reverse();
                    }

                    write(r[System.Array.index(0, r)]);
                    write(r[System.Array.index(1, r)]);
                    write(r[System.Array.index(2, r)]);
                    write(r[System.Array.index(3, r)]);
                });

                if (!hasBuffer) {
                    outputBytes = System.Array.init(0, 0, System.Byte);
                }

                var unicode_codes = this.ToCodePoints(s);
                for (var i = 0; i < unicode_codes.length; i = (i + 1) | 0) {
                    write32(unicode_codes[System.Array.index(i, unicode_codes)]);
                }

                writtenBytes.v = recorded;

                if (hasBuffer) {
                    return null;
                }

                return outputBytes;
            },
            Decode$2: function (bytes, index, count, chars, charIndex) {
                var position = index;
                var result = "";
                var endpoint = (position + count) | 0;
                this._hasError = false;

                var fallback = Bridge.fn.bind(this, function () {
                    if (this.throwOnInvalid) {
                        throw new System.Exception("Invalid character in UTF32 text");
                    }

                    result = (result || "") + ((String.fromCharCode(this.fallbackCharacter)) || "");
                });

                var read32 = Bridge.fn.bind(this, function () {
                    if ((((position + 4) | 0)) > endpoint) {
                        position = (position + 4) | 0;
                        return null;
                    }

                    var a = bytes[System.Array.index(Bridge.identity(position, (position = (position + 1) | 0)), bytes)];
                    var b = bytes[System.Array.index(Bridge.identity(position, (position = (position + 1) | 0)), bytes)];
                    var c = bytes[System.Array.index(Bridge.identity(position, (position = (position + 1) | 0)), bytes)];
                    var d = bytes[System.Array.index(Bridge.identity(position, (position = (position + 1) | 0)), bytes)];

                    if (this.bigEndian) {
                        var tmp = b;
                        b = c;
                        c = tmp;

                        tmp = a;
                        a = d;
                        d = tmp;
                    }

                    return ((d << 24) | (c << 16) | (b << 8) | a);
                });

                while (position < endpoint) {
                    var unicode_code = read32();

                    if (unicode_code == null) {
                        fallback();
                        this._hasError = true;
                        continue;
                    }

                    if (System.Nullable.lt(unicode_code, 65536) || System.Nullable.gt(unicode_code, 1114111)) {
                        if (System.Nullable.lt(unicode_code, 0) || System.Nullable.gt(unicode_code, 1114111) || (System.Nullable.gte(unicode_code, 55296) && System.Nullable.lte(unicode_code, 57343))) {
                            fallback();
                        } else {
                            result = (result || "") + ((String.fromCharCode(unicode_code)) || "");
                        }
                    } else {
                        result = (result || "") + ((String.fromCharCode((Bridge.Int.clipu32(System.Nullable.add((Bridge.Int.clipu32(Bridge.Int.div((Bridge.Int.clipu32(System.Nullable.sub(unicode_code, (65536)))), (1024)))), 55296))))) || "");
                        result = (result || "") + ((String.fromCharCode((Bridge.Int.clipu32(System.Nullable.add((System.Nullable.mod(unicode_code, (1024))), 56320))))) || "");
                    }
                }

                return result;
            },
            GetMaxByteCount: function (charCount) {
                if (charCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                var byteCount = System.Int64(charCount).add(System.Int64(1));
                byteCount = byteCount.mul(System.Int64(4));

                if (byteCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                return System.Int64.clip32(byteCount);
            },
            GetMaxCharCount: function (byteCount) {
                if (byteCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                var charCount = (((Bridge.Int.div(byteCount, 2)) | 0) + 2) | 0;

                if (charCount > 2147483647) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                return charCount;
            }
        }
    });

    // @source UTF7Encoding.js

    Bridge.define("System.Text.UTF7Encoding", {
        inherits: [System.Text.Encoding],
        statics: {
            methods: {
                Escape: function (chars) {
                    return chars.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                }
            }
        },
        fields: {
            allowOptionals: false
        },
        props: {
            CodePage: {
                get: function () {
                    return 65000;
                }
            },
            EncodingName: {
                get: function () {
                    return "Unicode (UTF-7)";
                }
            }
        },
        ctors: {
            ctor: function () {
                System.Text.UTF7Encoding.$ctor1.call(this, false);
            },
            $ctor1: function (allowOptionals) {
                this.$initialize();
                System.Text.Encoding.ctor.call(this);
                this.allowOptionals = allowOptionals;
                this.fallbackCharacter = 65533;
            }
        },
        methods: {
            Encode$3: function (s, outputBytes, outputIndex, writtenBytes) {
                var setD = "A-Za-z0-9" + (System.Text.UTF7Encoding.Escape("'(),-./:?") || "");

                var encode = $asm.$.System.Text.UTF7Encoding.f1;

                var setO = System.Text.UTF7Encoding.Escape("!\"#$%&*;<=>@[]^_`{|}");
                var setW = System.Text.UTF7Encoding.Escape(" \r\n\t");

                s = s.replace(new RegExp("[^" + setW + setD + (this.allowOptionals ? setO : "") + "]+", "g"), function (chunk) { return "+" + (chunk === "+" ? "" : encode(chunk)) + "-"; });

                var arr = System.String.toCharArray(s, 0, s.length);

                if (outputBytes != null) {
                    var recorded = 0;

                    if (arr.length > (((outputBytes.length - outputIndex) | 0))) {
                        throw new System.ArgumentException.$ctor1("bytes");
                    }

                    for (var j = 0; j < arr.length; j = (j + 1) | 0) {
                        outputBytes[System.Array.index(((j + outputIndex) | 0), outputBytes)] = arr[System.Array.index(j, arr)];
                        recorded = (recorded + 1) | 0;
                    }

                    writtenBytes.v = recorded;
                    return null;
                }

                writtenBytes.v = arr.length;

                return arr;
            },
            Decode$2: function (bytes, index, count, chars, charIndex) {
                var _base64ToArrayBuffer = $asm.$.System.Text.UTF7Encoding.f2;

                var decode = function (s) {
                    var b = _base64ToArrayBuffer(s);
                    var r = System.Array.init(0, 0, System.Char);
                    for (var i = 0; i < b.length; ) {
                        r.push(((b[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), b)] << 8 | b[System.Array.index(Bridge.identity(i, (i = (i + 1) | 0)), b)]) & 65535));
                    }
                    return System.String.fromCharArray(r);
                };

                var str = System.String.fromCharArray(bytes, index, count);
                return str.replace(/\+([A-Za-z0-9\/]*)-?/gi, function (_, chunk) { if (chunk === "") { return _ == "+-" ? "+" : ""; } return decode(chunk); });
            },
            GetMaxByteCount: function (charCount) {
                if (charCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                var byteCount = System.Int64(charCount).mul(System.Int64(3)).add(System.Int64(2));

                if (byteCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                return System.Int64.clip32(byteCount);
            },
            GetMaxCharCount: function (byteCount) {
                if (byteCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                var charCount = byteCount;
                if (charCount === 0) {
                    charCount = 1;
                }

                return charCount | 0;
            }
        }
    });

    Bridge.ns("System.Text.UTF7Encoding", $asm.$);

    Bridge.apply($asm.$.System.Text.UTF7Encoding, {
        f1: function (str) {
            var b = System.Array.init(Bridge.Int.mul(str.length, 2), 0, System.Byte);
            var bi = 0;
            for (var i = 0; i < str.length; i = (i + 1) | 0) {
                var c = str.charCodeAt(i);
                b[System.Array.index(Bridge.identity(bi, (bi = (bi + 1) | 0)), b)] = (c >> 8);
                b[System.Array.index(Bridge.identity(bi, (bi = (bi + 1) | 0)), b)] = (c & 255);
            }
            var base64Str = System.Convert.toBase64String(b, null, null, null);
            return base64Str.replace(/=+$/, "");
        },
        f2: function (base64) {
            try {
                if (typeof window === "undefined") { throw new System.Exception(); };
                var binary_string = window.atob(base64);
                var len = binary_string.length;
                var arr = System.Array.init(len, 0, System.Char);

                if (len === 1 && binary_string.charCodeAt(0) === 0) {
                    return System.Array.init(0, 0, System.Char);
                }

                for (var i = 0; i < len; i = (i + 1) | 0) {
                    arr[System.Array.index(i, arr)] = binary_string.charCodeAt(i);
                }

                return arr;
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                return System.Array.init(0, 0, System.Char);
            }
        }
    });

    // @source UTF8Encoding.js

    Bridge.define("System.Text.UTF8Encoding", {
        inherits: [System.Text.Encoding],
        fields: {
            encoderShouldEmitUTF8Identifier: false,
            throwOnInvalid: false
        },
        props: {
            CodePage: {
                get: function () {
                    return 65001;
                }
            },
            EncodingName: {
                get: function () {
                    return "Unicode (UTF-8)";
                }
            }
        },
        ctors: {
            ctor: function () {
                System.Text.UTF8Encoding.$ctor1.call(this, false);
            },
            $ctor1: function (encoderShouldEmitUTF8Identifier) {
                System.Text.UTF8Encoding.$ctor2.call(this, encoderShouldEmitUTF8Identifier, false);
            },
            $ctor2: function (encoderShouldEmitUTF8Identifier, throwOnInvalidBytes) {
                this.$initialize();
                System.Text.Encoding.ctor.call(this);
                this.encoderShouldEmitUTF8Identifier = encoderShouldEmitUTF8Identifier;
                this.throwOnInvalid = throwOnInvalidBytes;
                this.fallbackCharacter = 65533;
            }
        },
        methods: {
            Encode$3: function (s, outputBytes, outputIndex, writtenBytes) {
                var hasBuffer = outputBytes != null;
                var record = 0;

                var write = function (args) {
                    var len = args.length;
                    for (var j = 0; j < len; j = (j + 1) | 0) {
                        var code = args[System.Array.index(j, args)];
                        if (hasBuffer) {
                            if (outputIndex >= outputBytes.length) {
                                throw new System.ArgumentException.$ctor1("bytes");
                            }

                            outputBytes[System.Array.index(Bridge.identity(outputIndex, (outputIndex = (outputIndex + 1) | 0)), outputBytes)] = code;
                        } else {
                            outputBytes.push(code);
                        }
                        record = (record + 1) | 0;
                    }
                };

                var fallback = Bridge.fn.bind(this, $asm.$.System.Text.UTF8Encoding.f1);

                if (!hasBuffer) {
                    outputBytes = System.Array.init(0, 0, System.Byte);
                }

                for (var i = 0; i < s.length; i = (i + 1) | 0) {
                    var charcode = s.charCodeAt(i);

                    if ((charcode >= 55296) && (charcode <= 56319)) {
                        var next = s.charCodeAt(((i + 1) | 0));
                        if (!((next >= 56320) && (next <= 57343))) {
                            charcode = fallback();
                        }
                    } else if ((charcode >= 56320) && (charcode <= 57343)) {
                        charcode = fallback();
                    }

                    if (charcode < 128) {
                        write(System.Array.init([charcode], System.Byte));
                    } else if (charcode < 2048) {
                        write(System.Array.init([(192 | (charcode >> 6)), (128 | (charcode & 63))], System.Byte));
                    } else if (charcode < 55296 || charcode >= 57344) {
                        write(System.Array.init([(224 | (charcode >> 12)), (128 | ((charcode >> 6) & 63)), (128 | (charcode & 63))], System.Byte));
                    } else {
                        i = (i + 1) | 0;
                        var code = (65536 + (((charcode & 1023) << 10) | (s.charCodeAt(i) & 1023))) | 0;
                        write(System.Array.init([(240 | (code >> 18)), (128 | ((code >> 12) & 63)), (128 | ((code >> 6) & 63)), (128 | (code & 63))], System.Byte));
                    }
                }

                writtenBytes.v = record;

                if (hasBuffer) {
                    return null;
                }

                return outputBytes;
            },
            Decode$2: function (bytes, index, count, chars, charIndex) {
                this._hasError = false;
                var position = index;
                var result = "";
                var surrogate1 = 0;
                var addFallback = false;
                var endpoint = (position + count) | 0;

                for (; position < endpoint; position = (position + 1) | 0) {
                    var accumulator = 0;
                    var extraBytes = 0;
                    var hasError = false;
                    var firstByte = bytes[System.Array.index(position, bytes)];

                    if (firstByte <= 127) {
                        accumulator = firstByte;
                    } else if ((firstByte & 64) === 0) {
                        hasError = true;
                    } else if ((firstByte & 224) === 192) {
                        accumulator = firstByte & 31;
                        extraBytes = 1;
                    } else if ((firstByte & 240) === 224) {
                        accumulator = firstByte & 15;
                        extraBytes = 2;
                    } else if ((firstByte & 248) === 240) {
                        accumulator = firstByte & 7;
                        extraBytes = 3;
                    } else if ((firstByte & 252) === 248) {
                        accumulator = firstByte & 3;
                        extraBytes = 4;
                        hasError = true;
                    } else if ((firstByte & 254) === 252) {
                        accumulator = firstByte & 3;
                        extraBytes = 5;
                        hasError = true;
                    } else {
                        accumulator = firstByte;
                        hasError = false;
                    }

                    while (extraBytes > 0) {
                        position = (position + 1) | 0;

                        if (position >= endpoint) {
                            hasError = true;
                            break;
                        }

                        var extraByte = bytes[System.Array.index(position, bytes)];
                        extraBytes = (extraBytes - 1) | 0;

                        if ((extraByte & 192) !== 128) {
                            position = (position - 1) | 0;
                            hasError = true;
                            break;
                        }

                        accumulator = (accumulator << 6) | (extraByte & 63);
                    }

                    /* if ((accumulator == 0xFFFE) || (accumulator == 0xFFFF)) {
                       hasError = true;
                    }*/

                    var characters = null;
                    addFallback = false;
                    if (!hasError) {
                        if (surrogate1 > 0 && !((accumulator >= 56320) && (accumulator <= 57343))) {
                            hasError = true;
                            surrogate1 = 0;
                        } else if ((accumulator >= 55296) && (accumulator <= 56319)) {
                            surrogate1 = accumulator & 65535;
                        } else if ((accumulator >= 56320) && (accumulator <= 57343)) {
                            hasError = true;
                            addFallback = true;
                            surrogate1 = 0;
                        } else {
                            characters = System.String.fromCharCode(accumulator);
                            surrogate1 = 0;
                        }
                    }

                    if (hasError) {
                        if (this.throwOnInvalid) {
                            throw new System.Exception("Invalid character in UTF8 text");
                        }

                        result = (result || "") + String.fromCharCode(this.fallbackCharacter);
                        this._hasError = true;
                    } else if (surrogate1 === 0) {
                        result = (result || "") + (characters || "");
                    }
                }

                if (surrogate1 > 0 || addFallback) {
                    if (this.throwOnInvalid) {
                        throw new System.Exception("Invalid character in UTF8 text");
                    }

                    if (result.length > 0 && result.charCodeAt(((result.length - 1) | 0)) === this.fallbackCharacter) {
                        result = (result || "") + String.fromCharCode(this.fallbackCharacter);
                    } else {
                        result = (result || "") + (((this.fallbackCharacter + this.fallbackCharacter) | 0));
                    }

                    this._hasError = true;
                }

                return result;
            },
            GetMaxByteCount: function (charCount) {
                if (charCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }


                var byteCount = System.Int64(charCount).add(System.Int64(1));
                byteCount = byteCount.mul(System.Int64(3));

                if (byteCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("charCount");
                }

                return System.Int64.clip32(byteCount);
            },
            GetMaxCharCount: function (byteCount) {
                if (byteCount < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                var charCount = System.Int64(byteCount).add(System.Int64(1));

                if (charCount.gt(System.Int64(2147483647))) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("byteCount");
                }

                return System.Int64.clip32(charCount);
            }
        }
    });

    Bridge.ns("System.Text.UTF8Encoding", $asm.$);

    Bridge.apply($asm.$.System.Text.UTF8Encoding, {
        f1: function () {
            if (this.throwOnInvalid) {
                throw new System.Exception("Invalid character in UTF8 text");
            }

            return this.fallbackCharacter;
        }
    });

    // @source Timer.js

    Bridge.define("System.Threading.Timer", {
        inherits: [System.IDisposable],
        statics: {
            fields: {
                MAX_SUPPORTED_TIMEOUT: 0,
                EXC_LESS: null,
                EXC_MORE: null,
                EXC_DISPOSED: null
            },
            ctors: {
                init: function () {
                    this.MAX_SUPPORTED_TIMEOUT = 4294967294;
                    this.EXC_LESS = "Number must be either non-negative and less than or equal to Int32.MaxValue or -1.";
                    this.EXC_MORE = "Time-out interval must be less than 2^32-2.";
                    this.EXC_DISPOSED = "The timer has been already disposed.";
                }
            }
        },
        fields: {
            dueTime: System.Int64(0),
            period: System.Int64(0),
            timerCallback: null,
            state: null,
            id: null,
            disposed: false
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            $ctor1: function (callback, state, dueTime, period) {
                this.$initialize();
                this.TimerSetup(callback, state, System.Int64(dueTime), System.Int64(period));
            },
            $ctor3: function (callback, state, dueTime, period) {
                this.$initialize();
                var dueTm = Bridge.Int.clip64(dueTime.getTotalMilliseconds());
                var periodTm = Bridge.Int.clip64(period.getTotalMilliseconds());

                this.TimerSetup(callback, state, dueTm, periodTm);
            },
            $ctor4: function (callback, state, dueTime, period) {
                this.$initialize();
                this.TimerSetup(callback, state, System.Int64(dueTime), System.Int64(period));
            },
            $ctor2: function (callback, state, dueTime, period) {
                this.$initialize();
                this.TimerSetup(callback, state, dueTime, period);
            },
            ctor: function (callback) {
                this.$initialize();
                var dueTime = -1;
                var period = -1;

                this.TimerSetup(callback, this, System.Int64(dueTime), System.Int64(period));
            }
        },
        methods: {
            TimerSetup: function (callback, state, dueTime, period) {
                if (this.disposed) {
                    throw new System.InvalidOperationException.$ctor1(System.Threading.Timer.EXC_DISPOSED);
                }

                if (Bridge.staticEquals(callback, null)) {
                    throw new System.ArgumentNullException.$ctor1("TimerCallback");
                }

                if (dueTime.lt(System.Int64(-1))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("dueTime", System.Threading.Timer.EXC_LESS);
                }
                if (period.lt(System.Int64(-1))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("period", System.Threading.Timer.EXC_LESS);
                }
                if (dueTime.gt(System.Int64(System.Threading.Timer.MAX_SUPPORTED_TIMEOUT))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("dueTime", System.Threading.Timer.EXC_MORE);
                }
                if (period.gt(System.Int64(System.Threading.Timer.MAX_SUPPORTED_TIMEOUT))) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("period", System.Threading.Timer.EXC_MORE);
                }

                this.dueTime = dueTime;
                this.period = period;

                this.state = state;
                this.timerCallback = callback;

                return this.RunTimer(this.dueTime);
            },
            HandleCallback: function () {
                if (this.disposed) {
                    return;
                }

                if (!Bridge.staticEquals(this.timerCallback, null)) {
                    var myId = this.id;
                    this.timerCallback(this.state);

                    if (System.Nullable.eq(this.id, myId)) {
                        this.RunTimer(this.period, false);
                    }
                }
            },
            RunTimer: function (period, checkDispose) {
                if (checkDispose === void 0) { checkDispose = true; }
                if (checkDispose && this.disposed) {
                    throw new System.InvalidOperationException.$ctor1(System.Threading.Timer.EXC_DISPOSED);
                }

                if (period.ne(System.Int64(-1)) && !this.disposed) {
                    var p = period.toNumber();
                    this.id = Bridge.global.setTimeout(Bridge.fn.cacheBind(this, this.HandleCallback), p);
                    return true;
                }

                return false;
            },
            Change: function (dueTime, period) {
                return this.ChangeTimer(System.Int64(dueTime), System.Int64(period));
            },
            Change$2: function (dueTime, period) {
                return this.ChangeTimer(Bridge.Int.clip64(dueTime.getTotalMilliseconds()), Bridge.Int.clip64(period.getTotalMilliseconds()));
            },
            Change$3: function (dueTime, period) {
                return this.ChangeTimer(System.Int64(dueTime), System.Int64(period));
            },
            Change$1: function (dueTime, period) {
                return this.ChangeTimer(dueTime, period);
            },
            ChangeTimer: function (dueTime, period) {
                this.ClearTimeout();
                return this.TimerSetup(this.timerCallback, this.state, dueTime, period);
            },
            ClearTimeout: function () {
                if (System.Nullable.hasValue(this.id)) {
                    Bridge.global.clearTimeout(System.Nullable.getValue(this.id));
                    this.id = null;
                }
            },
            Dispose: function () {
                this.ClearTimeout();
                this.disposed = true;
            }
        }
    });

    // @source TaskCanceledException.js

    Bridge.define("System.Threading.Tasks.TaskCanceledException", {
        inherits: [System.OperationCanceledException],
        fields: {
            _canceledTask: null
        },
        props: {
            Task: {
                get: function () {
                    return this._canceledTask;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                System.OperationCanceledException.$ctor1.call(this, "A task was canceled.");
            },
            $ctor1: function (message) {
                this.$initialize();
                System.OperationCanceledException.$ctor1.call(this, message);
            },
            $ctor2: function (message, innerException) {
                this.$initialize();
                System.OperationCanceledException.$ctor2.call(this, message, innerException);
            },
            $ctor3: function (task) {
                this.$initialize();
                System.OperationCanceledException.$ctor4.call(this, "A task was canceled.", task != null ? new System.Threading.CancellationToken() : new System.Threading.CancellationToken());
                this._canceledTask = task;
            }
        }
    });

    // @source TaskSchedulerException.js

    Bridge.define("System.Threading.Tasks.TaskSchedulerException", {
        inherits: [System.Exception],
        ctors: {
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this, "An exception was thrown by a TaskScheduler.");
            },
            $ctor2: function (message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
            },
            $ctor1: function (innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, "An exception was thrown by a TaskScheduler.", innerException);
            },
            $ctor3: function (message, innerException) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerException);
            }
        }
    });

    // @source Version.js

    Bridge.define("System.Version", {
        inherits: function () { return [System.ICloneable,System.IComparable$1(System.Version),System.IEquatable$1(System.Version)]; },
        statics: {
            fields: {
                separatorsArray: 0,
                ZERO_CHAR_VALUE: 0
            },
            ctors: {
                init: function () {
                    this.separatorsArray = 46;
                    this.ZERO_CHAR_VALUE = 48;
                }
            },
            methods: {
                appendPositiveNumber: function (num, sb) {
                    var index = sb.getLength();
                    var reminder;

                    do {
                        reminder = num % 10;
                        num = (Bridge.Int.div(num, 10)) | 0;
                        sb.insert(index, String.fromCharCode(((((System.Version.ZERO_CHAR_VALUE + reminder) | 0)) & 65535)));
                    } while (num > 0);
                },
                parse: function (input) {
                    if (input == null) {
                        throw new System.ArgumentNullException.$ctor1("input");
                    }

                    var r = { v : new System.Version.VersionResult() };
                    r.v.init("input", true);
                    if (!System.Version.tryParseVersion(input, r)) {
                        throw r.v.getVersionParseException();
                    }
                    return r.v.m_parsedVersion;
                },
                tryParse: function (input, result) {
                    var r = { v : new System.Version.VersionResult() };
                    r.v.init("input", false);
                    var b = System.Version.tryParseVersion(input, r);
                    result.v = r.v.m_parsedVersion;
                    return b;
                },
                tryParseVersion: function (version, result) {
                    var major = { }, minor = { }, build = { }, revision = { };

                    if (version == null) {
                        result.v.setFailure(System.Version.ParseFailureKind.ArgumentNullException);

                        return false;
                    }

                    var parsedComponents = System.String.split(version, [System.Version.separatorsArray].map(function (i) {{ return String.fromCharCode(i); }}));
                    var parsedComponentsLength = parsedComponents.length;

                    if ((parsedComponentsLength < 2) || (parsedComponentsLength > 4)) {
                        result.v.setFailure(System.Version.ParseFailureKind.ArgumentException);
                        return false;
                    }

                    if (!System.Version.tryParseComponent(parsedComponents[System.Array.index(0, parsedComponents)], "version", result, major)) {
                        return false;
                    }

                    if (!System.Version.tryParseComponent(parsedComponents[System.Array.index(1, parsedComponents)], "version", result, minor)) {
                        return false;
                    }

                    parsedComponentsLength = (parsedComponentsLength - 2) | 0;

                    if (parsedComponentsLength > 0) {
                        if (!System.Version.tryParseComponent(parsedComponents[System.Array.index(2, parsedComponents)], "build", result, build)) {
                            return false;
                        }

                        parsedComponentsLength = (parsedComponentsLength - 1) | 0;

                        if (parsedComponentsLength > 0) {
                            if (!System.Version.tryParseComponent(parsedComponents[System.Array.index(3, parsedComponents)], "revision", result, revision)) {
                                return false;
                            } else {
                                result.v.m_parsedVersion = new System.Version.$ctor3(major.v, minor.v, build.v, revision.v);
                            }
                        } else {
                            result.v.m_parsedVersion = new System.Version.$ctor2(major.v, minor.v, build.v);
                        }
                    } else {
                        result.v.m_parsedVersion = new System.Version.$ctor1(major.v, minor.v);
                    }

                    return true;
                },
                tryParseComponent: function (component, componentName, result, parsedComponent) {
                    if (!System.Int32.tryParse(component, parsedComponent)) {
                        result.v.setFailure$1(System.Version.ParseFailureKind.FormatException, component);
                        return false;
                    }

                    if (parsedComponent.v < 0) {
                        result.v.setFailure$1(System.Version.ParseFailureKind.ArgumentOutOfRangeException, componentName);
                        return false;
                    }

                    return true;
                },
                op_Equality: function (v1, v2) {
                    if (Bridge.referenceEquals(v1, null)) {
                        return Bridge.referenceEquals(v2, null);
                    }

                    return v1.equalsT(v2);
                },
                op_Inequality: function (v1, v2) {
                    return !(System.Version.op_Equality(v1, v2));
                },
                op_LessThan: function (v1, v2) {
                    if (v1 == null) {
                        throw new System.ArgumentNullException.$ctor1("v1");
                    }

                    return (v1.compareTo(v2) < 0);
                },
                op_LessThanOrEqual: function (v1, v2) {
                    if (v1 == null) {
                        throw new System.ArgumentNullException.$ctor1("v1");
                    }

                    return (v1.compareTo(v2) <= 0);
                },
                op_GreaterThan: function (v1, v2) {
                    return (System.Version.op_LessThan(v2, v1));
                },
                op_GreaterThanOrEqual: function (v1, v2) {
                    return (System.Version.op_LessThanOrEqual(v2, v1));
                }
            }
        },
        fields: {
            _Major: 0,
            _Minor: 0,
            _Build: 0,
            _Revision: 0
        },
        props: {
            Major: {
                get: function () {
                    return this._Major;
                }
            },
            Minor: {
                get: function () {
                    return this._Minor;
                }
            },
            Build: {
                get: function () {
                    return this._Build;
                }
            },
            Revision: {
                get: function () {
                    return this._Revision;
                }
            },
            MajorRevision: {
                get: function () {
                    return Bridge.Int.sxs((this._Revision >> 16) & 65535);
                }
            },
            MinorRevision: {
                get: function () {
                    return Bridge.Int.sxs((this._Revision & 65535) & 65535);
                }
            }
        },
        alias: [
            "clone", "System$ICloneable$clone",
            "compareTo", ["System$IComparable$1$System$Version$compareTo", "System$IComparable$1$compareTo"],
            "equalsT", "System$IEquatable$1$System$Version$equalsT"
        ],
        ctors: {
            init: function () {
                this._Build = -1;
                this._Revision = -1;
            },
            $ctor3: function (major, minor, build, revision) {
                this.$initialize();
                if (major < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("major", "Cannot be < 0");
                }

                if (minor < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("minor", "Cannot be < 0");
                }

                if (build < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("build", "Cannot be < 0");
                }

                if (revision < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("revision", "Cannot be < 0");
                }

                this._Major = major;
                this._Minor = minor;
                this._Build = build;
                this._Revision = revision;
            },
            $ctor2: function (major, minor, build) {
                this.$initialize();
                if (major < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("major", "Cannot be < 0");
                }

                if (minor < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("minor", "Cannot be < 0");
                }

                if (build < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("build", "Cannot be < 0");
                }

                this._Major = major;
                this._Minor = minor;
                this._Build = build;
            },
            $ctor1: function (major, minor) {
                this.$initialize();
                if (major < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("major", "Cannot be < 0");
                }

                if (minor < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor4("minor", "Cannot be < 0");
                }

                this._Major = major;
                this._Minor = minor;
            },
            $ctor4: function (version) {
                this.$initialize();
                var v = System.Version.parse(version);
                this._Major = v.Major;
                this._Minor = v.Minor;
                this._Build = v.Build;
                this._Revision = v.Revision;
            },
            ctor: function () {
                this.$initialize();
                this._Major = 0;
                this._Minor = 0;
            }
        },
        methods: {
            clone: function () {
                var v = new System.Version.ctor();
                v._Major = this._Major;
                v._Minor = this._Minor;
                v._Build = this._Build;
                v._Revision = this._Revision;
                return (v);
            },
            compareTo$1: function (version) {
                if (version == null) {
                    return 1;
                }

                var v = Bridge.as(version, System.Version);
                if (System.Version.op_Equality(v, null)) {
                    throw new System.ArgumentException.$ctor1("version should be of System.Version type");
                }

                if (this._Major !== v._Major) {
                    if (this._Major > v._Major) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                if (this._Minor !== v._Minor) {
                    if (this._Minor > v._Minor) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                if (this._Build !== v._Build) {
                    if (this._Build > v._Build) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                if (this._Revision !== v._Revision) {
                    if (this._Revision > v._Revision) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                return 0;
            },
            compareTo: function (value) {
                if (System.Version.op_Equality(value, null)) {
                    return 1;
                }

                if (this._Major !== value._Major) {
                    if (this._Major > value._Major) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                if (this._Minor !== value._Minor) {
                    if (this._Minor > value._Minor) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                if (this._Build !== value._Build) {
                    if (this._Build > value._Build) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                if (this._Revision !== value._Revision) {
                    if (this._Revision > value._Revision) {
                        return 1;
                    } else {
                        return -1;
                    }
                }

                return 0;
            },
            equals: function (obj) {
                return this.equalsT(Bridge.as(obj, System.Version));
            },
            equalsT: function (obj) {
                if (System.Version.op_Equality(obj, null)) {
                    return false;
                }

                if ((this._Major !== obj._Major) || (this._Minor !== obj._Minor) || (this._Build !== obj._Build) || (this._Revision !== obj._Revision)) {
                    return false;
                }

                return true;
            },
            getHashCode: function () {

                var accumulator = 0;

                accumulator = accumulator | ((this._Major & 15) << 28);
                accumulator = accumulator | ((this._Minor & 255) << 20);
                accumulator = accumulator | ((this._Build & 255) << 12);
                accumulator = accumulator | (this._Revision & 4095);

                return accumulator;
            },
            toString: function () {
                if (this._Build === -1) {
                    return (this.toString$1(2));
                }
                if (this._Revision === -1) {
                    return (this.toString$1(3));
                }
                return (this.toString$1(4));
            },
            toString$1: function (fieldCount) {
                var sb;
                switch (fieldCount) {
                    case 0: 
                        return ("");
                    case 1: 
                        return (Bridge.toString(this._Major));
                    case 2: 
                        sb = new System.Text.StringBuilder();
                        System.Version.appendPositiveNumber(this._Major, sb);
                        sb.append(String.fromCharCode(46));
                        System.Version.appendPositiveNumber(this._Minor, sb);
                        return sb.toString();
                    default: 
                        if (this._Build === -1) {
                            throw new System.ArgumentException.$ctor3("Build should be > 0 if fieldCount > 2", "fieldCount");
                        }
                        if (fieldCount === 3) {
                            sb = new System.Text.StringBuilder();
                            System.Version.appendPositiveNumber(this._Major, sb);
                            sb.append(String.fromCharCode(46));
                            System.Version.appendPositiveNumber(this._Minor, sb);
                            sb.append(String.fromCharCode(46));
                            System.Version.appendPositiveNumber(this._Build, sb);
                            return sb.toString();
                        }
                        if (this._Revision === -1) {
                            throw new System.ArgumentException.$ctor3("Revision should be > 0 if fieldCount > 3", "fieldCount");
                        }
                        if (fieldCount === 4) {
                            sb = new System.Text.StringBuilder();
                            System.Version.appendPositiveNumber(this._Major, sb);
                            sb.append(String.fromCharCode(46));
                            System.Version.appendPositiveNumber(this._Minor, sb);
                            sb.append(String.fromCharCode(46));
                            System.Version.appendPositiveNumber(this._Build, sb);
                            sb.append(String.fromCharCode(46));
                            System.Version.appendPositiveNumber(this._Revision, sb);
                            return sb.toString();
                        }
                        throw new System.ArgumentException.$ctor3("Should be < 5", "fieldCount");
                }
            }
        }
    });

    // @source ParseFailureKind.js

    Bridge.define("System.Version.ParseFailureKind", {
        $kind: "nested enum",
        statics: {
            fields: {
                ArgumentNullException: 0,
                ArgumentException: 1,
                ArgumentOutOfRangeException: 2,
                FormatException: 3
            }
        }
    });

    // @source VersionResult.js

    Bridge.define("System.Version.VersionResult", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new System.Version.VersionResult(); }
            }
        },
        fields: {
            m_parsedVersion: null,
            m_failure: 0,
            m_exceptionArgument: null,
            m_argumentName: null,
            m_canThrow: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            init: function (argumentName, canThrow) {
                this.m_canThrow = canThrow;
                this.m_argumentName = argumentName;
            },
            setFailure: function (failure) {
                this.setFailure$1(failure, "");
            },
            setFailure$1: function (failure, argument) {
                this.m_failure = failure;
                this.m_exceptionArgument = argument;
                if (this.m_canThrow) {
                    throw this.getVersionParseException();
                }
            },
            getVersionParseException: function () {
                switch (this.m_failure) {
                    case System.Version.ParseFailureKind.ArgumentNullException: 
                        return new System.ArgumentNullException.$ctor1(this.m_argumentName);
                    case System.Version.ParseFailureKind.ArgumentException: 
                        return new System.ArgumentException.$ctor1("VersionString");
                    case System.Version.ParseFailureKind.ArgumentOutOfRangeException: 
                        return new System.ArgumentOutOfRangeException.$ctor4(this.m_exceptionArgument, "Cannot be < 0");
                    case System.Version.ParseFailureKind.FormatException: 
                        try {
                            System.Int32.parse(this.m_exceptionArgument);
                        }
                        catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            var e;
                            if (Bridge.is($e1, System.FormatException)) {
                                e = $e1;
                                return e;
                            } else if (Bridge.is($e1, System.OverflowException)) {
                                e = $e1;
                                return e;
                            } else {
                                throw $e1;
                            }
                        }
                        return new System.FormatException.$ctor1("InvalidString");
                    default: 
                        return new System.ArgumentException.$ctor1("VersionString");
                }
            },
            getHashCode: function () {
                var h = Bridge.addHash([5139482776, this.m_parsedVersion, this.m_failure, this.m_exceptionArgument, this.m_argumentName, this.m_canThrow]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, System.Version.VersionResult)) {
                    return false;
                }
                return Bridge.equals(this.m_parsedVersion, o.m_parsedVersion) && Bridge.equals(this.m_failure, o.m_failure) && Bridge.equals(this.m_exceptionArgument, o.m_exceptionArgument) && Bridge.equals(this.m_argumentName, o.m_argumentName) && Bridge.equals(this.m_canThrow, o.m_canThrow);
            },
            $clone: function (to) {
                var s = to || new System.Version.VersionResult();
                s.m_parsedVersion = this.m_parsedVersion;
                s.m_failure = this.m_failure;
                s.m_exceptionArgument = this.m_exceptionArgument;
                s.m_argumentName = this.m_argumentName;
                s.m_canThrow = this.m_canThrow;
                return s;
            }
        }
    });

    // @source End.js

    // module export
    if (typeof define === "function" && define.amd) {
        // AMD
        define("bridge", [], function () { return Bridge; });
    } else if (typeof module !== "undefined" && module.exports) {
        // Node
        module.exports = Bridge;
    }

    // @source Finally.js

})(this);
/**
 * @version   : 17.2.0 - Bridge.NET
 * @author    : Object.NET, Inc. http://bridge.net/
 * @copyright : Copyright 2008-2018 Object.NET, Inc. http://object.net/
 * @license   : See license.txt and https://github.com/bridgedotnet/Bridge/blob/master/LICENSE.md
 */

    var $m = Bridge.setMetadata,
        $n = ["System","System.Globalization","System.Threading","System.Runtime.Serialization","System.Collections.Generic","System.Collections.ObjectModel","System.Text.RegularExpressions","System.Collections","System.Text","System.Net.WebSockets","System.Threading.Tasks","System.Reflection","System.Runtime.CompilerServices","System.IO","System.ComponentModel","Bridge"];
    $m("System.ApplicationException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.ArgumentException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"paramName","pt":$n[0].String,"ps":1}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"paramName","pt":$n[0].String,"ps":1},{"n":"innerException","pt":$n[0].Exception,"ps":2}],"sn":"$ctor4"},{"ov":true,"a":2,"n":"Message","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_Message","t":8,"rt":$n[0].String,"fg":"Message"},"fn":"Message"},{"v":true,"a":2,"n":"ParamName","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_ParamName","t":8,"rt":$n[0].String,"fg":"ParamName"},"fn":"ParamName"},{"a":1,"n":"_paramName","t":4,"rt":$n[0].String,"sn":"_paramName"}]}; }, $n);
    $m("System.ArgumentNullException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0},{"n":"message","pt":$n[0].String,"ps":1}],"sn":"$ctor3"}]}; }, $n);
    $m("System.ArgumentOutOfRangeException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0},{"n":"message","pt":$n[0].String,"ps":1}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Object,$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0},{"n":"actualValue","pt":$n[0].Object,"ps":1},{"n":"message","pt":$n[0].String,"ps":2}],"sn":"$ctor3"},{"v":true,"a":2,"n":"ActualValue","t":16,"rt":$n[0].Object,"g":{"v":true,"a":2,"n":"get_ActualValue","t":8,"rt":$n[0].Object,"fg":"ActualValue"},"fn":"ActualValue"},{"ov":true,"a":2,"n":"Message","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_Message","t":8,"rt":$n[0].String,"fg":"Message"},"fn":"Message"},{"a":1,"n":"_actualValue","t":4,"rt":$n[0].Object,"sn":"_actualValue"}]}; }, $n);
    $m("System.CharEnumerator", function () { return {"att":1048833,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Reset","t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"Current","t":16,"rt":$n[0].Char,"g":{"a":2,"n":"get_Current","t":8,"rt":$n[0].Char,"fg":"Current","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},"fn":"Current"},{"a":1,"n":"_currentElement","t":4,"rt":$n[0].Char,"sn":"_currentElement","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":1,"n":"_index","t":4,"rt":$n[0].Int32,"sn":"_index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_str","t":4,"rt":$n[0].String,"sn":"_str"}]}; }, $n);
    $m("System.FormattableString", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"GetArgument","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"GetArgument","rt":$n[0].Object,"p":[$n[0].Int32]},{"ab":true,"a":2,"n":"GetArguments","t":8,"sn":"GetArguments","rt":$n[0].Array.type(System.Object)},{"a":2,"n":"Invariant","is":true,"t":8,"pi":[{"n":"formattable","pt":$n[0].FormattableString,"ps":0}],"sn":"Invariant","rt":$n[0].String,"p":[$n[0].FormattableString]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"ab":true,"a":2,"n":"ToString","t":8,"pi":[{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"ToString","rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"ab":true,"a":2,"n":"ArgumentCount","t":16,"rt":$n[0].Int32,"g":{"ab":true,"a":2,"n":"get_ArgumentCount","t":8,"rt":$n[0].Int32,"fg":"ArgumentCount","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"ArgumentCount"},{"ab":true,"a":2,"n":"Format","t":16,"rt":$n[0].String,"g":{"ab":true,"a":2,"n":"get_Format","t":8,"rt":$n[0].String,"fg":"Format"},"fn":"Format"}]}; }, $n);
    $m("System.ObjectDisposedException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"objectName","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String],"pi":[{"n":"objectName","pt":$n[0].String,"ps":0},{"n":"message","pt":$n[0].String,"ps":1}],"sn":"$ctor3"},{"ov":true,"a":2,"n":"Message","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_Message","t":8,"rt":$n[0].String,"fg":"Message"},"fn":"Message"},{"a":2,"n":"ObjectName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ObjectName","t":8,"rt":$n[0].String,"fg":"ObjectName"},"fn":"ObjectName"},{"a":1,"n":"_objectName","t":4,"rt":$n[0].String,"sn":"_objectName"}]}; }, $n);
    $m("System.OutOfMemoryException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.ArithmeticException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.ArrayTypeMismatchException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Base64FormattingOptions", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"InsertLineBreaks","is":true,"t":4,"rt":$n[0].Base64FormattingOptions,"sn":"InsertLineBreaks","box":function ($v) { return Bridge.box($v, System.Base64FormattingOptions, System.Enum.toStringFn(System.Base64FormattingOptions));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[0].Base64FormattingOptions,"sn":"None","box":function ($v) { return Bridge.box($v, System.Base64FormattingOptions, System.Enum.toStringFn(System.Base64FormattingOptions));}}]}; }, $n);
    $m("System.DBNull", function () { return {"att":1057025,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetTypeCode","t":8,"sn":"GetTypeCode","rt":$n[0].TypeCode,"box":function ($v) { return Bridge.box($v, System.TypeCode, System.Enum.toStringFn(System.TypeCode));}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"ToString","rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"a":2,"n":"Value","is":true,"t":4,"rt":$n[0].DBNull,"sn":"Value","ro":true}]}; }, $n);
    $m("System.DivideByZeroException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Empty", function () { return {"att":1048832,"a":4,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Value","is":true,"t":4,"rt":$n[0].Empty,"sn":"Value","ro":true}]}; }, $n);
    $m("System.FormatException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.DateTimeParse", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"dtfi","pt":$n[1].DateTimeFormatInfo,"ps":1},{"n":"styles","pt":$n[1].DateTimeStyles,"ps":2}],"sn":"Parse","rt":$n[0].DateTime,"p":[$n[0].String,$n[1].DateTimeFormatInfo,$n[1].DateTimeStyles],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":4,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"dtfi","pt":$n[1].DateTimeFormatInfo,"ps":1},{"n":"styles","pt":$n[1].DateTimeStyles,"ps":2},{"n":"offset","out":true,"pt":$n[0].TimeSpan,"ps":3}],"sn":"Parse$1","rt":$n[0].DateTime,"p":[$n[0].String,$n[1].DateTimeFormatInfo,$n[1].DateTimeStyles,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":4,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"dtfi","pt":$n[1].DateTimeFormatInfo,"ps":1},{"n":"styles","pt":$n[1].DateTimeStyles,"ps":2},{"n":"result","out":true,"pt":$n[0].DateTime,"ps":3}],"sn":"TryParse","rt":$n[0].Boolean,"p":[$n[0].String,$n[1].DateTimeFormatInfo,$n[1].DateTimeStyles,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"dtfi","pt":$n[1].DateTimeFormatInfo,"ps":1},{"n":"styles","pt":$n[1].DateTimeStyles,"ps":2},{"n":"result","out":true,"pt":$n[0].DateTime,"ps":3},{"n":"offset","out":true,"pt":$n[0].TimeSpan,"ps":4}],"sn":"TryParse$1","rt":$n[0].Boolean,"p":[$n[0].String,$n[1].DateTimeFormatInfo,$n[1].DateTimeStyles,$n[0].DateTime,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"TryParseExact","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"dtfi","pt":$n[1].DateTimeFormatInfo,"ps":2},{"n":"style","pt":$n[1].DateTimeStyles,"ps":3},{"n":"result","out":true,"pt":$n[0].DateTime,"ps":4}],"sn":"TryParseExact","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[1].DateTimeFormatInfo,$n[1].DateTimeStyles,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.ParseFailureKind", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ArgumentNull","is":true,"t":4,"rt":$n[0].ParseFailureKind,"sn":"ArgumentNull","box":function ($v) { return Bridge.box($v, System.ParseFailureKind, System.Enum.toStringFn(System.ParseFailureKind));}},{"a":2,"n":"Format","is":true,"t":4,"rt":$n[0].ParseFailureKind,"sn":"Format","box":function ($v) { return Bridge.box($v, System.ParseFailureKind, System.Enum.toStringFn(System.ParseFailureKind));}},{"a":2,"n":"FormatBadDateTimeCalendar","is":true,"t":4,"rt":$n[0].ParseFailureKind,"sn":"FormatBadDateTimeCalendar","box":function ($v) { return Bridge.box($v, System.ParseFailureKind, System.Enum.toStringFn(System.ParseFailureKind));}},{"a":2,"n":"FormatWithParameter","is":true,"t":4,"rt":$n[0].ParseFailureKind,"sn":"FormatWithParameter","box":function ($v) { return Bridge.box($v, System.ParseFailureKind, System.Enum.toStringFn(System.ParseFailureKind));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[0].ParseFailureKind,"sn":"None","box":function ($v) { return Bridge.box($v, System.ParseFailureKind, System.Enum.toStringFn(System.ParseFailureKind));}}]}; }, $n);
    $m("System.ParseFlags", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CaptureOffset","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"CaptureOffset","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveDate","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveDate","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveDay","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveDay","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveHour","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveHour","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveMinute","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveMinute","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveMonth","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveMonth","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveSecond","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveSecond","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveTime","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveTime","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"HaveYear","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"HaveYear","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"ParsedMonthName","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"ParsedMonthName","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"Rfc1123Pattern","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"Rfc1123Pattern","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"TimeZoneUsed","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"TimeZoneUsed","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"TimeZoneUtc","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"TimeZoneUtc","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"UtcSortPattern","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"UtcSortPattern","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":2,"n":"YearDefault","is":true,"t":4,"rt":$n[0].ParseFlags,"sn":"YearDefault","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}}]}; }, $n);
    $m("System.DateTimeResult", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"Init","t":8,"sn":"Init","rt":$n[0].Void},{"a":4,"n":"SetDate","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2}],"sn":"SetDate","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32]},{"a":4,"n":"SetFailure","t":8,"pi":[{"n":"failure","pt":$n[0].ParseFailureKind,"ps":0},{"n":"failureMessageID","pt":$n[0].String,"ps":1},{"n":"failureMessageFormatArgument","pt":$n[0].Object,"ps":2}],"sn":"SetFailure","rt":$n[0].Void,"p":[$n[0].ParseFailureKind,$n[0].String,$n[0].Object]},{"a":4,"n":"SetFailure","t":8,"pi":[{"n":"failure","pt":$n[0].ParseFailureKind,"ps":0},{"n":"failureMessageID","pt":$n[0].String,"ps":1},{"n":"failureMessageFormatArgument","pt":$n[0].Object,"ps":2},{"n":"failureArgumentName","pt":$n[0].String,"ps":3}],"sn":"SetFailure$1","rt":$n[0].Void,"p":[$n[0].ParseFailureKind,$n[0].String,$n[0].Object,$n[0].String]},{"a":4,"n":"Day","t":4,"rt":$n[0].Int32,"sn":"Day","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"Hour","t":4,"rt":$n[0].Int32,"sn":"Hour","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"Minute","t":4,"rt":$n[0].Int32,"sn":"Minute","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"Month","t":4,"rt":$n[0].Int32,"sn":"Month","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"Second","t":4,"rt":$n[0].Int32,"sn":"Second","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"Year","t":4,"rt":$n[0].Int32,"sn":"Year","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"calendar","t":4,"rt":$n[1].Calendar,"sn":"calendar"},{"a":4,"n":"era","t":4,"rt":$n[0].Int32,"sn":"era","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"failure","t":4,"rt":$n[0].ParseFailureKind,"sn":"failure","box":function ($v) { return Bridge.box($v, System.ParseFailureKind, System.Enum.toStringFn(System.ParseFailureKind));}},{"a":4,"n":"failureArgumentName","t":4,"rt":$n[0].String,"sn":"failureArgumentName"},{"a":4,"n":"failureMessageFormatArgument","t":4,"rt":$n[0].Object,"sn":"failureMessageFormatArgument"},{"a":4,"n":"failureMessageID","t":4,"rt":$n[0].String,"sn":"failureMessageID"},{"a":4,"n":"flags","t":4,"rt":$n[0].ParseFlags,"sn":"flags","box":function ($v) { return Bridge.box($v, System.ParseFlags, System.Enum.toStringFn(System.ParseFlags));}},{"a":4,"n":"fraction","t":4,"rt":$n[0].Double,"sn":"fraction","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":4,"n":"parsedDate","t":4,"rt":$n[0].DateTime,"sn":"parsedDate","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":4,"n":"timeZoneOffset","t":4,"rt":$n[0].TimeSpan,"sn":"timeZoneOffset"}]}; }, $n);
    $m("System.TokenType", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Am","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Am","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"DateWordToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"DateWordToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"DayOfWeekToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"DayOfWeekToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"EndOfString","is":true,"t":4,"rt":$n[0].TokenType,"sn":"EndOfString","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"EraToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"EraToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"HebrewNumber","is":true,"t":4,"rt":$n[0].TokenType,"sn":"HebrewNumber","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"IgnorableSymbol","is":true,"t":4,"rt":$n[0].TokenType,"sn":"IgnorableSymbol","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"JapaneseEraToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"JapaneseEraToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"MonthToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"MonthToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"NumberToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"NumberToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"Pm","is":true,"t":4,"rt":$n[0].TokenType,"sn":"Pm","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"RegularTokenMask","is":true,"t":4,"rt":$n[0].TokenType,"sn":"RegularTokenMask","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_Am","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_Am","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_Date","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_Date","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_DateOrOffset","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_DateOrOffset","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_DaySuff","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_DaySuff","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_End","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_End","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_HourSuff","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_HourSuff","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_LocalTimeMark","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_LocalTimeMark","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_MinuteSuff","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_MinuteSuff","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_MonthSuff","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_MonthSuff","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_Pm","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_Pm","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_SecondSuff","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_SecondSuff","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_Space","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_Space","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_Time","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_Time","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_Unk","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_Unk","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SEP_YearSuff","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SEP_YearSuff","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"SeparatorTokenMask","is":true,"t":4,"rt":$n[0].TokenType,"sn":"SeparatorTokenMask","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"TEraToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"TEraToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"TimeZoneToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"TimeZoneToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"UnknownToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"UnknownToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}},{"a":2,"n":"YearNumberToken","is":true,"t":4,"rt":$n[0].TokenType,"sn":"YearNumberToken","box":function ($v) { return Bridge.box($v, System.TokenType, System.Enum.toStringFn(System.TokenType));}}]}; }, $n);
    $m("System.HResults", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"COR_E_ABANDONEDMUTEX","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ABANDONEDMUTEX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_AMBIGUOUSMATCH","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_AMBIGUOUSMATCH","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_APPDOMAINUNLOADED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_APPDOMAINUNLOADED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_APPLICATION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_APPLICATION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_ARGUMENT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ARGUMENT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_ARGUMENTOUTOFRANGE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ARGUMENTOUTOFRANGE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_ARITHMETIC","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ARITHMETIC","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_ARRAYTYPEMISMATCH","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ARRAYTYPEMISMATCH","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_BADEXEFORMAT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_BADEXEFORMAT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_BADIMAGEFORMAT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_BADIMAGEFORMAT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_CANNOTUNLOADAPPDOMAIN","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_CANNOTUNLOADAPPDOMAIN","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_COMEMULATE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_COMEMULATE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_CONTEXTMARSHAL","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_CONTEXTMARSHAL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_CUSTOMATTRIBUTEFORMAT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_CUSTOMATTRIBUTEFORMAT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_DATAMISALIGNED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_DATAMISALIGNED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_DIRECTORYNOTFOUND","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_DIRECTORYNOTFOUND","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_DIVIDEBYZERO","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_DIVIDEBYZERO","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_DLLNOTFOUND","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_DLLNOTFOUND","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_DUPLICATEWAITOBJECT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_DUPLICATEWAITOBJECT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_ENDOFSTREAM","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ENDOFSTREAM","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_ENTRYPOINTNOTFOUND","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_ENTRYPOINTNOTFOUND","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_EXCEPTION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_EXCEPTION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_EXECUTIONENGINE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_EXECUTIONENGINE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_FIELDACCESS","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_FIELDACCESS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_FILELOAD","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_FILELOAD","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_FILENOTFOUND","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_FILENOTFOUND","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_FORMAT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_FORMAT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_HOSTPROTECTION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_HOSTPROTECTION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INDEXOUTOFRANGE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INDEXOUTOFRANGE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INSUFFICIENTEXECUTIONSTACK","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INSUFFICIENTEXECUTIONSTACK","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INSUFFICIENTMEMORY","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INSUFFICIENTMEMORY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INVALIDCAST","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INVALIDCAST","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INVALIDCOMOBJECT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INVALIDCOMOBJECT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INVALIDFILTERCRITERIA","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INVALIDFILTERCRITERIA","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INVALIDOLEVARIANTTYPE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INVALIDOLEVARIANTTYPE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INVALIDOPERATION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INVALIDOPERATION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_INVALIDPROGRAM","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_INVALIDPROGRAM","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_IO","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_IO","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_KEYNOTFOUND","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_KEYNOTFOUND","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MARSHALDIRECTIVE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MARSHALDIRECTIVE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MEMBERACCESS","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MEMBERACCESS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_METHODACCESS","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_METHODACCESS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MISSINGFIELD","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MISSINGFIELD","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MISSINGMANIFESTRESOURCE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MISSINGMANIFESTRESOURCE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MISSINGMEMBER","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MISSINGMEMBER","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MISSINGMETHOD","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MISSINGMETHOD","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_MISSINGSATELLITEASSEMBLY","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_MISSINGSATELLITEASSEMBLY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_NOTFINITENUMBER","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_NOTFINITENUMBER","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_NOTSUPPORTED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_NOTSUPPORTED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_NULLREFERENCE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_NULLREFERENCE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_OBJECTDISPOSED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_OBJECTDISPOSED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_OPERATIONCANCELED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_OPERATIONCANCELED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_OUTOFMEMORY","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_OUTOFMEMORY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_OVERFLOW","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_OVERFLOW","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_PATHTOOLONG","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_PATHTOOLONG","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_PLATFORMNOTSUPPORTED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_PLATFORMNOTSUPPORTED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_RANK","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_RANK","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_REFLECTIONTYPELOAD","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_REFLECTIONTYPELOAD","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_RUNTIMEWRAPPED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_RUNTIMEWRAPPED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SAFEARRAYRANKMISMATCH","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SAFEARRAYRANKMISMATCH","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SAFEARRAYTYPEMISMATCH","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SAFEARRAYTYPEMISMATCH","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SAFEHANDLEMISSINGATTRIBUTE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SAFEHANDLEMISSINGATTRIBUTE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SECURITY","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SECURITY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SEMAPHOREFULL","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SEMAPHOREFULL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SERIALIZATION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SERIALIZATION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_STACKOVERFLOW","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_STACKOVERFLOW","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SYNCHRONIZATIONLOCK","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SYNCHRONIZATIONLOCK","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_SYSTEM","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_SYSTEM","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TARGET","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TARGET","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TARGETINVOCATION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TARGETINVOCATION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TARGETPARAMCOUNT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TARGETPARAMCOUNT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_THREADABORTED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_THREADABORTED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_THREADINTERRUPTED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_THREADINTERRUPTED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_THREADSTART","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_THREADSTART","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_THREADSTOP","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_THREADSTOP","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TIMEOUT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TIMEOUT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TYPEACCESS","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TYPEACCESS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TYPEINITIALIZATION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TYPEINITIALIZATION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TYPELOAD","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TYPELOAD","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_TYPEUNLOADED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_TYPEUNLOADED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_UNAUTHORIZEDACCESS","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_UNAUTHORIZEDACCESS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_UNSUPPORTEDFORMAT","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_UNSUPPORTEDFORMAT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_VERIFICATION","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_VERIFICATION","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COR_E_WAITHANDLECANNOTBEOPENED","is":true,"t":4,"rt":$n[0].Int32,"sn":"COR_E_WAITHANDLECANNOTBEOPENED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"COvR_E_THREADSTATE","is":true,"t":4,"rt":$n[0].Int32,"sn":"COvR_E_THREADSTATE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CvOR_E_MULTICASTNOTSUPPORTED","is":true,"t":4,"rt":$n[0].Int32,"sn":"CvOR_E_MULTICASTNOTSUPPORTED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"DISP_E_OVERFLOW","is":true,"t":4,"rt":$n[0].Int32,"sn":"DISP_E_OVERFLOW","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"ERROR_MRM_MAP_NOT_FOUND","is":true,"t":4,"rt":$n[0].Int32,"sn":"ERROR_MRM_MAP_NOT_FOUND","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_BOUNDS","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_BOUNDS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_CHANGED_STATE","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_CHANGED_STATE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_FAIL","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_FAIL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_HANDLE","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_HANDLE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_INVALIDARG","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_INVALIDARG","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_NOTIMPL","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_NOTIMPL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"E_POINTER","is":true,"t":4,"rt":$n[0].Int32,"sn":"E_POINTER","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"RO_E_CLOSED","is":true,"t":4,"rt":$n[0].Int32,"sn":"RO_E_CLOSED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"TYPE_E_TYPEMISMATCH","is":true,"t":4,"rt":$n[0].Int32,"sn":"TYPE_E_TYPEMISMATCH","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IConvertible", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetTypeCode","t":8,"sn":"System$IConvertible$GetTypeCode","rt":$n[0].TypeCode,"box":function ($v) { return Bridge.box($v, System.TypeCode, System.Enum.toStringFn(System.TypeCode));}},{"ab":true,"a":2,"n":"ToBoolean","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToBoolean","rt":$n[0].Boolean,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"ToByte","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToByte","rt":$n[0].Byte,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"ab":true,"a":2,"n":"ToChar","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToChar","rt":$n[0].Char,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"ab":true,"a":2,"n":"ToDateTime","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToDateTime","rt":$n[0].DateTime,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"ab":true,"a":2,"n":"ToDecimal","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToDecimal","rt":$n[0].Decimal,"p":[$n[0].IFormatProvider]},{"ab":true,"a":2,"n":"ToDouble","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToDouble","rt":$n[0].Double,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"ab":true,"a":2,"n":"ToInt16","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToInt16","rt":$n[0].Int16,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"ab":true,"a":2,"n":"ToInt32","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToInt32","rt":$n[0].Int32,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"ToInt64","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToInt64","rt":$n[0].Int64,"p":[$n[0].IFormatProvider]},{"ab":true,"a":2,"n":"ToSByte","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToSByte","rt":$n[0].SByte,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"ab":true,"a":2,"n":"ToSingle","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToSingle","rt":$n[0].Single,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"ab":true,"a":2,"n":"ToString","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToString","rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"ab":true,"a":2,"n":"ToType","t":8,"pi":[{"n":"conversionType","pt":Function,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"System$IConvertible$ToType","rt":$n[0].Object,"p":[Function,$n[0].IFormatProvider]},{"ab":true,"a":2,"n":"ToUInt16","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToUInt16","rt":$n[0].UInt16,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"ab":true,"a":2,"n":"ToUInt32","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToUInt32","rt":$n[0].UInt32,"p":[$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"ab":true,"a":2,"n":"ToUInt64","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"System$IConvertible$ToUInt64","rt":$n[0].UInt64,"p":[$n[0].IFormatProvider]}]}; }, $n);
    $m("System.IndexOutOfRangeException", function () { return {"att":1057025,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.InvalidCastException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"errorCode","pt":$n[0].Int32,"ps":1}],"sn":"$ctor3"}]}; }, $n);
    $m("System.InvalidOperationException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.InvalidProgramException", function () { return {"att":1057025,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.NullReferenceException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.OperationCanceledException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[2].CancellationToken],"pi":[{"n":"token","pt":$n[2].CancellationToken,"ps":0}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[2].CancellationToken],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"token","pt":$n[2].CancellationToken,"ps":1}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception,$n[2].CancellationToken],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1},{"n":"token","pt":$n[2].CancellationToken,"ps":2}],"sn":"$ctor3"},{"a":2,"n":"CancellationToken","t":16,"rt":$n[2].CancellationToken,"g":{"a":2,"n":"get_CancellationToken","t":8,"rt":$n[2].CancellationToken,"fg":"CancellationToken"},"s":{"a":1,"n":"set_CancellationToken","t":8,"p":[$n[2].CancellationToken],"rt":$n[0].Void,"fs":"CancellationToken"},"fn":"CancellationToken"},{"a":1,"n":"_cancellationToken","t":4,"rt":$n[2].CancellationToken,"sn":"_cancellationToken"}]}; }, $n);
    $m("System.OverflowException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.RankException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.SerializableAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"}],"ni":true}; }, $n);
    $m("System.StringComparison", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CurrentCulture","is":true,"t":4,"rt":$n[0].StringComparison,"sn":"CurrentCulture","box":function ($v) { return Bridge.box($v, System.StringComparison, System.Enum.toStringFn(System.StringComparison));}},{"a":2,"n":"CurrentCultureIgnoreCase","is":true,"t":4,"rt":$n[0].StringComparison,"sn":"CurrentCultureIgnoreCase","box":function ($v) { return Bridge.box($v, System.StringComparison, System.Enum.toStringFn(System.StringComparison));}},{"a":2,"n":"InvariantCulture","is":true,"t":4,"rt":$n[0].StringComparison,"sn":"InvariantCulture","box":function ($v) { return Bridge.box($v, System.StringComparison, System.Enum.toStringFn(System.StringComparison));}},{"a":2,"n":"InvariantCultureIgnoreCase","is":true,"t":4,"rt":$n[0].StringComparison,"sn":"InvariantCultureIgnoreCase","box":function ($v) { return Bridge.box($v, System.StringComparison, System.Enum.toStringFn(System.StringComparison));}},{"a":2,"n":"Ordinal","is":true,"t":4,"rt":$n[0].StringComparison,"sn":"Ordinal","box":function ($v) { return Bridge.box($v, System.StringComparison, System.Enum.toStringFn(System.StringComparison));}},{"a":2,"n":"OrdinalIgnoreCase","is":true,"t":4,"rt":$n[0].StringComparison,"sn":"OrdinalIgnoreCase","box":function ($v) { return Bridge.box($v, System.StringComparison, System.Enum.toStringFn(System.StringComparison));}}]}; }, $n);
    $m("System.StringSplitOptions", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"None","is":true,"t":4,"rt":$n[0].StringSplitOptions,"sn":"None","box":function ($v) { return Bridge.box($v, System.StringSplitOptions, System.Enum.toStringFn(System.StringSplitOptions));}},{"a":2,"n":"RemoveEmptyEntries","is":true,"t":4,"rt":$n[0].StringSplitOptions,"sn":"RemoveEmptyEntries","box":function ($v) { return Bridge.box($v, System.StringSplitOptions, System.Enum.toStringFn(System.StringSplitOptions));}}]}; }, $n);
    $m("System.SystemException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.TimeoutException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.UnauthorizedAccessException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.UnhandledExceptionEventArgs", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Object,$n[0].Boolean],"pi":[{"n":"exception","pt":$n[0].Object,"ps":0},{"n":"isTerminating","pt":$n[0].Boolean,"ps":1}],"sn":"ctor"},{"a":2,"n":"ExceptionObject","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_ExceptionObject","t":8,"rt":$n[0].Object,"fg":"ExceptionObject"},"fn":"ExceptionObject"},{"a":2,"n":"IsTerminating","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsTerminating","t":8,"rt":$n[0].Boolean,"fg":"IsTerminating","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsTerminating"},{"a":1,"n":"_exception","t":4,"rt":$n[0].Object,"sn":"_exception"},{"a":1,"n":"_isTerminating","t":4,"rt":$n[0].Boolean,"sn":"_isTerminating","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.UnitySerializationHolder", function () { return {"att":1057024,"a":4,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetRealObject","t":8,"pi":[{"n":"context","pt":$n[3].StreamingContext,"ps":0}],"sn":"GetRealObject","rt":$n[0].Object,"p":[$n[3].StreamingContext]},{"a":4,"n":"NullUnity","is":true,"t":4,"rt":$n[0].Int32,"sn":"NullUnity","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Void", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    $m("System.DateTimeOffset", function () { return {"att":1057025,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].DateTime],"pi":[{"n":"dateTime","pt":$n[0].DateTime,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].DateTime,$n[0].TimeSpan],"pi":[{"n":"dateTime","pt":$n[0].DateTime,"ps":0},{"n":"offset","pt":$n[0].TimeSpan,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64,$n[0].TimeSpan],"pi":[{"n":"ticks","pt":$n[0].Int64,"ps":0},{"n":"offset","pt":$n[0].TimeSpan,"ps":1}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].TimeSpan],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"offset","pt":$n[0].TimeSpan,"ps":6}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].TimeSpan],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"millisecond","pt":$n[0].Int32,"ps":6},{"n":"offset","pt":$n[0].TimeSpan,"ps":7}],"sn":"$ctor3"},{"a":2,"n":"Add","t":8,"pi":[{"n":"timeSpan","pt":$n[0].TimeSpan,"ps":0}],"sn":"Add","rt":$n[0].DateTimeOffset,"p":[$n[0].TimeSpan]},{"a":2,"n":"AddDays","t":8,"pi":[{"n":"days","pt":$n[0].Double,"ps":0}],"sn":"AddDays","rt":$n[0].DateTimeOffset,"p":[$n[0].Double]},{"a":2,"n":"AddHours","t":8,"pi":[{"n":"hours","pt":$n[0].Double,"ps":0}],"sn":"AddHours","rt":$n[0].DateTimeOffset,"p":[$n[0].Double]},{"a":2,"n":"AddMilliseconds","t":8,"pi":[{"n":"milliseconds","pt":$n[0].Double,"ps":0}],"sn":"AddMilliseconds","rt":$n[0].DateTimeOffset,"p":[$n[0].Double]},{"a":2,"n":"AddMinutes","t":8,"pi":[{"n":"minutes","pt":$n[0].Double,"ps":0}],"sn":"AddMinutes","rt":$n[0].DateTimeOffset,"p":[$n[0].Double]},{"a":2,"n":"AddMonths","t":8,"pi":[{"n":"months","pt":$n[0].Int32,"ps":0}],"sn":"AddMonths","rt":$n[0].DateTimeOffset,"p":[$n[0].Int32]},{"a":2,"n":"AddSeconds","t":8,"pi":[{"n":"seconds","pt":$n[0].Double,"ps":0}],"sn":"AddSeconds","rt":$n[0].DateTimeOffset,"p":[$n[0].Double]},{"a":2,"n":"AddTicks","t":8,"pi":[{"n":"ticks","pt":$n[0].Int64,"ps":0}],"sn":"AddTicks","rt":$n[0].DateTimeOffset,"p":[$n[0].Int64]},{"a":2,"n":"AddYears","t":8,"pi":[{"n":"years","pt":$n[0].Int32,"ps":0}],"sn":"AddYears","rt":$n[0].DateTimeOffset,"p":[$n[0].Int32]},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"first","pt":$n[0].DateTimeOffset,"ps":0},{"n":"second","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"Compare","rt":$n[0].Int32,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].DateTimeOffset,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].DateTimeOffset,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","is":true,"t":8,"pi":[{"n":"first","pt":$n[0].DateTimeOffset,"ps":0},{"n":"second","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"Equals","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"EqualsExact","t":8,"pi":[{"n":"other","pt":$n[0].DateTimeOffset,"ps":0}],"sn":"EqualsExact","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"FromFileTime","is":true,"t":8,"pi":[{"n":"fileTime","pt":$n[0].Int64,"ps":0}],"sn":"FromFileTime","rt":$n[0].DateTimeOffset,"p":[$n[0].Int64]},{"a":2,"n":"FromUnixTimeMilliseconds","is":true,"t":8,"pi":[{"n":"milliseconds","pt":$n[0].Int64,"ps":0}],"sn":"FromUnixTimeMilliseconds","rt":$n[0].DateTimeOffset,"p":[$n[0].Int64]},{"a":2,"n":"FromUnixTimeSeconds","is":true,"t":8,"pi":[{"n":"seconds","pt":$n[0].Int64,"ps":0}],"sn":"FromUnixTimeSeconds","rt":$n[0].DateTimeOffset,"p":[$n[0].Int64]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"Parse","rt":$n[0].DateTimeOffset,"p":[$n[0].String]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"Parse$1","rt":$n[0].DateTimeOffset,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1},{"n":"styles","pt":$n[1].DateTimeStyles,"ps":2}],"sn":"Parse$2","rt":$n[0].DateTimeOffset,"p":[$n[0].String,$n[0].IFormatProvider,$n[1].DateTimeStyles]},{"a":2,"n":"ParseExact","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":2}],"sn":"ParseExact","rt":$n[0].DateTimeOffset,"p":[$n[0].String,$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"ParseExact","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":2},{"n":"styles","pt":$n[1].DateTimeStyles,"ps":3}],"sn":"ParseExact$1","rt":$n[0].DateTimeOffset,"p":[$n[0].String,$n[0].String,$n[0].IFormatProvider,$n[1].DateTimeStyles]},{"a":2,"n":"Subtract","t":8,"pi":[{"n":"value","pt":$n[0].DateTimeOffset,"ps":0}],"sn":"Subtract$1","rt":$n[0].TimeSpan,"p":[$n[0].DateTimeOffset]},{"a":2,"n":"Subtract","t":8,"pi":[{"n":"value","pt":$n[0].TimeSpan,"ps":0}],"sn":"Subtract","rt":$n[0].DateTimeOffset,"p":[$n[0].TimeSpan]},{"a":2,"n":"ToFileTime","t":8,"sn":"ToFileTime","rt":$n[0].Int64},{"a":2,"n":"ToLocalTime","t":8,"sn":"ToLocalTime","rt":$n[0].DateTimeOffset},{"a":4,"n":"ToLocalTime","t":8,"pi":[{"n":"throwOnOverflow","pt":$n[0].Boolean,"ps":0}],"sn":"ToLocalTime$1","rt":$n[0].DateTimeOffset,"p":[$n[0].Boolean]},{"a":2,"n":"ToOffset","t":8,"pi":[{"n":"offset","pt":$n[0].TimeSpan,"ps":0}],"sn":"ToOffset","rt":$n[0].DateTimeOffset,"p":[$n[0].TimeSpan]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"ToString","rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"ToString$1","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"ToUniversalTime","t":8,"sn":"ToUniversalTime","rt":$n[0].DateTimeOffset},{"a":2,"n":"ToUnixTimeMilliseconds","t":8,"sn":"ToUnixTimeMilliseconds","rt":$n[0].Int64},{"a":2,"n":"ToUnixTimeSeconds","t":8,"sn":"ToUnixTimeSeconds","rt":$n[0].Int64},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].DateTimeOffset,"ps":1}],"sn":"TryParse","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ValidateDate","is":true,"t":8,"pi":[{"n":"dateTime","pt":$n[0].DateTime,"ps":0},{"n":"offset","pt":$n[0].TimeSpan,"ps":1}],"sn":"ValidateDate","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"ValidateOffset","is":true,"t":8,"pi":[{"n":"offset","pt":$n[0].TimeSpan,"ps":0}],"sn":"ValidateOffset","rt":$n[0].Int16,"p":[$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"dateTimeOffset","pt":$n[0].DateTimeOffset,"ps":0},{"n":"timeSpan","pt":$n[0].TimeSpan,"ps":1}],"sn":"op_Addition","rt":$n[0].DateTimeOffset,"p":[$n[0].DateTimeOffset,$n[0].TimeSpan]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_GreaterThan","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"dateTime","pt":$n[0].DateTime,"ps":0}],"sn":"op_Implicit","rt":$n[0].DateTimeOffset,"p":[$n[0].DateTime]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_LessThan","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_LessThanOrEqual","rt":$n[0].Boolean,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"left","pt":$n[0].DateTimeOffset,"ps":0},{"n":"right","pt":$n[0].DateTimeOffset,"ps":1}],"sn":"op_Subtraction$1","rt":$n[0].TimeSpan,"p":[$n[0].DateTimeOffset,$n[0].DateTimeOffset]},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"dateTimeOffset","pt":$n[0].DateTimeOffset,"ps":0},{"n":"timeSpan","pt":$n[0].TimeSpan,"ps":1}],"sn":"op_Subtraction","rt":$n[0].DateTimeOffset,"p":[$n[0].DateTimeOffset,$n[0].TimeSpan]},{"a":1,"n":"ClockDateTime","t":16,"rt":$n[0].DateTime,"g":{"a":1,"n":"get_ClockDateTime","t":8,"rt":$n[0].DateTime,"fg":"ClockDateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"ClockDateTime"},{"a":2,"n":"Date","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_Date","t":8,"rt":$n[0].DateTime,"fg":"Date","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"Date"},{"a":2,"n":"DateTime","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_DateTime","t":8,"rt":$n[0].DateTime,"fg":"DateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"DateTime"},{"a":2,"n":"Day","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Day","t":8,"rt":$n[0].Int32,"fg":"Day","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Day"},{"a":2,"n":"DayOfWeek","t":16,"rt":$n[0].DayOfWeek,"g":{"a":2,"n":"get_DayOfWeek","t":8,"rt":$n[0].DayOfWeek,"fg":"DayOfWeek","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},"fn":"DayOfWeek"},{"a":2,"n":"DayOfYear","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_DayOfYear","t":8,"rt":$n[0].Int32,"fg":"DayOfYear","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"DayOfYear"},{"a":2,"n":"Hour","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Hour","t":8,"rt":$n[0].Int32,"fg":"Hour","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Hour"},{"a":2,"n":"LocalDateTime","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_LocalDateTime","t":8,"rt":$n[0].DateTime,"fg":"LocalDateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"LocalDateTime"},{"a":2,"n":"Millisecond","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Millisecond","t":8,"rt":$n[0].Int32,"fg":"Millisecond","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Millisecond"},{"a":2,"n":"Minute","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Minute","t":8,"rt":$n[0].Int32,"fg":"Minute","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Minute"},{"a":2,"n":"Month","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Month","t":8,"rt":$n[0].Int32,"fg":"Month","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Month"},{"a":2,"n":"Now","is":true,"t":16,"rt":$n[0].DateTimeOffset,"g":{"a":2,"n":"get_Now","t":8,"rt":$n[0].DateTimeOffset,"fg":"Now","is":true},"fn":"Now"},{"a":2,"n":"Offset","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_Offset","t":8,"rt":$n[0].TimeSpan,"fg":"Offset"},"fn":"Offset"},{"a":2,"n":"Second","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Second","t":8,"rt":$n[0].Int32,"fg":"Second","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Second"},{"a":2,"n":"Ticks","t":16,"rt":$n[0].Int64,"g":{"a":2,"n":"get_Ticks","t":8,"rt":$n[0].Int64,"fg":"Ticks"},"fn":"Ticks"},{"a":2,"n":"TimeOfDay","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_TimeOfDay","t":8,"rt":$n[0].TimeSpan,"fg":"TimeOfDay"},"fn":"TimeOfDay"},{"a":2,"n":"UtcDateTime","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_UtcDateTime","t":8,"rt":$n[0].DateTime,"fg":"UtcDateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"UtcDateTime"},{"a":2,"n":"UtcNow","is":true,"t":16,"rt":$n[0].DateTimeOffset,"g":{"a":2,"n":"get_UtcNow","t":8,"rt":$n[0].DateTimeOffset,"fg":"UtcNow","is":true},"fn":"UtcNow"},{"a":2,"n":"UtcTicks","t":16,"rt":$n[0].Int64,"g":{"a":2,"n":"get_UtcTicks","t":8,"rt":$n[0].Int64,"fg":"UtcTicks"},"fn":"UtcTicks"},{"a":2,"n":"Year","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Year","t":8,"rt":$n[0].Int32,"fg":"Year","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Year"},{"a":4,"n":"MaxOffset","is":true,"t":4,"rt":$n[0].Int64,"sn":"MaxOffset"},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].DateTimeOffset,"sn":"MaxValue","ro":true},{"a":4,"n":"MinOffset","is":true,"t":4,"rt":$n[0].Int64,"sn":"MinOffset"},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].DateTimeOffset,"sn":"MinValue","ro":true},{"a":1,"n":"UnixEpochMilliseconds","is":true,"t":4,"rt":$n[0].Int64,"sn":"UnixEpochMilliseconds"},{"a":1,"n":"UnixEpochSeconds","is":true,"t":4,"rt":$n[0].Int64,"sn":"UnixEpochSeconds"},{"a":1,"n":"UnixEpochTicks","is":true,"t":4,"rt":$n[0].Int64,"sn":"UnixEpochTicks"},{"a":1,"n":"m_dateTime","t":4,"rt":$n[0].DateTime,"sn":"m_dateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"m_offsetMinutes","t":4,"rt":$n[0].Int16,"sn":"m_offsetMinutes","box":function ($v) { return Bridge.box($v, System.Int16);}}]}; }, $n);
    $m("System.NotImplemented", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"ByDesignWithMessage","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"ByDesignWithMessage","rt":$n[0].Exception,"p":[$n[0].String]},{"a":4,"n":"ByDesign","is":true,"t":16,"rt":$n[0].Exception,"g":{"a":4,"n":"get_ByDesign","t":8,"rt":$n[0].Exception,"fg":"ByDesign","is":true},"fn":"ByDesign"}]}; }, $n);
    $m("System.SR", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"Format","is":true,"t":8,"pi":[{"n":"resourceFormat","pt":$n[0].String,"ps":0},{"n":"p1","pt":$n[0].Object,"ps":1}],"sn":"Format","rt":$n[0].String,"p":[$n[0].String,$n[0].Object]},{"a":4,"n":"Format","is":true,"t":8,"pi":[{"n":"resourceFormat","pt":$n[0].String,"ps":0},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"Format$3","rt":$n[0].String,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":4,"n":"Format","is":true,"t":8,"pi":[{"n":"resourceFormat","pt":$n[0].String,"ps":0},{"n":"p1","pt":$n[0].Object,"ps":1},{"n":"p2","pt":$n[0].Object,"ps":2}],"sn":"Format$1","rt":$n[0].String,"p":[$n[0].String,$n[0].Object,$n[0].Object]},{"a":4,"n":"Format","is":true,"t":8,"pi":[{"n":"resourceFormat","pt":$n[0].String,"ps":0},{"n":"p1","pt":$n[0].Object,"ps":1},{"n":"p2","pt":$n[0].Object,"ps":2},{"n":"p3","pt":$n[0].Object,"ps":3}],"sn":"Format$2","rt":$n[0].String,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":4,"n":"GetResourceString","is":true,"t":8,"pi":[{"n":"resourceKey","pt":$n[0].String,"ps":0}],"sn":"GetResourceString","rt":$n[0].String,"p":[$n[0].String]},{"a":4,"n":"GetResourceString","is":true,"t":8,"pi":[{"n":"resourceKey","pt":$n[0].String,"ps":0},{"n":"defaultString","pt":$n[0].String,"ps":1}],"sn":"GetResourceString$1","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":1,"n":"InternalGetResourceString","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].String,"ps":0}],"sn":"InternalGetResourceString","rt":$n[0].String,"p":[$n[0].String]},{"a":1,"n":"UsingResourceKeys","is":true,"t":8,"sn":"UsingResourceKeys","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ResourceManager","is":true,"t":16,"rt":System.Object,"g":{"a":1,"n":"get_ResourceManager","t":8,"rt":System.Object,"fg":"ResourceManager","is":true},"s":{"a":1,"n":"set_ResourceManager","t":8,"p":[System.Object],"rt":$n[0].Void,"fs":"ResourceManager","is":true},"fn":"ResourceManager"},{"a":2,"n":"ArgumentException_ValueTupleIncorrectType","is":true,"t":4,"rt":$n[0].String,"sn":"ArgumentException_ValueTupleIncorrectType"},{"a":2,"n":"ArgumentException_ValueTupleLastArgumentNotAValueTuple","is":true,"t":4,"rt":$n[0].String,"sn":"ArgumentException_ValueTupleLastArgumentNotAValueTuple"},{"a":1,"n":"_lock","is":true,"t":4,"rt":$n[0].Object,"sn":"_lock"}]}; }, $n);
    $m("System.ThrowHelper", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":1,"n":"GetAddingDuplicateWithKeyArgumentException","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0}],"sn":"GetAddingDuplicateWithKeyArgumentException","rt":$n[0].ArgumentException,"p":[$n[0].Object]},{"a":1,"n":"GetArgumentException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"GetArgumentException","rt":$n[0].ArgumentException,"p":[$n[0].ExceptionResource]},{"a":1,"n":"GetArgumentException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0},{"n":"argument","pt":$n[0].ExceptionArgument,"ps":1}],"sn":"GetArgumentException$1","rt":$n[0].ArgumentException,"p":[$n[0].ExceptionResource,$n[0].ExceptionArgument]},{"a":1,"n":"GetArgumentName","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0}],"sn":"GetArgumentName","rt":$n[0].String,"p":[$n[0].ExceptionArgument]},{"a":1,"n":"GetArgumentNullException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0}],"sn":"GetArgumentNullException","rt":$n[0].ArgumentNullException,"p":[$n[0].ExceptionArgument]},{"a":4,"n":"GetArgumentOutOfRangeException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0},{"n":"resource","pt":$n[0].ExceptionResource,"ps":1}],"sn":"GetArgumentOutOfRangeException","rt":$n[0].ArgumentOutOfRangeException,"p":[$n[0].ExceptionArgument,$n[0].ExceptionResource]},{"a":1,"n":"GetArgumentOutOfRangeException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0},{"n":"paramNumber","pt":$n[0].Int32,"ps":1},{"n":"resource","pt":$n[0].ExceptionResource,"ps":2}],"sn":"GetArgumentOutOfRangeException$1","rt":$n[0].ArgumentOutOfRangeException,"p":[$n[0].ExceptionArgument,$n[0].Int32,$n[0].ExceptionResource]},{"a":1,"n":"GetArraySegmentCtorValidationFailedException","is":true,"t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"GetArraySegmentCtorValidationFailedException","rt":$n[0].Exception,"p":[Array,$n[0].Int32,$n[0].Int32]},{"a":4,"n":"GetInvalidOperationException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"GetInvalidOperationException","rt":$n[0].InvalidOperationException,"p":[$n[0].ExceptionResource]},{"a":1,"n":"GetInvalidOperationException_EnumCurrent","is":true,"t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"GetInvalidOperationException_EnumCurrent","rt":$n[0].InvalidOperationException,"p":[$n[0].Int32]},{"a":1,"n":"GetKeyNotFoundException","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0}],"sn":"GetKeyNotFoundException","rt":$n[4].KeyNotFoundException,"p":[$n[0].Object]},{"a":1,"n":"GetResourceString","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"GetResourceString","rt":$n[0].String,"p":[$n[0].ExceptionResource]},{"a":1,"n":"GetWrongKeyTypeArgumentException","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0},{"n":"targetType","pt":Function,"ps":1}],"sn":"GetWrongKeyTypeArgumentException","rt":$n[0].ArgumentException,"p":[$n[0].Object,Function]},{"a":1,"n":"GetWrongValueTypeArgumentException","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0},{"n":"targetType","pt":Function,"ps":1}],"sn":"GetWrongValueTypeArgumentException","rt":$n[0].ArgumentException,"p":[$n[0].Object,Function]},{"a":4,"n":"IfNullAndNullsAreIllegalThenThrow","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0},{"n":"argName","pt":$n[0].ExceptionArgument,"ps":1}],"tpc":1,"tprm":["T"],"sn":"IfNullAndNullsAreIllegalThenThrow","rt":$n[0].Void,"p":[$n[0].Object,$n[0].ExceptionArgument]},{"a":4,"n":"ThrowAddingDuplicateWithKeyArgumentException","is":true,"t":8,"pi":[{"n":"key","pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"ThrowAddingDuplicateWithKeyArgumentException","rt":$n[0].Void,"p":[System.Object]},{"a":4,"n":"ThrowAggregateException","is":true,"t":8,"pi":[{"n":"exceptions","pt":$n[4].List$1(System.Exception),"ps":0}],"sn":"ThrowAggregateException","rt":$n[0].Void,"p":[$n[4].List$1(System.Exception)]},{"a":4,"n":"ThrowArgumentException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowArgumentException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowArgumentException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0},{"n":"argument","pt":$n[0].ExceptionArgument,"ps":1}],"sn":"ThrowArgumentException$1","rt":$n[0].Void,"p":[$n[0].ExceptionResource,$n[0].ExceptionArgument]},{"a":4,"n":"ThrowArgumentException_Argument_InvalidArrayType","is":true,"t":8,"sn":"ThrowArgumentException_Argument_InvalidArrayType","rt":$n[0].Void},{"a":4,"n":"ThrowArgumentException_DestinationTooShort","is":true,"t":8,"sn":"ThrowArgumentException_DestinationTooShort","rt":$n[0].Void},{"a":4,"n":"ThrowArgumentException_OverlapAlignmentMismatch","is":true,"t":8,"sn":"ThrowArgumentException_OverlapAlignmentMismatch","rt":$n[0].Void},{"a":4,"n":"ThrowArgumentNullException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0}],"sn":"ThrowArgumentNullException","rt":$n[0].Void,"p":[$n[0].ExceptionArgument]},{"a":4,"n":"ThrowArgumentNullException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowArgumentNullException$2","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowArgumentNullException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0},{"n":"resource","pt":$n[0].ExceptionResource,"ps":1}],"sn":"ThrowArgumentNullException$1","rt":$n[0].Void,"p":[$n[0].ExceptionArgument,$n[0].ExceptionResource]},{"a":4,"n":"ThrowArgumentOutOfRangeException","is":true,"t":8,"sn":"ThrowArgumentOutOfRangeException","rt":$n[0].Void},{"a":4,"n":"ThrowArgumentOutOfRangeException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0}],"sn":"ThrowArgumentOutOfRangeException$1","rt":$n[0].Void,"p":[$n[0].ExceptionArgument]},{"a":4,"n":"ThrowArgumentOutOfRangeException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0},{"n":"resource","pt":$n[0].ExceptionResource,"ps":1}],"sn":"ThrowArgumentOutOfRangeException$2","rt":$n[0].Void,"p":[$n[0].ExceptionArgument,$n[0].ExceptionResource]},{"a":4,"n":"ThrowArgumentOutOfRangeException","is":true,"t":8,"pi":[{"n":"argument","pt":$n[0].ExceptionArgument,"ps":0},{"n":"paramNumber","pt":$n[0].Int32,"ps":1},{"n":"resource","pt":$n[0].ExceptionResource,"ps":2}],"sn":"ThrowArgumentOutOfRangeException$3","rt":$n[0].Void,"p":[$n[0].ExceptionArgument,$n[0].Int32,$n[0].ExceptionResource]},{"a":4,"n":"ThrowArgumentOutOfRange_IndexException","is":true,"t":8,"sn":"ThrowArgumentOutOfRange_IndexException","rt":$n[0].Void},{"a":4,"n":"ThrowArraySegmentCtorValidationFailedExceptions","is":true,"t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"ThrowArraySegmentCtorValidationFailedExceptions","rt":$n[0].Void,"p":[Array,$n[0].Int32,$n[0].Int32]},{"a":4,"n":"ThrowArrayTypeMismatchException","is":true,"t":8,"sn":"ThrowArrayTypeMismatchException","rt":$n[0].Void},{"a":4,"n":"ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count","is":true,"t":8,"sn":"ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count","rt":$n[0].Void},{"a":4,"n":"ThrowIndexArgumentOutOfRange_NeedNonNegNumException","is":true,"t":8,"sn":"ThrowIndexArgumentOutOfRange_NeedNonNegNumException","rt":$n[0].Void},{"a":4,"n":"ThrowIndexOutOfRangeException","is":true,"t":8,"sn":"ThrowIndexOutOfRangeException","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidOperationException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowInvalidOperationException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowInvalidOperationException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0},{"n":"e","pt":$n[0].Exception,"ps":1}],"sn":"ThrowInvalidOperationException$1","rt":$n[0].Void,"p":[$n[0].ExceptionResource,$n[0].Exception]},{"a":4,"n":"ThrowInvalidOperationException_EnumCurrent","is":true,"t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"ThrowInvalidOperationException_EnumCurrent","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":4,"n":"ThrowInvalidOperationException_InvalidOperation_EnumEnded","is":true,"t":8,"sn":"ThrowInvalidOperationException_InvalidOperation_EnumEnded","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion","is":true,"t":8,"sn":"ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidOperationException_InvalidOperation_EnumNotStarted","is":true,"t":8,"sn":"ThrowInvalidOperationException_InvalidOperation_EnumNotStarted","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen","is":true,"t":8,"sn":"ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidOperationException_InvalidOperation_NoValue","is":true,"t":8,"sn":"ThrowInvalidOperationException_InvalidOperation_NoValue","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidOperationException_OutstandingReferences","is":true,"t":8,"sn":"ThrowInvalidOperationException_OutstandingReferences","rt":$n[0].Void},{"a":4,"n":"ThrowInvalidTypeWithPointersNotSupported","is":true,"t":8,"pi":[{"n":"targetType","pt":Function,"ps":0}],"sn":"ThrowInvalidTypeWithPointersNotSupported","rt":$n[0].Void,"p":[Function]},{"a":4,"n":"ThrowKeyNotFoundException","is":true,"t":8,"pi":[{"n":"key","pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"ThrowKeyNotFoundException","rt":$n[0].Void,"p":[System.Object]},{"a":4,"n":"ThrowLengthArgumentOutOfRange_ArgumentOutOfRange_NeedNonNegNum","is":true,"t":8,"sn":"ThrowLengthArgumentOutOfRange_ArgumentOutOfRange_NeedNonNegNum","rt":$n[0].Void},{"a":4,"n":"ThrowNotSupportedException","is":true,"t":8,"sn":"ThrowNotSupportedException","rt":$n[0].Void},{"a":4,"n":"ThrowNotSupportedException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowNotSupportedException$1","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowNotSupportedExceptionIfNonNumericType","is":true,"t":8,"tpc":1,"tprm":["T"],"sn":"ThrowNotSupportedExceptionIfNonNumericType","rt":$n[0].Void},{"a":4,"n":"ThrowObjectDisposedException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowObjectDisposedException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowObjectDisposedException","is":true,"t":8,"pi":[{"n":"objectName","pt":$n[0].String,"ps":0},{"n":"resource","pt":$n[0].ExceptionResource,"ps":1}],"sn":"ThrowObjectDisposedException$1","rt":$n[0].Void,"p":[$n[0].String,$n[0].ExceptionResource]},{"a":4,"n":"ThrowObjectDisposedException_MemoryDisposed","is":true,"t":8,"sn":"ThrowObjectDisposedException_MemoryDisposed","rt":$n[0].Void},{"a":4,"n":"ThrowOutOfMemoryException","is":true,"t":8,"sn":"ThrowOutOfMemoryException","rt":$n[0].Void},{"a":4,"n":"ThrowRankException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowRankException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowSecurityException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowSecurityException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowSerializationException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowSerializationException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index","is":true,"t":8,"sn":"ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index","rt":$n[0].Void},{"a":4,"n":"ThrowUnauthorizedAccessException","is":true,"t":8,"pi":[{"n":"resource","pt":$n[0].ExceptionResource,"ps":0}],"sn":"ThrowUnauthorizedAccessException","rt":$n[0].Void,"p":[$n[0].ExceptionResource]},{"a":4,"n":"ThrowWrongKeyTypeArgumentException","is":true,"t":8,"pi":[{"n":"key","pt":System.Object,"ps":0},{"n":"targetType","pt":Function,"ps":1}],"tpc":1,"tprm":["T"],"sn":"ThrowWrongKeyTypeArgumentException","rt":$n[0].Void,"p":[System.Object,Function]},{"a":4,"n":"ThrowWrongValueTypeArgumentException","is":true,"t":8,"pi":[{"n":"value","pt":System.Object,"ps":0},{"n":"targetType","pt":Function,"ps":1}],"tpc":1,"tprm":["T"],"sn":"ThrowWrongValueTypeArgumentException","rt":$n[0].Void,"p":[System.Object,Function]}]}; }, $n);
    $m("System.ExceptionArgument", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"action","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"action","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"array","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"array","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"arrayIndex","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"arrayIndex","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"asyncResult","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"asyncResult","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"beginMethod","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"beginMethod","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"callBack","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"callBack","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"cancellationToken","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"cancellationToken","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"capacity","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"capacity","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"collection","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"collection","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"comparable","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"comparable","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"comparer","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"comparer","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"comparison","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"comparison","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"concurrencyLevel","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"concurrencyLevel","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"continuationAction","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"continuationAction","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"continuationFunction","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"continuationFunction","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"continuationOptions","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"continuationOptions","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"converter","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"converter","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"count","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"count","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"creationOptions","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"creationOptions","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"culture","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"culture","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"delay","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"delay","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"destinationArray","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"destinationArray","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"destinationIndex","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"destinationIndex","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"dictionary","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"dictionary","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"elementType","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"elementType","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"endFunction","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"endFunction","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"endIndex","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"endIndex","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"endMethod","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"endMethod","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"exception","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"exception","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"exceptions","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"exceptions","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"format","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"format","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"function","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"function","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"index","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"index","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"index1","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"index1","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"index2","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"index2","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"index3","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"index3","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"indices","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"indices","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"info","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"info","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"input","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"input","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"item","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"item","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"key","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"key","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"keyValuePair","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"keyValuePair","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"keys","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"keys","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"len","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"len","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"length","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"$length","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"length1","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"length1","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"length2","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"length2","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"length3","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"length3","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"lengths","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"lengths","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"list","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"list","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"lowerBounds","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"lowerBounds","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"match","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"match","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"millisecondsDelay","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"millisecondsDelay","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"millisecondsTimeout","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"millisecondsTimeout","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"name","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"$name","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"newSize","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"newSize","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"obj","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"obj","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"offset","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"offset","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"options","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"options","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"other","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"other","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"ownedMemory","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"ownedMemory","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"pHandle","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"pHandle","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"pointer","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"pointer","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"s","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"s","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"scheduler","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"scheduler","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"source","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"source","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"sourceArray","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"sourceArray","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"sourceBytesToCopy","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"sourceBytesToCopy","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"sourceIndex","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"sourceIndex","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"start","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"start","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"startIndex","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"startIndex","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"state","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"state","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"stateMachine","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"stateMachine","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"task","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"task","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"tasks","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"tasks","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"text","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"text","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"timeout","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"timeout","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"type","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"type","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"value","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"value","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"values","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"values","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}},{"a":2,"n":"view","is":true,"t":4,"rt":$n[0].ExceptionArgument,"sn":"view","box":function ($v) { return Bridge.box($v, System.ExceptionArgument, System.Enum.toStringFn(System.ExceptionArgument));}}]}; }, $n);
    $m("System.ExceptionResource", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Arg_ArrayPlusOffTooSmall","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_ArrayPlusOffTooSmall","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_BogusIComparer","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_BogusIComparer","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_LowerBoundsMustMatch","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_LowerBoundsMustMatch","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_MustBeType","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_MustBeType","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_Need1DArray","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_Need1DArray","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_Need2DArray","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_Need2DArray","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_Need3DArray","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_Need3DArray","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_NeedAtLeast1Rank","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_NeedAtLeast1Rank","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_NonZeroLowerBound","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_NonZeroLowerBound","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RankIndices","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RankIndices","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RankMultiDimNotSupported","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RankMultiDimNotSupported","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RanksAndBounds","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RanksAndBounds","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RegKeyDelHive","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RegKeyDelHive","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RegKeyStrLenBug","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RegKeyStrLenBug","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RegSetMismatchedKind","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RegSetMismatchedKind","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RegSetStrArrNull","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RegSetStrArrNull","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RegSubKeyAbsent","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RegSubKeyAbsent","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Arg_RegSubKeyValueAbsent","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Arg_RegSubKeyValueAbsent","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentException_OtherNotArrayOfCorrectLength","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentException_OtherNotArrayOfCorrectLength","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentNull_SafeHandle","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentNull_SafeHandle","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_BiggerThanCollection","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_BiggerThanCollection","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_Count","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_Count","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_EndIndexStartIndex","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_EndIndexStartIndex","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_Enum","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_Enum","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_HugeArrayNotSupported","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_HugeArrayNotSupported","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_Index","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_Index","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_InvalidThreshold","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_InvalidThreshold","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_ListInsert","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_ListInsert","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_NeedNonNegNum","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_NeedNonNegNum","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ArgumentOutOfRange_SmallCapacity","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ArgumentOutOfRange_SmallCapacity","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_AddingDuplicate","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_AddingDuplicate","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_ImplementIComparable","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_ImplementIComparable","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidArgumentForComparison","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidArgumentForComparison","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidArrayType","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidArrayType","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidOffLen","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidOffLen","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidRegistryKeyPermissionCheck","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidRegistryKeyPermissionCheck","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidRegistryOptionsCheck","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidRegistryOptionsCheck","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidRegistryViewCheck","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidRegistryViewCheck","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_InvalidType","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_InvalidType","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Argument_ItemNotExist","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Argument_ItemNotExist","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"AsyncMethodBuilder_InstanceNotInitialized","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"AsyncMethodBuilder_InstanceNotInitialized","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentCollection_SyncRoot_NotSupported","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentCollection_SyncRoot_NotSupported","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_ArrayIncorrectType","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_ArrayIncorrectType","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_ArrayNotLargeEnough","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_ArrayNotLargeEnough","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_CapacityMustNotBeNegative","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_CapacityMustNotBeNegative","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_ConcurrencyLevelMustBePositive","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_ConcurrencyLevelMustBePositive","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_IndexIsNegative","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_IndexIsNegative","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_ItemKeyIsNull","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_ItemKeyIsNull","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_KeyAlreadyExisted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_KeyAlreadyExisted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_TypeOfKeyIncorrect","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_TypeOfKeyIncorrect","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ConcurrentDictionary_TypeOfValueIncorrect","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ConcurrentDictionary_TypeOfValueIncorrect","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_CannotRemoveFromStackOrQueue","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_CannotRemoveFromStackOrQueue","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_EmptyQueue","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_EmptyQueue","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_EmptyStack","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_EmptyStack","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_EnumEnded","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_EnumEnded","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_EnumFailedVersion","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_EnumFailedVersion","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_EnumNotStarted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_EnumNotStarted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_EnumOpCantHappen","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_EnumOpCantHappen","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_HandleIsNotInitialized","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_HandleIsNotInitialized","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_IComparerFailed","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_IComparerFailed","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_NoValue","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_NoValue","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_NullArray","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_NullArray","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_RegRemoveSubKey","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_RegRemoveSubKey","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"InvalidOperation_WrongAsyncResultOrEndCalledMultiple","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"InvalidOperation_WrongAsyncResultOrEndCalledMultiple","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"MemoryDisposed","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"MemoryDisposed","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Memory_OutstandingReferences","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Memory_OutstandingReferences","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"NotSupported_FixedSizeCollection","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"NotSupported_FixedSizeCollection","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"NotSupported_InComparableType","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"NotSupported_InComparableType","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"NotSupported_KeyCollectionSet","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"NotSupported_KeyCollectionSet","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"NotSupported_ReadOnlyCollection","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"NotSupported_ReadOnlyCollection","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"NotSupported_SortedListNestedWrite","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"NotSupported_SortedListNestedWrite","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"NotSupported_ValueCollectionSet","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"NotSupported_ValueCollectionSet","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"ObjectDisposed_RegKeyClosed","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"ObjectDisposed_RegKeyClosed","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Rank_MultiDimNotSupported","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Rank_MultiDimNotSupported","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Security_RegistryPermission","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Security_RegistryPermission","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Serialization_InvalidOnDeser","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Serialization_InvalidOnDeser","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Serialization_MissingKeys","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Serialization_MissingKeys","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Serialization_NullKey","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Serialization_NullKey","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"TaskCompletionSourceT_TrySetException_NoExceptions","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"TaskCompletionSourceT_TrySetException_NoExceptions","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"TaskCompletionSourceT_TrySetException_NullException","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"TaskCompletionSourceT_TrySetException_NullException","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"TaskT_TransitionToFinal_AlreadyCompleted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"TaskT_TransitionToFinal_AlreadyCompleted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_ContinueWith_ESandLR","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_ContinueWith_ESandLR","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_ContinueWith_NotOnAnything","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_ContinueWith_NotOnAnything","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Delay_InvalidDelay","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Delay_InvalidDelay","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Delay_InvalidMillisecondsDelay","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Delay_InvalidMillisecondsDelay","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Dispose_NotCompleted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Dispose_NotCompleted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_MultiTaskContinuation_EmptyTaskList","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_MultiTaskContinuation_EmptyTaskList","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_MultiTaskContinuation_NullTask","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_MultiTaskContinuation_NullTask","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_RunSynchronously_AlreadyStarted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_RunSynchronously_AlreadyStarted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_RunSynchronously_Continuation","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_RunSynchronously_Continuation","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_RunSynchronously_Promise","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_RunSynchronously_Promise","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_RunSynchronously_TaskCompleted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_RunSynchronously_TaskCompleted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Start_AlreadyStarted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Start_AlreadyStarted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Start_ContinuationTask","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Start_ContinuationTask","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Start_Promise","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Start_Promise","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_Start_TaskCompleted","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_Start_TaskCompleted","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_ThrowIfDisposed","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_ThrowIfDisposed","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_WaitMulti_NullTask","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_WaitMulti_NullTask","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"Task_ctor_LRandSR","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"Task_ctor_LRandSR","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}},{"a":2,"n":"UnauthorizedAccess_RegistryNoWrite","is":true,"t":4,"rt":$n[0].ExceptionResource,"sn":"UnauthorizedAccess_RegistryNoWrite","box":function ($v) { return Bridge.box($v, System.ExceptionResource, System.Enum.toStringFn(System.ExceptionResource));}}]}; }, $n);
    $m("System.AggregateException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEnumerable$1(System.Exception)],"pi":[{"n":"innerExceptions","pt":$n[4].IEnumerable$1(System.Exception),"ps":0}],"def":function (innerExceptions) { return new System.AggregateException(null, innerExceptions); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Exception)],"pi":[{"n":"innerExceptions","ip":true,"pt":$n[0].Array.type(System.Exception),"ps":0}],"def":function (innerExceptions) { return new System.AggregateException(null, Array.prototype.slice.call((arguments, 0))); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[4].IEnumerable$1(System.Exception)],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerExceptions","pt":$n[4].IEnumerable$1(System.Exception),"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Array.type(System.Exception)],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerExceptions","ip":true,"pt":$n[0].Array.type(System.Exception),"ps":1}],"def":function (message, innerExceptions) { return new System.AggregateException(message, Array.prototype.slice.call((arguments, 1))); }},{"a":2,"n":"Flatten","t":8,"sn":"flatten","rt":$n[0].AggregateException},{"a":2,"n":"Handle","t":8,"pi":[{"n":"predicate","pt":Function,"ps":0}],"sn":"handle","rt":$n[0].Void,"p":[Function]},{"a":2,"n":"InnerExceptions","t":16,"rt":$n[5].ReadOnlyCollection$1(System.Exception),"g":{"a":2,"n":"get_InnerExceptions","t":8,"rt":$n[5].ReadOnlyCollection$1(System.Exception),"fg":"innerExceptions"},"fn":"innerExceptions"}]}; }, $n);
    $m("System.ArraySegment", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(System.Object)],"pi":[{"n":"array","pt":System.Array.type(System.Object),"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(System.Object),$n[0].Int32,$n[0].Int32],"pi":[{"n":"array","pt":System.Array.type(System.Object),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"Array","t":16,"rt":System.Array.type(System.Object),"g":{"a":2,"n":"get_Array","t":8,"tpc":0,"def":function () { return this.getArray(); },"rt":System.Array.type(System.Object)}},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return this.getCount(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Offset","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Offset","t":8,"tpc":0,"def":function () { return this.getOffset(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}}]}; }, $n);
    $m("System.BitConverter", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":1,"n":"CheckArguments","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"size","pt":$n[0].Int32,"ps":2}],"sn":"checkArguments","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":1,"n":"CreateLong","is":true,"t":8,"pi":[{"n":"low","pt":$n[0].Int32,"ps":0},{"n":"high","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (low, high) { return System.Int64([low, high]); },"rt":$n[0].Int64,"p":[$n[0].Int32,$n[0].Int32]},{"a":1,"n":"CreateULong","is":true,"t":8,"pi":[{"n":"low","pt":$n[0].Int32,"ps":0},{"n":"high","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (low, high) { return System.UInt64([low, high]); },"rt":$n[0].UInt64,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"DoubleToInt64Bits","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"doubleToInt64Bits","rt":$n[0].Int64,"p":[$n[0].Double]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"getBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Boolean]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"getBytes$1","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Char]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"getBytes$2","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Double]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int16,"ps":0}],"sn":"getBytes$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Int16]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"getBytes$4","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Int32]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"getBytes$5","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Int64]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"getBytes$6","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Single]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt16,"ps":0}],"sn":"getBytes$7","rt":$n[0].Array.type(System.Byte),"p":[$n[0].UInt16]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"getBytes$8","rt":$n[0].Array.type(System.Byte),"p":[$n[0].UInt32]},{"a":2,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"getBytes$9","rt":$n[0].Array.type(System.Byte),"p":[$n[0].UInt64]},{"a":1,"n":"GetHexValue","is":true,"t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"getHexValue","rt":$n[0].Char,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":1,"n":"GetIsLittleEndian","is":true,"t":8,"sn":"getIsLittleEndian","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"GetLongHigh","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"tpc":0,"def":function (value) { return value.value.high; },"rt":$n[0].Int32,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetLongLow","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"tpc":0,"def":function (value) { return value.value.low; },"rt":$n[0].Int32,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetView","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"getView","rt":$n[0].Object,"p":[$n[0].Int64]},{"a":1,"n":"GetViewBytes","is":true,"t":8,"pi":[{"n":"view","pt":$n[0].Object,"ps":0},{"n":"count","dv":-1,"o":true,"pt":$n[0].Int32,"ps":1},{"n":"startIndex","dv":0,"o":true,"pt":$n[0].Int32,"ps":2}],"sn":"getViewBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Object,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Int64BitsToDouble","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"int64BitsToDouble","rt":$n[0].Double,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":1,"n":"SetViewBytes","is":true,"t":8,"pi":[{"n":"view","pt":$n[0].Object,"ps":0},{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"count","dv":-1,"o":true,"pt":$n[0].Int32,"ps":2},{"n":"startIndex","dv":0,"o":true,"pt":$n[0].Int32,"ps":3}],"sn":"setViewBytes","rt":$n[0].Void,"p":[$n[0].Object,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ToBoolean","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toBoolean","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ToChar","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toChar","rt":$n[0].Char,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"ToDouble","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toDouble","rt":$n[0].Double,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"ToInt16","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toInt16","rt":$n[0].Int16,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"ToInt32","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toInt32","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ToInt64","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toInt64","rt":$n[0].Int64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"ToSingle","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toSingle","rt":$n[0].Single,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"ToString","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"ToString","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toString$1","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"ToString","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2}],"sn":"toString$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ToUInt16","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toUInt16","rt":$n[0].UInt16,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"ToUInt32","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toUInt32","rt":$n[0].UInt32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ToUInt64","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"toUInt64","rt":$n[0].UInt64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":1,"n":"View","is":true,"t":8,"pi":[{"n":"length","pt":$n[0].Int32,"ps":0}],"sn":"view","rt":$n[0].Object,"p":[$n[0].Int32]},{"a":1,"n":"Arg_ArrayPlusOffTooSmall","is":true,"t":4,"rt":$n[0].String,"sn":"arg_ArrayPlusOffTooSmall"},{"a":2,"n":"IsLittleEndian","is":true,"t":4,"rt":$n[0].Boolean,"sn":"isLittleEndian","ro":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.DateTime", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64],"pi":[{"n":"ticks","pt":$n[0].Int64,"ps":0}],"def":function (ticks) { return System.DateTime.create$2(ticks); }},{"a":1,"n":".ctor","t":1,"p":[System.Object],"pi":[{"n":"_","pt":System.Object,"ps":0}],"def":function (_) { return System.DateTime.getDefaultValue(); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64,$n[0].DateTimeKind],"pi":[{"n":"ticks","pt":$n[0].Int64,"ps":0},{"n":"kind","pt":$n[0].DateTimeKind,"ps":1}],"def":function (ticks, kind) { return System.DateTime.create$2(ticks, kind); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2}],"def":function (year, month, day) { return System.DateTime.create(year, month, day); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5}],"def":function (year, month, day, hour, minute, second) { return System.DateTime.create(year, month, day, hour, minute, second); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].DateTimeKind],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"kind","pt":$n[0].DateTimeKind,"ps":6}],"def":function (year, month, day, hour, minute, second, kind) { return System.DateTime.create(year, month, day, hour, minute, second, 0, kind); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"millisecond","pt":$n[0].Int32,"ps":6}],"def":function (year, month, day, hour, minute, second, millisecond) { return System.DateTime.create(year, month, day, hour, minute, second, millisecond); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].DateTimeKind],"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"millisecond","pt":$n[0].Int32,"ps":6},{"n":"kind","pt":$n[0].DateTimeKind,"ps":7}],"def":function (year, month, day, hour, minute, second, millisecond, kind) { return System.DateTime.create(year, month, day, hour, minute, second, millisecond, kind); }},{"a":2,"n":"Add","t":8,"pi":[{"n":"value","pt":$n[0].TimeSpan,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.add(this, value); },"rt":$n[0].DateTime,"p":[$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddDays","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addDays(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddHours","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addHours(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddMilliseconds","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addMilliseconds(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddMinutes","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addMinutes(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddMonths","t":8,"pi":[{"n":"months","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (months) { return System.DateTime.addMonths(this, months); },"rt":$n[0].DateTime,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddSeconds","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addSeconds(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddTicks","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addTicks(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"AddYears","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.addYears(this, value); },"rt":$n[0].DateTime,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].DateTime,"ps":0},{"n":"t2","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (t1, t2) { return Bridge.compare(t1, t2); },"rt":$n[0].Int32,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].DateTime,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DaysInMonth","is":true,"t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (year, month) { return System.DateTime.getDaysInMonth(year, month); },"rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].DateTime,"ps":0}],"tpc":0,"def":function (other) { return Bridge.equalsT(this, other); },"rt":$n[0].Boolean,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].DateTime,"ps":0},{"n":"t2","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (t1, t2) { return Bridge.equalsT(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"FromFileTime","is":true,"t":8,"pi":[{"n":"fileTime","pt":$n[0].Int64,"ps":0}],"tpc":0,"def":function (fileTime) { return System.DateTime.FromFileTime(fileTime); },"rt":$n[0].DateTime,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"FromFileTimeUtc","is":true,"t":8,"pi":[{"n":"fileTime","pt":$n[0].Int64,"ps":0}],"tpc":0,"def":function (fileTime) { return System.DateTime.FromFileTimeUtc(fileTime); },"rt":$n[0].DateTime,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"IsDaylightSavingTime","t":8,"tpc":0,"def":function () { return System.DateTime.isDaylightSavingTime(this); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLeapYear","is":true,"t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (year) { return System.DateTime.getIsLeapYear(year); },"rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.DateTime.parse(s); },"rt":$n[0].DateTime,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (s, provider) { return System.DateTime.parse(s, provider); },"rt":$n[0].DateTime,"p":[$n[0].String,$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"ParseExact","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"provider","pt":$n[0].IFormatProvider,"ps":2}],"tpc":0,"def":function (s, format, provider) { return System.DateTime.parseExact(s, format, provider); },"rt":$n[0].DateTime,"p":[$n[0].String,$n[0].String,$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"SpecifyKind","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].DateTime,"ps":0},{"n":"kind","pt":$n[0].DateTimeKind,"ps":1}],"tpc":0,"def":function (value, kind) { return System.DateTime.specifyKind(value, kind); },"rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].DateTimeKind],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"Subtract","t":8,"pi":[{"n":"value","pt":$n[0].DateTime,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.subdd(this, value); },"rt":$n[0].TimeSpan,"p":[$n[0].DateTime]},{"a":2,"n":"Subtract","t":8,"pi":[{"n":"value","pt":$n[0].TimeSpan,"ps":0}],"tpc":0,"def":function (value) { return System.DateTime.subtract(this, value); },"rt":$n[0].DateTime,"p":[$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"ToFileTime","t":8,"tpc":0,"def":function () { return System.DateTime.ToFileTime(this); },"rt":$n[0].Int64},{"a":2,"n":"ToFileTimeUtc","t":8,"tpc":0,"def":function () { return System.DateTime.ToFileTimeUtc(this); },"rt":$n[0].Int64},{"a":2,"n":"ToLocalTime","t":8,"tpc":0,"def":function () { return System.DateTime.toLocalTime(this); },"rt":$n[0].DateTime,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"ToLocalTime","t":8,"pi":[{"n":"throwOnOverflow","pt":$n[0].Boolean,"ps":0}],"tpc":0,"def":function (throwOnOverflow) { return System.DateTime.toLocalTime(this, throwOnOverflow); },"rt":$n[0].DateTime,"p":[$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"ToShortDateString","t":8,"tpc":0,"def":function () { return System.DateTime.format(this, "d"); },"rt":$n[0].String},{"a":2,"n":"ToShortTimeString","t":8,"tpc":0,"def":function () { return System.DateTime.format(this, "t"); },"rt":$n[0].String},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return System.DateTime.format(this); },"rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.DateTime.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.DateTime.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"ToUniversalTime","t":8,"tpc":0,"def":function () { return System.DateTime.toUniversalTime(this); },"rt":$n[0].DateTime,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (s, result) { return System.DateTime.tryParse(s, null, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParseExact","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"provider","pt":$n[0].IFormatProvider,"ps":2},{"n":"result","out":true,"pt":$n[0].DateTime,"ps":3}],"tpc":0,"def":function (s, format, provider, result) { return System.DateTime.tryParseExact(s, format, provider, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[0].IFormatProvider,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].DateTime,"ps":0},{"n":"t","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (d, t) { return System.DateTime.adddt(d, t); },"rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return Bridge.equals(a, b); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return System.DateTime.gt(a, b); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return System.DateTime.gte(a, b); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return !Bridge.equals(a, b); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return System.DateTime.lt(a, b); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return System.DateTime.lte(a, b); },"rt":$n[0].Boolean,"p":[$n[0].DateTime,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].DateTime,"ps":0},{"n":"b","pt":$n[0].DateTime,"ps":1}],"tpc":0,"def":function (a, b) { return System.DateTime.subdd(a, b); },"rt":$n[0].TimeSpan,"p":[$n[0].DateTime,$n[0].DateTime]},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].DateTime,"ps":0},{"n":"t","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (d, t) { return System.DateTime.subdt(d, t); },"rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"Date","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_Date","t":8,"tpc":0,"def":function () { return System.DateTime.getDate(this); },"rt":$n[0].DateTime,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}},{"a":2,"n":"Day","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Day","t":8,"tpc":0,"def":function () { return System.DateTime.getDay(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"DayOfWeek","t":16,"rt":$n[0].DayOfWeek,"g":{"a":2,"n":"get_DayOfWeek","t":8,"tpc":0,"def":function () { return System.DateTime.getDayOfWeek(this); },"rt":$n[0].DayOfWeek,"box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}}},{"a":2,"n":"DayOfYear","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_DayOfYear","t":8,"tpc":0,"def":function () { return System.DateTime.getDayOfYear(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Hour","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Hour","t":8,"tpc":0,"def":function () { return System.DateTime.getHour(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Kind","t":16,"rt":$n[0].DateTimeKind,"g":{"a":2,"n":"get_Kind","t":8,"tpc":0,"def":function () { return System.DateTime.getKind(this); },"rt":$n[0].DateTimeKind,"box":function ($v) { return Bridge.box($v, System.DateTimeKind, System.Enum.toStringFn(System.DateTimeKind));}}},{"a":2,"n":"Millisecond","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Millisecond","t":8,"tpc":0,"def":function () { return System.DateTime.getMillisecond(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Minute","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Minute","t":8,"tpc":0,"def":function () { return System.DateTime.getMinute(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Month","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Month","t":8,"tpc":0,"def":function () { return System.DateTime.getMonth(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Now","is":true,"t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_Now","is":true,"t":8,"tpc":0,"def":function () { return System.DateTime.getNow(); },"rt":$n[0].DateTime,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}},{"a":2,"n":"Second","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Second","t":8,"tpc":0,"def":function () { return System.DateTime.getSecond(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Ticks","t":16,"rt":$n[0].Int64,"g":{"a":2,"n":"get_Ticks","t":8,"tpc":0,"def":function () { return System.DateTime.getTicks(this); },"rt":$n[0].Int64}},{"a":2,"n":"TimeOfDay","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_TimeOfDay","t":8,"tpc":0,"def":function () { return System.DateTime.getTimeOfDay(this); },"rt":$n[0].TimeSpan}},{"a":2,"n":"Today","is":true,"t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_Today","is":true,"t":8,"tpc":0,"def":function () { return System.DateTime.getToday(); },"rt":$n[0].DateTime,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}},{"a":2,"n":"UtcNow","is":true,"t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_UtcNow","is":true,"t":8,"tpc":0,"def":function () { return System.DateTime.getUtcNow(); },"rt":$n[0].DateTime,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}},{"a":2,"n":"Year","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Year","t":8,"tpc":0,"def":function () { return System.DateTime.getYear(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":4,"n":"DaysTo1970","is":true,"t":4,"rt":$n[0].Int32,"sn":"DaysTo1970","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"MaxTicks","is":true,"t":4,"rt":$n[0].Int64,"sn":"MaxTicks"},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].DateTime,"sn":"maxValue","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":4,"n":"MinTicks","is":true,"t":4,"rt":$n[0].Int64,"sn":"MinTicks"},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].DateTime,"sn":"minValue","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"TicksPerDay","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerDay"}]}; }, $n);
    $m("System.Guid", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte)],"pi":[{"n":"b","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"uuid","pt":$n[0].String,"ps":0}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int16,$n[0].Int16,$n[0].Array.type(System.Byte)],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int16,"ps":1},{"n":"c","pt":$n[0].Int16,"ps":2},{"n":"d","pt":$n[0].Array.type(System.Byte),"ps":3}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int16,$n[0].Int16,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte],"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int16,"ps":1},{"n":"c","pt":$n[0].Int16,"ps":2},{"n":"d","pt":$n[0].Byte,"ps":3},{"n":"e","pt":$n[0].Byte,"ps":4},{"n":"f","pt":$n[0].Byte,"ps":5},{"n":"g","pt":$n[0].Byte,"ps":6},{"n":"h","pt":$n[0].Byte,"ps":7},{"n":"i","pt":$n[0].Byte,"ps":8},{"n":"j","pt":$n[0].Byte,"ps":9},{"n":"k","pt":$n[0].Byte,"ps":10}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt32,$n[0].UInt16,$n[0].UInt16,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte,$n[0].Byte],"pi":[{"n":"a","pt":$n[0].UInt32,"ps":0},{"n":"b","pt":$n[0].UInt16,"ps":1},{"n":"c","pt":$n[0].UInt16,"ps":2},{"n":"d","pt":$n[0].Byte,"ps":3},{"n":"e","pt":$n[0].Byte,"ps":4},{"n":"f","pt":$n[0].Byte,"ps":5},{"n":"g","pt":$n[0].Byte,"ps":6},{"n":"h","pt":$n[0].Byte,"ps":7},{"n":"i","pt":$n[0].Byte,"ps":8},{"n":"j","pt":$n[0].Byte,"ps":9},{"n":"k","pt":$n[0].Byte,"ps":10}],"sn":"$ctor5"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].Guid,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].Guid],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[0].Guid,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].Guid],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"Format","rt":$n[0].String,"p":[$n[0].String]},{"a":1,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"sn":"FromString","rt":$n[0].Void,"p":[$n[0].String]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MakeBinary","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Byte,"ps":0}],"sn":"MakeBinary","rt":$n[0].String,"p":[$n[0].Byte]},{"a":2,"n":"NewGuid","is":true,"t":8,"sn":"NewGuid","rt":$n[0].Guid},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"Parse","rt":$n[0].Guid,"p":[$n[0].String]},{"a":2,"n":"ParseExact","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1}],"sn":"ParseExact","rt":$n[0].Guid,"p":[$n[0].String,$n[0].String]},{"a":1,"n":"ParseInternal","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"check","pt":$n[0].Boolean,"ps":2}],"sn":"ParseInternal","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ToByteArray","t":8,"sn":"ToByteArray","rt":$n[0].Array.type(System.Byte)},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"ToString","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Guid,"ps":1}],"sn":"TryParse","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Guid],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParseExact","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"result","out":true,"pt":$n[0].Guid,"ps":2}],"sn":"TryParseExact","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[0].Guid],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Guid,"ps":0},{"n":"b","pt":$n[0].Guid,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[0].Guid,$n[0].Guid],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Guid,"ps":0},{"n":"b","pt":$n[0].Guid,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[0].Guid,$n[0].Guid],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"toJSON","t":8,"sn":"toJSON","rt":$n[0].String},{"a":2,"n":"Empty","is":true,"t":4,"rt":$n[0].Guid,"sn":"Empty","ro":true},{"a":1,"n":"NonFormat","is":true,"t":4,"rt":$n[6].Regex,"sn":"NonFormat","ro":true},{"a":1,"n":"Replace","is":true,"t":4,"rt":$n[6].Regex,"sn":"Replace","ro":true},{"a":1,"n":"Rnd","is":true,"t":4,"rt":$n[0].Random,"sn":"Rnd","ro":true},{"a":1,"n":"Split","is":true,"t":4,"rt":$n[6].Regex,"sn":"Split","ro":true},{"a":1,"n":"Valid","is":true,"t":4,"rt":$n[6].Regex,"sn":"Valid","ro":true},{"a":1,"n":"_a","t":4,"rt":$n[0].Int32,"sn":"_a","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_b","t":4,"rt":$n[0].Int16,"sn":"_b","box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":1,"n":"_c","t":4,"rt":$n[0].Int16,"sn":"_c","box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":1,"n":"_d","t":4,"rt":$n[0].Byte,"sn":"_d","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_e","t":4,"rt":$n[0].Byte,"sn":"_e","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_f","t":4,"rt":$n[0].Byte,"sn":"_f","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_g","t":4,"rt":$n[0].Byte,"sn":"_g","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_h","t":4,"rt":$n[0].Byte,"sn":"_h","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_i","t":4,"rt":$n[0].Byte,"sn":"_i","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_j","t":4,"rt":$n[0].Byte,"sn":"_j","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_k","t":4,"rt":$n[0].Byte,"sn":"_k","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"error1","is":true,"t":4,"rt":$n[0].String,"sn":"error1"}]}; }, $n);
    $m("System.IAsyncResult", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"AsyncState","t":16,"rt":$n[0].Object,"g":{"ab":true,"a":2,"n":"get_AsyncState","t":8,"rt":$n[0].Object,"fg":"System$IAsyncResult$AsyncState"},"fn":"System$IAsyncResult$AsyncState"},{"ab":true,"a":2,"n":"CompletedSynchronously","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_CompletedSynchronously","t":8,"rt":$n[0].Boolean,"fg":"System$IAsyncResult$CompletedSynchronously","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"System$IAsyncResult$CompletedSynchronously"},{"ab":true,"a":2,"n":"IsCompleted","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsCompleted","t":8,"rt":$n[0].Boolean,"fg":"System$IAsyncResult$IsCompleted","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"System$IAsyncResult$IsCompleted"}]}; }, $n);
    $m("System.DateTimeKind", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Local","is":true,"t":4,"rt":$n[0].DateTimeKind,"sn":"Local","box":function ($v) { return Bridge.box($v, System.DateTimeKind, System.Enum.toStringFn(System.DateTimeKind));}},{"a":2,"n":"Unspecified","is":true,"t":4,"rt":$n[0].DateTimeKind,"sn":"Unspecified","box":function ($v) { return Bridge.box($v, System.DateTimeKind, System.Enum.toStringFn(System.DateTimeKind));}},{"a":2,"n":"Utc","is":true,"t":4,"rt":$n[0].DateTimeKind,"sn":"Utc","box":function ($v) { return Bridge.box($v, System.DateTimeKind, System.Enum.toStringFn(System.DateTimeKind));}}]}; }, $n);
    $m("System.NotImplementedException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.NotSupportedException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Random", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"seed","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"a":1,"n":"GetSampleForLargeRange","t":8,"sn":"GetSampleForLargeRange","rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":1,"n":"InternalSample","t":8,"sn":"InternalSample","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Next","t":8,"sn":"Next","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Next","t":8,"pi":[{"n":"maxValue","pt":$n[0].Int32,"ps":0}],"sn":"Next$1","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Next","t":8,"pi":[{"n":"minValue","pt":$n[0].Int32,"ps":0},{"n":"maxValue","pt":$n[0].Int32,"ps":1}],"sn":"Next$2","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"NextBytes","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"NextBytes","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte)]},{"v":true,"a":2,"n":"NextDouble","t":8,"sn":"NextDouble","rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"v":true,"a":3,"n":"Sample","t":8,"sn":"Sample","rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":1,"n":"MBIG","is":true,"t":4,"rt":$n[0].Int32,"sn":"MBIG","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MSEED","is":true,"t":4,"rt":$n[0].Int32,"sn":"MSEED","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MZ","is":true,"t":4,"rt":$n[0].Int32,"sn":"MZ","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"SeedArray","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"SeedArray"},{"a":1,"n":"inext","t":4,"rt":$n[0].Int32,"sn":"inext","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"inextp","t":4,"rt":$n[0].Int32,"sn":"inextp","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Console", function () { return {"att":1048833,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Clear","is":true,"t":8,"sn":"Clear","rt":$n[0].Void},{"a":2,"n":"Read","is":true,"t":8,"tpc":0,"def":function () { return prompt(); },"rt":$n[0].String},{"a":2,"n":"ReadLine","is":true,"t":8,"tpc":0,"def":function () { return prompt(); },"rt":$n[0].String},{"a":2,"n":"ReadLine","is":true,"t":8,"pi":[{"n":"text","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (text) { return prompt(text); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ReadLine","is":true,"t":8,"pi":[{"n":"text","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (text, value) { return prompt(text, value); },"rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":1,"n":"TransformChars","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"all","pt":$n[0].Int32,"ps":1},{"n":"index","pt":$n[0].Int32,"ps":2},{"n":"count","pt":$n[0].Int32,"ps":3}],"sn":"TransformChars","rt":$n[0].String,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(System.Boolean.toString(value)); },"rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(String.fromCharCode(value)); },"rt":$n[0].Void,"p":[$n[0].Char]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (buffer) { return System.Console.Write(System.Console.TransformChars(buffer, 1)); },"rt":$n[0].Void,"p":[$n[0].Array.type(System.Char)]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(value.toString("G")); },"rt":$n[0].Void,"p":[$n[0].Decimal]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.Console.Write(System.Double.format(value)); },"rt":$n[0].Void,"p":[$n[0].Double]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Int64]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Single]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].String]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].UInt32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].UInt64]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1}],"tpc":0,"def":function (format, arg0) { return System.Console.Write(System.String.format(format, arg0)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"tpc":0,"def":function (format, arg) { return System.Console.Write(System.String.format(format, arg)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (buffer, index, count) { return System.Console.Write(System.Console.TransformChars(buffer, 0, index, count)); },"rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2}],"tpc":0,"def":function (format, arg0, arg1) { return System.Console.Write(System.String.format(format, arg0, arg1)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3}],"tpc":0,"def":function (format, arg0, arg1, arg2) { return System.Console.Write(System.String.format(format, arg0, arg1, arg2)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"Write","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3},{"n":"arg3","pt":$n[0].Object,"ps":4}],"tpc":0,"def":function (format, arg0, arg1, arg2, arg3) { return System.Console.Write(System.String.format(format, [arg0, arg1, arg2, arg3])); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"sn":"WriteLine","rt":$n[0].Void},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(System.Boolean.toString(value)); },"rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(String.fromCharCode(value)); },"rt":$n[0].Void,"p":[$n[0].Char]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (buffer) { return System.Console.WriteLine(System.Console.TransformChars(buffer, 1)); },"rt":$n[0].Void,"p":[$n[0].Array.type(System.Char)]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(value.toString("G")); },"rt":$n[0].Void,"p":[$n[0].Decimal]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(System.Double.format(value)); },"rt":$n[0].Void,"p":[$n[0].Double]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"WriteLine","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"WriteLine","rt":$n[0].Void,"p":[$n[0].Int64]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Nullable$1(System.Decimal),"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(value && value.toString("G")); },"rt":$n[0].Void,"p":[$n[0].Nullable$1(System.Decimal)]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"WriteLine","rt":$n[0].Void,"p":[$n[0].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(System.Single.format(value)); },"rt":$n[0].Void,"p":[$n[0].Single]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"WriteLine","rt":$n[0].Void,"p":[$n[0].String]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"tpc":0,"def":function (value) { return System.Console.WriteLine(Bridge.getTypeName(value)); },"rt":$n[0].Void,"p":[Function]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"WriteLine","rt":$n[0].Void,"p":[$n[0].UInt32]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"WriteLine","rt":$n[0].Void,"p":[$n[0].UInt64]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1}],"tpc":0,"def":function (format, arg0) { return System.Console.WriteLine(System.String.format(format, arg0)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"tpc":0,"def":function (format, arg) { return System.Console.WriteLine(System.String.format(format, arg)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (buffer, index, count) { return System.Console.WriteLine(System.Console.TransformChars(buffer, 0, index, count)); },"rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2}],"tpc":0,"def":function (format, arg0, arg1) { return System.Console.WriteLine(System.String.format(format, arg0, arg1)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3}],"tpc":0,"def":function (format, arg0, arg1, arg2) { return System.Console.WriteLine(System.String.format(format, arg0, arg1, arg2)); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"WriteLine","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3},{"n":"arg3","pt":$n[0].Object,"ps":4}],"tpc":0,"def":function (format, arg0, arg1, arg2, arg3) { return System.Console.WriteLine(System.String.format(format, [arg0, arg1, arg2, arg3])); },"rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object,$n[0].Object]}]}; }, $n);
    $m("System.Enum", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"target","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (target) { return Bridge.compare(this, target); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Enum.equals(this, other, Bridge.getType(this)); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1},{"n":"format","pt":$n[0].String,"ps":2}],"sn":"format","rt":$n[0].String,"p":[Function,$n[0].Object,$n[0].String]},{"a":2,"n":"GetName","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"sn":"getName","rt":$n[0].String,"p":[Function,$n[0].Object]},{"a":2,"n":"GetNames","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0}],"sn":"getNames","rt":$n[0].Array.type(System.String),"p":[Function]},{"a":2,"n":"GetValues","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0}],"sn":"getValues","rt":Array,"p":[Function]},{"a":2,"n":"HasFlag","t":8,"pi":[{"n":"flag","pt":$n[0].Enum,"ps":0}],"tpc":0,"def":function (flag) { return System.Enum.hasFlag(this, flag); },"rt":$n[0].Boolean,"p":[$n[0].Enum],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsDefined","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"sn":"isDefined","rt":$n[0].Boolean,"p":[Function,$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0},{"n":"value","pt":$n[0].String,"ps":1}],"sn":"parse","rt":$n[0].Object,"p":[Function,$n[0].String]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0},{"n":"value","pt":$n[0].String,"ps":1},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":2}],"sn":"parse","rt":$n[0].Object,"p":[Function,$n[0].String,$n[0].Boolean]},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return System.Enum.toString(Bridge.getType(this), this); },"rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Enum.format(Bridge.getType(this), this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, formatProvider) { return System.Enum.format(Bridge.getType(this), this, format); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"ToString","is":true,"t":8,"pi":[{"n":"enumType","pt":Function,"ps":0},{"n":"value","pt":$n[0].Enum,"ps":1}],"sn":"toString","rt":$n[0].String,"p":[Function,$n[0].Enum]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":System.Object,"ps":1}],"tpc":1,"def":function (TEnum, value, result) { return System.Enum.tryParse(TEnum, value, result); },"rt":$n[0].Boolean,"p":[$n[0].String,System.Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":1},{"n":"result","out":true,"pt":System.Object,"ps":2}],"tpc":1,"def":function (TEnum, value, ignoreCase, result) { return System.Enum.tryParse(TEnum, value, result, ignoreCase); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Boolean,System.Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Environment", function () { return {"nested":[System.Object,System.Object],"att":385,"a":2,"s":true,"m":[{"n":".cctor","t":1,"sn":"ctor","sm":true},{"a":2,"n":"Exit","is":true,"t":8,"pi":[{"n":"exitCode","pt":$n[0].Int32,"ps":0}],"sn":"Exit","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"ExpandEnvironmentVariables","is":true,"t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"ExpandEnvironmentVariables","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"FailFast","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"FailFast","rt":$n[0].Void,"p":[$n[0].String]},{"a":2,"n":"FailFast","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"exception","pt":$n[0].Exception,"ps":1}],"sn":"FailFast$1","rt":$n[0].Void,"p":[$n[0].String,$n[0].Exception]},{"a":2,"n":"GetCommandLineArgs","is":true,"t":8,"sn":"GetCommandLineArgs","rt":$n[0].Array.type(System.String)},{"a":2,"n":"GetEnvironmentVariable","is":true,"t":8,"pi":[{"n":"variable","pt":$n[0].String,"ps":0}],"sn":"GetEnvironmentVariable","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"GetEnvironmentVariable","is":true,"t":8,"pi":[{"n":"variable","pt":$n[0].String,"ps":0},{"n":"target","pt":$n[0].EnvironmentVariableTarget,"ps":1}],"sn":"GetEnvironmentVariable$1","rt":$n[0].String,"p":[$n[0].String,$n[0].EnvironmentVariableTarget]},{"a":2,"n":"GetEnvironmentVariables","is":true,"t":8,"sn":"GetEnvironmentVariables","rt":$n[7].IDictionary},{"a":2,"n":"GetEnvironmentVariables","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].EnvironmentVariableTarget,"ps":0}],"sn":"GetEnvironmentVariables$1","rt":$n[7].IDictionary,"p":[$n[0].EnvironmentVariableTarget]},{"a":2,"n":"GetFolderPath","is":true,"t":8,"pi":[{"n":"folder","pt":System.Object,"ps":0}],"tpc":0,"def":function (folder) { return ""; },"rt":$n[0].String,"p":[System.Object]},{"a":2,"n":"GetFolderPath","is":true,"t":8,"pi":[{"n":"folder","pt":System.Object,"ps":0},{"n":"option","pt":System.Object,"ps":1}],"tpc":0,"def":function (folder, option) { return ""; },"rt":$n[0].String,"p":[System.Object,System.Object]},{"a":2,"n":"GetLogicalDrives","is":true,"t":8,"sn":"GetLogicalDrives","rt":$n[0].Array.type(System.String)},{"a":4,"n":"GetResourceString","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].String,"ps":0}],"sn":"GetResourceString","rt":$n[0].String,"p":[$n[0].String]},{"a":4,"n":"GetResourceString","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].String,"ps":0},{"n":"values","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"GetResourceString$1","rt":$n[0].String,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":1,"n":"PatchDictionary","is":true,"t":8,"pi":[{"n":"d","pt":$n[4].Dictionary$2(System.String,System.String),"ps":0}],"sn":"PatchDictionary","rt":$n[4].Dictionary$2(System.String,System.String),"p":[$n[4].Dictionary$2(System.String,System.String)]},{"a":2,"n":"SetEnvironmentVariable","is":true,"t":8,"pi":[{"n":"variable","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].String,"ps":1}],"sn":"SetEnvironmentVariable","rt":$n[0].Void,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"SetEnvironmentVariable","is":true,"t":8,"pi":[{"n":"variable","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].String,"ps":1},{"n":"target","pt":$n[0].EnvironmentVariableTarget,"ps":2}],"sn":"SetEnvironmentVariable$1","rt":$n[0].Void,"p":[$n[0].String,$n[0].String,$n[0].EnvironmentVariableTarget]},{"a":2,"n":"CommandLine","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CommandLine","t":8,"rt":$n[0].String,"fg":"CommandLine","is":true},"fn":"CommandLine"},{"a":2,"n":"CurrentDirectory","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CurrentDirectory","t":8,"rt":$n[0].String,"fg":"CurrentDirectory","is":true},"s":{"a":2,"n":"set_CurrentDirectory","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"CurrentDirectory","is":true},"fn":"CurrentDirectory"},{"a":2,"n":"CurrentManagedThreadId","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CurrentManagedThreadId","is":true,"t":8,"tpc":0,"def":function () { return 0; },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"ExitCode","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_ExitCode","t":8,"rt":$n[0].Int32,"fg":"ExitCode","is":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_ExitCode","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"ExitCode","is":true},"fn":"ExitCode"},{"a":1,"n":"Global","is":true,"t":16,"rt":System.Object,"g":{"a":1,"n":"get_Global","is":true,"t":8,"tpc":0,"def":function () { return Bridge.global; },"rt":System.Object}},{"a":2,"n":"HasShutdownStarted","is":true,"t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_HasShutdownStarted","is":true,"t":8,"tpc":0,"def":function () { return false; },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"Is64BitOperatingSystem","is":true,"t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_Is64BitOperatingSystem","t":8,"rt":$n[0].Boolean,"fg":"Is64BitOperatingSystem","is":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"Is64BitOperatingSystem"},{"a":2,"n":"Is64BitProcess","is":true,"t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_Is64BitProcess","is":true,"t":8,"tpc":0,"def":function () { return false; },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":1,"n":"Location","is":true,"t":16,"rt":System.Object,"g":{"a":1,"n":"get_Location","t":8,"rt":System.Object,"fg":"Location","is":true},"fn":"Location"},{"a":2,"n":"MachineName","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_MachineName","is":true,"t":8,"tpc":0,"def":function () { return ""; },"rt":$n[0].String}},{"a":2,"n":"NewLine","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NewLine","is":true,"t":8,"tpc":0,"def":function () { return "\n"; },"rt":$n[0].String}},{"a":2,"n":"OSVersion","is":true,"t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_OSVersion","is":true,"t":8,"tpc":0,"def":function () { return null; },"rt":$n[0].Object}},{"a":2,"n":"ProcessorCount","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_ProcessorCount","t":8,"rt":$n[0].Int32,"fg":"ProcessorCount","is":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"ProcessorCount"},{"a":2,"n":"StackTrace","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_StackTrace","t":8,"rt":$n[0].String,"fg":"StackTrace","is":true},"fn":"StackTrace"},{"a":2,"n":"SystemDirectory","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_SystemDirectory","is":true,"t":8,"tpc":0,"def":function () { return ""; },"rt":$n[0].String}},{"a":2,"n":"SystemPageSize","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_SystemPageSize","is":true,"t":8,"tpc":0,"def":function () { return 1; },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"TickCount","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_TickCount","is":true,"t":8,"tpc":0,"def":function () { return Date.now(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"UserDomainName","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_UserDomainName","is":true,"t":8,"tpc":0,"def":function () { return ""; },"rt":$n[0].String}},{"a":2,"n":"UserInteractive","is":true,"t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_UserInteractive","is":true,"t":8,"tpc":0,"def":function () { return true; },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"UserName","is":true,"t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_UserName","is":true,"t":8,"tpc":0,"def":function () { return ""; },"rt":$n[0].String}},{"a":2,"n":"Version","is":true,"t":16,"rt":$n[0].Version,"g":{"a":2,"n":"get_Version","t":8,"rt":$n[0].Version,"fg":"Version","is":true},"fn":"Version"},{"a":2,"n":"WorkingSet","is":true,"t":16,"rt":$n[0].Int64,"g":{"a":2,"n":"get_WorkingSet","is":true,"t":8,"tpc":0,"def":function () { return System.Int64(0); },"rt":$n[0].Int64}},{"a":1,"n":"Variables","is":true,"t":4,"rt":$n[4].Dictionary$2(System.String,System.String),"sn":"Variables"},{"a":1,"n":"__Property__Initializer__ExitCode","is":true,"t":4,"rt":$n[0].Int32,"sn":"__Property__Initializer__ExitCode","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IDisposable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Dispose","t":8,"sn":"System$IDisposable$Dispose","rt":$n[0].Void}]}; }, $n);
    $m("System.Uri", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"uriString","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"uri1","pt":$n[0].Uri,"ps":0},{"n":"uri2","pt":$n[0].Uri,"ps":1}],"tpc":0,"def":function (uri1, uri2) { return System.Uri.equals(uri1, uri2); },"rt":$n[0].Boolean,"p":[$n[0].Uri,$n[0].Uri],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"uri1","pt":$n[0].Uri,"ps":0},{"n":"uri2","pt":$n[0].Uri,"ps":1}],"tpc":0,"def":function (uri1, uri2) { return System.Uri.notEquals(uri1, uri2); },"rt":$n[0].Boolean,"p":[$n[0].Uri,$n[0].Uri],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"AbsoluteUri","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_AbsoluteUri","t":8,"tpc":0,"def":function () { return this.getAbsoluteUri(); },"rt":$n[0].String}}]}; }, $n);
    $m("System.Boolean", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[System.Object],"pi":[{"n":"_","pt":System.Object,"ps":0}],"def":function (_) { return false; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Boolean,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Boolean,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.Boolean.parse(value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return System.Boolean.toString(this); },"rt":$n[0].String},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Boolean,"ps":1}],"tpc":0,"def":function (value, result) { return System.Boolean.tryParse(value, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"False","is":true,"t":4,"rt":$n[0].Int32,"sn":"False","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FalseString","is":true,"t":4,"rt":$n[0].String,"sn":"falseString","ro":true},{"a":4,"n":"True","is":true,"t":4,"rt":$n[0].Int32,"sn":"True","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"TrueString","is":true,"t":4,"rt":$n[0].String,"sn":"trueString","ro":true}]}; }, $n);
    $m("System.Char", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (value) { return Bridge.compare(this, value); },"rt":$n[0].Int32,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (value) { return Bridge.compare(this, value); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (obj) { return this === obj; },"rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return System.Char.equals(this, obj); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Char.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Char.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"tpc":0,"def":function () { return System.Char.getHashCode(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsControl","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isControl","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsControl","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isControl((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsDigit","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isDigit","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsDigit","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isDigit((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsHighSurrogate","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isHighSurrogate","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsHighSurrogate","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isHighSurrogate((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLetter","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isLetter","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLetter","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isLetter((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLetterOrDigit","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (c) { return (System.Char.isDigit(c) || System.Char.isLetter(c)); },"rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLetterOrDigit","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return (System.Char.isDigit((s).charCodeAt(index)) || System.Char.isLetter((s).charCodeAt(index))); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLowSurrogate","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isLowSurrogate","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLowSurrogate","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isLowSurrogate((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsLower","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (s) { return Bridge.isLower(s); },"rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNumber","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isNumber","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNumber","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isNumber((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsPunctuation","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isPunctuation","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsPunctuation","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isPunctuation((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSeparator","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isSeparator","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSeparator","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isSeparator((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSurrogate","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isSurrogate","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSurrogate","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isSurrogate((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSurrogatePair","is":true,"t":8,"pi":[{"n":"highSurrogate","pt":$n[0].Char,"ps":0},{"n":"lowSurrogate","pt":$n[0].Char,"ps":1}],"tpc":0,"def":function (highSurrogate, lowSurrogate) { return (System.Char.isHighSurrogate(highSurrogate) && System.Char.isLowSurrogate(lowSurrogate)); },"rt":$n[0].Boolean,"p":[$n[0].Char,$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSurrogatePair","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return (System.Char.isHighSurrogate((s).charCodeAt(index)) && System.Char.isLowSurrogate((s).charCodeAt(index + 1))); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSymbol","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"isSymbol","rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSymbol","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isSymbol((s).charCodeAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsUpper","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (s) { return Bridge.isUpper(s); },"rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsUpper","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"isUpper","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsWhiteSpace","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (c) { return System.Char.isWhiteSpace(String.fromCharCode(c)); },"rt":$n[0].Boolean,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsWhiteSpace","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, index) { return System.Char.isWhiteSpace((s).charAt(index)); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Char.charCodeAt(s, 0); },"rt":$n[0].Char,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"ToLower","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (c) { return String.fromCharCode(c).toLowerCase().charCodeAt(0); },"rt":$n[0].Char,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return String.fromCharCode(this); },"rt":$n[0].String},{"a":2,"n":"ToString","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (c) { return String.fromCharCode(c); },"rt":$n[0].String,"p":[$n[0].Char]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Char.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Char.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"ToUpper","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (c) { return String.fromCharCode(c).toUpperCase().charCodeAt(0); },"rt":$n[0].Char,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Char,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Char,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}}]}; }, $n);
    $m("System.DayOfWeek", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Friday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Friday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"a":2,"n":"Monday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Monday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"a":2,"n":"Saturday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Saturday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"a":2,"n":"Sunday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Sunday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"a":2,"n":"Thursday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Thursday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"a":2,"n":"Tuesday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Tuesday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"a":2,"n":"Wednesday","is":true,"t":4,"rt":$n[0].DayOfWeek,"sn":"Wednesday","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}}]}; }, $n);
    $m("System.Double", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Double.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Double.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Double.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"tpc":0,"def":function () { return System.Double.getHashCode(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsFinite","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (d) { return isFinite(d); },"rt":$n[0].Boolean,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsInfinity","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (d) { return (Math.abs(d) === Number.POSITIVE_INFINITY); },"rt":$n[0].Boolean,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNaN","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (d) { return isNaN(d); },"rt":$n[0].Boolean,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNegativeInfinity","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (d) { return (d === Number.NEGATIVE_INFINITY); },"rt":$n[0].Boolean,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsPositiveInfinity","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Double,"ps":0}],"tpc":0,"def":function (d) { return (d === Number.POSITIVE_INFINITY); },"rt":$n[0].Boolean,"p":[$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Double.parse(s); },"rt":$n[0].Double,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (s, provider) { return Bridge.Int.parseFloat(s, provider); },"rt":$n[0].Double,"p":[$n[0].String,$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"ToExponential","t":8,"sn":"toExponential","rt":$n[0].String},{"a":2,"n":"ToExponential","t":8,"pi":[{"n":"fractionDigits","pt":$n[0].Int32,"ps":0}],"sn":"toExponential","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToFixed","t":8,"sn":"toFixed","rt":$n[0].String},{"a":2,"n":"ToFixed","t":8,"pi":[{"n":"fractionDigits","pt":$n[0].Int32,"ps":0}],"sn":"toFixed","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToPrecision","t":8,"sn":"toPrecision","rt":$n[0].String},{"a":2,"n":"ToPrecision","t":8,"pi":[{"n":"precision","pt":$n[0].Int32,"ps":0}],"sn":"toPrecision","rt":$n[0].String,"p":[$n[0].Int32]},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return System.Double.format(this); },"rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"tpc":0,"def":function (provider) { return System.Double.format(this, "G", provider); },"rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Double.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Double.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Double,"ps":1}],"tpc":0,"def":function (s, result) { return System.Double.tryParse(s, null, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1},{"n":"result","out":true,"pt":$n[0].Double,"ps":2}],"tpc":0,"def":function (s, provider, result) { return System.Double.tryParse(s, provider, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].IFormatProvider,$n[0].Double],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Epsilon","is":true,"t":4,"rt":$n[0].Double,"sn":"Epsilon","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Double,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Double,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"NaN","is":true,"t":4,"rt":$n[0].Double,"sn":"NaN","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"NegativeInfinity","is":true,"t":4,"rt":$n[0].Double,"sn":"NegativeInfinity","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"PositiveInfinity","is":true,"t":4,"rt":$n[0].Double,"sn":"PositiveInfinity","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}]}; }, $n);
    $m("System.ICloneable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Clone","t":8,"tpc":0,"def":function () { return Bridge.clone(this); },"rt":$n[0].Object}]}; }, $n);
    $m("System.IFormatProvider", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetFormat","t":8,"pi":[{"n":"formatType","pt":Function,"ps":0}],"sn":"System$IFormatProvider$getFormat","rt":$n[0].Object,"p":[Function]}]}; }, $n);
    $m("System.SByte", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].SByte,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].SByte],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.SByte.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].SByte,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].SByte],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.SByte.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.SByte.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.SByte.parse(s); },"rt":$n[0].SByte,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, radix) { return System.SByte.parse(s, radix); },"rt":$n[0].SByte,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.SByte.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.SByte.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].SByte,"ps":1}],"tpc":0,"def":function (s, result) { return System.SByte.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].SByte],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].SByte,"ps":1},{"n":"radix","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (s, result, radix) { return System.SByte.tryParse(s, result, radix); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].SByte,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].SByte,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].SByte,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.SByte);}}]}; }, $n);
    $m("System.Byte", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Byte,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Byte],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Byte,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].Byte],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Byte.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Byte.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Byte.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Byte.parse(s); },"rt":$n[0].Byte,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, radix) { return System.Byte.parse(s, radix); },"rt":$n[0].Byte,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Byte.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Byte.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Byte,"ps":1}],"tpc":0,"def":function (s, result) { return System.Byte.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Byte],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Byte,"ps":1},{"n":"radix","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (s, result, radix) { return System.Byte.tryParse(s, result, radix); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Byte,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Byte,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Byte,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.Byte);}}]}; }, $n);
    $m("System.Int16", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Int16,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Int16],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Int16,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].Int16],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Int16.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Int16.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Int16.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Int16.parse(s); },"rt":$n[0].Int16,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, radix) { return System.Int16.parse(s, radix); },"rt":$n[0].Int16,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Int16.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Int16.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Int16,"ps":1}],"tpc":0,"def":function (s, result) { return System.Int16.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int16],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Int16,"ps":1},{"n":"radix","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (s, result, radix) { return System.Int16.tryParse(s, result, radix); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int16,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Int16,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Int16,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.Int16);}}]}; }, $n);
    $m("System.Single", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Single.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Single.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Single.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"tpc":0,"def":function () { return System.Single.getHashCode(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsFinite","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (d) { return isFinite(d); },"rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsInfinity","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (d) { return (Math.abs(d) === Number.POSITIVE_INFINITY); },"rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNaN","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (d) { return isNaN(d); },"rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNegativeInfinity","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (d) { return (d === Number.NEGATIVE_INFINITY); },"rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsPositiveInfinity","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Single,"ps":0}],"tpc":0,"def":function (d) { return (d === Number.POSITIVE_INFINITY); },"rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Single.parse(s); },"rt":$n[0].Single,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (s, provider) { return System.Single.parse(s, provider); },"rt":$n[0].Single,"p":[$n[0].String,$n[0].IFormatProvider],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"ToExponential","t":8,"sn":"toExponential","rt":$n[0].String},{"a":2,"n":"ToExponential","t":8,"pi":[{"n":"fractionDigits","pt":$n[0].Int32,"ps":0}],"sn":"toExponential","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToFixed","t":8,"sn":"toFixed","rt":$n[0].String},{"a":2,"n":"ToFixed","t":8,"pi":[{"n":"fractionDigits","pt":$n[0].Int32,"ps":0}],"sn":"toFixed","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToPrecision","t":8,"sn":"toPrecision","rt":$n[0].String},{"a":2,"n":"ToPrecision","t":8,"pi":[{"n":"precision","pt":$n[0].Int32,"ps":0}],"sn":"toPrecision","rt":$n[0].String,"p":[$n[0].Int32]},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return System.Single.format(this); },"rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"tpc":0,"def":function (provider) { return System.Single.format(this, "G", provider); },"rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Single.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Single.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Single,"ps":1}],"tpc":0,"def":function (s, result) { return System.Single.tryParse(s, null, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1},{"n":"result","out":true,"pt":$n[0].Single,"ps":2}],"tpc":0,"def":function (s, provider, result) { return System.Single.tryParse(s, provider, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].IFormatProvider,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Epsilon","is":true,"t":4,"rt":$n[0].Single,"sn":"Epsilon","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Single,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Single,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"NaN","is":true,"t":4,"rt":$n[0].Single,"sn":"NaN","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"NegativeInfinity","is":true,"t":4,"rt":$n[0].Single,"sn":"NegativeInfinity","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"PositiveInfinity","is":true,"t":4,"rt":$n[0].Single,"sn":"PositiveInfinity","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    $m("System.UInt16", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].UInt16,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].UInt16],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.UInt16.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].UInt16,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].UInt16],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.UInt16.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.UInt16.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.UInt16.parse(s); },"rt":$n[0].UInt16,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, radix) { return System.UInt16.parse(s, radix); },"rt":$n[0].UInt16,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.UInt16.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.UInt16.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].UInt16,"ps":1}],"tpc":0,"def":function (s, result) { return System.UInt16.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].UInt16],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].UInt16,"ps":1},{"n":"radix","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (s, result, radix) { return System.UInt16.tryParse(s, result, radix); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].UInt16,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].UInt16,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].UInt16,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.UInt16);}}]}; }, $n);
    $m("System.Int32", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Int32.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Int32.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Int32.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Int32.parse(s); },"rt":$n[0].Int32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, radix) { return System.Int32.parse(s, radix); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.Int32.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.Int32.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, result) { return System.Int32.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Int32,"ps":1},{"n":"radix","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (s, result, radix) { return System.Int32.tryParse(s, result, radix); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Int32,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Int32,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Int64", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Int64,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Int64,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"format","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Int64.parse(s); },"rt":$n[0].Int64,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Int64,"ps":1}],"tpc":0,"def":function (s, result) { return System.Int64.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int64,"p":[$n[0].Double]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Byte,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Char,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Double,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int16,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int32,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].SByte,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Single,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt16,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt32,"p":[$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt64,"p":[$n[0].Int64]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int64,"p":[$n[0].Single]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int64,"p":[$n[0].UInt64]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].Byte]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].Char]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int16,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].Int16]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].Int32]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].SByte,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].SByte]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt16,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].UInt16]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"op_Implicit","rt":$n[0].Int64,"p":[$n[0].UInt32]},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Int64,"sn":"MaxValue"},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Int64,"sn":"MinValue"}]}; }, $n);
    $m("System.UInt64", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].UInt64,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].UInt64,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"format","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.UInt64.parse(s); },"rt":$n[0].UInt64,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].UInt64,"ps":1}],"tpc":0,"def":function (s, result) { return System.UInt64.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt64,"p":[$n[0].Double]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt64,"p":[$n[0].Single]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Byte,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Char,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Double,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int16,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int32,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].SByte,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].Single,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt16,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt32,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].Byte]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].Char]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int16,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].Int16]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].Int32]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].SByte,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].SByte]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt16,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].UInt16]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"op_Implicit","rt":$n[0].UInt64,"p":[$n[0].UInt32]},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].UInt64,"sn":"MaxValue"},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].UInt64,"sn":"MinValue"}]}; }, $n);
    $m("System.UInt32", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return Number; }},{"a":1,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return Number; }},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].UInt32,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other); },"rt":$n[0].Int32,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.UInt32.equals(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].UInt32,"ps":0}],"tpc":0,"def":function (other) { return this === other; },"rt":$n[0].Boolean,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.UInt32.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.UInt32.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.UInt32.parse(s); },"rt":$n[0].UInt32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (s, radix) { return System.UInt32.parse(s, radix); },"rt":$n[0].UInt32,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return System.UInt32.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return System.UInt32.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].UInt32,"ps":1}],"tpc":0,"def":function (s, result) { return System.UInt32.tryParse(s, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].UInt32,"ps":1},{"n":"radix","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (s, result, radix) { return System.UInt32.tryParse(s, result, radix); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].UInt32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].UInt32,"sn":"MaxValue","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].UInt32,"sn":"MinValue","box":function ($v) { return Bridge.box($v, System.UInt32);}}]}; }, $n);
    $m("System.IFormattable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, formatProvider) { return Bridge.format(this, format, formatProvider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]}]}; }, $n);
    $m("System.Decimal", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"def":function () { return System.Decimal; }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Double],"pi":[{"n":"d","pt":$n[0].Double,"ps":0}],"def":function (d) { return System.Decimal(d); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"def":function (i) { return System.Decimal(i); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64],"pi":[{"n":"n","pt":$n[0].Int64,"ps":0}],"def":function (n) { return System.Decimal(n); }},{"a":1,"n":".ctor","t":1,"p":[System.Object],"pi":[{"n":"_","pt":System.Object,"ps":0}],"def":function (_) { return System.Decimal(0); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Single],"pi":[{"n":"f","pt":$n[0].Single,"ps":0}],"def":function (f) { return System.Decimal(f); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt32],"pi":[{"n":"i","pt":$n[0].UInt32,"ps":0}],"def":function (i) { return System.Decimal(i); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt64],"pi":[{"n":"n","pt":$n[0].UInt64,"ps":0}],"def":function (n) { return System.Decimal(n); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Boolean,$n[0].Byte],"pi":[{"n":"lo","pt":$n[0].Int32,"ps":0},{"n":"mid","pt":$n[0].Int32,"ps":1},{"n":"hi","pt":$n[0].Int32,"ps":2},{"n":"isNegative","pt":$n[0].Boolean,"ps":3},{"n":"scale","pt":$n[0].Byte,"ps":4}],"def":function (lo, mid, hi, isNegative, scale) { return System.Decimal; }},{"a":2,"n":"Abs","t":8,"sn":"abs","rt":$n[0].Decimal},{"a":2,"n":"Add","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.add(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"Ceiling","t":8,"sn":"ceil","rt":$n[0].Decimal},{"a":2,"n":"Ceiling","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.ceil(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.compareTo(d2); },"rt":$n[0].Int32,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (other) { return this.compareTo(other); },"rt":$n[0].Int32,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return this.compareTo(obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ComparedTo","t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"sn":"comparedTo","rt":$n[0].Int32,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DecimalPlaces","t":8,"sn":"decimalPlaces","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Divide","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.div(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"DividedToIntegerBy","t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"sn":"dividedToIntegerBy","rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Decimal,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.equals(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Exp","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return System.Decimal.exp(d); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Exponential","t":8,"sn":"exponential","rt":$n[0].Decimal},{"a":2,"n":"Floor","t":8,"sn":"floor","rt":$n[0].Decimal},{"a":2,"n":"Floor","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.floor(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return Bridge.Int.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return Bridge.Int.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":4,"n":"FromBytes","is":true,"t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0}],"tpc":0,"def":function (bytes) { return System.Decimal.fromBytes(bytes); },"rt":$n[0].Decimal,"p":[$n[0].Array.type(System.Byte)]},{"a":4,"n":"GetBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return value.getBytes(); },"rt":$n[0].Array.type(System.Byte),"p":[$n[0].Decimal]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsFinite","t":8,"sn":"isFinite","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsInteger","t":8,"sn":"isInteger","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNaN","t":8,"sn":"isNaN","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNegative","t":8,"sn":"isNegative","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsZero","t":8,"sn":"isZero","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Ln","t":8,"sn":"ln","rt":$n[0].Decimal},{"a":2,"n":"Ln","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return System.Decimal.ln(d); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Log","t":8,"pi":[{"n":"logBase","pt":$n[0].Decimal,"ps":0}],"sn":"log","rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Log","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0},{"n":"logBase","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d, logBase) { return System.Decimal.log(d, logBase); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"Max","is":true,"t":8,"pi":[{"n":"values","ip":true,"pt":$n[0].Array.type(System.Decimal),"ps":0}],"sn":"max","rt":$n[0].Decimal,"p":[$n[0].Array.type(System.Decimal)]},{"a":2,"n":"Min","is":true,"t":8,"pi":[{"n":"values","ip":true,"pt":$n[0].Array.type(System.Decimal),"ps":0}],"sn":"min","rt":$n[0].Decimal,"p":[$n[0].Array.type(System.Decimal)]},{"a":2,"n":"Multiply","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.mul(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"Negate","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return System.Decimal(0).sub(d); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (s) { return System.Decimal(s); },"rt":$n[0].Decimal,"p":[$n[0].String]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (s, provider) { return System.Decimal(s, provider); },"rt":$n[0].Decimal,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Pow","t":8,"pi":[{"n":"n","pt":$n[0].Double,"ps":0}],"sn":"pow","rt":$n[0].Decimal,"p":[$n[0].Double]},{"a":2,"n":"Pow","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0},{"n":"exponent","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d, exponent) { return System.Decimal.pow(d, exponent); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"Precision","t":8,"sn":"precision","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Random","is":true,"t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0}],"sn":"random","rt":$n[0].Decimal,"p":[$n[0].Int32]},{"a":2,"n":"Remainder","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.mod(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"Round","t":8,"sn":"round","rt":$n[0].Decimal},{"a":2,"n":"Round","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return System.Decimal.round(d, 6); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Round","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0},{"n":"decimals","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (d, decimals) { return System.Decimal.toDecimalPlaces(d, decimals, 6); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Int32]},{"a":2,"n":"Round","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0},{"n":"mode","pt":Number,"ps":1}],"tpc":0,"def":function (d, mode) { return System.Decimal.round(d, mode); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,Number]},{"a":2,"n":"Round","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0},{"n":"decimals","pt":$n[0].Int32,"ps":1},{"n":"mode","pt":Number,"ps":2}],"tpc":0,"def":function (d, decimals, mode) { return System.Decimal.toDecimalPlaces(d, decimals, mode); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Int32,Number]},{"a":2,"n":"SetConfig","is":true,"t":8,"pi":[{"n":"config","pt":$n[0].Object,"ps":0}],"sn":"setConfig","rt":$n[0].Void,"p":[$n[0].Object]},{"a":2,"n":"Sqrt","t":8,"sn":"sqrt","rt":$n[0].Decimal},{"a":2,"n":"Sqrt","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return System.Decimal.sqrt(d); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"Subtract","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.sub(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"ToByte","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].Byte,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"ToChar","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].Char,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"ToDecimalPlaces","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1}],"sn":"toDecimalPlaces","rt":$n[0].Decimal,"p":[$n[0].Int32,Number]},{"a":2,"n":"ToDouble","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toFloat(value); },"rt":$n[0].Double,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"ToExponential","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1}],"sn":"toExponential","rt":$n[0].String,"p":[$n[0].Int32,Number]},{"a":2,"n":"ToFixed","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1}],"sn":"toFixed","rt":$n[0].String,"p":[$n[0].Int32,Number]},{"a":2,"n":"ToFormat","t":8,"sn":"toFormat","rt":$n[0].String},{"a":2,"n":"ToFormat","t":8,"pi":[{"n":"config","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (config) { return this.toFormat(null, null,config); },"rt":$n[0].String,"p":[$n[0].Object]},{"a":2,"n":"ToFormat","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0}],"sn":"toFormat","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ToFormat","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1}],"sn":"toFormat","rt":$n[0].String,"p":[$n[0].Int32,Number]},{"a":2,"n":"ToFormat","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1},{"n":"config","pt":$n[0].Object,"ps":2}],"sn":"toFormat","rt":$n[0].String,"p":[$n[0].Int32,Number,$n[0].Object]},{"a":2,"n":"ToFormat","t":8,"pi":[{"n":"dp","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1},{"n":"provider","pt":$n[0].IFormatProvider,"ps":2}],"sn":"toFormat","rt":$n[0].String,"p":[$n[0].Int32,Number,$n[0].IFormatProvider]},{"a":2,"n":"ToInt16","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].Int16,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"ToInt32","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].Int32,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ToInt64","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].Int64,"p":[$n[0].Decimal]},{"a":2,"n":"ToPrecision","t":8,"pi":[{"n":"sd","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1}],"sn":"toPrecision","rt":$n[0].String,"p":[$n[0].Int32,Number]},{"a":2,"n":"ToSByte","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].SByte,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"ToSignificantDigits","t":8,"pi":[{"n":"sd","pt":$n[0].Int32,"ps":0},{"n":"rm","pt":Number,"ps":1}],"sn":"toSignificantDigits","rt":$n[0].Decimal,"p":[$n[0].Int32,Number]},{"a":2,"n":"ToSingle","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toFloat(value); },"rt":$n[0].Single,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0}],"tpc":0,"def":function (provider) { return Bridge.Int.format(this, "G", provider); },"rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (format) { return Bridge.Int.format(this, format); },"rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"tpc":0,"def":function (format, provider) { return Bridge.Int.format(this, format, provider); },"rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"ToUInt16","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].UInt16,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"ToUInt32","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].UInt32,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ToUInt64","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (value) { return System.Decimal.toInt(value); },"rt":$n[0].UInt64,"p":[$n[0].Decimal]},{"a":2,"n":"Truncate","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.trunc(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (s, result) { return System.Decimal.tryParse(s, null, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1},{"n":"result","out":true,"pt":$n[0].Decimal,"ps":2}],"tpc":0,"def":function (s, provider, result) { return System.Decimal.tryParse(s, provider, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].IFormatProvider,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.add(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"op_Decrement","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.dec(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"op_Division","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.div(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.equalsT(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Byte,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Char,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Double,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int16,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int32,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int64,"p":[$n[0].Decimal]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].SByte,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].Single,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt16,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt32,"p":[$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"op_Explicit","rt":$n[0].UInt64,"p":[$n[0].Decimal]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"op_Explicit","rt":$n[0].Decimal,"p":[$n[0].Double]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"op_Explicit","rt":$n[0].Decimal,"p":[$n[0].Single]},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.gt(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.gte(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].Byte]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].Char]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int16,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].Int16]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].Int32]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].Int64]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].SByte,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].SByte]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt16,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].UInt16]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].UInt32]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Implicit","rt":$n[0].Decimal,"p":[$n[0].UInt64]},{"a":2,"n":"op_Increment","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.inc(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.ne(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.lt(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.lte(d2); },"rt":$n[0].Boolean,"p":[$n[0].Decimal,$n[0].Decimal],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Modulus","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.mod(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"op_Multiply","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.mul(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].Decimal,"ps":0},{"n":"d2","pt":$n[0].Decimal,"ps":1}],"tpc":0,"def":function (d1, d2) { return d1.sub(d2); },"rt":$n[0].Decimal,"p":[$n[0].Decimal,$n[0].Decimal]},{"a":2,"n":"op_UnaryNegation","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.neg(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"op_UnaryPlus","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].Decimal,"ps":0}],"tpc":0,"def":function (d) { return d.clone(); },"rt":$n[0].Decimal,"p":[$n[0].Decimal]},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].Decimal,"sn":"MaxValue"},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].Decimal,"sn":"MinValue"},{"a":2,"n":"MinusOne","is":true,"t":4,"rt":$n[0].Decimal,"sn":"MinusOne"},{"a":2,"n":"One","is":true,"t":4,"rt":$n[0].Decimal,"sn":"One"},{"a":2,"n":"Zero","is":true,"t":4,"rt":$n[0].Decimal,"sn":"Zero"}]}; }, $n);
    $m("System.IComparable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CompareTo","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (obj) { return Bridge.compare(this, obj); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IComparable$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":T,"ps":0}],"tpc":0,"def":function (other) { return Bridge.compare(this, other, false, T); },"rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IEquatable$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":T,"ps":0}],"tpc":0,"def":function (other) { return Bridge.equalsT(this, other, T); },"rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Exception", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"ctor"},{"v":true,"a":2,"n":"GetBaseException","t":8,"sn":"getBaseException","rt":$n[0].Exception},{"v":true,"a":2,"n":"Data","t":16,"rt":$n[4].IDictionary$2(System.Object,System.Object),"g":{"v":true,"a":2,"n":"get_Data","t":8,"rt":$n[4].IDictionary$2(System.Object,System.Object),"fg":"Data"},"fn":"Data"},{"a":2,"n":"HResult","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_HResult","t":8,"rt":$n[0].Int32,"fg":"HResult","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":3,"n":"set_HResult","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"HResult"},"fn":"HResult"},{"v":true,"a":2,"n":"InnerException","t":16,"rt":$n[0].Exception,"g":{"v":true,"a":2,"n":"get_InnerException","t":8,"rt":$n[0].Exception,"fg":"InnerException"},"fn":"InnerException"},{"v":true,"a":2,"n":"Message","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_Message","t":8,"rt":$n[0].String,"fg":"Message"},"fn":"Message"},{"v":true,"a":2,"n":"StackTrace","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_StackTrace","t":8,"rt":$n[0].String,"fg":"StackTrace"},"fn":"StackTrace"}]}; }, $n);
    $m("System.Nullable$1", function (T) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T],"pi":[{"n":"value","pt":T,"ps":0}],"def":function (value) { return value; }},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (other) { return System.Nullable.equalsT(this, other); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"tpc":0,"def":function () { return System.Nullable.getHashCode(this, T); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetValueOrDefault","t":8,"tpc":0,"def":function () { return System.Nullable.getValueOrDefault(this, T); },"rt":T},{"a":2,"n":"GetValueOrDefault","t":8,"pi":[{"n":"defaultValue","pt":T,"ps":0}],"tpc":0,"def":function (defaultValue) { return System.Nullable.getValueOrDefault(this, defaultValue); },"rt":T,"p":[T]},{"ov":true,"a":2,"n":"ToString","t":8,"tpc":0,"def":function () { return System.Nullable.toString(this, T); },"rt":$n[0].String},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Nullable$1(T),"ps":0}],"tpc":0,"def":function (value) { return System.Nullable.getValue(this); },"rt":T,"p":[$n[0].Nullable$1(T)]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":T,"ps":0}],"sn":"op_Implicit","rt":$n[0].Nullable$1(T),"p":[T]},{"a":2,"n":"HasValue","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_HasValue","t":8,"tpc":0,"def":function () { return System.Nullable.hasValue(this); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"Value","t":16,"rt":T,"g":{"a":2,"n":"get_Value","t":8,"tpc":0,"def":function () { return System.Nullable.getValue(this); },"rt":T}}]}; }, $n);
    $m("System.String", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"def":function () { return ""; }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Char)],"pi":[{"n":"value","pt":$n[0].Array.type(System.Char),"ps":0}],"def":function (value) { return System.String.fromCharArray(value); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Char,$n[0].Int32],"pi":[{"n":"c","pt":$n[0].Char,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"def":function (c, count) { return System.String.fromCharCount(c, count); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"pi":[{"n":"value","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2}],"def":function (value, startIndex, length) { return System.String.fromCharArray(value, startIndex, length); }},{"a":2,"n":"Clone","t":8,"tpc":0,"def":function () { return this; },"rt":$n[0].Object},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"strB","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (strA, strB) { return System.String.compare(strA, strB); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"strB","pt":$n[0].String,"ps":1},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":2}],"tpc":0,"def":function (strA, strB, ignoreCase) { return System.String.compare(strA, strB, ignoreCase); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].String,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"strB","pt":$n[0].String,"ps":1},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":2}],"tpc":0,"def":function (strA, strB, comparisonType) { return System.String.compare(strA, strB, comparisonType); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].String,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"strB","pt":$n[0].String,"ps":1},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":2},{"n":"culture","pt":$n[1].CultureInfo,"ps":3}],"tpc":0,"def":function (strA, strB, ignoreCase, culture) { return System.String.compare(strA, strB, ignoreCase, culture); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].String,$n[0].Boolean,$n[1].CultureInfo],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"indexA","pt":$n[0].Int32,"ps":1},{"n":"strB","pt":$n[0].String,"ps":2},{"n":"indexB","pt":$n[0].Int32,"ps":3},{"n":"length","pt":$n[0].Int32,"ps":4}],"tpc":0,"def":function (strA, indexA, strB, indexB, length) { return System.String.compare(strA.substr(indexA, length), strB.substr(indexB, length)); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].String,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"indexA","pt":$n[0].Int32,"ps":1},{"n":"strB","pt":$n[0].String,"ps":2},{"n":"indexB","pt":$n[0].Int32,"ps":3},{"n":"length","pt":$n[0].Int32,"ps":4},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":5}],"tpc":0,"def":function (strA, indexA, strB, indexB, length, ignoreCase) { return System.String.compare(strA.substr(indexA, length), strB.substr(indexB, length), ignoreCase); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"indexA","pt":$n[0].Int32,"ps":1},{"n":"strB","pt":$n[0].String,"ps":2},{"n":"indexB","pt":$n[0].Int32,"ps":3},{"n":"length","pt":$n[0].Int32,"ps":4},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":5}],"tpc":0,"def":function (strA, indexA, strB, indexB, length, comparisonType) { return System.String.compare(strA.substr(indexA, length), strB.substr(indexB, length), comparisonType); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"strA","pt":$n[0].String,"ps":0},{"n":"indexA","pt":$n[0].Int32,"ps":1},{"n":"strB","pt":$n[0].String,"ps":2},{"n":"indexB","pt":$n[0].Int32,"ps":3},{"n":"length","pt":$n[0].Int32,"ps":4},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":5},{"n":"culture","pt":$n[1].CultureInfo,"ps":6}],"tpc":0,"def":function (strA, indexA, strB, indexB, length, ignoreCase, culture) { return System.String.compare(strA.substr(indexA, length), strB.substr(indexB, length), ignoreCase, culture); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Boolean,$n[1].CultureInfo],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (value) { return System.String.compare(this, value.toString()); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"strB","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (strB) { return System.String.compare(this, strB); },"rt":$n[0].Int32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"values","pt":$n[4].IEnumerable$1(System.String),"ps":0}],"tpc":0,"def":function (values) { return System.String.concat(Bridge.toArray(values)); },"rt":$n[0].String,"p":[$n[4].IEnumerable$1(System.String)]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"values","pt":$n[4].IEnumerable$1(System.Object),"ps":0}],"tpc":1,"def":function (T, values) { return System.String.concat(Bridge.toArray(values)); },"rt":$n[0].String,"p":[$n[4].IEnumerable$1(System.Object)]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"arg0","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (arg0) { return System.String.concat(arg0); },"rt":$n[0].String,"p":[$n[0].Object]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":0}],"tpc":0,"def":function (args) { return System.String.concat(Array.prototype.slice.call((arguments, 0))); },"rt":$n[0].String,"p":[$n[0].Array.type(System.Object)]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"values","ip":true,"pt":$n[0].Array.type(System.String),"ps":0}],"tpc":0,"def":function (values) { return System.String.concat(Array.prototype.slice.call((arguments, 0))); },"rt":$n[0].String,"p":[$n[0].Array.type(System.String)]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"arg0","pt":$n[0].Object,"ps":0},{"n":"arg1","pt":$n[0].Object,"ps":1}],"tpc":0,"def":function (arg0, arg1) { return System.String.concat(arg0, arg1); },"rt":$n[0].String,"p":[$n[0].Object,$n[0].Object]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"str0","pt":$n[0].String,"ps":0},{"n":"str1","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (str0, str1) { return System.String.concat(str0, str1); },"rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"arg0","pt":$n[0].Object,"ps":0},{"n":"arg1","pt":$n[0].Object,"ps":1},{"n":"arg2","pt":$n[0].Object,"ps":2}],"tpc":0,"def":function (arg0, arg1, arg2) { return System.String.concat(arg0, arg1, arg2); },"rt":$n[0].String,"p":[$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"str0","pt":$n[0].String,"ps":0},{"n":"str1","pt":$n[0].String,"ps":1},{"n":"str2","pt":$n[0].String,"ps":2}],"tpc":0,"def":function (str0, str1, str2) { return System.String.concat(str0, str1, str2); },"rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].String]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"arg0","pt":$n[0].Object,"ps":0},{"n":"arg1","pt":$n[0].Object,"ps":1},{"n":"arg2","pt":$n[0].Object,"ps":2},{"n":"arg3","pt":$n[0].Object,"ps":3}],"tpc":0,"def":function (arg0, arg1, arg2, arg3) { return System.String.concat(arg0, arg1, arg2, arg3); },"rt":$n[0].String,"p":[$n[0].Object,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"str0","pt":$n[0].String,"ps":0},{"n":"str1","pt":$n[0].String,"ps":1},{"n":"str2","pt":$n[0].String,"ps":2},{"n":"str3","pt":$n[0].String,"ps":3}],"tpc":0,"def":function (str0, str1, str2, str3) { return System.String.concat(str0, str1, str2, str3); },"rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].String,$n[0].String]},{"a":2,"n":"Concat","is":true,"t":8,"pi":[{"n":"arg0","pt":$n[0].Object,"ps":0},{"n":"arg1","pt":$n[0].Object,"ps":1},{"n":"arg2","pt":$n[0].Object,"ps":2},{"n":"arg3","pt":$n[0].Object,"ps":3},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":4}],"tpc":0,"def":function (arg0, arg1, arg2, arg3, args) { return System.String.concat(arg0, arg1, arg2, arg3, args); },"rt":$n[0].String,"p":[$n[0].Object,$n[0].Object,$n[0].Object,$n[0].Object,$n[0].Array.type(System.Object)]},{"a":2,"n":"Contains","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.contains(this,value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"sourceIndex","pt":$n[0].Int32,"ps":0},{"n":"destination","pt":$n[0].Array.type(System.Char),"ps":1},{"n":"destinationIndex","pt":$n[0].Int32,"ps":2},{"n":"count","pt":$n[0].Int32,"ps":3}],"tpc":0,"def":function (sourceIndex, destination, destinationIndex, count) { return System.String.copyTo(this, sourceIndex, destination, destinationIndex, count); },"rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"EndsWith","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.endsWith(this, value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"EndsWith","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":1}],"tpc":0,"def":function (value, comparisonType) { return System.String.endsWith(this, value, comparisonType); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.equals(this, value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0},{"n":"b","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (a, b) { return System.String.equals(a, b); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":1}],"tpc":0,"def":function (value, comparisonType) { return System.String.equals(this, value, comparisonType); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].String,"ps":0},{"n":"b","pt":$n[0].String,"ps":1},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":2}],"tpc":0,"def":function (a, b, comparisonType) { return System.String.equals(a, b, comparisonType); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1}],"tpc":0,"def":function (format, arg0) { return System.String.format(format, [arg0]); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Object]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"tpc":0,"def":function (format, args) { return System.String.format(format, args); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"arg0","pt":$n[0].Object,"ps":2}],"tpc":0,"def":function (provider, format, arg0) { return System.String.formatProvider(provider, format, [arg0]); },"rt":$n[0].String,"p":[$n[0].IFormatProvider,$n[0].String,$n[0].Object]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":2}],"tpc":0,"def":function (provider, format, args) { return System.String.formatProvider(provider, format, args); },"rt":$n[0].String,"p":[$n[0].IFormatProvider,$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2}],"tpc":0,"def":function (format, arg0, arg1) { return System.String.format(format, arg0, arg1); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Object,$n[0].Object]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"arg0","pt":$n[0].Object,"ps":2},{"n":"arg1","pt":$n[0].Object,"ps":3}],"tpc":0,"def":function (provider, format, arg0, arg1) { return System.String.formatProvider(provider, format, arg0, arg1); },"rt":$n[0].String,"p":[$n[0].IFormatProvider,$n[0].String,$n[0].Object,$n[0].Object]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3}],"tpc":0,"def":function (format, arg0, arg1, arg2) { return System.String.format(format, arg0, arg1, arg2); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"Format","is":true,"t":8,"pi":[{"n":"provider","pt":$n[0].IFormatProvider,"ps":0},{"n":"format","pt":$n[0].String,"ps":1},{"n":"arg0","pt":$n[0].Object,"ps":2},{"n":"arg1","pt":$n[0].Object,"ps":3},{"n":"arg2","pt":$n[0].Object,"ps":4}],"tpc":0,"def":function (provider, format, arg0, arg1, arg2) { return System.String.formatProvider(provider, format, arg0, arg1, arg2); },"rt":$n[0].String,"p":[$n[0].IFormatProvider,$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"a":2,"n":"GetEnumerator","t":8,"tpc":0,"def":function () { return Bridge.getEnumerator(this); },"rt":$n[0].CharEnumerator},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (value) { return System.String.indexOf(this, String.fromCharCode(value)); },"rt":$n[0].Int32,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.indexOf(this, value); },"rt":$n[0].Int32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (value, startIndex) { return System.String.indexOf(this, String.fromCharCode(value), startIndex); },"rt":$n[0].Int32,"p":[$n[0].Char,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (value, startIndex) { return System.String.indexOf(this, value, startIndex); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":1}],"tpc":0,"def":function (value, comparisonType) { return ($t = this, System.String.indexOf($t, value, 0, $t.length, comparisonType)); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (value, startIndex, count) { return System.String.indexOf(this, String.fromCharCode(value), startIndex, count); },"rt":$n[0].Int32,"p":[$n[0].Char,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"searchValue","pt":$n[0].String,"ps":0},{"n":"fromIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (searchValue, fromIndex, count) { return System.String.indexOf(this, searchValue, fromIndex, count); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":2}],"tpc":0,"def":function (value, startIndex, comparisonType) { return ($t1 = this, System.String.indexOf($t1, value, startIndex, $t1.length, comparisonType)); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":3}],"tpc":0,"def":function (value, startIndex, count, comparisonType) { return System.String.indexOf(this, value, startIndex, count, comparisonType); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOfAny","t":8,"pi":[{"n":"anyOf","pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (anyOf) { return System.String.indexOfAny(this, anyOf); },"rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOfAny","t":8,"pi":[{"n":"anyOf","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (anyOf, startIndex) { return System.String.indexOfAny(this, anyOf, startIndex); },"rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOfAny","t":8,"pi":[{"n":"anyOf","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (anyOf, startIndex, count) { return System.String.indexOfAny(this, anyOf, startIndex, count); },"rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Insert","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (startIndex, value) { return System.String.insert(startIndex, this, value); },"rt":$n[0].String,"p":[$n[0].Int32,$n[0].String]},{"a":2,"n":"IsNullOrEmpty","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.isNullOrEmpty(value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsNullOrWhiteSpace","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.isNullOrWhiteSpace(value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Join","is":true,"t":8,"pi":[{"n":"separator","pt":$n[0].String,"ps":0},{"n":"values","pt":$n[4].IEnumerable$1(System.String),"ps":1}],"tpc":0,"def":function (separator, values) { return Bridge.toArray(values).join(separator); },"rt":$n[0].String,"p":[$n[0].String,$n[4].IEnumerable$1(System.String)]},{"a":2,"n":"Join","is":true,"t":8,"pi":[{"n":"separator","pt":$n[0].String,"ps":0},{"n":"values","pt":$n[4].IEnumerable$1(System.Object),"ps":1}],"tpc":1,"def":function (T, separator, values) { return Bridge.toArray(values).join(separator); },"rt":$n[0].String,"p":[$n[0].String,$n[4].IEnumerable$1(System.Object)]},{"a":2,"n":"Join","is":true,"t":8,"pi":[{"n":"separator","pt":$n[0].String,"ps":0},{"n":"values","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"tpc":0,"def":function (separator, values) { return Array.prototype.slice.call((arguments, 1)).join(separator); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"Join","is":true,"t":8,"pi":[{"n":"separator","pt":$n[0].String,"ps":0},{"n":"value","ip":true,"pt":$n[0].Array.type(System.String),"ps":1}],"tpc":0,"def":function (separator, value) { return Array.prototype.slice.call((arguments, 1)).join(separator); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Array.type(System.String)]},{"a":2,"n":"Join","is":true,"t":8,"pi":[{"n":"separator","pt":$n[0].String,"ps":0},{"n":"value","pt":$n[0].Array.type(System.String),"ps":1},{"n":"startIndex","pt":$n[0].Int32,"ps":2},{"n":"count","pt":$n[0].Int32,"ps":3}],"tpc":0,"def":function (separator, value, startIndex, count) { return value.slice(startIndex, startIndex + count).join(separator); },"rt":$n[0].String,"p":[$n[0].String,$n[0].Array.type(System.String),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (value) { return this.lastIndexOf(String.fromCharCode(value)); },"rt":$n[0].Int32,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"lastIndexOf","rt":$n[0].Int32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (value, startIndex) { return this.lastIndexOf(String.fromCharCode(value), startIndex); },"rt":$n[0].Int32,"p":[$n[0].Char,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"lastIndexOf","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (value, startIndex, count) { return System.String.lastIndexOf(this, String.fromCharCode(value), startIndex, count); },"rt":$n[0].Int32,"p":[$n[0].Char,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (value, startIndex, count) { return System.String.lastIndexOf(this, value, startIndex, count); },"rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOfAny","t":8,"pi":[{"n":"anyOf","ip":true,"pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (anyOf) { return System.String.lastIndexOfAny(this, Array.prototype.slice.call((arguments, 0))); },"rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOfAny","t":8,"pi":[{"n":"anyOf","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (anyOf, startIndex) { return System.String.lastIndexOfAny(this, anyOf, startIndex); },"rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOfAny","t":8,"pi":[{"n":"anyOf","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (anyOf, startIndex, count) { return System.String.lastIndexOfAny(this, anyOf, startIndex, count); },"rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PadLeft","t":8,"pi":[{"n":"totalWidth","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (totalWidth) { return System.String.alignString(this, totalWidth); },"rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"PadLeft","t":8,"pi":[{"n":"totalWidth","pt":$n[0].Int32,"ps":0},{"n":"paddingChar","pt":$n[0].Char,"ps":1}],"tpc":0,"def":function (totalWidth, paddingChar) { return System.String.alignString(this, totalWidth, paddingChar); },"rt":$n[0].String,"p":[$n[0].Int32,$n[0].Char]},{"a":2,"n":"PadRight","t":8,"pi":[{"n":"totalWidth","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (totalWidth) { return System.String.alignString(this, -totalWidth); },"rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"PadRight","t":8,"pi":[{"n":"totalWidth","pt":$n[0].Int32,"ps":0},{"n":"paddingChar","pt":$n[0].Char,"ps":1}],"tpc":0,"def":function (totalWidth, paddingChar) { return System.String.alignString(this, -totalWidth, paddingChar); },"rt":$n[0].String,"p":[$n[0].Int32,$n[0].Char]},{"a":2,"n":"Remove","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (startIndex) { return System.String.remove(this, startIndex); },"rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"Remove","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (startIndex, count) { return System.String.remove(this, startIndex, count); },"rt":$n[0].String,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"oldChar","pt":$n[0].Char,"ps":0},{"n":"newChar","pt":$n[0].Char,"ps":1}],"tpc":0,"def":function (oldChar, newChar) { return System.String.replaceAll(this, String.fromCharCode(oldChar), String.fromCharCode(newChar)); },"rt":$n[0].String,"p":[$n[0].Char,$n[0].Char]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"oldValue","pt":$n[0].String,"ps":0},{"n":"newValue","pt":$n[0].String,"ps":1}],"tpc":0,"def":function (oldValue, newValue) { return System.String.replaceAll(this, oldValue, newValue); },"rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Split","t":8,"pi":[{"n":"separator","ip":true,"pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (separator) { return System.String.split(this, Array.prototype.slice.call((arguments, 0)).map(function (i) {{ return String.fromCharCode(i); }})); },"rt":$n[0].Array.type(System.String),"p":[$n[0].Array.type(System.Char)]},{"a":2,"n":"Split","t":8,"pi":[{"n":"separator","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (separator, count) { return System.String.split(this, separator.map(function (i) {{ return String.fromCharCode(i); }}), count); },"rt":$n[0].Array.type(System.String),"p":[$n[0].Array.type(System.Char),$n[0].Int32]},{"a":2,"n":"Split","t":8,"pi":[{"n":"separator","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"options","pt":$n[0].StringSplitOptions,"ps":1}],"tpc":0,"def":function (separator, options) { return System.String.split(this, separator.map(function (i) {{ return String.fromCharCode(i); }}), null, options); },"rt":$n[0].Array.type(System.String),"p":[$n[0].Array.type(System.Char),$n[0].StringSplitOptions]},{"a":2,"n":"Split","t":8,"pi":[{"n":"separator","pt":$n[0].Array.type(System.String),"ps":0},{"n":"options","pt":$n[0].StringSplitOptions,"ps":1}],"tpc":0,"def":function (separator, options) { return System.String.split(this, separator, null, options); },"rt":$n[0].Array.type(System.String),"p":[$n[0].Array.type(System.String),$n[0].StringSplitOptions]},{"a":2,"n":"Split","t":8,"pi":[{"n":"separator","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"options","pt":$n[0].StringSplitOptions,"ps":2}],"tpc":0,"def":function (separator, count, options) { return System.String.split(this, separator.map(function (i) {{ return String.fromCharCode(i); }}), count, options); },"rt":$n[0].Array.type(System.String),"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].StringSplitOptions]},{"a":2,"n":"Split","t":8,"pi":[{"n":"separator","pt":$n[0].Array.type(System.String),"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"options","pt":$n[0].StringSplitOptions,"ps":2}],"tpc":0,"def":function (separator, count, options) { return System.String.split(this, separator, count, options); },"rt":$n[0].Array.type(System.String),"p":[$n[0].Array.type(System.String),$n[0].Int32,$n[0].StringSplitOptions]},{"a":2,"n":"StartsWith","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (value) { return System.String.startsWith(this, value); },"rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"StartsWith","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"comparisonType","pt":$n[0].StringComparison,"ps":1}],"tpc":0,"def":function (value, comparisonType) { return System.String.startsWith(this, value, comparisonType); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].StringComparison],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Substring","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0}],"sn":"substr","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"Substring","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"length","pt":$n[0].Int32,"ps":1}],"sn":"substr","rt":$n[0].String,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ToCharArray","t":8,"tpc":0,"def":function () { return ($t2 = this, System.String.toCharArray($t2, 0, $t2.length)); },"rt":$n[0].Array.type(System.Char)},{"a":2,"n":"ToCharArray","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"length","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (startIndex, length) { return System.String.toCharArray(this, startIndex, length); },"rt":$n[0].Array.type(System.Char),"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ToLower","t":8,"tpc":0,"def":function () { return this.toLowerCase(); },"rt":$n[0].String},{"a":2,"n":"ToUpper","t":8,"tpc":0,"def":function () { return this.toUpperCase(); },"rt":$n[0].String},{"a":2,"n":"Trim","t":8,"sn":"trim","rt":$n[0].String},{"a":2,"n":"Trim","t":8,"pi":[{"n":"trimChars","ip":true,"pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (trimChars) { return System.String.trim(this, Array.prototype.slice.call((arguments, 0))); },"rt":$n[0].String,"p":[$n[0].Array.type(System.Char)]},{"a":2,"n":"TrimEnd","t":8,"tpc":0,"def":function () { return System.String.trimEnd(this); },"rt":$n[0].String},{"a":2,"n":"TrimEnd","t":8,"pi":[{"n":"trimChars","ip":true,"pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (trimChars) { return System.String.trimEnd(this, Array.prototype.slice.call((arguments, 0))); },"rt":$n[0].String,"p":[$n[0].Array.type(System.Char)]},{"a":2,"n":"TrimStart","t":8,"tpc":0,"def":function () { return System.String.trimStart(this); },"rt":$n[0].String},{"a":2,"n":"TrimStart","t":8,"pi":[{"n":"trimChars","ip":true,"pt":$n[0].Array.type(System.Char),"ps":0}],"tpc":0,"def":function (trimChars) { return System.String.trimStart(this, Array.prototype.slice.call((arguments, 0))); },"rt":$n[0].String,"p":[$n[0].Array.type(System.Char)]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"s1","pt":$n[0].String,"ps":0},{"n":"s2","pt":$n[0].String,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"s1","pt":$n[0].String,"ps":0},{"n":"s2","pt":$n[0].String,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Item","t":16,"rt":$n[0].Char,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (index) { return this.charCodeAt(index); },"rt":$n[0].Char,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}}},{"a":2,"n":"Length","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Length","t":8,"rt":$n[0].Int32,"fg":"length","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"length"},{"a":2,"n":"Empty","is":true,"t":4,"rt":$n[0].String,"sn":"Empty"}]}; }, $n);
    $m("System.TimeSpan", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64],"pi":[{"n":"ticks","pt":$n[0].Int64,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"hours","pt":$n[0].Int32,"ps":0},{"n":"minutes","pt":$n[0].Int32,"ps":1},{"n":"seconds","pt":$n[0].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"days","pt":$n[0].Int32,"ps":0},{"n":"hours","pt":$n[0].Int32,"ps":1},{"n":"minutes","pt":$n[0].Int32,"ps":2},{"n":"seconds","pt":$n[0].Int32,"ps":3}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"days","pt":$n[0].Int32,"ps":0},{"n":"hours","pt":$n[0].Int32,"ps":1},{"n":"minutes","pt":$n[0].Int32,"ps":2},{"n":"seconds","pt":$n[0].Int32,"ps":3},{"n":"milliseconds","pt":$n[0].Int32,"ps":4}],"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"ts","pt":$n[0].TimeSpan,"ps":0}],"sn":"add","rt":$n[0].TimeSpan,"p":[$n[0].TimeSpan]},{"a":2,"n":"Compare","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return t1.compareTo(t2); },"rt":$n[0].Int32,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].TimeSpan,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Duration","t":8,"sn":"duration","rt":$n[0].TimeSpan},{"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].TimeSpan,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return (t1).ticks.eq((t2).ticks); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Format","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"toString","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"FromDays","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"fromDays","rt":$n[0].TimeSpan,"p":[$n[0].Double]},{"a":2,"n":"FromHours","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"fromHours","rt":$n[0].TimeSpan,"p":[$n[0].Double]},{"a":2,"n":"FromMilliseconds","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"fromMilliseconds","rt":$n[0].TimeSpan,"p":[$n[0].Double]},{"a":2,"n":"FromMinutes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"fromMinutes","rt":$n[0].TimeSpan,"p":[$n[0].Double]},{"a":2,"n":"FromSeconds","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"fromSeconds","rt":$n[0].TimeSpan,"p":[$n[0].Double]},{"a":2,"n":"FromTicks","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"fromTicks","rt":$n[0].TimeSpan,"p":[$n[0].Int64]},{"a":2,"n":"Negate","t":8,"sn":"negate","rt":$n[0].TimeSpan},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"sn":"parse","rt":$n[0].TimeSpan,"p":[$n[0].String]},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"parse","rt":$n[0].TimeSpan,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"Subtract","t":8,"pi":[{"n":"ts","pt":$n[0].TimeSpan,"ps":0}],"sn":"subtract","rt":$n[0].TimeSpan,"p":[$n[0].TimeSpan]},{"a":4,"n":"TimeToTicks","is":true,"t":8,"pi":[{"n":"hour","pt":$n[0].Int32,"ps":0},{"n":"minute","pt":$n[0].Int32,"ps":1},{"n":"second","pt":$n[0].Int32,"ps":2}],"tpc":0,"def":function (hour, minute, second) { return TimeToTicks(hour, minute, second); },"rt":$n[0].Int64,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0}],"sn":"toString","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ToString","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"format","rt":$n[0].String,"p":[$n[0].String,$n[0].IFormatProvider]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (s, result) { return System.TimeSpan.tryParse(s, null, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"provider","pt":$n[0].IFormatProvider,"ps":1},{"n":"result","out":true,"pt":$n[0].TimeSpan,"ps":2}],"tpc":0,"def":function (s, provider, result) { return System.TimeSpan.tryParse(s, provider, result); },"rt":$n[0].Boolean,"p":[$n[0].String,$n[0].IFormatProvider,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.add(t1, t2); },"rt":$n[0].TimeSpan,"p":[$n[0].TimeSpan,$n[0].TimeSpan]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.eq(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.gt(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.gte(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.neq(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.lt(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.lte(t1, t2); },"rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpan,"ps":0},{"n":"t2","pt":$n[0].TimeSpan,"ps":1}],"tpc":0,"def":function (t1, t2) { return System.TimeSpan.sub(t1, t2); },"rt":$n[0].TimeSpan,"p":[$n[0].TimeSpan,$n[0].TimeSpan]},{"a":2,"n":"op_UnaryNegation","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].TimeSpan,"ps":0}],"tpc":0,"def":function (t) { return System.TimeSpan.neg(t); },"rt":$n[0].TimeSpan,"p":[$n[0].TimeSpan]},{"a":2,"n":"op_UnaryPlus","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].TimeSpan,"ps":0}],"tpc":0,"def":function (t) { return System.TimeSpan.plus(t); },"rt":$n[0].TimeSpan,"p":[$n[0].TimeSpan]},{"a":2,"n":"Days","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Days","t":8,"tpc":0,"def":function () { return this.getDays(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Hours","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Hours","t":8,"tpc":0,"def":function () { return this.getHours(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Milliseconds","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Milliseconds","t":8,"tpc":0,"def":function () { return this.getMilliseconds(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Minutes","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Minutes","t":8,"tpc":0,"def":function () { return this.getMinutes(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Seconds","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Seconds","t":8,"tpc":0,"def":function () { return this.getSeconds(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Ticks","t":16,"rt":$n[0].Int64,"g":{"a":2,"n":"get_Ticks","t":8,"tpc":0,"def":function () { return this.getTicks(); },"rt":$n[0].Int64}},{"a":2,"n":"TotalDays","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_TotalDays","t":8,"tpc":0,"def":function () { return this.getTotalDays(); },"rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}},{"a":2,"n":"TotalHours","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_TotalHours","t":8,"tpc":0,"def":function () { return this.getTotalHours(); },"rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}},{"a":2,"n":"TotalMilliseconds","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_TotalMilliseconds","t":8,"tpc":0,"def":function () { return this.getTotalMilliseconds(); },"rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}},{"a":2,"n":"TotalMinutes","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_TotalMinutes","t":8,"tpc":0,"def":function () { return this.getTotalMinutes(); },"rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}},{"a":2,"n":"TotalSeconds","t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_TotalSeconds","t":8,"tpc":0,"def":function () { return this.getTotalSeconds(); },"rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}},{"a":2,"n":"MaxValue","is":true,"t":4,"rt":$n[0].TimeSpan,"sn":"maxValue","ro":true},{"a":2,"n":"MinValue","is":true,"t":4,"rt":$n[0].TimeSpan,"sn":"minValue","ro":true},{"a":2,"n":"TicksPerDay","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerDay"},{"a":2,"n":"TicksPerHour","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerHour"},{"a":2,"n":"TicksPerMillisecond","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerMillisecond"},{"a":2,"n":"TicksPerMinute","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerMinute"},{"a":2,"n":"TicksPerSecond","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerSecond"},{"a":2,"n":"Zero","is":true,"t":4,"rt":$n[0].TimeSpan,"sn":"zero","ro":true},{"a":4,"n":"_ticks","t":4,"rt":$n[0].Int64,"sn":"_ticks"}]}; }, $n);
    $m("System.ITupleInternal", function () { return {"att":160,"a":4,"m":[{"ab":true,"a":2,"n":"GetHashCode","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"System$ITupleInternal$GetHashCode","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"ToStringEnd","t":8,"sn":"System$ITupleInternal$ToStringEnd","rt":$n[0].String},{"ab":true,"a":2,"n":"Size","t":16,"rt":$n[0].Int32,"g":{"ab":true,"a":2,"n":"get_Size","t":8,"rt":$n[0].Int32,"fg":"System$ITupleInternal$Size","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"System$ITupleInternal$Size"}]}; }, $n);
    $m("System.ValueTuple$1", function (T1) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1],"pi":[{"n":"item1","pt":T1,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$1(T1),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$1(T1)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$1(T1),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$1(T1)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$2", function (T1, T2) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$2(T1,T2),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$2(T1,T2)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$2(T1,T2),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$2(T1,T2)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$3", function (T1, T2, T3) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2,T3],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1},{"n":"item3","pt":T3,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$3(T1,T2,T3),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$3(T1,T2,T3)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$3(T1,T2,T3),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$3(T1,T2,T3)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":2,"n":"Item3","t":4,"rt":T3,"sn":"Item3"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true},{"a":1,"n":"s_t3Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T3),"sn":"s_t3Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$4", function (T1, T2, T3, T4) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2,T3,T4],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1},{"n":"item3","pt":T3,"ps":2},{"n":"item4","pt":T4,"ps":3}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$4(T1,T2,T3,T4),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$4(T1,T2,T3,T4)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$4(T1,T2,T3,T4),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$4(T1,T2,T3,T4)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":2,"n":"Item3","t":4,"rt":T3,"sn":"Item3"},{"a":2,"n":"Item4","t":4,"rt":T4,"sn":"Item4"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true},{"a":1,"n":"s_t3Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T3),"sn":"s_t3Comparer","ro":true},{"a":1,"n":"s_t4Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T4),"sn":"s_t4Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$5", function (T1, T2, T3, T4, T5) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2,T3,T4,T5],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1},{"n":"item3","pt":T3,"ps":2},{"n":"item4","pt":T4,"ps":3},{"n":"item5","pt":T5,"ps":4}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$5(T1,T2,T3,T4,T5),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$5(T1,T2,T3,T4,T5)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$5(T1,T2,T3,T4,T5),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$5(T1,T2,T3,T4,T5)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":2,"n":"Item3","t":4,"rt":T3,"sn":"Item3"},{"a":2,"n":"Item4","t":4,"rt":T4,"sn":"Item4"},{"a":2,"n":"Item5","t":4,"rt":T5,"sn":"Item5"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true},{"a":1,"n":"s_t3Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T3),"sn":"s_t3Comparer","ro":true},{"a":1,"n":"s_t4Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T4),"sn":"s_t4Comparer","ro":true},{"a":1,"n":"s_t5Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T5),"sn":"s_t5Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$6", function (T1, T2, T3, T4, T5, T6) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2,T3,T4,T5,T6],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1},{"n":"item3","pt":T3,"ps":2},{"n":"item4","pt":T4,"ps":3},{"n":"item5","pt":T5,"ps":4},{"n":"item6","pt":T6,"ps":5}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$6(T1,T2,T3,T4,T5,T6),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$6(T1,T2,T3,T4,T5,T6)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$6(T1,T2,T3,T4,T5,T6),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$6(T1,T2,T3,T4,T5,T6)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":2,"n":"Item3","t":4,"rt":T3,"sn":"Item3"},{"a":2,"n":"Item4","t":4,"rt":T4,"sn":"Item4"},{"a":2,"n":"Item5","t":4,"rt":T5,"sn":"Item5"},{"a":2,"n":"Item6","t":4,"rt":T6,"sn":"Item6"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true},{"a":1,"n":"s_t3Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T3),"sn":"s_t3Comparer","ro":true},{"a":1,"n":"s_t4Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T4),"sn":"s_t4Comparer","ro":true},{"a":1,"n":"s_t5Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T5),"sn":"s_t5Comparer","ro":true},{"a":1,"n":"s_t6Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T6),"sn":"s_t6Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$7", function (T1, T2, T3, T4, T5, T6, T7) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2,T3,T4,T5,T6,T7],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1},{"n":"item3","pt":T3,"ps":2},{"n":"item4","pt":T4,"ps":3},{"n":"item5","pt":T5,"ps":4},{"n":"item6","pt":T6,"ps":5},{"n":"item7","pt":T7,"ps":6}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$7(T1,T2,T3,T4,T5,T6,T7),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$7(T1,T2,T3,T4,T5,T6,T7),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$7(T1,T2,T3,T4,T5,T6,T7)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":2,"n":"Item3","t":4,"rt":T3,"sn":"Item3"},{"a":2,"n":"Item4","t":4,"rt":T4,"sn":"Item4"},{"a":2,"n":"Item5","t":4,"rt":T5,"sn":"Item5"},{"a":2,"n":"Item6","t":4,"rt":T6,"sn":"Item6"},{"a":2,"n":"Item7","t":4,"rt":T7,"sn":"Item7"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true},{"a":1,"n":"s_t3Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T3),"sn":"s_t3Comparer","ro":true},{"a":1,"n":"s_t4Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T4),"sn":"s_t4Comparer","ro":true},{"a":1,"n":"s_t5Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T5),"sn":"s_t5Comparer","ro":true},{"a":1,"n":"s_t6Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T6),"sn":"s_t6Comparer","ro":true},{"a":1,"n":"s_t7Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T7),"sn":"s_t7Comparer","ro":true}]}; }, $n);
    $m("System.ValueTuple$8", function (T1, T2, T3, T4, T5, T6, T7, TRest) { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[T1,T2,T3,T4,T5,T6,T7,TRest],"pi":[{"n":"item1","pt":T1,"ps":0},{"n":"item2","pt":T2,"ps":1},{"n":"item3","pt":T3,"ps":2},{"n":"item4","pt":T4,"ps":3},{"n":"item5","pt":T5,"ps":4},{"n":"item6","pt":T6,"ps":5},{"n":"item7","pt":T7,"ps":6},{"n":"rest","pt":TRest,"ps":7}],"sn":"$ctor1"},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest),"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest),"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple$8(T1,T2,T3,T4,T5,T6,T7,TRest)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetHashCodeCore","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"GetHashCodeCore","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Item1","t":4,"rt":T1,"sn":"Item1"},{"a":2,"n":"Item2","t":4,"rt":T2,"sn":"Item2"},{"a":2,"n":"Item3","t":4,"rt":T3,"sn":"Item3"},{"a":2,"n":"Item4","t":4,"rt":T4,"sn":"Item4"},{"a":2,"n":"Item5","t":4,"rt":T5,"sn":"Item5"},{"a":2,"n":"Item6","t":4,"rt":T6,"sn":"Item6"},{"a":2,"n":"Item7","t":4,"rt":T7,"sn":"Item7"},{"a":2,"n":"Rest","t":4,"rt":TRest,"sn":"Rest"},{"a":1,"n":"s_t1Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T1),"sn":"s_t1Comparer","ro":true},{"a":1,"n":"s_t2Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T2),"sn":"s_t2Comparer","ro":true},{"a":1,"n":"s_t3Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T3),"sn":"s_t3Comparer","ro":true},{"a":1,"n":"s_t4Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T4),"sn":"s_t4Comparer","ro":true},{"a":1,"n":"s_t5Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T5),"sn":"s_t5Comparer","ro":true},{"a":1,"n":"s_t6Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T6),"sn":"s_t6Comparer","ro":true},{"a":1,"n":"s_t7Comparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(T7),"sn":"s_t7Comparer","ro":true},{"a":1,"n":"s_tRestComparer","is":true,"t":4,"rt":$n[4].EqualityComparer$1(TRest),"sn":"s_tRestComparer","ro":true}]}; }, $n);
    $m("System.ValueTuple", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1}],"sn":"CombineHashCodes","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1},{"n":"h3","pt":$n[0].Int32,"ps":2}],"sn":"CombineHashCodes$1","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1},{"n":"h3","pt":$n[0].Int32,"ps":2},{"n":"h4","pt":$n[0].Int32,"ps":3}],"sn":"CombineHashCodes$2","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1},{"n":"h3","pt":$n[0].Int32,"ps":2},{"n":"h4","pt":$n[0].Int32,"ps":3},{"n":"h5","pt":$n[0].Int32,"ps":4}],"sn":"CombineHashCodes$3","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1},{"n":"h3","pt":$n[0].Int32,"ps":2},{"n":"h4","pt":$n[0].Int32,"ps":3},{"n":"h5","pt":$n[0].Int32,"ps":4},{"n":"h6","pt":$n[0].Int32,"ps":5}],"sn":"CombineHashCodes$4","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1},{"n":"h3","pt":$n[0].Int32,"ps":2},{"n":"h4","pt":$n[0].Int32,"ps":3},{"n":"h5","pt":$n[0].Int32,"ps":4},{"n":"h6","pt":$n[0].Int32,"ps":5},{"n":"h7","pt":$n[0].Int32,"ps":6}],"sn":"CombineHashCodes$5","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"CombineHashCodes","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1},{"n":"h3","pt":$n[0].Int32,"ps":2},{"n":"h4","pt":$n[0].Int32,"ps":3},{"n":"h5","pt":$n[0].Int32,"ps":4},{"n":"h6","pt":$n[0].Int32,"ps":5},{"n":"h7","pt":$n[0].Int32,"ps":6},{"n":"h8","pt":$n[0].Int32,"ps":7}],"sn":"CombineHashCodes$6","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].ValueTuple],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Create","is":true,"t":8,"sn":"Create","rt":$n[0].ValueTuple},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0}],"tpc":1,"tprm":["T1"],"sn":"Create$1","rt":$n[0].ValueTuple$1(System.Object),"p":[System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1}],"tpc":2,"tprm":["T1","T2"],"sn":"Create$2","rt":$n[0].ValueTuple$2(System.Object,System.Object),"p":[System.Object,System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1},{"n":"item3","pt":System.Object,"ps":2}],"tpc":3,"tprm":["T1","T2","T3"],"sn":"Create$3","rt":$n[0].ValueTuple$3(System.Object,System.Object,System.Object),"p":[System.Object,System.Object,System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1},{"n":"item3","pt":System.Object,"ps":2},{"n":"item4","pt":System.Object,"ps":3}],"tpc":4,"tprm":["T1","T2","T3","T4"],"sn":"Create$4","rt":$n[0].ValueTuple$4(System.Object,System.Object,System.Object,System.Object),"p":[System.Object,System.Object,System.Object,System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1},{"n":"item3","pt":System.Object,"ps":2},{"n":"item4","pt":System.Object,"ps":3},{"n":"item5","pt":System.Object,"ps":4}],"tpc":5,"tprm":["T1","T2","T3","T4","T5"],"sn":"Create$5","rt":$n[0].ValueTuple$5(System.Object,System.Object,System.Object,System.Object,System.Object),"p":[System.Object,System.Object,System.Object,System.Object,System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1},{"n":"item3","pt":System.Object,"ps":2},{"n":"item4","pt":System.Object,"ps":3},{"n":"item5","pt":System.Object,"ps":4},{"n":"item6","pt":System.Object,"ps":5}],"tpc":6,"tprm":["T1","T2","T3","T4","T5","T6"],"sn":"Create$6","rt":$n[0].ValueTuple$6(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object),"p":[System.Object,System.Object,System.Object,System.Object,System.Object,System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1},{"n":"item3","pt":System.Object,"ps":2},{"n":"item4","pt":System.Object,"ps":3},{"n":"item5","pt":System.Object,"ps":4},{"n":"item6","pt":System.Object,"ps":5},{"n":"item7","pt":System.Object,"ps":6}],"tpc":7,"tprm":["T1","T2","T3","T4","T5","T6","T7"],"sn":"Create$7","rt":$n[0].ValueTuple$7(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object),"p":[System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object]},{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"item1","pt":System.Object,"ps":0},{"n":"item2","pt":System.Object,"ps":1},{"n":"item3","pt":System.Object,"ps":2},{"n":"item4","pt":System.Object,"ps":3},{"n":"item5","pt":System.Object,"ps":4},{"n":"item6","pt":System.Object,"ps":5},{"n":"item7","pt":System.Object,"ps":6},{"n":"item8","pt":System.Object,"ps":7}],"tpc":8,"tprm":["T1","T2","T3","T4","T5","T6","T7","T8"],"sn":"Create$8","rt":$n[0].ValueTuple$8(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.ValueTuple$1(System.Object)),"p":[System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object]},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].ValueTuple,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].ValueTuple],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String}]}; }, $n);
    $m("System.Version", function () { return {"nested":[$n[0].Version.ParseFailureKind,$n[0].Version.VersionResult],"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"version","pt":$n[0].String,"ps":0}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32],"pi":[{"n":"major","pt":$n[0].Int32,"ps":0},{"n":"minor","pt":$n[0].Int32,"ps":1}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"major","pt":$n[0].Int32,"ps":0},{"n":"minor","pt":$n[0].Int32,"ps":1},{"n":"build","pt":$n[0].Int32,"ps":2}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"major","pt":$n[0].Int32,"ps":0},{"n":"minor","pt":$n[0].Int32,"ps":1},{"n":"build","pt":$n[0].Int32,"ps":2},{"n":"revision","pt":$n[0].Int32,"ps":3}],"sn":"$ctor3"},{"a":1,"n":"AppendPositiveNumber","is":true,"t":8,"pi":[{"n":"num","pt":$n[0].Int32,"ps":0},{"n":"sb","pt":$n[8].StringBuilder,"ps":1}],"sn":"appendPositiveNumber","rt":$n[0].Void,"p":[$n[0].Int32,$n[8].StringBuilder]},{"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"version","pt":$n[0].Object,"ps":0}],"sn":"compareTo$1","rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CompareTo","t":8,"pi":[{"n":"value","pt":$n[0].Version,"ps":0}],"sn":"compareTo","rt":$n[0].Int32,"p":[$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Version,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Parse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"parse","rt":$n[0].Version,"p":[$n[0].String]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"fieldCount","pt":$n[0].Int32,"ps":0}],"sn":"toString$1","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"result","out":true,"pt":$n[0].Version,"ps":1}],"sn":"tryParse","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"TryParseComponent","is":true,"t":8,"pi":[{"n":"component","pt":$n[0].String,"ps":0},{"n":"componentName","pt":$n[0].String,"ps":1},{"n":"result","ref":true,"pt":$n[0].Version.VersionResult,"ps":2},{"n":"parsedComponent","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"tryParseComponent","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[0].Version.VersionResult,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"TryParseVersion","is":true,"t":8,"pi":[{"n":"version","pt":$n[0].String,"ps":0},{"n":"result","ref":true,"pt":$n[0].Version.VersionResult,"ps":1}],"sn":"tryParseVersion","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Version.VersionResult],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].Version,"ps":0},{"n":"v2","pt":$n[0].Version,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[0].Version,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].Version,"ps":0},{"n":"v2","pt":$n[0].Version,"ps":1}],"sn":"op_GreaterThan","rt":$n[0].Boolean,"p":[$n[0].Version,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].Version,"ps":0},{"n":"v2","pt":$n[0].Version,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":$n[0].Boolean,"p":[$n[0].Version,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].Version,"ps":0},{"n":"v2","pt":$n[0].Version,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[0].Version,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].Version,"ps":0},{"n":"v2","pt":$n[0].Version,"ps":1}],"sn":"op_LessThan","rt":$n[0].Boolean,"p":[$n[0].Version,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].Version,"ps":0},{"n":"v2","pt":$n[0].Version,"ps":1}],"sn":"op_LessThanOrEqual","rt":$n[0].Boolean,"p":[$n[0].Version,$n[0].Version],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Build","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Build","t":8,"rt":$n[0].Int32,"fg":"Build","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Build"},{"a":2,"n":"Major","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Major","t":8,"rt":$n[0].Int32,"fg":"Major","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Major"},{"a":2,"n":"MajorRevision","t":16,"rt":$n[0].Int16,"g":{"a":2,"n":"get_MajorRevision","t":8,"rt":$n[0].Int16,"fg":"MajorRevision","box":function ($v) { return Bridge.box($v, System.Int16);}},"fn":"MajorRevision"},{"a":2,"n":"Minor","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Minor","t":8,"rt":$n[0].Int32,"fg":"Minor","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Minor"},{"a":2,"n":"MinorRevision","t":16,"rt":$n[0].Int16,"g":{"a":2,"n":"get_MinorRevision","t":8,"rt":$n[0].Int16,"fg":"MinorRevision","box":function ($v) { return Bridge.box($v, System.Int16);}},"fn":"MinorRevision"},{"a":2,"n":"Revision","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Revision","t":8,"rt":$n[0].Int32,"fg":"Revision","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Revision"},{"a":1,"n":"SeparatorsArray","is":true,"t":4,"rt":$n[0].Char,"sn":"separatorsArray","ro":true,"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":1,"n":"ZERO_CHAR_VALUE","is":true,"t":4,"rt":$n[0].Int32,"sn":"ZERO_CHAR_VALUE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_Build","t":4,"rt":$n[0].Int32,"sn":"_Build","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_Major","t":4,"rt":$n[0].Int32,"sn":"_Major","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_Minor","t":4,"rt":$n[0].Int32,"sn":"_Minor","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_Revision","t":4,"rt":$n[0].Int32,"sn":"_Revision","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Version.ParseFailureKind", function () { return {"td":$n[0].Version,"att":261,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ArgumentException","is":true,"t":4,"rt":$n[0].Version.ParseFailureKind,"sn":"ArgumentException","box":function ($v) { return Bridge.box($v, System.Version.ParseFailureKind, System.Enum.toStringFn(System.Version.ParseFailureKind));}},{"a":2,"n":"ArgumentNullException","is":true,"t":4,"rt":$n[0].Version.ParseFailureKind,"sn":"ArgumentNullException","box":function ($v) { return Bridge.box($v, System.Version.ParseFailureKind, System.Enum.toStringFn(System.Version.ParseFailureKind));}},{"a":2,"n":"ArgumentOutOfRangeException","is":true,"t":4,"rt":$n[0].Version.ParseFailureKind,"sn":"ArgumentOutOfRangeException","box":function ($v) { return Bridge.box($v, System.Version.ParseFailureKind, System.Enum.toStringFn(System.Version.ParseFailureKind));}},{"a":2,"n":"FormatException","is":true,"t":4,"rt":$n[0].Version.ParseFailureKind,"sn":"FormatException","box":function ($v) { return Bridge.box($v, System.Version.ParseFailureKind, System.Enum.toStringFn(System.Version.ParseFailureKind));}}]}; }, $n);
    $m("System.Version.VersionResult", function () { return {"td":$n[0].Version,"att":1048845,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"GetVersionParseException","t":8,"sn":"getVersionParseException","rt":$n[0].Exception},{"a":4,"n":"Init","t":8,"pi":[{"n":"argumentName","pt":$n[0].String,"ps":0},{"n":"canThrow","pt":$n[0].Boolean,"ps":1}],"sn":"init","rt":$n[0].Void,"p":[$n[0].String,$n[0].Boolean]},{"a":4,"n":"SetFailure","t":8,"pi":[{"n":"failure","pt":$n[0].Version.ParseFailureKind,"ps":0}],"sn":"setFailure","rt":$n[0].Void,"p":[$n[0].Version.ParseFailureKind]},{"a":4,"n":"SetFailure","t":8,"pi":[{"n":"failure","pt":$n[0].Version.ParseFailureKind,"ps":0},{"n":"argument","pt":$n[0].String,"ps":1}],"sn":"setFailure$1","rt":$n[0].Void,"p":[$n[0].Version.ParseFailureKind,$n[0].String]},{"a":4,"n":"m_argumentName","t":4,"rt":$n[0].String,"sn":"m_argumentName"},{"a":4,"n":"m_canThrow","t":4,"rt":$n[0].Boolean,"sn":"m_canThrow","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"m_exceptionArgument","t":4,"rt":$n[0].String,"sn":"m_exceptionArgument"},{"a":4,"n":"m_failure","t":4,"rt":$n[0].Version.ParseFailureKind,"sn":"m_failure","box":function ($v) { return Bridge.box($v, System.Version.ParseFailureKind, System.Enum.toStringFn(System.Version.ParseFailureKind));}},{"a":4,"n":"m_parsedVersion","t":4,"rt":$n[0].Version,"sn":"m_parsedVersion"}]}; }, $n);
    $m("System.Net.WebSockets.ClientWebSocket", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Abort","t":8,"sn":"abort","rt":$n[0].Void},{"a":2,"n":"CloseAsync","t":8,"pi":[{"n":"closeStatus","pt":$n[9].WebSocketCloseStatus,"ps":0},{"n":"statusDescription","pt":$n[0].String,"ps":1},{"n":"cancellationToken","pt":$n[2].CancellationToken,"ps":2}],"sn":"closeAsync","rt":$n[10].Task,"p":[$n[9].WebSocketCloseStatus,$n[0].String,$n[2].CancellationToken]},{"a":2,"n":"CloseOutputAsync","t":8,"pi":[{"n":"closeStatus","pt":$n[9].WebSocketCloseStatus,"ps":0},{"n":"statusDescription","pt":$n[0].String,"ps":1},{"n":"cancellationToken","pt":$n[2].CancellationToken,"ps":2}],"sn":"closeOutputAsync","rt":$n[10].Task,"p":[$n[9].WebSocketCloseStatus,$n[0].String,$n[2].CancellationToken]},{"a":2,"n":"ConnectAsync","t":8,"pi":[{"n":"uri","pt":$n[0].Uri,"ps":0},{"n":"cancellationToken","pt":$n[2].CancellationToken,"ps":1}],"sn":"connectAsync","rt":$n[10].Task,"p":[$n[0].Uri,$n[2].CancellationToken]},{"a":2,"n":"Dispose","t":8,"sn":"dispose","rt":$n[0].Void},{"a":2,"n":"ReceiveAsync","t":8,"pi":[{"n":"buffer","pt":$n[0].ArraySegment,"ps":0},{"n":"cancellationToken","pt":$n[2].CancellationToken,"ps":1}],"sn":"receiveAsync","rt":$n[10].Task$1(System.Net.WebSockets.WebSocketReceiveResult),"p":[$n[0].ArraySegment,$n[2].CancellationToken]},{"a":2,"n":"SendAsync","t":8,"pi":[{"n":"buffer","pt":$n[0].ArraySegment,"ps":0},{"n":"messageType","pt":$n[9].WebSocketMessageType,"ps":1},{"n":"endOfMessage","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2},{"n":"cancellationToken","dv":null,"o":true,"pt":$n[2].CancellationToken,"ps":3}],"sn":"sendAsync","rt":$n[10].Task,"p":[$n[0].ArraySegment,$n[9].WebSocketMessageType,$n[0].Boolean,$n[2].CancellationToken]},{"a":2,"n":"CloseStatus","t":16,"rt":$n[0].Nullable$1(System.Net.WebSockets.WebSocketCloseStatus),"g":{"a":2,"n":"get_CloseStatus","t":8,"tpc":0,"def":function () { return this.getCloseStatus(); },"rt":$n[0].Nullable$1(System.Net.WebSockets.WebSocketCloseStatus)}},{"a":2,"n":"CloseStatusDescription","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CloseStatusDescription","t":8,"tpc":0,"def":function () { return this.getCloseStatusDescription(); },"rt":$n[0].String}},{"a":2,"n":"Options","t":16,"rt":$n[9].ClientWebSocketOptions,"g":{"a":2,"n":"get_Options","t":8,"tpc":0,"def":function () { return this.getOptions(); },"rt":$n[9].ClientWebSocketOptions}},{"a":2,"n":"State","t":16,"rt":$n[9].WebSocketState,"g":{"a":2,"n":"get_State","t":8,"tpc":0,"def":function () { return this.getState(); },"rt":$n[9].WebSocketState}},{"a":2,"n":"SubProtocol","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_SubProtocol","t":8,"tpc":0,"def":function () { return this.getSubProtocol(); },"rt":$n[0].String}}]}; }, $n);
    $m("System.Net.WebSockets.ClientWebSocketOptions", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AddSubProtocol","t":8,"pi":[{"n":"subProtocol","pt":$n[0].String,"ps":0}],"sn":"AddSubProtocol","rt":$n[0].Void,"p":[$n[0].String]}]}; }, $n);
    $m("System.Net.WebSockets.WebSocketReceiveResult", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[9].WebSocketMessageType,$n[0].Boolean],"pi":[{"n":"count","pt":$n[0].Int32,"ps":0},{"n":"messageType","pt":$n[9].WebSocketMessageType,"ps":1},{"n":"endOfMessage","pt":$n[0].Boolean,"ps":2}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[9].WebSocketMessageType,$n[0].Boolean,$n[0].Nullable$1(System.Net.WebSockets.WebSocketCloseStatus),$n[0].String],"pi":[{"n":"count","pt":$n[0].Int32,"ps":0},{"n":"messageType","pt":$n[9].WebSocketMessageType,"ps":1},{"n":"endOfMessage","pt":$n[0].Boolean,"ps":2},{"n":"closeStatus","pt":$n[0].Nullable$1(System.Net.WebSockets.WebSocketCloseStatus),"ps":3},{"n":"closeStatusDescription","pt":$n[0].String,"ps":4}],"sn":"ctor"},{"a":2,"n":"CloseStatus","t":16,"rt":$n[0].Nullable$1(System.Net.WebSockets.WebSocketCloseStatus),"g":{"a":2,"n":"get_CloseStatus","t":8,"tpc":0,"def":function () { return this.getCloseStatus(); },"rt":$n[0].Nullable$1(System.Net.WebSockets.WebSocketCloseStatus)}},{"a":2,"n":"CloseStatusDescription","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CloseStatusDescription","t":8,"tpc":0,"def":function () { return this.getCloseStatusDescription(); },"rt":$n[0].String}},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return this.getCount(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"EndOfMessage","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_EndOfMessage","t":8,"tpc":0,"def":function () { return this.getEndOfMessage(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"MessageType","t":16,"rt":$n[9].WebSocketMessageType,"g":{"a":2,"n":"get_MessageType","t":8,"tpc":0,"def":function () { return this.getMessageType(); },"rt":$n[9].WebSocketMessageType}}]}; }, $n);
    $m("System.Text.StringBuilderCache", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":2,"n":"Acquire","is":true,"t":8,"pi":[{"n":"capacity","dv":16,"o":true,"pt":$n[0].Int32,"ps":0}],"sn":"Acquire","rt":$n[8].StringBuilder,"p":[$n[0].Int32]},{"a":2,"n":"GetStringAndRelease","is":true,"t":8,"pi":[{"n":"sb","pt":$n[8].StringBuilder,"ps":0}],"sn":"GetStringAndRelease","rt":$n[0].String,"p":[$n[8].StringBuilder]},{"a":2,"n":"Release","is":true,"t":8,"pi":[{"n":"sb","pt":$n[8].StringBuilder,"ps":0}],"sn":"Release","rt":$n[0].Void,"p":[$n[8].StringBuilder]},{"a":1,"n":"DEFAULT_CAPACITY","is":true,"t":4,"rt":$n[0].Int32,"sn":"DEFAULT_CAPACITY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MAX_BUILDER_SIZE","is":true,"t":4,"rt":$n[0].Int32,"sn":"MAX_BUILDER_SIZE","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"t_cachedInstance","is":true,"t":4,"rt":$n[8].StringBuilder,"sn":"t_cachedInstance"}]}; }, $n);
    $m("System.Text.ASCIIEncoding", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"Decode$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32]},{"ov":true,"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"outputIndex","pt":$n[0].Int32,"ps":2},{"n":"writtenBytes","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"Encode$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"GetMaxByteCount","t":8,"pi":[{"n":"charCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxByteCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"GetMaxCharCount","t":8,"pi":[{"n":"byteCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxCharCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"ov":true,"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"ov":true,"a":2,"n":"EncodingName","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_EncodingName","t":8,"rt":$n[0].String,"fg":"EncodingName"},"fn":"EncodingName"}]}; }, $n);
    $m("System.Text.Encoding", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Convert","is":true,"t":8,"pi":[{"n":"srcEncoding","pt":$n[8].Encoding,"ps":0},{"n":"dstEncoding","pt":$n[8].Encoding,"ps":1},{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":2}],"sn":"Convert","rt":$n[0].Array.type(System.Byte),"p":[$n[8].Encoding,$n[8].Encoding,$n[0].Array.type(System.Byte)]},{"a":2,"n":"Convert","is":true,"t":8,"pi":[{"n":"srcEncoding","pt":$n[8].Encoding,"ps":0},{"n":"dstEncoding","pt":$n[8].Encoding,"ps":1},{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"index","pt":$n[0].Int32,"ps":3},{"n":"count","pt":$n[0].Int32,"ps":4}],"sn":"Convert$1","rt":$n[0].Array.type(System.Byte),"p":[$n[8].Encoding,$n[8].Encoding,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Decode","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Decode$1","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ab":true,"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"Decode$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32]},{"a":3,"n":"Encode","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"Encode","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Char)]},{"a":3,"n":"Encode","t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"Encode$2","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":3,"n":"Encode","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Encode$1","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"ab":true,"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"outputIndex","pt":$n[0].Int32,"ps":2},{"n":"writtenBytes","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"Encode$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":3,"n":"Encode","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":3},{"n":"outputIndex","pt":$n[0].Int32,"ps":4}],"sn":"Encode$4","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":3},{"n":"outputIndex","pt":$n[0].Int32,"ps":4}],"sn":"Encode$5","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"FromCharCode","is":true,"t":8,"pi":[{"n":"code","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (code) { return System.String.fromCharCode(code); },"rt":$n[0].String,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"GetByteCount","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"GetByteCount","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetByteCount","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"sn":"GetByteCount$2","rt":$n[0].Int32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetByteCount","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"GetByteCount$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetBytes","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"GetBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Char)]},{"v":true,"a":2,"n":"GetBytes","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"sn":"GetBytes$2","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"v":true,"a":2,"n":"GetBytes","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"GetBytes$1","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"v":true,"a":2,"n":"GetBytes","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"charIndex","pt":$n[0].Int32,"ps":1},{"n":"charCount","pt":$n[0].Int32,"ps":2},{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":3},{"n":"byteIndex","pt":$n[0].Int32,"ps":4}],"sn":"GetBytes$3","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetBytes","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"charIndex","pt":$n[0].Int32,"ps":1},{"n":"charCount","pt":$n[0].Int32,"ps":2},{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":3},{"n":"byteIndex","pt":$n[0].Int32,"ps":4}],"sn":"GetBytes$4","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetCharCount","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"GetCharCount","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetCharCount","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"GetCharCount$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetChars","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"GetChars","rt":$n[0].Array.type(System.Char),"p":[$n[0].Array.type(System.Byte)]},{"v":true,"a":2,"n":"GetChars","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"GetChars$1","rt":$n[0].Array.type(System.Char),"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"GetChars","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"byteIndex","pt":$n[0].Int32,"ps":1},{"n":"byteCount","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"GetChars$2","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetEncoding","is":true,"t":8,"pi":[{"n":"codepage","pt":$n[0].Int32,"ps":0}],"sn":"GetEncoding","rt":$n[8].Encoding,"p":[$n[0].Int32]},{"a":2,"n":"GetEncoding","is":true,"t":8,"pi":[{"n":"codepage","pt":$n[0].String,"ps":0}],"sn":"GetEncoding$1","rt":$n[8].Encoding,"p":[$n[0].String]},{"a":2,"n":"GetEncodings","is":true,"t":8,"sn":"GetEncodings","rt":System.Array.type(System.Text.EncodingInfo)},{"ab":true,"a":2,"n":"GetMaxByteCount","t":8,"pi":[{"n":"charCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxByteCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetMaxCharCount","t":8,"pi":[{"n":"byteCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxCharCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetString","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"GetString","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"v":true,"a":2,"n":"GetString","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"GetString$1","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ASCII","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_ASCII","t":8,"rt":$n[8].Encoding,"fg":"ASCII","is":true},"fn":"ASCII"},{"a":2,"n":"BigEndianUnicode","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_BigEndianUnicode","t":8,"rt":$n[8].Encoding,"fg":"BigEndianUnicode","is":true},"fn":"BigEndianUnicode"},{"v":true,"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"a":2,"n":"Default","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_Default","t":8,"rt":$n[8].Encoding,"fg":"Default","is":true},"fn":"Default"},{"v":true,"a":2,"n":"EncodingName","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_EncodingName","t":8,"rt":$n[0].String,"fg":"EncodingName"},"fn":"EncodingName"},{"a":2,"n":"UTF32","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_UTF32","t":8,"rt":$n[8].Encoding,"fg":"UTF32","is":true},"fn":"UTF32"},{"a":2,"n":"UTF7","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_UTF7","t":8,"rt":$n[8].Encoding,"fg":"UTF7","is":true},"fn":"UTF7"},{"a":2,"n":"UTF8","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_UTF8","t":8,"rt":$n[8].Encoding,"fg":"UTF8","is":true},"fn":"UTF8"},{"a":2,"n":"Unicode","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":2,"n":"get_Unicode","t":8,"rt":$n[8].Encoding,"fg":"Unicode","is":true},"fn":"Unicode"},{"a":1,"n":"__Property__Initializer__ASCII","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__ASCII"},{"a":1,"n":"__Property__Initializer__BigEndianUnicode","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__BigEndianUnicode"},{"a":1,"n":"__Property__Initializer__Default","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__Default"},{"a":1,"n":"__Property__Initializer__UTF32","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__UTF32"},{"a":1,"n":"__Property__Initializer__UTF7","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__UTF7"},{"a":1,"n":"__Property__Initializer__UTF8","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__UTF8"},{"a":1,"n":"__Property__Initializer__Unicode","is":true,"t":4,"rt":$n[8].Encoding,"sn":"__Property__Initializer__Unicode"},{"a":1,"n":"_encodings","is":true,"t":4,"rt":System.Array.type(System.Text.EncodingInfo),"sn":"_encodings"},{"a":4,"n":"_hasError","t":4,"rt":$n[0].Boolean,"sn":"_hasError","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"fallbackCharacter","t":4,"rt":$n[0].Char,"sn":"fallbackCharacter","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}}]}; }, $n);
    $m("System.Text.UTF32Encoding", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean,$n[0].Boolean],"pi":[{"n":"bigEndian","pt":$n[0].Boolean,"ps":0},{"n":"byteOrderMark","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean,$n[0].Boolean,$n[0].Boolean],"pi":[{"n":"bigEndian","pt":$n[0].Boolean,"ps":0},{"n":"byteOrderMark","pt":$n[0].Boolean,"ps":1},{"n":"throwOnInvalidBytes","pt":$n[0].Boolean,"ps":2}],"sn":"$ctor2"},{"ov":true,"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"Decode$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32]},{"ov":true,"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"outputIndex","pt":$n[0].Int32,"ps":2},{"n":"writtenBytes","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"Encode$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"GetMaxByteCount","t":8,"pi":[{"n":"charCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxByteCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"GetMaxCharCount","t":8,"pi":[{"n":"byteCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxCharCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"ToCodePoints","t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"ToCodePoints","rt":$n[0].Array.type(System.Char),"p":[$n[0].String]},{"ov":true,"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"ov":true,"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"ov":true,"a":2,"n":"EncodingName","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_EncodingName","t":8,"rt":$n[0].String,"fg":"EncodingName"},"fn":"EncodingName"},{"a":1,"n":"bigEndian","t":4,"rt":$n[0].Boolean,"sn":"bigEndian","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"byteOrderMark","t":4,"rt":$n[0].Boolean,"sn":"byteOrderMark","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"throwOnInvalid","t":4,"rt":$n[0].Boolean,"sn":"throwOnInvalid","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Text.UTF7Encoding", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean],"pi":[{"n":"allowOptionals","pt":$n[0].Boolean,"ps":0}],"sn":"$ctor1"},{"ov":true,"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"Decode$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32]},{"ov":true,"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"outputIndex","pt":$n[0].Int32,"ps":2},{"n":"writtenBytes","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"Encode$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":1,"n":"Escape","is":true,"t":8,"pi":[{"n":"chars","pt":$n[0].String,"ps":0}],"sn":"Escape","rt":$n[0].String,"p":[$n[0].String]},{"ov":true,"a":2,"n":"GetMaxByteCount","t":8,"pi":[{"n":"charCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxByteCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"GetMaxCharCount","t":8,"pi":[{"n":"byteCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxCharCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"ov":true,"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"ov":true,"a":2,"n":"EncodingName","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_EncodingName","t":8,"rt":$n[0].String,"fg":"EncodingName"},"fn":"EncodingName"},{"a":1,"n":"allowOptionals","t":4,"rt":$n[0].Boolean,"sn":"allowOptionals","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Text.UTF8Encoding", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean],"pi":[{"n":"encoderShouldEmitUTF8Identifier","pt":$n[0].Boolean,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean,$n[0].Boolean],"pi":[{"n":"encoderShouldEmitUTF8Identifier","pt":$n[0].Boolean,"ps":0},{"n":"throwOnInvalidBytes","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor2"},{"ov":true,"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"Decode$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32]},{"ov":true,"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"outputIndex","pt":$n[0].Int32,"ps":2},{"n":"writtenBytes","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"Encode$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"GetMaxByteCount","t":8,"pi":[{"n":"charCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxByteCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"GetMaxCharCount","t":8,"pi":[{"n":"byteCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxCharCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"ov":true,"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"ov":true,"a":2,"n":"EncodingName","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_EncodingName","t":8,"rt":$n[0].String,"fg":"EncodingName"},"fn":"EncodingName"},{"a":1,"n":"encoderShouldEmitUTF8Identifier","t":4,"rt":$n[0].Boolean,"sn":"encoderShouldEmitUTF8Identifier","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"throwOnInvalid","t":4,"rt":$n[0].Boolean,"sn":"throwOnInvalid","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Text.UnicodeEncoding", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean,$n[0].Boolean],"pi":[{"n":"bigEndian","pt":$n[0].Boolean,"ps":0},{"n":"byteOrderMark","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean,$n[0].Boolean,$n[0].Boolean],"pi":[{"n":"bigEndian","pt":$n[0].Boolean,"ps":0},{"n":"byteOrderMark","pt":$n[0].Boolean,"ps":1},{"n":"throwOnInvalidBytes","pt":$n[0].Boolean,"ps":2}],"sn":"$ctor2"},{"ov":true,"a":3,"n":"Decode","t":8,"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":3},{"n":"charIndex","pt":$n[0].Int32,"ps":4}],"sn":"Decode$2","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Char),$n[0].Int32]},{"ov":true,"a":3,"n":"Encode","t":8,"pi":[{"n":"s","pt":$n[0].String,"ps":0},{"n":"outputBytes","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"outputIndex","pt":$n[0].Int32,"ps":2},{"n":"writtenBytes","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"Encode$3","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"GetMaxByteCount","t":8,"pi":[{"n":"charCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxByteCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"GetMaxCharCount","t":8,"pi":[{"n":"byteCount","pt":$n[0].Int32,"ps":0}],"sn":"GetMaxCharCount","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"ov":true,"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"ov":true,"a":2,"n":"EncodingName","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_EncodingName","t":8,"rt":$n[0].String,"fg":"EncodingName"},"fn":"EncodingName"},{"a":1,"n":"bigEndian","t":4,"rt":$n[0].Boolean,"sn":"bigEndian","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"byteOrderMark","t":4,"rt":$n[0].Boolean,"sn":"byteOrderMark","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"throwOnInvalid","t":4,"rt":$n[0].Boolean,"sn":"throwOnInvalid","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Text.EncodingInfo", function () { return {"att":1048833,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].String,$n[0].String],"pi":[{"n":"codePage","pt":$n[0].Int32,"ps":0},{"n":"name","pt":$n[0].String,"ps":1},{"n":"displayName","pt":$n[0].String,"ps":2}],"sn":"ctor"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"GetEncoding","t":8,"sn":"GetEncoding","rt":$n[8].Encoding},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CodePage","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CodePage","t":8,"rt":$n[0].Int32,"fg":"CodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CodePage"},{"a":2,"n":"DisplayName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_DisplayName","t":8,"rt":$n[0].String,"fg":"DisplayName"},"fn":"DisplayName"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"fn":"Name"}]}; }, $n);
    $m("System.Text.StringBuilder", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"def":function (capacity) { return new System.Text.StringBuilder("", capacity); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32],"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"capacity","pt":$n[0].Int32,"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32,$n[0].Int32],"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2},{"n":"capacity","pt":$n[0].Int32,"ps":3}],"sn":"ctor"},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Boolean]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Byte]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"tpc":0,"def":function (value) { return this.append(String.fromCharCode(value)); },"rt":$n[8].StringBuilder,"p":[$n[0].Char]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Decimal]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Double]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Int32]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"tpc":0,"def":function (value) { return this.append(value.toString()); },"rt":$n[8].StringBuilder,"p":[$n[0].Int64]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Object]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].Single]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].String]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].UInt32]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"tpc":0,"def":function (value) { return this.append(value.toString()); },"rt":$n[8].StringBuilder,"p":[$n[0].UInt64]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0},{"n":"repeatCount","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (value, repeatCount) { return this.append(String.fromCharCode(value), repeatCount); },"rt":$n[8].StringBuilder,"p":[$n[0].Char,$n[0].Int32]},{"a":2,"n":"Append","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"append","rt":$n[8].StringBuilder,"p":[$n[0].String,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"AppendFormat","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"appendFormat","rt":$n[8].StringBuilder,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"AppendLine","t":8,"sn":"appendLine","rt":$n[8].StringBuilder},{"a":2,"n":"AppendLine","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"appendLine","rt":$n[8].StringBuilder,"p":[$n[0].String]},{"a":2,"n":"Clear","t":8,"sn":"clear","rt":$n[8].StringBuilder},{"a":2,"n":"Equals","t":8,"pi":[{"n":"sb","pt":$n[8].StringBuilder,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[8].StringBuilder],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Boolean,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Char,"ps":1}],"tpc":0,"def":function (index, value) { return this.insert(index, String.fromCharCode(value)); },"rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Char]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Decimal,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Decimal]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Double,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Double]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int32,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Int64,"ps":1}],"tpc":0,"def":function (index, value) { return this.insert(index, value.toString()); },"rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Int64]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Object]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Single,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Single]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].String,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].String]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].UInt32,"ps":1}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].UInt32]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].UInt64,"ps":1}],"tpc":0,"def":function (index, value) { return this.insert(index, value.toString()); },"rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].UInt64]},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].String,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"insert","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].String,$n[0].Int32]},{"a":2,"n":"Remove","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"length","pt":$n[0].Int32,"ps":1}],"sn":"remove","rt":$n[8].StringBuilder,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"oldChar","pt":$n[0].Char,"ps":0},{"n":"newChar","pt":$n[0].Char,"ps":1}],"tpc":0,"def":function (oldChar, newChar) { return this.replace(String.fromCharCode(oldChar), String.fromCharCode(newChar)); },"rt":$n[8].StringBuilder,"p":[$n[0].Char,$n[0].Char]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"oldValue","pt":$n[0].String,"ps":0},{"n":"newValue","pt":$n[0].String,"ps":1}],"sn":"replace","rt":$n[8].StringBuilder,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"oldChar","pt":$n[0].Char,"ps":0},{"n":"newChar","pt":$n[0].Char,"ps":1},{"n":"startIndex","pt":$n[0].Int32,"ps":2},{"n":"count","pt":$n[0].Int32,"ps":3}],"tpc":0,"def":function (oldChar, newChar, startIndex, count) { return this.replace(String.fromCharCode(oldChar), String.fromCharCode(newChar), startIndex, count); },"rt":$n[8].StringBuilder,"p":[$n[0].Char,$n[0].Char,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"oldValue","pt":$n[0].String,"ps":0},{"n":"newValue","pt":$n[0].String,"ps":1},{"n":"startIndex","pt":$n[0].Int32,"ps":2},{"n":"count","pt":$n[0].Int32,"ps":3}],"sn":"replace","rt":$n[8].StringBuilder,"p":[$n[0].String,$n[0].String,$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"length","pt":$n[0].Int32,"ps":1}],"sn":"toString","rt":$n[0].String,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Capacity","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Capacity","t":8,"tpc":0,"def":function () { return this.getCapacity(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Capacity","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return this.setCapacity(value); },"rt":$n[0].Void,"p":[$n[0].Int32]}},{"a":2,"n":"Item","t":16,"rt":$n[0].Char,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"getChar","rt":$n[0].Char,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Char,"ps":1}],"sn":"setChar","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Char]}},{"a":2,"n":"Length","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Length","t":8,"tpc":0,"def":function () { return this.getLength(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Length","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (value) { return this.setLength(value); },"rt":$n[0].Void,"p":[$n[0].Int32]}}]}; }, $n);
    $m("System.Text.RegularExpressions.Capture", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32,$n[0].Int32],"pi":[{"n":"text","pt":$n[0].String,"ps":0},{"n":"i","pt":$n[0].Int32,"ps":1},{"n":"l","pt":$n[0].Int32,"ps":2}],"sn":"ctor"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Index","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Index","t":8,"tpc":0,"def":function () { return this.getIndex(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Length","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Length","t":8,"tpc":0,"def":function () { return this.getLength(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"Value","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Value","t":8,"tpc":0,"def":function () { return this.getValue(); },"rt":$n[0].String}}]}; }, $n);
    $m("System.Text.RegularExpressions.CaptureCollection", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[7].IEnumerator},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return this.getCount(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"tpc":0,"def":function () { return this.getIsReadOnly(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"IsSynchronized","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsSynchronized","t":8,"tpc":0,"def":function () { return this.getIsSynchronized(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"Item","t":16,"rt":$n[6].Capture,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (i) { return this.get(i); },"rt":$n[6].Capture,"p":[$n[0].Int32]}},{"a":2,"n":"SyncRoot","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_SyncRoot","t":8,"tpc":0,"def":function () { return this.getSyncRoot(); },"rt":$n[0].Object}}]}; }, $n);
    $m("System.Text.RegularExpressions.Group", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Array.type(System.Int32),$n[0].Int32],"pi":[{"n":"text","pt":$n[0].String,"ps":0},{"n":"caps","pt":$n[0].Array.type(System.Int32),"ps":1},{"n":"capcount","pt":$n[0].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"Synchronized","is":true,"t":8,"pi":[{"n":"inner","pt":$n[6].Group,"ps":0}],"sn":"synchronized","rt":$n[6].Group,"p":[$n[6].Group]},{"a":2,"n":"Captures","t":16,"rt":$n[6].CaptureCollection,"g":{"a":2,"n":"get_Captures","t":8,"tpc":0,"def":function () { return this.getCaptures(); },"rt":$n[6].CaptureCollection}},{"a":2,"n":"Success","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_Success","t":8,"tpc":0,"def":function () { return this.getSuccess(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}}]}; }, $n);
    $m("System.Text.RegularExpressions.GroupCollection", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[7].IEnumerator},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return this.getCount(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"tpc":0,"def":function () { return this.getIsReadOnly(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"IsSynchronized","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsSynchronized","t":8,"tpc":0,"def":function () { return this.getIsSynchronized(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"Item","t":16,"rt":$n[6].Group,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"groupnum","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"groupnum","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (groupnum) { return this.get(groupnum); },"rt":$n[6].Group,"p":[$n[0].Int32]}},{"a":2,"n":"Item","t":16,"rt":$n[6].Group,"p":[$n[0].String],"i":true,"ipi":[{"n":"groupname","pt":$n[0].String,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"groupname","pt":$n[0].String,"ps":0}],"tpc":0,"def":function (groupname) { return this.getByName(groupname); },"rt":$n[6].Group,"p":[$n[0].String]}},{"a":2,"n":"SyncRoot","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_SyncRoot","t":8,"tpc":0,"def":function () { return this.getSyncRoot(); },"rt":$n[0].Object}}]}; }, $n);
    $m("System.Text.RegularExpressions.Match", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[6].Regex,$n[0].Int32,$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"regex","pt":$n[6].Regex,"ps":0},{"n":"capcount","pt":$n[0].Int32,"ps":1},{"n":"text","pt":$n[0].String,"ps":2},{"n":"begpos","pt":$n[0].Int32,"ps":3},{"n":"len","pt":$n[0].Int32,"ps":4},{"n":"startpos","pt":$n[0].Int32,"ps":5}],"sn":"ctor"},{"a":2,"n":"NextMatch","t":8,"sn":"nextMatch","rt":$n[6].Match},{"v":true,"a":2,"n":"Result","t":8,"pi":[{"n":"replacement","pt":$n[0].String,"ps":0}],"sn":"result","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"Synchronized","is":true,"t":8,"pi":[{"n":"inner","pt":$n[6].Match,"ps":0}],"sn":"synchronized","rt":$n[6].Match,"p":[$n[6].Match]},{"a":2,"n":"Empty","is":true,"t":16,"rt":$n[6].Match,"g":{"a":2,"n":"get_Empty","is":true,"t":8,"tpc":0,"def":function () { return this.getEmpty(); },"rt":$n[6].Match}},{"v":true,"a":2,"n":"Groups","t":16,"rt":$n[6].GroupCollection,"g":{"v":true,"a":2,"n":"get_Groups","t":8,"tpc":0,"def":function () { return this.getGroups(); },"rt":$n[6].GroupCollection}}]}; }, $n);
    $m("System.Text.RegularExpressions.MatchCollection", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[6].Regex,$n[0].String,$n[0].Int32,$n[0].Int32,$n[0].Int32],"pi":[{"n":"regex","pt":$n[6].Regex,"ps":0},{"n":"input","pt":$n[0].String,"ps":1},{"n":"beginning","pt":$n[0].Int32,"ps":2},{"n":"length","pt":$n[0].Int32,"ps":3},{"n":"startat","pt":$n[0].Int32,"ps":4}],"sn":"ctor"},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[7].IEnumerator},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return this.getCount(); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"tpc":0,"def":function () { return this.getIsReadOnly(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"IsSynchronized","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsSynchronized","t":8,"tpc":0,"def":function () { return this.getIsSynchronized(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"v":true,"a":2,"n":"Item","t":16,"rt":$n[6].Match,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"g":{"v":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (i) { return this.get(i); },"rt":$n[6].Match,"p":[$n[0].Int32]}},{"a":2,"n":"SyncRoot","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_SyncRoot","t":8,"tpc":0,"def":function () { return this.getSyncRoot(); },"rt":$n[0].Object}}]}; }, $n);
    $m("System.Text.RegularExpressions.Regex", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"pattern","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[6].RegexOptions],"pi":[{"n":"pattern","pt":$n[0].String,"ps":0},{"n":"options","pt":$n[6].RegexOptions,"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[6].RegexOptions,$n[0].TimeSpan],"pi":[{"n":"pattern","pt":$n[0].String,"ps":0},{"n":"options","pt":$n[6].RegexOptions,"ps":1},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":2}],"sn":"ctor"},{"a":2,"n":"Escape","is":true,"t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"escape","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"GetGroupNames","t":8,"sn":"getGroupNames","rt":$n[0].Array.type(System.String)},{"a":2,"n":"GetGroupNumbers","t":8,"sn":"getGroupNumbers","rt":$n[0].Array.type(System.Int32)},{"a":2,"n":"GroupNameFromNumber","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"groupNameFromNumber","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"GroupNumberFromName","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"groupNumberFromName","rt":$n[0].Int32,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsMatch","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"isMatch","rt":$n[0].Boolean,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsMatch","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"startat","pt":$n[0].Int32,"ps":1}],"sn":"isMatch","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsMatch","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1}],"sn":"isMatch","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsMatch","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2}],"sn":"isMatch","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[6].RegexOptions],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsMatch","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":3}],"sn":"isMatch","rt":$n[0].Boolean,"p":[$n[0].String,$n[0].String,$n[6].RegexOptions,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Match","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"match","rt":$n[6].Match,"p":[$n[0].String]},{"a":2,"n":"Match","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"startat","pt":$n[0].Int32,"ps":1}],"sn":"match","rt":$n[6].Match,"p":[$n[0].String,$n[0].Int32]},{"a":2,"n":"Match","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1}],"sn":"match","rt":$n[6].Match,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Match","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"beginning","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2}],"sn":"match","rt":$n[6].Match,"p":[$n[0].String,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Match","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2}],"sn":"match","rt":$n[6].Match,"p":[$n[0].String,$n[0].String,$n[6].RegexOptions]},{"a":2,"n":"Match","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":3}],"sn":"match","rt":$n[6].Match,"p":[$n[0].String,$n[0].String,$n[6].RegexOptions,$n[0].TimeSpan]},{"a":2,"n":"Matches","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"matches","rt":$n[6].MatchCollection,"p":[$n[0].String]},{"a":2,"n":"Matches","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"startat","pt":$n[0].Int32,"ps":1}],"sn":"matches","rt":$n[6].MatchCollection,"p":[$n[0].String,$n[0].Int32]},{"a":2,"n":"Matches","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1}],"sn":"matches","rt":$n[6].MatchCollection,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Matches","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2}],"sn":"matches","rt":$n[6].MatchCollection,"p":[$n[0].String,$n[0].String,$n[6].RegexOptions]},{"a":2,"n":"Matches","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":3}],"sn":"matches","rt":$n[6].MatchCollection,"p":[$n[0].String,$n[0].String,$n[6].RegexOptions,$n[0].TimeSpan]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"replacement","pt":$n[0].String,"ps":1}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"evaluator","pt":Function,"ps":1}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,Function]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"replacement","pt":$n[0].String,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].Int32]},{"a":2,"n":"Replace","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"replacement","pt":$n[0].String,"ps":2}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].String]},{"a":2,"n":"Replace","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"evaluator","pt":Function,"ps":2}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,Function]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"evaluator","pt":Function,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,Function,$n[0].Int32]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"replacement","pt":$n[0].String,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"startat","pt":$n[0].Int32,"ps":3}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Replace","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"replacement","pt":$n[0].String,"ps":2},{"n":"options","pt":$n[6].RegexOptions,"ps":3}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].String,$n[6].RegexOptions]},{"a":2,"n":"Replace","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"evaluator","pt":Function,"ps":2},{"n":"options","pt":$n[6].RegexOptions,"ps":3}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,Function,$n[6].RegexOptions]},{"a":2,"n":"Replace","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"evaluator","pt":Function,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"startat","pt":$n[0].Int32,"ps":3}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,Function,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Replace","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"replacement","pt":$n[0].String,"ps":2},{"n":"options","pt":$n[6].RegexOptions,"ps":3},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":4}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,$n[0].String,$n[6].RegexOptions,$n[0].TimeSpan]},{"a":2,"n":"Replace","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"evaluator","pt":Function,"ps":2},{"n":"options","pt":$n[6].RegexOptions,"ps":3},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":4}],"sn":"replace","rt":$n[0].String,"p":[$n[0].String,$n[0].String,Function,$n[6].RegexOptions,$n[0].TimeSpan]},{"a":2,"n":"Split","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"split","rt":$n[0].Array.type(System.String),"p":[$n[0].String]},{"a":2,"n":"Split","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"sn":"split","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[0].Int32]},{"a":2,"n":"Split","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1}],"sn":"split","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Split","t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"startat","pt":$n[0].Int32,"ps":2}],"sn":"split","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Split","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2}],"sn":"split","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[0].String,$n[6].RegexOptions]},{"a":2,"n":"Split","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0},{"n":"pattern","pt":$n[0].String,"ps":1},{"n":"options","pt":$n[6].RegexOptions,"ps":2},{"n":"matchTimeout","pt":$n[0].TimeSpan,"ps":3}],"sn":"split","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[0].String,$n[6].RegexOptions,$n[0].TimeSpan]},{"a":2,"n":"Unescape","is":true,"t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"unescape","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"MatchTimeout","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_MatchTimeout","t":8,"tpc":0,"def":function () { return this.getMatchTimeout(); },"rt":$n[0].TimeSpan}},{"a":2,"n":"Options","t":16,"rt":$n[6].RegexOptions,"g":{"a":2,"n":"get_Options","t":8,"tpc":0,"def":function () { return this.getOptions(); },"rt":$n[6].RegexOptions}},{"a":2,"n":"RightToLeft","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_RightToLeft","t":8,"tpc":0,"def":function () { return this.getRightToLeft(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}}]}; }, $n);
    $m("System.Threading.Timer", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[Function],"pi":[{"n":"callback","pt":Function,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].Object,$n[0].Int32,$n[0].Int32],"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1},{"n":"dueTime","pt":$n[0].Int32,"ps":2},{"n":"period","pt":$n[0].Int32,"ps":3}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].Object,$n[0].Int64,$n[0].Int64],"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1},{"n":"dueTime","pt":$n[0].Int64,"ps":2},{"n":"period","pt":$n[0].Int64,"ps":3}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].Object,$n[0].TimeSpan,$n[0].TimeSpan],"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1},{"n":"dueTime","pt":$n[0].TimeSpan,"ps":2},{"n":"period","pt":$n[0].TimeSpan,"ps":3}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].Object,$n[0].UInt32,$n[0].UInt32],"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1},{"n":"dueTime","pt":$n[0].UInt32,"ps":2},{"n":"period","pt":$n[0].UInt32,"ps":3}],"sn":"$ctor4"},{"a":2,"n":"Change","t":8,"pi":[{"n":"dueTime","pt":$n[0].Int32,"ps":0},{"n":"period","pt":$n[0].Int32,"ps":1}],"sn":"Change","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Change","t":8,"pi":[{"n":"dueTime","pt":$n[0].Int64,"ps":0},{"n":"period","pt":$n[0].Int64,"ps":1}],"sn":"Change$1","rt":$n[0].Boolean,"p":[$n[0].Int64,$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Change","t":8,"pi":[{"n":"dueTime","pt":$n[0].TimeSpan,"ps":0},{"n":"period","pt":$n[0].TimeSpan,"ps":1}],"sn":"Change$2","rt":$n[0].Boolean,"p":[$n[0].TimeSpan,$n[0].TimeSpan],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Change","t":8,"pi":[{"n":"dueTime","pt":$n[0].UInt32,"ps":0},{"n":"period","pt":$n[0].UInt32,"ps":1}],"sn":"Change$3","rt":$n[0].Boolean,"p":[$n[0].UInt32,$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ChangeTimer","t":8,"pi":[{"n":"dueTime","pt":$n[0].Int64,"ps":0},{"n":"period","pt":$n[0].Int64,"ps":1}],"sn":"ChangeTimer","rt":$n[0].Boolean,"p":[$n[0].Int64,$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ClearTimeout","t":8,"sn":"ClearTimeout","rt":$n[0].Void},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"a":1,"n":"HandleCallback","t":8,"sn":"HandleCallback","rt":$n[0].Void},{"a":1,"n":"RunTimer","t":8,"pi":[{"n":"period","pt":$n[0].Int64,"ps":0},{"n":"checkDispose","dv":true,"o":true,"pt":$n[0].Boolean,"ps":1}],"sn":"RunTimer","rt":$n[0].Boolean,"p":[$n[0].Int64,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"TimerSetup","t":8,"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1},{"n":"dueTime","pt":$n[0].Int64,"ps":2},{"n":"period","pt":$n[0].Int64,"ps":3}],"sn":"TimerSetup","rt":$n[0].Boolean,"p":[Function,$n[0].Object,$n[0].Int64,$n[0].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"EXC_DISPOSED","is":true,"t":4,"rt":$n[0].String,"sn":"EXC_DISPOSED"},{"a":1,"n":"EXC_LESS","is":true,"t":4,"rt":$n[0].String,"sn":"EXC_LESS"},{"a":1,"n":"EXC_MORE","is":true,"t":4,"rt":$n[0].String,"sn":"EXC_MORE"},{"a":1,"n":"MAX_SUPPORTED_TIMEOUT","is":true,"t":4,"rt":$n[0].UInt32,"sn":"MAX_SUPPORTED_TIMEOUT","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"disposed","t":4,"rt":$n[0].Boolean,"sn":"disposed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"dueTime","t":4,"rt":$n[0].Int64,"sn":"dueTime"},{"a":1,"n":"id","t":4,"rt":$n[0].Nullable$1(System.Int32),"sn":"id","box":function ($v) { return Bridge.box($v, System.Int32, System.Nullable.toString, System.Nullable.getHashCode);}},{"a":4,"n":"period","t":4,"rt":$n[0].Int64,"sn":"period"},{"a":1,"n":"state","t":4,"rt":$n[0].Object,"sn":"state"},{"a":1,"n":"timerCallback","t":4,"rt":Function,"sn":"timerCallback"}]}; }, $n);
    $m("System.Threading.CancellationToken", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean],"pi":[{"n":"canceled","pt":$n[0].Boolean,"ps":0}],"sn":"ctor"},{"a":2,"n":"Register","t":8,"pi":[{"n":"callback","pt":Function,"ps":0}],"sn":"register","rt":$n[2].CancellationTokenRegistration,"p":[Function]},{"a":2,"n":"Register","t":8,"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"useSynchronizationContext","pt":$n[0].Boolean,"ps":1}],"tpc":0,"def":function (callback, useSynchronizationContext) { return this.register(callback); },"rt":$n[2].CancellationTokenRegistration,"p":[Function,$n[0].Boolean]},{"a":2,"n":"Register","t":8,"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1}],"sn":"register","rt":$n[2].CancellationTokenRegistration,"p":[Function,$n[0].Object]},{"a":2,"n":"Register","t":8,"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1},{"n":"useSynchronizationContext","pt":$n[0].Boolean,"ps":2}],"tpc":0,"def":function (callback, state, useSynchronizationContext) { return this.register(callback, state); },"rt":$n[2].CancellationTokenRegistration,"p":[Function,$n[0].Object,$n[0].Boolean]},{"a":2,"n":"ThrowIfCancellationRequested","t":8,"sn":"throwIfCancellationRequested","rt":$n[0].Void},{"a":2,"n":"CanBeCanceled","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_CanBeCanceled","t":8,"tpc":0,"def":function () { return this.getCanBeCanceled(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"IsCancellationRequested","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsCancellationRequested","t":8,"tpc":0,"def":function () { return this.getIsCancellationRequested(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"None","is":true,"t":16,"rt":$n[2].CancellationToken,"g":{"a":2,"n":"get_None","t":8,"rt":$n[2].CancellationToken,"fg":"none","is":true},"fn":"none"}]}; }, $n);
    $m("System.Threading.CancellationTokenRegistration", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Dispose","t":8,"sn":"dispose","rt":$n[0].Void},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[2].CancellationTokenRegistration,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[2].CancellationTokenRegistration],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"left","pt":$n[2].CancellationTokenRegistration,"ps":0},{"n":"right","pt":$n[2].CancellationTokenRegistration,"ps":1}],"tpc":0,"def":function (left, right) { return Bridge.equals(left, right); },"rt":$n[0].Boolean,"p":[$n[2].CancellationTokenRegistration,$n[2].CancellationTokenRegistration],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"left","pt":$n[2].CancellationTokenRegistration,"ps":0},{"n":"right","pt":$n[2].CancellationTokenRegistration,"ps":1}],"tpc":0,"def":function (left, right) { return !Bridge.equals(left, right); },"rt":$n[0].Boolean,"p":[$n[2].CancellationTokenRegistration,$n[2].CancellationTokenRegistration],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Threading.CancellationTokenSource", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"millisecondsDelay","pt":$n[0].Int32,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].TimeSpan],"pi":[{"n":"delay","pt":$n[0].TimeSpan,"ps":0}],"def":function (delay) { return new System.Threading.CancellationTokenSource(delay.ticks / 10000); }},{"a":2,"n":"Cancel","t":8,"sn":"cancel","rt":$n[0].Void},{"a":2,"n":"Cancel","t":8,"pi":[{"n":"throwOnFirstException","pt":$n[0].Boolean,"ps":0}],"sn":"cancel","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"CancelAfter","t":8,"pi":[{"n":"millisecondsDelay","pt":$n[0].Int32,"ps":0}],"sn":"cancelAfter","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"CancelAfter","t":8,"pi":[{"n":"delay","pt":$n[0].TimeSpan,"ps":0}],"tpc":0,"def":function (delay) { return this.cancelAfter(delay.ticks / 10000); },"rt":$n[0].Void,"p":[$n[0].TimeSpan]},{"a":2,"n":"CreateLinkedTokenSource","is":true,"t":8,"pi":[{"n":"tokens","ip":true,"pt":System.Array.type(System.Threading.CancellationToken),"ps":0}],"tpc":0,"def":function (tokens) { return System.Threading.CancellationTokenSource.createLinked(tokens); },"rt":$n[2].CancellationTokenSource,"p":[System.Array.type(System.Threading.CancellationToken)]},{"a":2,"n":"CreateLinkedTokenSource","is":true,"t":8,"pi":[{"n":"token1","pt":$n[2].CancellationToken,"ps":0},{"n":"token2","pt":$n[2].CancellationToken,"ps":1}],"sn":"createLinked","rt":$n[2].CancellationTokenSource,"p":[$n[2].CancellationToken,$n[2].CancellationToken]},{"a":2,"n":"Dispose","t":8,"sn":"dispose","rt":$n[0].Void},{"a":2,"n":"IsCancellationRequested","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsCancellationRequested","t":8,"rt":$n[0].Boolean,"fg":"isCancellationRequested","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":1,"n":"set_IsCancellationRequested","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"isCancellationRequested"},"fn":"isCancellationRequested"},{"a":2,"n":"Token","t":16,"rt":$n[2].CancellationToken,"g":{"a":2,"n":"get_Token","t":8,"rt":$n[2].CancellationToken,"fg":"token"},"s":{"a":1,"n":"set_Token","t":8,"p":[$n[2].CancellationToken],"rt":$n[0].Void,"fs":"token"},"fn":"token"}]}; }, $n);
    $m("System.Threading.Tasks.TaskCanceledException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[10].Task],"pi":[{"n":"task","pt":$n[10].Task,"ps":0}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":"Task","t":16,"rt":$n[10].Task,"g":{"a":2,"n":"get_Task","t":8,"rt":$n[10].Task,"fg":"Task"},"fn":"Task"},{"a":1,"n":"_canceledTask","t":4,"rt":$n[10].Task,"sn":"_canceledTask","ro":true}]}; }, $n);
    $m("System.Threading.Tasks.TaskSchedulerException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Exception],"pi":[{"n":"innerException","pt":$n[0].Exception,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor3"}]}; }, $n);
    $m("System.Threading.Tasks.Task", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[Function],"pi":[{"n":"action","pt":Function,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].Object],"pi":[{"n":"action","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1}],"sn":"ctor"},{"a":2,"n":"Complete","t":8,"pi":[{"n":"result","dv":null,"o":true,"pt":$n[0].Object,"ps":0}],"sn":"complete","rt":$n[0].Void,"p":[$n[0].Object]},{"a":2,"n":"ContinueWith","t":8,"pi":[{"n":"continuationAction","pt":Function,"ps":0}],"sn":"continueWith","rt":$n[10].Task,"p":[Function]},{"a":2,"n":"ContinueWith","t":8,"pi":[{"n":"continuationFunction","pt":Function,"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"continueWith","rt":$n[10].Task$1(System.Object),"p":[Function]},{"a":2,"n":"Delay","is":true,"t":8,"pi":[{"n":"millisecondDelay","pt":$n[0].Int32,"ps":0}],"sn":"delay","rt":$n[10].Task,"p":[$n[0].Int32]},{"a":2,"n":"Dispose","t":8,"sn":"dispose","rt":$n[0].Void},{"a":2,"n":"FromCallback","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Object,"ps":0},{"n":"method","pt":$n[0].String,"ps":1},{"n":"otherArguments","ip":true,"pt":$n[0].Array.type(System.Object),"ps":2}],"sn":"fromCallback","rt":$n[10].Task,"p":[$n[0].Object,$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"FromCallback","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Object,"ps":0},{"n":"method","pt":$n[0].String,"ps":1},{"n":"otherArguments","ip":true,"pt":$n[0].Array.type(System.Object),"ps":2}],"tpc":1,"tprm":["TResult"],"sn":"fromCallback","rt":$n[10].Task$1(System.Object),"p":[$n[0].Object,$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"FromCallbackResult","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Object,"ps":0},{"n":"method","pt":$n[0].String,"ps":1},{"n":"resultHandler","pt":Function,"ps":2},{"n":"otherArguments","ip":true,"pt":$n[0].Array.type(System.Object),"ps":3}],"sn":"fromCallbackResult","rt":$n[10].Task,"p":[$n[0].Object,$n[0].String,Function,$n[0].Array.type(System.Object)]},{"a":2,"n":"FromCallbackResult","is":true,"t":8,"pi":[{"n":"target","pt":$n[0].Object,"ps":0},{"n":"method","pt":$n[0].String,"ps":1},{"n":"resultHandler","pt":Function,"ps":2},{"n":"otherArguments","ip":true,"pt":$n[0].Array.type(System.Object),"ps":3}],"tpc":1,"tprm":["TResult"],"sn":"fromCallbackResult","rt":$n[10].Task$1(System.Object),"p":[$n[0].Object,$n[0].String,Function,$n[0].Array.type(System.Object)]},{"a":2,"n":"FromPromise","is":true,"t":8,"pi":[{"n":"promise","pt":Bridge.IPromise,"ps":0}],"sn":"fromPromise","rt":$n[10].Task$1(System.Array.type(System.Object)),"p":[Bridge.IPromise]},{"a":2,"n":"FromPromise","is":true,"t":8,"pi":[{"n":"promise","pt":Bridge.IPromise,"ps":0},{"n":"resultHandler","pt":Function,"ps":1}],"tpc":1,"tprm":["TResult"],"sn":"fromPromise","rt":$n[10].Task$1(System.Object),"p":[Bridge.IPromise,Function]},{"a":2,"n":"FromPromise","is":true,"t":8,"pi":[{"n":"promise","pt":Bridge.IPromise,"ps":0},{"n":"resultHandler","pt":Function,"ps":1},{"n":"errorHandler","pt":Function,"ps":2}],"tpc":1,"tprm":["TResult"],"sn":"fromPromise","rt":$n[10].Task$1(System.Object),"p":[Bridge.IPromise,Function,Function]},{"a":2,"n":"FromPromise","is":true,"t":8,"pi":[{"n":"promise","pt":Bridge.IPromise,"ps":0},{"n":"resultHandler","pt":Function,"ps":1},{"n":"errorHandler","pt":Function,"ps":2},{"n":"progressHandler","pt":Function,"ps":3}],"tpc":1,"tprm":["TResult"],"sn":"fromPromise","rt":$n[10].Task$1(System.Object),"p":[Bridge.IPromise,Function,Function,Function]},{"a":2,"n":"FromResult","is":true,"t":8,"pi":[{"n":"result","pt":System.Object,"ps":0}],"tpc":1,"def":function (TResult, result) { return System.Threading.Tasks.Task.fromResult(result, TResult); },"rt":$n[10].Task$1(System.Object),"p":[System.Object]},{"a":2,"n":"GetAwaiter","t":8,"sn":"getAwaiter","rt":$n[10].TaskAwaiter},{"a":2,"n":"Run","is":true,"t":8,"pi":[{"n":"action","pt":Function,"ps":0}],"sn":"run","rt":$n[10].Task,"p":[Function]},{"a":2,"n":"Run","is":true,"t":8,"pi":[{"n":"function","pt":Function,"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"run","rt":$n[10].Task$1(System.Object),"p":[Function]},{"a":2,"n":"Start","t":8,"sn":"start","rt":$n[0].Void},{"a":2,"n":"WhenAll","is":true,"t":8,"pi":[{"n":"tasks","pt":$n[4].IEnumerable$1(System.Threading.Tasks.Task),"ps":0}],"sn":"whenAll","rt":$n[10].Task,"p":[$n[4].IEnumerable$1(System.Threading.Tasks.Task)]},{"a":2,"n":"WhenAll","is":true,"t":8,"pi":[{"n":"tasks","pt":$n[4].IEnumerable$1(System.Threading.Tasks.Task$1(System.Object)),"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"whenAll","rt":$n[10].Task$1(System.Array.type(System.Object)),"p":[$n[4].IEnumerable$1(System.Threading.Tasks.Task$1(System.Object))]},{"a":2,"n":"WhenAll","is":true,"t":8,"pi":[{"n":"tasks","ip":true,"pt":System.Array.type(System.Threading.Tasks.Task),"ps":0}],"sn":"whenAll","rt":$n[10].Task,"p":[System.Array.type(System.Threading.Tasks.Task)]},{"a":2,"n":"WhenAll","is":true,"t":8,"pi":[{"n":"tasks","ip":true,"pt":System.Array.type(System.Threading.Tasks.Task$1(System.Object)),"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"whenAll","rt":$n[10].Task$1(System.Array.type(System.Object)),"p":[System.Array.type(System.Threading.Tasks.Task$1(System.Object))]},{"a":2,"n":"WhenAny","is":true,"t":8,"pi":[{"n":"tasks","pt":$n[4].IEnumerable$1(System.Threading.Tasks.Task),"ps":0}],"sn":"whenAny","rt":$n[10].Task$1(System.Threading.Tasks.Task),"p":[$n[4].IEnumerable$1(System.Threading.Tasks.Task)]},{"a":2,"n":"WhenAny","is":true,"t":8,"pi":[{"n":"tasks","pt":$n[4].IEnumerable$1(System.Threading.Tasks.Task$1(System.Object)),"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"whenAny","rt":$n[10].Task$1(System.Threading.Tasks.Task$1(System.Object)),"p":[$n[4].IEnumerable$1(System.Threading.Tasks.Task$1(System.Object))]},{"a":2,"n":"WhenAny","is":true,"t":8,"pi":[{"n":"tasks","ip":true,"pt":System.Array.type(System.Threading.Tasks.Task),"ps":0}],"sn":"whenAny","rt":$n[10].Task$1(System.Threading.Tasks.Task),"p":[System.Array.type(System.Threading.Tasks.Task)]},{"a":2,"n":"WhenAny","is":true,"t":8,"pi":[{"n":"tasks","ip":true,"pt":System.Array.type(System.Threading.Tasks.Task$1(System.Object)),"ps":0}],"tpc":1,"tprm":["TResult"],"sn":"whenAny","rt":$n[10].Task$1(System.Threading.Tasks.Task$1(System.Object)),"p":[System.Array.type(System.Threading.Tasks.Task$1(System.Object))]},{"a":2,"n":"Exception","t":16,"rt":$n[0].AggregateException,"g":{"a":2,"n":"get_Exception","t":8,"rt":$n[0].AggregateException,"fg":"exception"},"fn":"exception"},{"a":2,"n":"IsCanceled","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsCanceled","t":8,"tpc":0,"def":function () { return this.isCanceled(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"IsCompleted","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsCompleted","t":8,"tpc":0,"def":function () { return this.isCompleted(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"IsFaulted","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsFaulted","t":8,"tpc":0,"def":function () { return this.isFaulted(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"Status","t":16,"rt":$n[10].TaskStatus,"g":{"a":2,"n":"get_Status","t":8,"rt":$n[10].TaskStatus,"fg":"status","box":function ($v) { return Bridge.box($v, System.Threading.Tasks.TaskStatus, System.Enum.toStringFn(System.Threading.Tasks.TaskStatus));}},"fn":"status"}]}; }, $n);
    $m("System.Threading.Tasks.Task$1", function (TResult) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[Function],"pi":[{"n":"function","pt":Function,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].Object],"pi":[{"n":"function","pt":Function,"ps":0},{"n":"state","pt":$n[0].Object,"ps":1}],"sn":"ctor"},{"a":2,"n":"ContinueWith","t":8,"pi":[{"n":"continuationAction","pt":Function,"ps":0}],"sn":"continueWith","rt":$n[10].Task,"p":[Function]},{"a":2,"n":"ContinueWith","t":8,"pi":[{"n":"continuationFunction","pt":Function,"ps":0}],"sn":"continueWith","rt":$n[10].Task$1(System.Object),"p":[Function]},{"a":2,"n":"GetAwaiter","t":8,"sn":"getAwaiter","rt":$n[10].Task(TResult)},{"a":2,"n":"SetResult","t":8,"pi":[{"n":"result","pt":TResult,"ps":0}],"sn":"setResult","rt":$n[0].Void,"p":[TResult]},{"a":2,"n":"Result","t":16,"rt":TResult,"g":{"a":2,"n":"get_Result","t":8,"tpc":0,"def":function () { return this.getResult(); },"rt":TResult}}]}; }, $n);
    $m("System.Threading.Tasks.TaskCompletionSource", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"SetCanceled","t":8,"sn":"setCanceled","rt":$n[0].Void},{"a":2,"n":"SetException","t":8,"pi":[{"n":"exceptions","pt":$n[4].IEnumerable$1(System.Exception),"ps":0}],"sn":"setException","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(System.Exception)]},{"a":2,"n":"SetException","t":8,"pi":[{"n":"exception","pt":$n[0].Exception,"ps":0}],"sn":"setException","rt":$n[0].Void,"p":[$n[0].Exception]},{"a":2,"n":"SetResult","t":8,"pi":[{"n":"result","pt":System.Object,"ps":0}],"sn":"setResult","rt":$n[0].Void,"p":[System.Object]},{"a":2,"n":"TrySetCanceled","t":8,"sn":"trySetCanceled","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TrySetException","t":8,"pi":[{"n":"exceptions","pt":$n[4].IEnumerable$1(System.Exception),"ps":0}],"sn":"trySetException","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(System.Exception)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TrySetException","t":8,"pi":[{"n":"exception","pt":$n[0].Exception,"ps":0}],"sn":"trySetException","rt":$n[0].Boolean,"p":[$n[0].Exception],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TrySetResult","t":8,"pi":[{"n":"result","pt":System.Object,"ps":0}],"sn":"trySetResult","rt":$n[0].Boolean,"p":[System.Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Task","t":16,"rt":$n[10].Task$1(System.Object),"g":{"a":2,"n":"get_Task","t":8,"rt":$n[10].Task$1(System.Object),"fg":"task"},"fn":"task"}]}; }, $n);
    $m("System.Security.SecurityException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,Function],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"type","pt":Function,"ps":1}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,Function,$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"type","pt":Function,"ps":1},{"n":"state","pt":$n[0].String,"ps":2}],"sn":"$ctor4"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Demanded","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_Demanded","t":8,"rt":$n[0].Object,"fg":"Demanded"},"s":{"a":2,"n":"set_Demanded","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"Demanded"},"fn":"Demanded"},{"a":2,"n":"DenySetInstance","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_DenySetInstance","t":8,"rt":$n[0].Object,"fg":"DenySetInstance"},"s":{"a":2,"n":"set_DenySetInstance","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"DenySetInstance"},"fn":"DenySetInstance"},{"a":2,"n":"GrantedSet","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_GrantedSet","t":8,"rt":$n[0].String,"fg":"GrantedSet"},"s":{"a":2,"n":"set_GrantedSet","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"GrantedSet"},"fn":"GrantedSet"},{"a":2,"n":"Method","t":16,"rt":$n[11].MethodInfo,"g":{"a":2,"n":"get_Method","t":8,"rt":$n[11].MethodInfo,"fg":"Method"},"s":{"a":2,"n":"set_Method","t":8,"p":[$n[11].MethodInfo],"rt":$n[0].Void,"fs":"Method"},"fn":"Method"},{"a":2,"n":"PermissionState","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PermissionState","t":8,"rt":$n[0].String,"fg":"PermissionState"},"s":{"a":2,"n":"set_PermissionState","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"PermissionState"},"fn":"PermissionState"},{"a":2,"n":"PermissionType","t":16,"rt":Function,"g":{"a":2,"n":"get_PermissionType","t":8,"rt":Function,"fg":"PermissionType"},"s":{"a":2,"n":"set_PermissionType","t":8,"p":[Function],"rt":$n[0].Void,"fs":"PermissionType"},"fn":"PermissionType"},{"a":2,"n":"PermitOnlySetInstance","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_PermitOnlySetInstance","t":8,"rt":$n[0].Object,"fg":"PermitOnlySetInstance"},"s":{"a":2,"n":"set_PermitOnlySetInstance","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"PermitOnlySetInstance"},"fn":"PermitOnlySetInstance"},{"a":2,"n":"RefusedSet","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_RefusedSet","t":8,"rt":$n[0].String,"fg":"RefusedSet"},"s":{"a":2,"n":"set_RefusedSet","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"RefusedSet"},"fn":"RefusedSet"},{"a":2,"n":"Url","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Url","t":8,"rt":$n[0].String,"fg":"Url"},"s":{"a":2,"n":"set_Url","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Url"},"fn":"Url"},{"a":1,"n":"DemandedName","is":true,"t":4,"rt":$n[0].String,"sn":"DemandedName"},{"a":1,"n":"DeniedName","is":true,"t":4,"rt":$n[0].String,"sn":"DeniedName"},{"a":1,"n":"GrantedSetName","is":true,"t":4,"rt":$n[0].String,"sn":"GrantedSetName"},{"a":1,"n":"PermitOnlyName","is":true,"t":4,"rt":$n[0].String,"sn":"PermitOnlyName"},{"a":1,"n":"RefusedSetName","is":true,"t":4,"rt":$n[0].String,"sn":"RefusedSetName"},{"a":1,"n":"UrlName","is":true,"t":4,"rt":$n[0].String,"sn":"UrlName"}]}; }, $n);
    $m("System.Runtime.Serialization.CollectionDataContractAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"IsItemNameSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsItemNameSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsItemNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsItemNameSetExplicitly"},{"a":2,"n":"IsKeyNameSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsKeyNameSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsKeyNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsKeyNameSetExplicitly"},{"a":2,"n":"IsNameSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsNameSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsNameSetExplicitly"},{"a":2,"n":"IsNamespaceSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsNamespaceSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsNamespaceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsNamespaceSetExplicitly"},{"a":2,"n":"IsReference","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReference","t":8,"rt":$n[0].Boolean,"fg":"IsReference","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsReference","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"IsReference"},"fn":"IsReference"},{"a":2,"n":"IsReferenceSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReferenceSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsReferenceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReferenceSetExplicitly"},{"a":2,"n":"IsValueNameSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsValueNameSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsValueNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsValueNameSetExplicitly"},{"a":2,"n":"ItemName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ItemName","t":8,"rt":$n[0].String,"fg":"ItemName"},"s":{"a":2,"n":"set_ItemName","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"ItemName"},"fn":"ItemName"},{"a":2,"n":"KeyName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_KeyName","t":8,"rt":$n[0].String,"fg":"KeyName"},"s":{"a":2,"n":"set_KeyName","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"KeyName"},"fn":"KeyName"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"s":{"a":2,"n":"set_Name","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Name"},"fn":"Name"},{"a":2,"n":"Namespace","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Namespace","t":8,"rt":$n[0].String,"fg":"Namespace"},"s":{"a":2,"n":"set_Namespace","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Namespace"},"fn":"Namespace"},{"a":2,"n":"ValueName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ValueName","t":8,"rt":$n[0].String,"fg":"ValueName"},"s":{"a":2,"n":"set_ValueName","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"ValueName"},"fn":"ValueName"},{"a":1,"n":"_isItemNameSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isItemNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isKeyNameSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isKeyNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isNameSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isNamespaceSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isNamespaceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isReference","t":4,"rt":$n[0].Boolean,"sn":"_isReference","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isReferenceSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isReferenceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isValueNameSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isValueNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_itemName","t":4,"rt":$n[0].String,"sn":"_itemName"},{"a":1,"n":"_keyName","t":4,"rt":$n[0].String,"sn":"_keyName"},{"a":1,"n":"_name","t":4,"rt":$n[0].String,"sn":"_name"},{"a":1,"n":"_ns","t":4,"rt":$n[0].String,"sn":"_ns"},{"a":1,"n":"_valueName","t":4,"rt":$n[0].String,"sn":"_valueName"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.ContractNamespaceAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"contractNamespace","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"ClrNamespace","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ClrNamespace","t":8,"rt":$n[0].String,"fg":"ClrNamespace"},"s":{"a":2,"n":"set_ClrNamespace","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"ClrNamespace"},"fn":"ClrNamespace"},{"a":2,"n":"ContractNamespace","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ContractNamespace","t":8,"rt":$n[0].String,"fg":"ContractNamespace"},"fn":"ContractNamespace"},{"a":1,"n":"_clrNamespace","t":4,"rt":$n[0].String,"sn":"_clrNamespace"},{"a":1,"n":"_contractNamespace","t":4,"rt":$n[0].String,"sn":"_contractNamespace"}],"ni":true,"am":true}; }, $n);
    $m("System.Runtime.Serialization.DataContractAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"IsNameSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsNameSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsNameSetExplicitly"},{"a":2,"n":"IsNamespaceSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsNamespaceSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsNamespaceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsNamespaceSetExplicitly"},{"a":2,"n":"IsReference","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReference","t":8,"rt":$n[0].Boolean,"fg":"IsReference","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsReference","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"IsReference"},"fn":"IsReference"},{"a":2,"n":"IsReferenceSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReferenceSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsReferenceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReferenceSetExplicitly"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"s":{"a":2,"n":"set_Name","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Name"},"fn":"Name"},{"a":2,"n":"Namespace","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Namespace","t":8,"rt":$n[0].String,"fg":"Namespace"},"s":{"a":2,"n":"set_Namespace","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Namespace"},"fn":"Namespace"},{"a":1,"n":"_isNameSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isNamespaceSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isNamespaceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isReference","t":4,"rt":$n[0].Boolean,"sn":"_isReference","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isReferenceSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isReferenceSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_name","t":4,"rt":$n[0].String,"sn":"_name"},{"a":1,"n":"_ns","t":4,"rt":$n[0].String,"sn":"_ns"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.DataMemberAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"EmitDefaultValue","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_EmitDefaultValue","t":8,"rt":$n[0].Boolean,"fg":"EmitDefaultValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_EmitDefaultValue","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"EmitDefaultValue"},"fn":"EmitDefaultValue"},{"a":2,"n":"IsNameSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsNameSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsNameSetExplicitly"},{"a":2,"n":"IsRequired","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsRequired","t":8,"rt":$n[0].Boolean,"fg":"IsRequired","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsRequired","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"IsRequired"},"fn":"IsRequired"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"s":{"a":2,"n":"set_Name","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Name"},"fn":"Name"},{"a":2,"n":"Order","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Order","t":8,"rt":$n[0].Int32,"fg":"Order","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Order","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"Order"},"fn":"Order"},{"a":1,"n":"_emitDefaultValue","t":4,"rt":$n[0].Boolean,"sn":"_emitDefaultValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isNameSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isNameSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isRequired","t":4,"rt":$n[0].Boolean,"sn":"_isRequired","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_name","t":4,"rt":$n[0].String,"sn":"_name"},{"a":1,"n":"_order","t":4,"rt":$n[0].Int32,"sn":"_order","box":function ($v) { return Bridge.box($v, System.Int32);}}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.EnumMemberAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"IsValueSetExplicitly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsValueSetExplicitly","t":8,"rt":$n[0].Boolean,"fg":"IsValueSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsValueSetExplicitly"},{"a":2,"n":"Value","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Value","t":8,"rt":$n[0].String,"fg":"Value"},"s":{"a":2,"n":"set_Value","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"Value"},"fn":"Value"},{"a":1,"n":"_isValueSetExplicitly","t":4,"rt":$n[0].Boolean,"sn":"_isValueSetExplicitly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_value","t":4,"rt":$n[0].String,"sn":"_value"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.IDeserializationCallback", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"OnDeserialization","t":8,"pi":[{"n":"sender","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IDeserializationCallback$OnDeserialization","rt":$n[0].Void,"p":[$n[0].Object]}]}; }, $n);
    $m("System.Runtime.Serialization.IFormatterConverter", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Convert","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0},{"n":"type","pt":Function,"ps":1}],"sn":"System$Runtime$Serialization$IFormatterConverter$Convert","rt":$n[0].Object,"p":[$n[0].Object,Function]},{"ab":true,"a":2,"n":"Convert","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0},{"n":"typeCode","pt":$n[0].TypeCode,"ps":1}],"sn":"System$Runtime$Serialization$IFormatterConverter$Convert$1","rt":$n[0].Object,"p":[$n[0].Object,$n[0].TypeCode]},{"ab":true,"a":2,"n":"ToBoolean","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToBoolean","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"ToByte","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToByte","rt":$n[0].Byte,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"ab":true,"a":2,"n":"ToChar","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToChar","rt":$n[0].Char,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"ab":true,"a":2,"n":"ToDateTime","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToDateTime","rt":$n[0].DateTime,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"ab":true,"a":2,"n":"ToDecimal","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToDecimal","rt":$n[0].Decimal,"p":[$n[0].Object]},{"ab":true,"a":2,"n":"ToDouble","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToDouble","rt":$n[0].Double,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"ab":true,"a":2,"n":"ToInt16","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToInt16","rt":$n[0].Int16,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int16);}},{"ab":true,"a":2,"n":"ToInt32","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToInt32","rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"ToInt64","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToInt64","rt":$n[0].Int64,"p":[$n[0].Object]},{"ab":true,"a":2,"n":"ToSByte","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToSByte","rt":$n[0].SByte,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.SByte);}},{"ab":true,"a":2,"n":"ToSingle","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToSingle","rt":$n[0].Single,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"ab":true,"a":2,"n":"ToString","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToString","rt":$n[0].String,"p":[$n[0].Object]},{"ab":true,"a":2,"n":"ToUInt16","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToUInt16","rt":$n[0].UInt16,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"ab":true,"a":2,"n":"ToUInt32","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToUInt32","rt":$n[0].UInt32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"ab":true,"a":2,"n":"ToUInt64","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$IFormatterConverter$ToUInt64","rt":$n[0].UInt64,"p":[$n[0].Object]}]}; }, $n);
    $m("System.Runtime.Serialization.IgnoreDataMemberAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.InvalidDataContractException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Runtime.Serialization.IObjectReference", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetRealObject","t":8,"pi":[{"n":"context","pt":$n[3].StreamingContext,"ps":0}],"sn":"System$Runtime$Serialization$IObjectReference$GetRealObject","rt":$n[0].Object,"p":[$n[3].StreamingContext]}]}; }, $n);
    $m("System.Runtime.Serialization.ISafeSerializationData", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CompleteDeserialization","t":8,"pi":[{"n":"deserialized","pt":$n[0].Object,"ps":0}],"sn":"System$Runtime$Serialization$ISafeSerializationData$CompleteDeserialization","rt":$n[0].Void,"p":[$n[0].Object]}]}; }, $n);
    $m("System.Runtime.Serialization.ISerializationSurrogateProvider", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetDeserializedObject","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0},{"n":"targetType","pt":Function,"ps":1}],"sn":"System$Runtime$Serialization$ISerializationSurrogateProvider$GetDeserializedObject","rt":$n[0].Object,"p":[$n[0].Object,Function]},{"ab":true,"a":2,"n":"GetObjectToSerialize","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0},{"n":"targetType","pt":Function,"ps":1}],"sn":"System$Runtime$Serialization$ISerializationSurrogateProvider$GetObjectToSerialize","rt":$n[0].Object,"p":[$n[0].Object,Function]},{"ab":true,"a":2,"n":"GetSurrogateType","t":8,"pi":[{"n":"type","pt":Function,"ps":0}],"sn":"System$Runtime$Serialization$ISerializationSurrogateProvider$GetSurrogateType","rt":Function,"p":[Function]}]}; }, $n);
    $m("System.Runtime.Serialization.KnownTypeAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"methodName","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[Function],"pi":[{"n":"type","pt":Function,"ps":0}],"sn":"$ctor2"},{"a":2,"n":"MethodName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_MethodName","t":8,"rt":$n[0].String,"fg":"MethodName"},"fn":"MethodName"},{"a":2,"n":"Type","t":16,"rt":Function,"g":{"a":2,"n":"get_Type","t":8,"rt":Function,"fg":"Type"},"fn":"Type"},{"a":1,"n":"_methodName","t":4,"rt":$n[0].String,"sn":"_methodName"},{"a":1,"n":"_type","t":4,"rt":Function,"sn":"_type"}],"am":true}; }, $n);
    $m("System.Runtime.Serialization.SerializationException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":1,"n":"s_nullMessage","is":true,"t":4,"rt":$n[0].String,"sn":"s_nullMessage"}]}; }, $n);
    $m("System.Runtime.Serialization.SerializationEntry", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Object,Function],"pi":[{"n":"entryName","pt":$n[0].String,"ps":0},{"n":"entryValue","pt":$n[0].Object,"ps":1},{"n":"entryType","pt":Function,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"fn":"Name"},{"a":2,"n":"ObjectType","t":16,"rt":Function,"g":{"a":2,"n":"get_ObjectType","t":8,"rt":Function,"fg":"ObjectType"},"fn":"ObjectType"},{"a":2,"n":"Value","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_Value","t":8,"rt":$n[0].Object,"fg":"Value"},"fn":"Value"},{"a":1,"n":"_name","t":4,"rt":$n[0].String,"sn":"_name"},{"a":1,"n":"_type","t":4,"rt":Function,"sn":"_type"},{"a":1,"n":"_value","t":4,"rt":$n[0].Object,"sn":"_value"}]}; }, $n);
    $m("System.Runtime.Serialization.SerializationInfoEnumerator", function () { return {"att":1048833,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].Array.type(System.String),$n[0].Array.type(System.Object),$n[0].Array.type(Function),$n[0].Int32],"pi":[{"n":"members","pt":$n[0].Array.type(System.String),"ps":0},{"n":"info","pt":$n[0].Array.type(System.Object),"ps":1},{"n":"types","pt":$n[0].Array.type(Function),"ps":2},{"n":"numItems","pt":$n[0].Int32,"ps":3}],"sn":"ctor"},{"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Reset","t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"Current","t":16,"rt":$n[3].SerializationEntry,"g":{"a":2,"n":"get_Current","t":8,"rt":$n[3].SerializationEntry,"fg":"Current"},"fn":"Current"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"fn":"Name"},{"a":2,"n":"ObjectType","t":16,"rt":Function,"g":{"a":2,"n":"get_ObjectType","t":8,"rt":Function,"fg":"ObjectType"},"fn":"ObjectType"},{"a":2,"n":"Value","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_Value","t":8,"rt":$n[0].Object,"fg":"Value"},"fn":"Value"},{"a":1,"n":"_currItem","t":4,"rt":$n[0].Int32,"sn":"_currItem","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_current","t":4,"rt":$n[0].Boolean,"sn":"_current","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_data","t":4,"rt":$n[0].Array.type(System.Object),"sn":"_data","ro":true},{"a":1,"n":"_members","t":4,"rt":$n[0].Array.type(System.String),"sn":"_members","ro":true},{"a":1,"n":"_numItems","t":4,"rt":$n[0].Int32,"sn":"_numItems","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_types","t":4,"rt":$n[0].Array.type(Function),"sn":"_types","ro":true}]}; }, $n);
    $m("System.Runtime.Serialization.StreamingContext", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[3].StreamingContextStates],"pi":[{"n":"state","pt":$n[3].StreamingContextStates,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[3].StreamingContextStates,$n[0].Object],"pi":[{"n":"state","pt":$n[3].StreamingContextStates,"ps":0},{"n":"additional","pt":$n[0].Object,"ps":1}],"sn":"$ctor2"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Context","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_Context","t":8,"rt":$n[0].Object,"fg":"Context"},"fn":"Context"},{"a":2,"n":"State","t":16,"rt":$n[3].StreamingContextStates,"g":{"a":2,"n":"get_State","t":8,"rt":$n[3].StreamingContextStates,"fg":"State","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},"fn":"State"},{"a":1,"n":"_additionalContext","t":4,"rt":$n[0].Object,"sn":"_additionalContext","ro":true},{"a":1,"n":"_state","t":4,"rt":$n[3].StreamingContextStates,"sn":"_state","ro":true,"box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}}]}; }, $n);
    $m("System.Runtime.Serialization.StreamingContextStates", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"All","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"All","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"Clone","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"Clone","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"CrossAppDomain","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"CrossAppDomain","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"CrossMachine","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"CrossMachine","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"CrossProcess","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"CrossProcess","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"File","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"File","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"Other","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"Other","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"Persistence","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"Persistence","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}},{"a":2,"n":"Remoting","is":true,"t":4,"rt":$n[3].StreamingContextStates,"sn":"Remoting","box":function ($v) { return Bridge.box($v, System.Runtime.Serialization.StreamingContextStates, System.Enum.toStringFn(System.Runtime.Serialization.StreamingContextStates));}}]}; }, $n);
    $m("System.Runtime.Serialization.ISerializable", function () { return {"att":161,"a":2}; }, $n);
    $m("System.Runtime.Serialization.OnDeserializedAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.OnSerializedAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.OnDeserializingAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}],"ni":true}; }, $n);
    $m("System.Runtime.Serialization.OnSerializingAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}],"ni":true}; }, $n);
    $m("System.Runtime.CompilerServices.FormattableStringFactory", function () { return {"nested":[$n[12].FormattableStringFactory.ConcreteFormattableString],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"Create","is":true,"t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arguments","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"Create","rt":$n[0].FormattableString,"p":[$n[0].String,$n[0].Array.type(System.Object)]}]}; }, $n);
    $m("System.Runtime.CompilerServices.FormattableStringFactory.ConcreteFormattableString", function () { return {"td":$n[12].FormattableStringFactory,"att":1048835,"a":1,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Array.type(System.Object)],"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arguments","pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"GetArgument","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"GetArgument","rt":$n[0].Object,"p":[$n[0].Int32]},{"ov":true,"a":2,"n":"GetArguments","t":8,"sn":"GetArguments","rt":$n[0].Array.type(System.Object)},{"ov":true,"a":2,"n":"ToString","t":8,"pi":[{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"ToString","rt":$n[0].String,"p":[$n[0].IFormatProvider]},{"ov":true,"a":2,"n":"ArgumentCount","t":16,"rt":$n[0].Int32,"g":{"ov":true,"a":2,"n":"get_ArgumentCount","t":8,"rt":$n[0].Int32,"fg":"ArgumentCount","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"ArgumentCount"},{"ov":true,"a":2,"n":"Format","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_Format","t":8,"rt":$n[0].String,"fg":"Format"},"fn":"Format"},{"a":1,"n":"_arguments","t":4,"rt":$n[0].Array.type(System.Object),"sn":"_arguments","ro":true},{"a":1,"n":"_format","t":4,"rt":$n[0].String,"sn":"_format","ro":true}]}; }, $n);
    $m("System.Resources.MissingManifestResourceException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Reflection.AmbiguousMatchException", function () { return {"att":1057025,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Reflection.Binder", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"BindToField","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0},{"n":"match","pt":System.Array.type(System.Reflection.FieldInfo),"ps":1},{"n":"value","pt":$n[0].Object,"ps":2},{"n":"culture","pt":$n[1].CultureInfo,"ps":3}],"sn":"BindToField","rt":$n[11].FieldInfo,"p":[$n[11].BindingFlags,System.Array.type(System.Reflection.FieldInfo),$n[0].Object,$n[1].CultureInfo]},{"ab":true,"a":2,"n":"BindToMethod","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0},{"n":"match","pt":System.Array.type(System.Object),"ps":1},{"n":"args","ref":true,"pt":$n[0].Array.type(System.Object),"ps":2},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":3},{"n":"culture","pt":$n[1].CultureInfo,"ps":4},{"n":"names","pt":$n[0].Array.type(System.String),"ps":5},{"n":"state","out":true,"pt":$n[0].Object,"ps":6}],"sn":"BindToMethod","rt":System.Object,"p":[$n[11].BindingFlags,System.Array.type(System.Object),$n[0].Array.type(System.Object),System.Array.type(System.Reflection.ParameterModifier),$n[1].CultureInfo,$n[0].Array.type(System.String),$n[0].Object]},{"ab":true,"a":2,"n":"ChangeType","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0},{"n":"type","pt":Function,"ps":1},{"n":"culture","pt":$n[1].CultureInfo,"ps":2}],"sn":"ChangeType","rt":$n[0].Object,"p":[$n[0].Object,Function,$n[1].CultureInfo]},{"ab":true,"a":2,"n":"ReorderArgumentArray","t":8,"pi":[{"n":"args","ref":true,"pt":$n[0].Array.type(System.Object),"ps":0},{"n":"state","pt":$n[0].Object,"ps":1}],"sn":"ReorderArgumentArray","rt":$n[0].Void,"p":[$n[0].Array.type(System.Object),$n[0].Object]},{"ab":true,"a":2,"n":"SelectMethod","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0},{"n":"match","pt":System.Array.type(System.Object),"ps":1},{"n":"types","pt":$n[0].Array.type(Function),"ps":2},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":3}],"sn":"SelectMethod","rt":System.Object,"p":[$n[11].BindingFlags,System.Array.type(System.Object),$n[0].Array.type(Function),System.Array.type(System.Reflection.ParameterModifier)]},{"ab":true,"a":2,"n":"SelectProperty","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0},{"n":"match","pt":System.Array.type(System.Reflection.PropertyInfo),"ps":1},{"n":"returnType","pt":Function,"ps":2},{"n":"indexes","pt":$n[0].Array.type(Function),"ps":3},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":4}],"sn":"SelectProperty","rt":$n[11].PropertyInfo,"p":[$n[11].BindingFlags,System.Array.type(System.Reflection.PropertyInfo),Function,$n[0].Array.type(Function),System.Array.type(System.Reflection.ParameterModifier)]}]}; }, $n);
    $m("System.Reflection.BindingFlags", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CreateInstance","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"CreateInstance","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"DeclaredOnly","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"DeclaredOnly","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"Default","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"Default","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"DoNotWrapExceptions","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"DoNotWrapExceptions","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"ExactBinding","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"ExactBinding","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"FlattenHierarchy","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"FlattenHierarchy","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"GetField","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"GetField","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"GetProperty","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"GetProperty","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"IgnoreCase","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"IgnoreCase","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"IgnoreReturn","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"IgnoreReturn","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"Instance","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"Instance","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"InvokeMethod","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"InvokeMethod","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"NonPublic","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"NonPublic","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"OptionalParamBinding","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"OptionalParamBinding","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"Public","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"Public","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"PutDispProperty","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"PutDispProperty","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"PutRefDispProperty","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"PutRefDispProperty","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"SetField","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"SetField","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"SetProperty","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"SetProperty","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"Static","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"Static","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"SuppressChangeType","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"SuppressChangeType","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}}]}; }, $n);
    $m("System.Reflection.CallingConventions", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Any","is":true,"t":4,"rt":$n[11].CallingConventions,"sn":"Any","box":function ($v) { return Bridge.box($v, System.Reflection.CallingConventions, System.Enum.toStringFn(System.Reflection.CallingConventions));}},{"a":2,"n":"ExplicitThis","is":true,"t":4,"rt":$n[11].CallingConventions,"sn":"ExplicitThis","box":function ($v) { return Bridge.box($v, System.Reflection.CallingConventions, System.Enum.toStringFn(System.Reflection.CallingConventions));}},{"a":2,"n":"HasThis","is":true,"t":4,"rt":$n[11].CallingConventions,"sn":"HasThis","box":function ($v) { return Bridge.box($v, System.Reflection.CallingConventions, System.Enum.toStringFn(System.Reflection.CallingConventions));}},{"a":2,"n":"Standard","is":true,"t":4,"rt":$n[11].CallingConventions,"sn":"Standard","box":function ($v) { return Bridge.box($v, System.Reflection.CallingConventions, System.Enum.toStringFn(System.Reflection.CallingConventions));}},{"a":2,"n":"VarArgs","is":true,"t":4,"rt":$n[11].CallingConventions,"sn":"VarArgs","box":function ($v) { return Bridge.box($v, System.Reflection.CallingConventions, System.Enum.toStringFn(System.Reflection.CallingConventions));}}]}; }, $n);
    $m("System.Reflection.ICustomAttributeProvider", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetCustomAttributes","t":8,"pi":[{"n":"inherit","pt":$n[0].Boolean,"ps":0}],"sn":"System$Reflection$ICustomAttributeProvider$GetCustomAttributes","rt":$n[0].Array.type(System.Object),"p":[$n[0].Boolean]},{"ab":true,"a":2,"n":"GetCustomAttributes","t":8,"pi":[{"n":"attributeType","pt":Function,"ps":0},{"n":"inherit","pt":$n[0].Boolean,"ps":1}],"sn":"System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1","rt":$n[0].Array.type(System.Object),"p":[Function,$n[0].Boolean]},{"ab":true,"a":2,"n":"IsDefined","t":8,"pi":[{"n":"attributeType","pt":Function,"ps":0},{"n":"inherit","pt":$n[0].Boolean,"ps":1}],"sn":"System$Reflection$ICustomAttributeProvider$IsDefined","rt":$n[0].Boolean,"p":[Function,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Reflection.InvalidFilterCriteriaException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"inner","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Reflection.IReflect", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetField","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1}],"sn":"System$Reflection$IReflect$GetField","rt":$n[11].FieldInfo,"p":[$n[0].String,$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetFields","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0}],"sn":"System$Reflection$IReflect$GetFields","rt":System.Array.type(System.Reflection.FieldInfo),"p":[$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetMember","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1}],"sn":"System$Reflection$IReflect$GetMember","rt":System.Array.type(System.Object),"p":[$n[0].String,$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetMembers","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0}],"sn":"System$Reflection$IReflect$GetMembers","rt":System.Array.type(System.Object),"p":[$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetMethod","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1}],"sn":"System$Reflection$IReflect$GetMethod","rt":$n[11].MethodInfo,"p":[$n[0].String,$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetMethod","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1},{"n":"binder","pt":$n[11].Binder,"ps":2},{"n":"types","pt":$n[0].Array.type(Function),"ps":3},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":4}],"sn":"System$Reflection$IReflect$GetMethod$1","rt":$n[11].MethodInfo,"p":[$n[0].String,$n[11].BindingFlags,$n[11].Binder,$n[0].Array.type(Function),System.Array.type(System.Reflection.ParameterModifier)]},{"ab":true,"a":2,"n":"GetMethods","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0}],"sn":"System$Reflection$IReflect$GetMethods","rt":System.Array.type(System.Reflection.MethodInfo),"p":[$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetProperties","t":8,"pi":[{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":0}],"sn":"System$Reflection$IReflect$GetProperties","rt":System.Array.type(System.Reflection.PropertyInfo),"p":[$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetProperty","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1}],"sn":"System$Reflection$IReflect$GetProperty","rt":$n[11].PropertyInfo,"p":[$n[0].String,$n[11].BindingFlags]},{"ab":true,"a":2,"n":"GetProperty","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1},{"n":"binder","pt":$n[11].Binder,"ps":2},{"n":"returnType","pt":Function,"ps":3},{"n":"types","pt":$n[0].Array.type(Function),"ps":4},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":5}],"sn":"System$Reflection$IReflect$GetProperty$1","rt":$n[11].PropertyInfo,"p":[$n[0].String,$n[11].BindingFlags,$n[11].Binder,Function,$n[0].Array.type(Function),System.Array.type(System.Reflection.ParameterModifier)]},{"ab":true,"a":2,"n":"InvokeMember","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"invokeAttr","pt":$n[11].BindingFlags,"ps":1},{"n":"binder","pt":$n[11].Binder,"ps":2},{"n":"target","pt":$n[0].Object,"ps":3},{"n":"args","pt":$n[0].Array.type(System.Object),"ps":4},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":5},{"n":"culture","pt":$n[1].CultureInfo,"ps":6},{"n":"namedParameters","pt":$n[0].Array.type(System.String),"ps":7}],"sn":"System$Reflection$IReflect$InvokeMember","rt":$n[0].Object,"p":[$n[0].String,$n[11].BindingFlags,$n[11].Binder,$n[0].Object,$n[0].Array.type(System.Object),System.Array.type(System.Reflection.ParameterModifier),$n[1].CultureInfo,$n[0].Array.type(System.String)]},{"ab":true,"a":2,"n":"UnderlyingSystemType","t":16,"rt":Function,"g":{"ab":true,"a":2,"n":"get_UnderlyingSystemType","t":8,"rt":Function,"fg":"System$Reflection$IReflect$UnderlyingSystemType"},"fn":"System$Reflection$IReflect$UnderlyingSystemType"}]}; }, $n);
    $m("System.Reflection.MemberTypes", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"All","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"All","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"Constructor","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"Constructor","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"Custom","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"Custom","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"Event","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"Event","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"Field","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"Field","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"Method","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"Method","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"NestedType","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"NestedType","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"Property","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"Property","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}},{"a":2,"n":"TypeInfo","is":true,"t":4,"rt":$n[11].MemberTypes,"sn":"TypeInfo","box":function ($v) { return Bridge.box($v, System.Reflection.MemberTypes, System.Enum.toStringFn(System.Reflection.MemberTypes));}}]}; }, $n);
    $m("System.Reflection.Module", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"FilterTypeNameIgnoreCaseImpl","is":true,"t":8,"pi":[{"n":"cls","pt":Function,"ps":0},{"n":"filterCriteria","pt":$n[0].Object,"ps":1}],"sn":"FilterTypeNameIgnoreCaseImpl","rt":$n[0].Boolean,"p":[Function,$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"FilterTypeNameImpl","is":true,"t":8,"pi":[{"n":"cls","pt":Function,"ps":0},{"n":"filterCriteria","pt":$n[0].Object,"ps":1}],"sn":"FilterTypeNameImpl","rt":$n[0].Boolean,"p":[Function,$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"FindTypes","t":8,"pi":[{"n":"filter","pt":Function,"ps":0},{"n":"filterCriteria","pt":$n[0].Object,"ps":1}],"sn":"FindTypes","rt":$n[0].Array.type(Function),"p":[Function,$n[0].Object]},{"v":true,"a":2,"n":"GetCustomAttributes","t":8,"pi":[{"n":"inherit","pt":$n[0].Boolean,"ps":0}],"sn":"GetCustomAttributes","rt":$n[0].Array.type(System.Object),"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"GetCustomAttributes","t":8,"pi":[{"n":"attributeType","pt":Function,"ps":0},{"n":"inherit","pt":$n[0].Boolean,"ps":1}],"sn":"GetCustomAttributes$1","rt":$n[0].Array.type(System.Object),"p":[Function,$n[0].Boolean]},{"a":2,"n":"GetField","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"GetField","rt":$n[11].FieldInfo,"p":[$n[0].String]},{"v":true,"a":2,"n":"GetField","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1}],"sn":"GetField$1","rt":$n[11].FieldInfo,"p":[$n[0].String,$n[11].BindingFlags]},{"a":2,"n":"GetFields","t":8,"sn":"GetFields","rt":System.Array.type(System.Reflection.FieldInfo)},{"v":true,"a":2,"n":"GetFields","t":8,"pi":[{"n":"bindingFlags","pt":$n[11].BindingFlags,"ps":0}],"sn":"GetFields$1","rt":System.Array.type(System.Reflection.FieldInfo),"p":[$n[11].BindingFlags]},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetMethod","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"GetMethod","rt":$n[11].MethodInfo,"p":[$n[0].String]},{"a":2,"n":"GetMethod","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"types","pt":$n[0].Array.type(Function),"ps":1}],"sn":"GetMethod$2","rt":$n[11].MethodInfo,"p":[$n[0].String,$n[0].Array.type(Function)]},{"a":2,"n":"GetMethod","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1},{"n":"binder","pt":$n[11].Binder,"ps":2},{"n":"callConvention","pt":$n[11].CallingConventions,"ps":3},{"n":"types","pt":$n[0].Array.type(Function),"ps":4},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":5}],"sn":"GetMethod$1","rt":$n[11].MethodInfo,"p":[$n[0].String,$n[11].BindingFlags,$n[11].Binder,$n[11].CallingConventions,$n[0].Array.type(Function),System.Array.type(System.Reflection.ParameterModifier)]},{"v":true,"a":3,"n":"GetMethodImpl","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"bindingAttr","pt":$n[11].BindingFlags,"ps":1},{"n":"binder","pt":$n[11].Binder,"ps":2},{"n":"callConvention","pt":$n[11].CallingConventions,"ps":3},{"n":"types","pt":$n[0].Array.type(Function),"ps":4},{"n":"modifiers","pt":System.Array.type(System.Reflection.ParameterModifier),"ps":5}],"sn":"GetMethodImpl","rt":$n[11].MethodInfo,"p":[$n[0].String,$n[11].BindingFlags,$n[11].Binder,$n[11].CallingConventions,$n[0].Array.type(Function),System.Array.type(System.Reflection.ParameterModifier)]},{"a":2,"n":"GetMethods","t":8,"sn":"GetMethods","rt":System.Array.type(System.Reflection.MethodInfo)},{"v":true,"a":2,"n":"GetMethods","t":8,"pi":[{"n":"bindingFlags","pt":$n[11].BindingFlags,"ps":0}],"sn":"GetMethods$1","rt":System.Array.type(System.Reflection.MethodInfo),"p":[$n[11].BindingFlags]},{"v":true,"a":2,"n":"GetType","t":8,"pi":[{"n":"className","pt":$n[0].String,"ps":0}],"sn":"GetType","rt":Function,"p":[$n[0].String]},{"v":true,"a":2,"n":"GetType","t":8,"pi":[{"n":"className","pt":$n[0].String,"ps":0},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":1}],"sn":"GetType$1","rt":Function,"p":[$n[0].String,$n[0].Boolean]},{"v":true,"a":2,"n":"GetType","t":8,"pi":[{"n":"className","pt":$n[0].String,"ps":0},{"n":"throwOnError","pt":$n[0].Boolean,"ps":1},{"n":"ignoreCase","pt":$n[0].Boolean,"ps":2}],"sn":"GetType$2","rt":Function,"p":[$n[0].String,$n[0].Boolean,$n[0].Boolean]},{"v":true,"a":2,"n":"GetTypes","t":8,"sn":"GetTypes","rt":$n[0].Array.type(Function)},{"v":true,"a":2,"n":"IsDefined","t":8,"pi":[{"n":"attributeType","pt":Function,"ps":0},{"n":"inherit","pt":$n[0].Boolean,"ps":1}],"sn":"IsDefined","rt":$n[0].Boolean,"p":[Function,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"IsResource","t":8,"sn":"IsResource","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ResolveField","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0}],"sn":"ResolveField","rt":$n[11].FieldInfo,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ResolveField","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0},{"n":"genericTypeArguments","pt":$n[0].Array.type(Function),"ps":1},{"n":"genericMethodArguments","pt":$n[0].Array.type(Function),"ps":2}],"sn":"ResolveField$1","rt":$n[11].FieldInfo,"p":[$n[0].Int32,$n[0].Array.type(Function),$n[0].Array.type(Function)]},{"a":2,"n":"ResolveMember","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0}],"sn":"ResolveMember","rt":System.Object,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ResolveMember","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0},{"n":"genericTypeArguments","pt":$n[0].Array.type(Function),"ps":1},{"n":"genericMethodArguments","pt":$n[0].Array.type(Function),"ps":2}],"sn":"ResolveMember$1","rt":System.Object,"p":[$n[0].Int32,$n[0].Array.type(Function),$n[0].Array.type(Function)]},{"a":2,"n":"ResolveMethod","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0}],"sn":"ResolveMethod","rt":System.Object,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ResolveMethod","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0},{"n":"genericTypeArguments","pt":$n[0].Array.type(Function),"ps":1},{"n":"genericMethodArguments","pt":$n[0].Array.type(Function),"ps":2}],"sn":"ResolveMethod$1","rt":System.Object,"p":[$n[0].Int32,$n[0].Array.type(Function),$n[0].Array.type(Function)]},{"v":true,"a":2,"n":"ResolveSignature","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0}],"sn":"ResolveSignature","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ResolveString","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0}],"sn":"ResolveString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"ResolveType","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0}],"sn":"ResolveType","rt":Function,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ResolveType","t":8,"pi":[{"n":"metadataToken","pt":$n[0].Int32,"ps":0},{"n":"genericTypeArguments","pt":$n[0].Array.type(Function),"ps":1},{"n":"genericMethodArguments","pt":$n[0].Array.type(Function),"ps":2}],"sn":"ResolveType$1","rt":Function,"p":[$n[0].Int32,$n[0].Array.type(Function),$n[0].Array.type(Function)]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"left","pt":$n[11].Module,"ps":0},{"n":"right","pt":$n[11].Module,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[11].Module,$n[11].Module],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"left","pt":$n[11].Module,"ps":0},{"n":"right","pt":$n[11].Module,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[11].Module,$n[11].Module],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"Assembly","t":16,"rt":$n[11].Assembly,"g":{"v":true,"a":2,"n":"get_Assembly","t":8,"rt":$n[11].Assembly,"fg":"Assembly"},"fn":"Assembly"},{"v":true,"a":2,"n":"FullyQualifiedName","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_FullyQualifiedName","t":8,"rt":$n[0].String,"fg":"FullyQualifiedName"},"fn":"FullyQualifiedName"},{"v":true,"a":2,"n":"MDStreamVersion","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_MDStreamVersion","t":8,"rt":$n[0].Int32,"fg":"MDStreamVersion","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"MDStreamVersion"},{"v":true,"a":2,"n":"MetadataToken","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_MetadataToken","t":8,"rt":$n[0].Int32,"fg":"MetadataToken","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"MetadataToken"},{"v":true,"a":2,"n":"ModuleVersionId","t":16,"rt":$n[0].Guid,"g":{"v":true,"a":2,"n":"get_ModuleVersionId","t":8,"rt":$n[0].Guid,"fg":"ModuleVersionId"},"fn":"ModuleVersionId"},{"v":true,"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"fn":"Name"},{"v":true,"a":2,"n":"ScopeName","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_ScopeName","t":8,"rt":$n[0].String,"fg":"ScopeName"},"fn":"ScopeName"},{"a":1,"n":"DefaultLookup","is":true,"t":4,"rt":$n[11].BindingFlags,"sn":"DefaultLookup","box":function ($v) { return Bridge.box($v, System.Reflection.BindingFlags, System.Enum.toStringFn(System.Reflection.BindingFlags));}},{"a":2,"n":"FilterTypeName","is":true,"t":4,"rt":Function,"sn":"FilterTypeName","ro":true},{"a":2,"n":"FilterTypeNameIgnoreCase","is":true,"t":4,"rt":Function,"sn":"FilterTypeNameIgnoreCase","ro":true}]}; }, $n);
    $m("System.Reflection.ParameterModifier", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"parameterCount","pt":$n[0].Int32,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Item","t":16,"rt":$n[0].Boolean,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Boolean,"ps":1}],"sn":"setItem","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Boolean]}},{"a":1,"n":"_byRef","t":4,"rt":$n[0].Array.type(System.Boolean),"sn":"_byRef","ro":true}]}; }, $n);
    $m("System.Reflection.TypeAttributes", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Abstract","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Abstract","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"AnsiClass","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"AnsiClass","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"AutoClass","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"AutoClass","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"AutoLayout","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"AutoLayout","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"BeforeFieldInit","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"BeforeFieldInit","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"Class","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Class","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"ClassSemanticsMask","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"ClassSemanticsMask","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"CustomFormatClass","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"CustomFormatClass","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"CustomFormatMask","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"CustomFormatMask","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"ExplicitLayout","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"ExplicitLayout","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"HasSecurity","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"HasSecurity","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"Import","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Import","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"Interface","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Interface","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"LayoutMask","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"LayoutMask","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NestedAssembly","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NestedAssembly","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NestedFamANDAssem","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NestedFamANDAssem","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NestedFamORAssem","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NestedFamORAssem","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NestedFamily","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NestedFamily","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NestedPrivate","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NestedPrivate","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NestedPublic","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NestedPublic","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"NotPublic","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"NotPublic","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"Public","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Public","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"RTSpecialName","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"RTSpecialName","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"ReservedMask","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"ReservedMask","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"Sealed","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Sealed","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"SequentialLayout","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"SequentialLayout","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"Serializable","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"Serializable","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"SpecialName","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"SpecialName","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"StringFormatMask","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"StringFormatMask","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"UnicodeClass","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"UnicodeClass","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"VisibilityMask","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"VisibilityMask","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}},{"a":2,"n":"WindowsRuntime","is":true,"t":4,"rt":$n[11].TypeAttributes,"sn":"WindowsRuntime","box":function ($v) { return Bridge.box($v, System.Reflection.TypeAttributes, System.Enum.toStringFn(System.Reflection.TypeAttributes));}}]}; }, $n);
    $m("System.IO.FileOptions", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Asynchronous","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"Asynchronous","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}},{"a":2,"n":"DeleteOnClose","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"DeleteOnClose","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}},{"a":2,"n":"Encrypted","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"Encrypted","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"None","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}},{"a":2,"n":"RandomAccess","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"RandomAccess","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}},{"a":2,"n":"SequentialScan","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"SequentialScan","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}},{"a":2,"n":"WriteThrough","is":true,"t":4,"rt":$n[13].FileOptions,"sn":"WriteThrough","box":function ($v) { return Bridge.box($v, System.IO.FileOptions, System.Enum.toStringFn(System.IO.FileOptions));}}]}; }, $n);
    $m("System.IO.FileShare", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Delete","is":true,"t":4,"rt":$n[13].FileShare,"sn":"Delete","box":function ($v) { return Bridge.box($v, System.IO.FileShare, System.Enum.toStringFn(System.IO.FileShare));}},{"a":2,"n":"Inheritable","is":true,"t":4,"rt":$n[13].FileShare,"sn":"Inheritable","box":function ($v) { return Bridge.box($v, System.IO.FileShare, System.Enum.toStringFn(System.IO.FileShare));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[13].FileShare,"sn":"None","box":function ($v) { return Bridge.box($v, System.IO.FileShare, System.Enum.toStringFn(System.IO.FileShare));}},{"a":2,"n":"Read","is":true,"t":4,"rt":$n[13].FileShare,"sn":"Read","box":function ($v) { return Bridge.box($v, System.IO.FileShare, System.Enum.toStringFn(System.IO.FileShare));}},{"a":2,"n":"ReadWrite","is":true,"t":4,"rt":$n[13].FileShare,"sn":"ReadWrite","box":function ($v) { return Bridge.box($v, System.IO.FileShare, System.Enum.toStringFn(System.IO.FileShare));}},{"a":2,"n":"Write","is":true,"t":4,"rt":$n[13].FileShare,"sn":"Write","box":function ($v) { return Bridge.box($v, System.IO.FileShare, System.Enum.toStringFn(System.IO.FileShare));}}]}; }, $n);
    $m("System.IO.MemoryStream", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte)],"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"sn":"$ctor6"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte),$n[0].Boolean],"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"writable","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Boolean],"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"writable","pt":$n[0].Boolean,"ps":3}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Boolean,$n[0].Boolean],"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"writable","pt":$n[0].Boolean,"ps":3},{"n":"publiclyVisible","pt":$n[0].Boolean,"ps":4}],"sn":"$ctor5"},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":1,"n":"EnsureCapacity","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"EnsureCapacity","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"EnsureWriteable","t":8,"sn":"EnsureWriteable","rt":$n[0].Void},{"ov":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"v":true,"a":2,"n":"GetBuffer","t":8,"sn":"GetBuffer","rt":$n[0].Array.type(System.Byte)},{"a":4,"n":"InternalEmulateRead","t":8,"pi":[{"n":"count","pt":$n[0].Int32,"ps":0}],"sn":"InternalEmulateRead","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"InternalGetBuffer","t":8,"sn":"InternalGetBuffer","rt":$n[0].Array.type(System.Byte)},{"a":4,"n":"InternalGetPosition","t":8,"sn":"InternalGetPosition","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"InternalReadInt32","t":8,"sn":"InternalReadInt32","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadByte","t":8,"sn":"ReadByte","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[0].Int64,"ps":0},{"n":"loc","pt":$n[13].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[0].Int64,"p":[$n[0].Int64,$n[13].SeekOrigin]},{"ov":true,"a":2,"n":"SetLength","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"SetLength","rt":$n[0].Void,"p":[$n[0].Int64]},{"v":true,"a":2,"n":"ToArray","t":8,"sn":"ToArray","rt":$n[0].Array.type(System.Byte)},{"v":true,"a":2,"n":"TryGetBuffer","t":8,"pi":[{"n":"buffer","out":true,"pt":$n[0].ArraySegment,"ps":0}],"sn":"TryGetBuffer","rt":$n[0].Boolean,"p":[$n[0].ArraySegment],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"WriteByte","t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"WriteByte","rt":$n[0].Void,"p":[$n[0].Byte]},{"v":true,"a":2,"n":"WriteTo","t":8,"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0}],"sn":"WriteTo","rt":$n[0].Void,"p":[$n[13].Stream]},{"ov":true,"a":2,"n":"CanRead","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanRead","t":8,"rt":$n[0].Boolean,"fg":"CanRead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanRead"},{"ov":true,"a":2,"n":"CanSeek","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanSeek","t":8,"rt":$n[0].Boolean,"fg":"CanSeek","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanSeek"},{"ov":true,"a":2,"n":"CanWrite","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanWrite","t":8,"rt":$n[0].Boolean,"fg":"CanWrite","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanWrite"},{"v":true,"a":2,"n":"Capacity","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_Capacity","t":8,"rt":$n[0].Int32,"fg":"Capacity","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"v":true,"a":2,"n":"set_Capacity","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"Capacity"},"fn":"Capacity"},{"ov":true,"a":2,"n":"Length","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Length","t":8,"rt":$n[0].Int64,"fg":"Length"},"fn":"Length"},{"ov":true,"a":2,"n":"Position","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Position","t":8,"rt":$n[0].Int64,"fg":"Position"},"s":{"ov":true,"a":2,"n":"set_Position","t":8,"p":[$n[0].Int64],"rt":$n[0].Void,"fs":"Position"},"fn":"Position"},{"a":1,"n":"MemStreamMaxLength","is":true,"t":4,"rt":$n[0].Int32,"sn":"MemStreamMaxLength","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_buffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_buffer"},{"a":1,"n":"_capacity","t":4,"rt":$n[0].Int32,"sn":"_capacity","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_expandable","t":4,"rt":$n[0].Boolean,"sn":"_expandable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_exposable","t":4,"rt":$n[0].Boolean,"sn":"_exposable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isOpen","t":4,"rt":$n[0].Boolean,"sn":"_isOpen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_length","t":4,"rt":$n[0].Int32,"sn":"_length","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_origin","t":4,"rt":$n[0].Int32,"sn":"_origin","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_position","t":4,"rt":$n[0].Int32,"sn":"_position","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_writable","t":4,"rt":$n[0].Boolean,"sn":"_writable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.IO.BinaryReader", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream],"pi":[{"n":"input","pt":$n[13].Stream,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding],"pi":[{"n":"input","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Boolean],"pi":[{"n":"input","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"leaveOpen","pt":$n[0].Boolean,"ps":2}],"sn":"$ctor2"},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"v":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":3,"n":"FillBuffer","t":8,"pi":[{"n":"numBytes","pt":$n[0].Int32,"ps":0}],"sn":"FillBuffer","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"InternalReadChars","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"InternalReadChars","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"InternalReadOneChar","t":8,"pi":[{"n":"allowSurrogate","dv":false,"o":true,"pt":$n[0].Boolean,"ps":0}],"sn":"InternalReadOneChar","rt":$n[0].Int32,"p":[$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"PeekChar","t":8,"sn":"PeekChar","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Read","t":8,"sn":"Read","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$2","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":5,"n":"Read7BitEncodedInt","t":8,"sn":"Read7BitEncodedInt","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"ReadBoolean","t":8,"sn":"ReadBoolean","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"ReadByte","t":8,"sn":"ReadByte","rt":$n[0].Byte,"box":function ($v) { return Bridge.box($v, System.Byte);}},{"v":true,"a":2,"n":"ReadBytes","t":8,"pi":[{"n":"count","pt":$n[0].Int32,"ps":0}],"sn":"ReadBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ReadChar","t":8,"sn":"ReadChar","rt":$n[0].Char,"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"v":true,"a":2,"n":"ReadChars","t":8,"pi":[{"n":"count","pt":$n[0].Int32,"ps":0}],"sn":"ReadChars","rt":$n[0].Array.type(System.Char),"p":[$n[0].Int32]},{"v":true,"a":2,"n":"ReadDecimal","t":8,"sn":"ReadDecimal","rt":$n[0].Decimal},{"v":true,"a":2,"n":"ReadDouble","t":8,"sn":"ReadDouble","rt":$n[0].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"v":true,"a":2,"n":"ReadInt16","t":8,"sn":"ReadInt16","rt":$n[0].Int16,"box":function ($v) { return Bridge.box($v, System.Int16);}},{"v":true,"a":2,"n":"ReadInt32","t":8,"sn":"ReadInt32","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"ReadInt64","t":8,"sn":"ReadInt64","rt":$n[0].Int64},{"v":true,"a":2,"n":"ReadSByte","t":8,"sn":"ReadSByte","rt":$n[0].SByte,"box":function ($v) { return Bridge.box($v, System.SByte);}},{"v":true,"a":2,"n":"ReadSingle","t":8,"sn":"ReadSingle","rt":$n[0].Single,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"v":true,"a":2,"n":"ReadString","t":8,"sn":"ReadString","rt":$n[0].String},{"v":true,"a":2,"n":"ReadUInt16","t":8,"sn":"ReadUInt16","rt":$n[0].UInt16,"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"v":true,"a":2,"n":"ReadUInt32","t":8,"sn":"ReadUInt32","rt":$n[0].UInt32,"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"v":true,"a":2,"n":"ReadUInt64","t":8,"sn":"ReadUInt64","rt":$n[0].UInt64},{"v":true,"a":2,"n":"BaseStream","t":16,"rt":$n[13].Stream,"g":{"v":true,"a":2,"n":"get_BaseStream","t":8,"rt":$n[13].Stream,"fg":"BaseStream"},"fn":"BaseStream"},{"a":1,"n":"MaxCharBytesSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"MaxCharBytesSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"lastCharsRead","t":4,"rt":$n[0].Int32,"sn":"lastCharsRead","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"m_2BytesPerChar","t":4,"rt":$n[0].Boolean,"sn":"m_2BytesPerChar","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"m_buffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"m_buffer"},{"a":1,"n":"m_charBuffer","t":4,"rt":$n[0].Array.type(System.Char),"sn":"m_charBuffer"},{"a":1,"n":"m_charBytes","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"m_charBytes"},{"a":1,"n":"m_encoding","t":4,"rt":$n[8].Encoding,"sn":"m_encoding"},{"a":1,"n":"m_isMemoryStream","t":4,"rt":$n[0].Boolean,"sn":"m_isMemoryStream","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"m_leaveOpen","t":4,"rt":$n[0].Boolean,"sn":"m_leaveOpen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"m_maxCharsSize","t":4,"rt":$n[0].Int32,"sn":"m_maxCharsSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"m_singleChar","t":4,"rt":$n[0].Array.type(System.Char),"sn":"m_singleChar"},{"a":1,"n":"m_stream","t":4,"rt":$n[13].Stream,"sn":"m_stream"}]}; }, $n);
    $m("System.IO.BinaryWriter", function () { return {"att":1048577,"a":2,"m":[{"a":3,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream],"pi":[{"n":"output","pt":$n[13].Stream,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding],"pi":[{"n":"output","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Boolean],"pi":[{"n":"output","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"leaveOpen","pt":$n[0].Boolean,"ps":2}],"sn":"$ctor3"},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"v":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"v":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[0].Int32,"ps":0},{"n":"origin","pt":$n[13].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[0].Int64,"p":[$n[0].Int32,$n[13].SeekOrigin]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"Write$1","rt":$n[0].Void,"p":[$n[0].Byte]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Write$2","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte)]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"ch","pt":$n[0].Char,"ps":0}],"sn":"Write$4","rt":$n[0].Void,"p":[$n[0].Char]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"Write$5","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char)]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"Write$7","rt":$n[0].Void,"p":[$n[0].Decimal]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"Write$8","rt":$n[0].Void,"p":[$n[0].Double]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Int16,"ps":0}],"sn":"Write$9","rt":$n[0].Void,"p":[$n[0].Int16]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Write$10","rt":$n[0].Void,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"Write$11","rt":$n[0].Void,"p":[$n[0].Int64]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].SByte,"ps":0}],"sn":"Write$12","rt":$n[0].Void,"p":[$n[0].SByte]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"Write$13","rt":$n[0].Void,"p":[$n[0].Single]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"Write$14","rt":$n[0].Void,"p":[$n[0].String]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].UInt16,"ps":0}],"sn":"Write$15","rt":$n[0].Void,"p":[$n[0].UInt16]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"Write$16","rt":$n[0].Void,"p":[$n[0].UInt32]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"Write$17","rt":$n[0].Void,"p":[$n[0].UInt64]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write$3","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"chars","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write$6","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"a":3,"n":"Write7BitEncodedInt","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Write7BitEncodedInt","rt":$n[0].Void,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"BaseStream","t":16,"rt":$n[13].Stream,"g":{"v":true,"a":2,"n":"get_BaseStream","t":8,"rt":$n[13].Stream,"fg":"BaseStream"},"fn":"BaseStream"},{"a":1,"n":"LargeByteBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"LargeByteBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[13].BinaryWriter,"sn":"Null","ro":true},{"a":3,"n":"OutStream","t":4,"rt":$n[13].Stream,"sn":"OutStream"},{"a":1,"n":"_buffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_buffer"},{"a":1,"n":"_encoding","t":4,"rt":$n[8].Encoding,"sn":"_encoding"},{"a":1,"n":"_leaveOpen","t":4,"rt":$n[0].Boolean,"sn":"_leaveOpen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_tmpOneCharBuffer","t":4,"rt":$n[0].Array.type(System.Char),"sn":"_tmpOneCharBuffer"}]}; }, $n);
    $m("System.IO.BufferedStream", function () { return {"att":1048833,"a":2,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[0].Int32],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"bufferSize","pt":$n[0].Int32,"ps":1}],"sn":"$ctor2"},{"a":1,"n":"ClearReadBufferBeforeWrite","t":8,"sn":"ClearReadBufferBeforeWrite","rt":$n[0].Void},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":1,"n":"EnsureBufferAllocated","t":8,"sn":"EnsureBufferAllocated","rt":$n[0].Void},{"a":1,"n":"EnsureCanRead","t":8,"sn":"EnsureCanRead","rt":$n[0].Void},{"a":1,"n":"EnsureCanSeek","t":8,"sn":"EnsureCanSeek","rt":$n[0].Void},{"a":1,"n":"EnsureCanWrite","t":8,"sn":"EnsureCanWrite","rt":$n[0].Void},{"a":1,"n":"EnsureNotClosed","t":8,"sn":"EnsureNotClosed","rt":$n[0].Void},{"a":1,"n":"EnsureShadowBufferAllocated","t":8,"sn":"EnsureShadowBufferAllocated","rt":$n[0].Void},{"ov":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"a":1,"n":"FlushRead","t":8,"sn":"FlushRead","rt":$n[0].Void},{"a":1,"n":"FlushWrite","t":8,"sn":"FlushWrite","rt":$n[0].Void},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadByte","t":8,"sn":"ReadByte","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"ReadFromBuffer","t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"ReadFromBuffer","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"ReadFromBuffer","t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"error","out":true,"pt":$n[0].Exception,"ps":3}],"sn":"ReadFromBuffer$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Exception],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[0].Int64,"ps":0},{"n":"origin","pt":$n[13].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[0].Int64,"p":[$n[0].Int64,$n[13].SeekOrigin]},{"ov":true,"a":2,"n":"SetLength","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"SetLength","rt":$n[0].Void,"p":[$n[0].Int64]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"WriteByte","t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"WriteByte","rt":$n[0].Void,"p":[$n[0].Byte]},{"a":1,"n":"WriteToBuffer","t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","ref":true,"pt":$n[0].Int32,"ps":1},{"n":"count","ref":true,"pt":$n[0].Int32,"ps":2}],"sn":"WriteToBuffer","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":1,"n":"WriteToBuffer","t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","ref":true,"pt":$n[0].Int32,"ps":1},{"n":"count","ref":true,"pt":$n[0].Int32,"ps":2},{"n":"error","out":true,"pt":$n[0].Exception,"ps":3}],"sn":"WriteToBuffer$1","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Exception]},{"a":4,"n":"BufferSize","t":16,"rt":$n[0].Int32,"g":{"a":4,"n":"get_BufferSize","t":8,"rt":$n[0].Int32,"fg":"BufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"BufferSize"},{"ov":true,"a":2,"n":"CanRead","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanRead","t":8,"rt":$n[0].Boolean,"fg":"CanRead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanRead"},{"ov":true,"a":2,"n":"CanSeek","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanSeek","t":8,"rt":$n[0].Boolean,"fg":"CanSeek","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanSeek"},{"ov":true,"a":2,"n":"CanWrite","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanWrite","t":8,"rt":$n[0].Boolean,"fg":"CanWrite","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanWrite"},{"ov":true,"a":2,"n":"Length","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Length","t":8,"rt":$n[0].Int64,"fg":"Length"},"fn":"Length"},{"ov":true,"a":2,"n":"Position","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Position","t":8,"rt":$n[0].Int64,"fg":"Position"},"s":{"ov":true,"a":2,"n":"set_Position","t":8,"p":[$n[0].Int64],"rt":$n[0].Void,"fs":"Position"},"fn":"Position"},{"a":4,"n":"UnderlyingStream","t":16,"rt":$n[13].Stream,"g":{"a":4,"n":"get_UnderlyingStream","t":8,"rt":$n[13].Stream,"fg":"UnderlyingStream"},"fn":"UnderlyingStream"},{"a":1,"n":"MaxShadowBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"MaxShadowBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_DefaultBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"_DefaultBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_buffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_buffer"},{"a":1,"n":"_bufferSize","t":4,"rt":$n[0].Int32,"sn":"_bufferSize","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_readLen","t":4,"rt":$n[0].Int32,"sn":"_readLen","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_readPos","t":4,"rt":$n[0].Int32,"sn":"_readPos","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_stream","t":4,"rt":$n[13].Stream,"sn":"_stream"},{"a":1,"n":"_writePos","t":4,"rt":$n[0].Int32,"sn":"_writePos","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IO.EndOfStreamException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.IO.File", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":1,"n":"InternalReadAllBytes","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"checkHost","pt":$n[0].Boolean,"ps":1}],"sn":"InternalReadAllBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String,$n[0].Boolean]},{"a":1,"n":"InternalReadAllLines","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"InternalReadAllLines","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[8].Encoding]},{"a":1,"n":"InternalReadAllText","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"checkHost","pt":$n[0].Boolean,"ps":2}],"sn":"InternalReadAllText","rt":$n[0].String,"p":[$n[0].String,$n[8].Encoding,$n[0].Boolean]},{"a":2,"n":"OpenRead","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"OpenRead","rt":$n[13].FileStream,"p":[$n[0].String]},{"a":2,"n":"OpenText","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"OpenText","rt":$n[13].StreamReader,"p":[$n[0].String]},{"a":2,"n":"ReadAllBytes","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"ReadAllBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":2,"n":"ReadAllLines","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"ReadAllLines","rt":$n[0].Array.type(System.String),"p":[$n[0].String]},{"a":2,"n":"ReadAllLines","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"ReadAllLines$1","rt":$n[0].Array.type(System.String),"p":[$n[0].String,$n[8].Encoding]},{"a":2,"n":"ReadAllText","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"ReadAllText","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"ReadAllText","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"ReadAllText$1","rt":$n[0].String,"p":[$n[0].String,$n[8].Encoding]},{"a":2,"n":"ReadLines","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"ReadLines","rt":$n[4].IEnumerable$1(System.String),"p":[$n[0].String]},{"a":2,"n":"ReadLines","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"ReadLines$1","rt":$n[4].IEnumerable$1(System.String),"p":[$n[0].String,$n[8].Encoding]}]}; }, $n);
    $m("System.IO.FileMode", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Append","is":true,"t":4,"rt":$n[13].FileMode,"sn":"Append","box":function ($v) { return Bridge.box($v, System.IO.FileMode, System.Enum.toStringFn(System.IO.FileMode));}},{"a":2,"n":"Create","is":true,"t":4,"rt":$n[13].FileMode,"sn":"Create","box":function ($v) { return Bridge.box($v, System.IO.FileMode, System.Enum.toStringFn(System.IO.FileMode));}},{"a":2,"n":"CreateNew","is":true,"t":4,"rt":$n[13].FileMode,"sn":"CreateNew","box":function ($v) { return Bridge.box($v, System.IO.FileMode, System.Enum.toStringFn(System.IO.FileMode));}},{"a":2,"n":"Open","is":true,"t":4,"rt":$n[13].FileMode,"sn":"Open","box":function ($v) { return Bridge.box($v, System.IO.FileMode, System.Enum.toStringFn(System.IO.FileMode));}},{"a":2,"n":"OpenOrCreate","is":true,"t":4,"rt":$n[13].FileMode,"sn":"OpenOrCreate","box":function ($v) { return Bridge.box($v, System.IO.FileMode, System.Enum.toStringFn(System.IO.FileMode));}},{"a":2,"n":"Truncate","is":true,"t":4,"rt":$n[13].FileMode,"sn":"Truncate","box":function ($v) { return Bridge.box($v, System.IO.FileMode, System.Enum.toStringFn(System.IO.FileMode));}}]}; }, $n);
    $m("System.IO.FileStream", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte),$n[0].String],"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"name","pt":$n[0].String,"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[13].FileMode],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"mode","pt":$n[13].FileMode,"ps":1}],"sn":"$ctor1"},{"a":4,"n":"EnsureBufferAsync","t":8,"sn":"EnsureBufferAsync","rt":$n[10].Task},{"ov":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"a":4,"n":"FromFile","is":true,"t":8,"pi":[{"n":"file","pt":$n[0].Object,"ps":0}],"sn":"FromFile","rt":$n[10].Task$1(System.IO.FileStream),"p":[$n[0].Object]},{"a":1,"n":"GetInternalBuffer","t":8,"sn":"GetInternalBuffer","rt":$n[0].Array.type(System.Byte)},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"ReadBytes","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"ReadBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":4,"n":"ReadBytesAsync","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"ReadBytesAsync","rt":$n[10].Task$1(System.Array.type(System.Byte)),"p":[$n[0].String]},{"ov":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[0].Int64,"ps":0},{"n":"origin","pt":$n[13].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[0].Int64,"p":[$n[0].Int64,$n[13].SeekOrigin]},{"ov":true,"a":2,"n":"SetLength","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"SetLength","rt":$n[0].Void,"p":[$n[0].Int64]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"CanRead","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanRead","t":8,"rt":$n[0].Boolean,"fg":"CanRead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanRead"},{"ov":true,"a":2,"n":"CanSeek","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanSeek","t":8,"rt":$n[0].Boolean,"fg":"CanSeek","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanSeek"},{"ov":true,"a":2,"n":"CanWrite","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanWrite","t":8,"rt":$n[0].Boolean,"fg":"CanWrite","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanWrite"},{"v":true,"a":2,"n":"IsAsync","t":16,"rt":$n[0].Boolean,"g":{"v":true,"a":2,"n":"get_IsAsync","t":8,"rt":$n[0].Boolean,"fg":"IsAsync","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsAsync"},{"ov":true,"a":2,"n":"Length","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Length","t":8,"rt":$n[0].Int64,"fg":"Length"},"fn":"Length"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"Name"},"fn":"Name"},{"ov":true,"a":2,"n":"Position","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Position","t":8,"rt":$n[0].Int64,"fg":"Position"},"s":{"ov":true,"a":2,"n":"set_Position","t":8,"p":[$n[0].Int64],"rt":$n[0].Void,"fs":"Position"},"fn":"Position"},{"a":1,"n":"_buffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_buffer"},{"a":1,"n":"name","t":4,"rt":$n[0].String,"sn":"name"}]}; }, $n);
    $m("System.IO.IOException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"hresult","pt":$n[0].Int32,"ps":1}],"sn":"$ctor3"}]}; }, $n);
    $m("System.IO.Iterator$1", function (TSource) { return {"att":1048704,"a":4,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":3,"n":"Clone","t":8,"sn":"Clone","rt":$n[13].Iterator$1(TSource)},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"v":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].IEnumerator$1(TSource)},{"ab":true,"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Current","t":16,"rt":TSource,"g":{"a":2,"n":"get_Current","t":8,"rt":TSource,"fg":"Current"},"fn":"Current"},{"a":4,"n":"current","t":4,"rt":TSource,"sn":"current"},{"a":4,"n":"state","t":4,"rt":$n[0].Int32,"sn":"state","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IO.ReadLinesIterator", function () { return {"att":1048576,"a":4,"m":[{"a":1,"n":".ctor","t":1,"p":[$n[0].String,$n[8].Encoding,$n[13].StreamReader],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"reader","pt":$n[13].StreamReader,"ps":2}],"sn":"ctor"},{"ov":true,"a":3,"n":"Clone","t":8,"sn":"Clone","rt":$n[13].Iterator$1(System.String)},{"a":4,"n":"CreateIterator","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"CreateIterator","rt":$n[13].ReadLinesIterator,"p":[$n[0].String,$n[8].Encoding]},{"a":1,"n":"CreateIterator","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"reader","pt":$n[13].StreamReader,"ps":2}],"sn":"CreateIterator$1","rt":$n[13].ReadLinesIterator,"p":[$n[0].String,$n[8].Encoding,$n[13].StreamReader]},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"ov":true,"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_encoding","t":4,"rt":$n[8].Encoding,"sn":"_encoding","ro":true},{"a":1,"n":"_path","t":4,"rt":$n[0].String,"sn":"_path","ro":true},{"a":1,"n":"_reader","t":4,"rt":$n[13].StreamReader,"sn":"_reader"}]}; }, $n);
    $m("System.IO.SeekOrigin", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Begin","is":true,"t":4,"rt":$n[13].SeekOrigin,"sn":"Begin","box":function ($v) { return Bridge.box($v, System.IO.SeekOrigin, System.Enum.toStringFn(System.IO.SeekOrigin));}},{"a":2,"n":"Current","is":true,"t":4,"rt":$n[13].SeekOrigin,"sn":"Current","box":function ($v) { return Bridge.box($v, System.IO.SeekOrigin, System.Enum.toStringFn(System.IO.SeekOrigin));}},{"a":2,"n":"End","is":true,"t":4,"rt":$n[13].SeekOrigin,"sn":"End","box":function ($v) { return Bridge.box($v, System.IO.SeekOrigin, System.Enum.toStringFn(System.IO.SeekOrigin));}}]}; }, $n);
    $m("System.IO.Stream", function () { return {"nested":[$n[13].Stream.NullStream,$n[13].Stream.SynchronousAsyncResult],"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"BeginRead","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4}],"sn":"BeginRead","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object]},{"a":4,"n":"BeginReadInternal","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4},{"n":"serializeAsynchronously","pt":$n[0].Boolean,"ps":5}],"sn":"BeginReadInternal","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object,$n[0].Boolean]},{"v":true,"a":2,"n":"BeginWrite","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4}],"sn":"BeginWrite","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object]},{"a":4,"n":"BeginWriteInternal","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4},{"n":"serializeAsynchronously","pt":$n[0].Boolean,"ps":5}],"sn":"BeginWriteInternal","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object,$n[0].Boolean]},{"a":4,"n":"BlockingBeginRead","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4}],"sn":"BlockingBeginRead","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object]},{"a":4,"n":"BlockingBeginWrite","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4}],"sn":"BlockingBeginWrite","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object]},{"a":4,"n":"BlockingEndRead","is":true,"t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"BlockingEndRead","rt":$n[0].Int32,"p":[$n[0].IAsyncResult],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"BlockingEndWrite","is":true,"t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"BlockingEndWrite","rt":$n[0].Void,"p":[$n[0].IAsyncResult]},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"destination","pt":$n[13].Stream,"ps":0}],"sn":"CopyTo","rt":$n[0].Void,"p":[$n[13].Stream]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"destination","pt":$n[13].Stream,"ps":0},{"n":"bufferSize","pt":$n[0].Int32,"ps":1}],"sn":"CopyTo$1","rt":$n[0].Void,"p":[$n[13].Stream,$n[0].Int32]},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"v":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"EndRead","t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"EndRead","rt":$n[0].Int32,"p":[$n[0].IAsyncResult],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"EndWrite","t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"EndWrite","rt":$n[0].Void,"p":[$n[0].IAsyncResult]},{"ab":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"a":1,"n":"InternalCopyTo","t":8,"pi":[{"n":"destination","pt":$n[13].Stream,"ps":0},{"n":"bufferSize","pt":$n[0].Int32,"ps":1}],"sn":"InternalCopyTo","rt":$n[0].Void,"p":[$n[13].Stream,$n[0].Int32]},{"ab":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"ReadByte","t":8,"sn":"ReadByte","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[0].Int64,"ps":0},{"n":"origin","pt":$n[13].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[0].Int64,"p":[$n[0].Int64,$n[13].SeekOrigin]},{"ab":true,"a":2,"n":"SetLength","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"SetLength","rt":$n[0].Void,"p":[$n[0].Int64]},{"a":2,"n":"Synchronized","is":true,"t":8,"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0}],"sn":"Synchronized","rt":$n[13].Stream,"p":[$n[13].Stream]},{"ab":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"v":true,"a":2,"n":"WriteByte","t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"WriteByte","rt":$n[0].Void,"p":[$n[0].Byte]},{"ab":true,"a":2,"n":"CanRead","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_CanRead","t":8,"rt":$n[0].Boolean,"fg":"CanRead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanRead"},{"ab":true,"a":2,"n":"CanSeek","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_CanSeek","t":8,"rt":$n[0].Boolean,"fg":"CanSeek","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanSeek"},{"v":true,"a":2,"n":"CanTimeout","t":16,"rt":$n[0].Boolean,"g":{"v":true,"a":2,"n":"get_CanTimeout","t":8,"rt":$n[0].Boolean,"fg":"CanTimeout","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanTimeout"},{"ab":true,"a":2,"n":"CanWrite","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_CanWrite","t":8,"rt":$n[0].Boolean,"fg":"CanWrite","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanWrite"},{"ab":true,"a":2,"n":"Length","t":16,"rt":$n[0].Int64,"g":{"ab":true,"a":2,"n":"get_Length","t":8,"rt":$n[0].Int64,"fg":"Length"},"fn":"Length"},{"ab":true,"a":2,"n":"Position","t":16,"rt":$n[0].Int64,"g":{"ab":true,"a":2,"n":"get_Position","t":8,"rt":$n[0].Int64,"fg":"Position"},"s":{"ab":true,"a":2,"n":"set_Position","t":8,"p":[$n[0].Int64],"rt":$n[0].Void,"fs":"Position"},"fn":"Position"},{"v":true,"a":2,"n":"ReadTimeout","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_ReadTimeout","t":8,"rt":$n[0].Int32,"fg":"ReadTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"v":true,"a":2,"n":"set_ReadTimeout","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"ReadTimeout"},"fn":"ReadTimeout"},{"v":true,"a":2,"n":"WriteTimeout","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_WriteTimeout","t":8,"rt":$n[0].Int32,"fg":"WriteTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"v":true,"a":2,"n":"set_WriteTimeout","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"WriteTimeout"},"fn":"WriteTimeout"},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[13].Stream,"sn":"Null","ro":true},{"a":1,"n":"_DefaultCopyBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"_DefaultCopyBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.IO.Stream.NullStream", function () { return {"td":$n[13].Stream,"att":1057027,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"BeginRead","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4}],"sn":"BeginRead","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object]},{"ov":true,"a":2,"n":"BeginWrite","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[0].Object,"ps":4}],"sn":"BeginWrite","rt":$n[0].IAsyncResult,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,Function,$n[0].Object]},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"ov":true,"a":2,"n":"EndRead","t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"EndRead","rt":$n[0].Int32,"p":[$n[0].IAsyncResult],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"EndWrite","t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"EndWrite","rt":$n[0].Void,"p":[$n[0].IAsyncResult]},{"ov":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadByte","t":8,"sn":"ReadByte","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[0].Int64,"ps":0},{"n":"origin","pt":$n[13].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[0].Int64,"p":[$n[0].Int64,$n[13].SeekOrigin]},{"ov":true,"a":2,"n":"SetLength","t":8,"pi":[{"n":"length","pt":$n[0].Int64,"ps":0}],"sn":"SetLength","rt":$n[0].Void,"p":[$n[0].Int64]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"WriteByte","t":8,"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"WriteByte","rt":$n[0].Void,"p":[$n[0].Byte]},{"ov":true,"a":2,"n":"CanRead","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanRead","t":8,"rt":$n[0].Boolean,"fg":"CanRead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanRead"},{"ov":true,"a":2,"n":"CanSeek","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanSeek","t":8,"rt":$n[0].Boolean,"fg":"CanSeek","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanSeek"},{"ov":true,"a":2,"n":"CanWrite","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_CanWrite","t":8,"rt":$n[0].Boolean,"fg":"CanWrite","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanWrite"},{"ov":true,"a":2,"n":"Length","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Length","t":8,"rt":$n[0].Int64,"fg":"Length"},"fn":"Length"},{"ov":true,"a":2,"n":"Position","t":16,"rt":$n[0].Int64,"g":{"ov":true,"a":2,"n":"get_Position","t":8,"rt":$n[0].Int64,"fg":"Position"},"s":{"ov":true,"a":2,"n":"set_Position","t":8,"p":[$n[0].Int64],"rt":$n[0].Void,"fs":"Position"},"fn":"Position"}]}; }, $n);
    $m("System.IO.Stream.SynchronousAsyncResult", function () { return {"td":$n[13].Stream,"att":1048837,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].Object],"pi":[{"n":"asyncStateObject","pt":$n[0].Object,"ps":0}],"sn":"$ctor2"},{"a":4,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Object],"pi":[{"n":"bytesRead","pt":$n[0].Int32,"ps":0},{"n":"asyncStateObject","pt":$n[0].Object,"ps":1}],"sn":"$ctor1"},{"a":4,"n":".ctor","t":1,"p":[$n[0].Exception,$n[0].Object,$n[0].Boolean],"pi":[{"n":"ex","pt":$n[0].Exception,"ps":0},{"n":"asyncStateObject","pt":$n[0].Object,"ps":1},{"n":"isWrite","pt":$n[0].Boolean,"ps":2}],"sn":"ctor"},{"a":4,"n":"EndRead","is":true,"t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"EndRead","rt":$n[0].Int32,"p":[$n[0].IAsyncResult],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"EndWrite","is":true,"t":8,"pi":[{"n":"asyncResult","pt":$n[0].IAsyncResult,"ps":0}],"sn":"EndWrite","rt":$n[0].Void,"p":[$n[0].IAsyncResult]},{"a":4,"n":"ThrowIfError","t":8,"sn":"ThrowIfError","rt":$n[0].Void},{"a":2,"n":"AsyncState","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_AsyncState","t":8,"rt":$n[0].Object,"fg":"AsyncState"},"fn":"AsyncState"},{"a":2,"n":"CompletedSynchronously","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_CompletedSynchronously","t":8,"rt":$n[0].Boolean,"fg":"CompletedSynchronously","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CompletedSynchronously"},{"a":2,"n":"IsCompleted","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsCompleted","t":8,"rt":$n[0].Boolean,"fg":"IsCompleted","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsCompleted"},{"a":1,"n":"_bytesRead","t":4,"rt":$n[0].Int32,"sn":"_bytesRead","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_endXxxCalled","t":4,"rt":$n[0].Boolean,"sn":"_endXxxCalled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_exceptionInfo","t":4,"rt":$n[0].Exception,"sn":"_exceptionInfo"},{"a":1,"n":"_isWrite","t":4,"rt":$n[0].Boolean,"sn":"_isWrite","ro":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_stateObject","t":4,"rt":$n[0].Object,"sn":"_stateObject","ro":true}]}; }, $n);
    $m("System.IO.StreamReader", function () { return {"nested":[$n[13].StreamReader.NullStreamReader],"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"$ctor7"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[0].Boolean],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Boolean],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor8"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[8].Encoding],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"$ctor9"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Boolean],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[8].Encoding,$n[0].Boolean],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2}],"sn":"$ctor10"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Boolean,$n[0].Int32],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[8].Encoding,$n[0].Boolean,$n[0].Int32],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3}],"sn":"$ctor11"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Boolean,$n[0].Int32,$n[0].Boolean],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3},{"n":"leaveOpen","pt":$n[0].Boolean,"ps":4}],"sn":"$ctor6"},{"a":4,"n":".ctor","t":1,"p":[$n[0].String,$n[8].Encoding,$n[0].Boolean,$n[0].Int32,$n[0].Boolean],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3},{"n":"checkHost","pt":$n[0].Boolean,"ps":4}],"sn":"$ctor12"},{"ov":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"a":1,"n":"CompressBuffer","t":8,"pi":[{"n":"n","pt":$n[0].Int32,"ps":0}],"sn":"CompressBuffer","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"DetectEncoding","t":8,"sn":"DetectEncoding","rt":$n[0].Void},{"a":2,"n":"DiscardBufferedData","t":8,"sn":"DiscardBufferedData","rt":$n[0].Void},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":4,"n":"Init","t":8,"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0}],"sn":"Init","rt":$n[0].Void,"p":[$n[13].Stream]},{"a":1,"n":"Init","t":8,"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"detectEncodingFromByteOrderMarks","pt":$n[0].Boolean,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3},{"n":"leaveOpen","pt":$n[0].Boolean,"ps":4}],"sn":"Init$1","rt":$n[0].Void,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Boolean,$n[0].Int32,$n[0].Boolean]},{"a":1,"n":"IsPreamble","t":8,"sn":"IsPreamble","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Peek","t":8,"sn":"Peek","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"sn":"Read","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadBlock","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"ReadBlock","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":4,"n":"ReadBuffer","t":8,"sn":"ReadBuffer","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"ReadBuffer","t":8,"pi":[{"n":"userBuffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"userOffset","pt":$n[0].Int32,"ps":1},{"n":"desiredChars","pt":$n[0].Int32,"ps":2},{"n":"readToUserBuffer","out":true,"pt":$n[0].Boolean,"ps":3}],"sn":"ReadBuffer$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadLine","t":8,"sn":"ReadLine","rt":$n[0].String},{"ov":true,"a":2,"n":"ReadToEnd","t":8,"sn":"ReadToEnd","rt":$n[0].String},{"ov":true,"a":2,"n":"ReadToEndAsync","t":8,"sn":"ReadToEndAsync","rt":$n[10].Task$1(System.String)},{"v":true,"a":2,"n":"BaseStream","t":16,"rt":$n[13].Stream,"g":{"v":true,"a":2,"n":"get_BaseStream","t":8,"rt":$n[13].Stream,"fg":"BaseStream"},"fn":"BaseStream"},{"v":true,"a":2,"n":"CurrentEncoding","t":16,"rt":$n[8].Encoding,"g":{"v":true,"a":2,"n":"get_CurrentEncoding","t":8,"rt":$n[8].Encoding,"fg":"CurrentEncoding"},"fn":"CurrentEncoding"},{"a":4,"n":"DefaultBufferSize","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":4,"n":"get_DefaultBufferSize","t":8,"rt":$n[0].Int32,"fg":"DefaultBufferSize","is":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"DefaultBufferSize"},{"a":2,"n":"EndOfStream","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_EndOfStream","t":8,"rt":$n[0].Boolean,"fg":"EndOfStream","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"EndOfStream"},{"a":4,"n":"LeaveOpen","t":16,"rt":$n[0].Boolean,"g":{"a":4,"n":"get_LeaveOpen","t":8,"rt":$n[0].Boolean,"fg":"LeaveOpen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"LeaveOpen"},{"a":1,"n":"DefaultFileStreamBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"DefaultFileStreamBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MinBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"MinBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[13].StreamReader,"sn":"Null","ro":true},{"a":1,"n":"_closable","t":4,"rt":$n[0].Boolean,"sn":"_closable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_detectEncoding","t":4,"rt":$n[0].Boolean,"sn":"_detectEncoding","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_isBlocked","t":4,"rt":$n[0].Boolean,"sn":"_isBlocked","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_maxCharsPerBuffer","t":4,"rt":$n[0].Int32,"sn":"_maxCharsPerBuffer","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"byteBuffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"byteBuffer"},{"a":1,"n":"byteLen","t":4,"rt":$n[0].Int32,"sn":"byteLen","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"bytePos","t":4,"rt":$n[0].Int32,"sn":"bytePos","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"charBuffer","t":4,"rt":$n[0].Array.type(System.Char),"sn":"charBuffer"},{"a":1,"n":"charLen","t":4,"rt":$n[0].Int32,"sn":"charLen","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"charPos","t":4,"rt":$n[0].Int32,"sn":"charPos","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"encoding","t":4,"rt":$n[8].Encoding,"sn":"encoding"},{"a":1,"n":"stream","t":4,"rt":$n[13].Stream,"sn":"stream"}]}; }, $n);
    $m("System.IO.StreamReader.NullStreamReader", function () { return {"td":$n[13].StreamReader,"att":1048579,"a":1,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"ov":true,"a":2,"n":"Peek","t":8,"sn":"Peek","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"sn":"Read","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":4,"n":"ReadBuffer","t":8,"sn":"ReadBuffer","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadLine","t":8,"sn":"ReadLine","rt":$n[0].String},{"ov":true,"a":2,"n":"ReadToEnd","t":8,"sn":"ReadToEnd","rt":$n[0].String},{"ov":true,"a":2,"n":"BaseStream","t":16,"rt":$n[13].Stream,"g":{"ov":true,"a":2,"n":"get_BaseStream","t":8,"rt":$n[13].Stream,"fg":"BaseStream"},"fn":"BaseStream"},{"ov":true,"a":2,"n":"CurrentEncoding","t":16,"rt":$n[8].Encoding,"g":{"ov":true,"a":2,"n":"get_CurrentEncoding","t":8,"rt":$n[8].Encoding,"fg":"CurrentEncoding"},"fn":"CurrentEncoding"}]}; }, $n);
    $m("System.IO.StreamWriter", function () { return {"att":1048577,"a":2,"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"path","pt":$n[0].String,"ps":0}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Boolean],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"append","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor6"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Int32],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"bufferSize","pt":$n[0].Int32,"ps":2}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Boolean,$n[8].Encoding],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"append","pt":$n[0].Boolean,"ps":1},{"n":"encoding","pt":$n[8].Encoding,"ps":2}],"sn":"$ctor7"},{"a":2,"n":".ctor","t":1,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Int32,$n[0].Boolean],"pi":[{"n":"stream","pt":$n[13].Stream,"ps":0},{"n":"encoding","pt":$n[8].Encoding,"ps":1},{"n":"bufferSize","pt":$n[0].Int32,"ps":2},{"n":"leaveOpen","pt":$n[0].Boolean,"ps":3}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Boolean,$n[8].Encoding,$n[0].Int32],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"append","pt":$n[0].Boolean,"ps":1},{"n":"encoding","pt":$n[8].Encoding,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3}],"sn":"$ctor8"},{"a":4,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Boolean,$n[8].Encoding,$n[0].Int32,$n[0].Boolean],"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"append","pt":$n[0].Boolean,"ps":1},{"n":"encoding","pt":$n[8].Encoding,"ps":2},{"n":"bufferSize","pt":$n[0].Int32,"ps":3},{"n":"checkHost","pt":$n[0].Boolean,"ps":4}],"sn":"$ctor9"},{"ov":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"ov":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"a":1,"n":"Flush","t":8,"pi":[{"n":"flushStream","pt":$n[0].Boolean,"ps":0},{"n":"flushEncoder","pt":$n[0].Boolean,"ps":1}],"sn":"Flush$1","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Boolean]},{"a":1,"n":"Init","t":8,"pi":[{"n":"streamArg","pt":$n[13].Stream,"ps":0},{"n":"encodingArg","pt":$n[8].Encoding,"ps":1},{"n":"bufferSize","pt":$n[0].Int32,"ps":2},{"n":"shouldLeaveOpen","pt":$n[0].Boolean,"ps":3}],"sn":"Init","rt":$n[0].Void,"p":[$n[13].Stream,$n[8].Encoding,$n[0].Int32,$n[0].Boolean]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"Write$1","rt":$n[0].Void,"p":[$n[0].Char]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"Write$2","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char)]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"Write$10","rt":$n[0].Void,"p":[$n[0].String]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write$3","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"v":true,"a":2,"n":"AutoFlush","t":16,"rt":$n[0].Boolean,"g":{"v":true,"a":2,"n":"get_AutoFlush","t":8,"rt":$n[0].Boolean,"fg":"AutoFlush","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"v":true,"a":2,"n":"set_AutoFlush","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"AutoFlush"},"fn":"AutoFlush"},{"v":true,"a":2,"n":"BaseStream","t":16,"rt":$n[13].Stream,"g":{"v":true,"a":2,"n":"get_BaseStream","t":8,"rt":$n[13].Stream,"fg":"BaseStream"},"fn":"BaseStream"},{"ov":true,"a":2,"n":"Encoding","t":16,"rt":$n[8].Encoding,"g":{"ov":true,"a":2,"n":"get_Encoding","t":8,"rt":$n[8].Encoding,"fg":"Encoding"},"fn":"Encoding"},{"a":4,"n":"HaveWrittenPreamble","t":16,"rt":$n[0].Boolean,"s":{"a":4,"n":"set_HaveWrittenPreamble","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"HaveWrittenPreamble"},"fn":"HaveWrittenPreamble"},{"a":4,"n":"LeaveOpen","t":16,"rt":$n[0].Boolean,"g":{"a":4,"n":"get_LeaveOpen","t":8,"rt":$n[0].Boolean,"fg":"LeaveOpen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"LeaveOpen"},{"a":4,"n":"UTF8NoBOM","is":true,"t":16,"rt":$n[8].Encoding,"g":{"a":4,"n":"get_UTF8NoBOM","t":8,"rt":$n[8].Encoding,"fg":"UTF8NoBOM","is":true},"fn":"UTF8NoBOM"},{"a":4,"n":"DefaultBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"DefaultBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"DefaultFileStreamBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"DefaultFileStreamBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MinBufferSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"MinBufferSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[13].StreamWriter,"sn":"Null","ro":true},{"a":1,"n":"_UTF8NoBOM","is":true,"t":4,"rt":$n[8].Encoding,"sn":"_UTF8NoBOM"},{"a":1,"n":"autoFlush","t":4,"rt":$n[0].Boolean,"sn":"autoFlush","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"byteBuffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"byteBuffer"},{"a":1,"n":"charBuffer","t":4,"rt":$n[0].Array.type(System.Char),"sn":"charBuffer"},{"a":1,"n":"charLen","t":4,"rt":$n[0].Int32,"sn":"charLen","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"charPos","t":4,"rt":$n[0].Int32,"sn":"charPos","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"closable","t":4,"rt":$n[0].Boolean,"sn":"closable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"encoding","t":4,"rt":$n[8].Encoding,"sn":"encoding"},{"a":1,"n":"haveWrittenPreamble","t":4,"rt":$n[0].Boolean,"sn":"haveWrittenPreamble","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"stream","t":4,"rt":$n[13].Stream,"sn":"stream"}]}; }, $n);
    $m("System.IO.StringReader", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"s","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"ov":true,"a":2,"n":"Peek","t":8,"sn":"Peek","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"sn":"Read","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadLine","t":8,"sn":"ReadLine","rt":$n[0].String},{"ov":true,"a":2,"n":"ReadToEnd","t":8,"sn":"ReadToEnd","rt":$n[0].String},{"a":1,"n":"_length","t":4,"rt":$n[0].Int32,"sn":"_length","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_pos","t":4,"rt":$n[0].Int32,"sn":"_pos","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_s","t":4,"rt":$n[0].String,"sn":"_s"}]}; }, $n);
    $m("System.IO.StringWriter", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].IFormatProvider],"pi":[{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[8].StringBuilder],"pi":[{"n":"sb","pt":$n[8].StringBuilder,"ps":0}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[8].StringBuilder,$n[0].IFormatProvider],"pi":[{"n":"sb","pt":$n[8].StringBuilder,"ps":0},{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":1}],"sn":"$ctor3"},{"ov":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"ov":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"GetStringBuilder","t":8,"sn":"GetStringBuilder","rt":$n[8].StringBuilder},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"Write$1","rt":$n[0].Void,"p":[$n[0].Char]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"Write$10","rt":$n[0].Void,"p":[$n[0].String]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write$3","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"Encoding","t":16,"rt":$n[8].Encoding,"g":{"ov":true,"a":2,"n":"get_Encoding","t":8,"rt":$n[8].Encoding,"fg":"Encoding"},"fn":"Encoding"},{"a":1,"n":"_isOpen","t":4,"rt":$n[0].Boolean,"sn":"_isOpen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"_sb","t":4,"rt":$n[8].StringBuilder,"sn":"_sb"},{"a":1,"n":"m_encoding","is":true,"t":4,"rt":$n[8].UnicodeEncoding,"sn":"m_encoding"}]}; }, $n);
    $m("System.IO.TextReader", function () { return {"nested":[$n[13].TextReader.NullTextReader],"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"v":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"Peek","t":8,"sn":"Peek","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Read","t":8,"sn":"Read","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"ReadBlock","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"ReadBlock","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"ReadLine","t":8,"sn":"ReadLine","rt":$n[0].String},{"v":true,"a":2,"n":"ReadToEnd","t":8,"sn":"ReadToEnd","rt":$n[0].String},{"v":true,"a":2,"n":"ReadToEndAsync","t":8,"sn":"ReadToEndAsync","rt":$n[10].Task$1(System.String)},{"a":2,"n":"Synchronized","is":true,"t":8,"pi":[{"n":"reader","pt":$n[13].TextReader,"ps":0}],"sn":"Synchronized","rt":$n[13].TextReader,"p":[$n[13].TextReader]},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[13].TextReader,"sn":"Null","ro":true}]}; }, $n);
    $m("System.IO.TextReader.NullTextReader", function () { return {"td":$n[13].TextReader,"att":1057027,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Read$1","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadLine","t":8,"sn":"ReadLine","rt":$n[0].String}]}; }, $n);
    $m("System.IO.TextWriter", function () { return {"nested":[$n[13].TextWriter.NullTextWriter],"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"sn":"ctor"},{"a":3,"n":".ctor","t":1,"p":[$n[0].IFormatProvider],"pi":[{"n":"formatProvider","pt":$n[0].IFormatProvider,"ps":0}],"sn":"$ctor1"},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[0].Void},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"v":true,"a":3,"n":"Dispose","t":8,"pi":[{"n":"disposing","pt":$n[0].Boolean,"ps":0}],"sn":"Dispose$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[0].Void},{"a":2,"n":"Synchronized","is":true,"t":8,"pi":[{"n":"writer","pt":$n[13].TextWriter,"ps":0}],"sn":"Synchronized","rt":$n[13].TextWriter,"p":[$n[13].TextWriter]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"Write","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"Write$1","rt":$n[0].Void,"p":[$n[0].Char]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"Write$2","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char)]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"Write$4","rt":$n[0].Void,"p":[$n[0].Decimal]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"Write$5","rt":$n[0].Void,"p":[$n[0].Double]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"Write$6","rt":$n[0].Void,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"Write$7","rt":$n[0].Void,"p":[$n[0].Int64]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"Write$8","rt":$n[0].Void,"p":[$n[0].Object]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"Write$9","rt":$n[0].Void,"p":[$n[0].Single]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"Write$10","rt":$n[0].Void,"p":[$n[0].String]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"Write$15","rt":$n[0].Void,"p":[$n[0].UInt32]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"Write$16","rt":$n[0].Void,"p":[$n[0].UInt64]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1}],"sn":"Write$11","rt":$n[0].Void,"p":[$n[0].String,$n[0].Object]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"Write$14","rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write$3","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2}],"sn":"Write$12","rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3}],"sn":"Write$13","rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"v":true,"a":2,"n":"WriteLine","t":8,"sn":"WriteLine","rt":$n[0].Void},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"WriteLine$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"WriteLine$2","rt":$n[0].Void,"p":[$n[0].Char]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0}],"sn":"WriteLine$3","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char)]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Decimal,"ps":0}],"sn":"WriteLine$5","rt":$n[0].Void,"p":[$n[0].Decimal]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"WriteLine$6","rt":$n[0].Void,"p":[$n[0].Double]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"WriteLine$7","rt":$n[0].Void,"p":[$n[0].Int32]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"WriteLine$8","rt":$n[0].Void,"p":[$n[0].Int64]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"WriteLine$9","rt":$n[0].Void,"p":[$n[0].Object]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"WriteLine$10","rt":$n[0].Void,"p":[$n[0].Single]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"WriteLine$11","rt":$n[0].Void,"p":[$n[0].String]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"WriteLine$16","rt":$n[0].Void,"p":[$n[0].UInt32]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"WriteLine$17","rt":$n[0].Void,"p":[$n[0].UInt64]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1}],"sn":"WriteLine$12","rt":$n[0].Void,"p":[$n[0].String,$n[0].Object]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"WriteLine$15","rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"WriteLine$4","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2}],"sn":"WriteLine$13","rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object]},{"v":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"format","pt":$n[0].String,"ps":0},{"n":"arg0","pt":$n[0].Object,"ps":1},{"n":"arg1","pt":$n[0].Object,"ps":2},{"n":"arg2","pt":$n[0].Object,"ps":3}],"sn":"WriteLine$14","rt":$n[0].Void,"p":[$n[0].String,$n[0].Object,$n[0].Object,$n[0].Object]},{"ab":true,"a":2,"n":"Encoding","t":16,"rt":$n[8].Encoding,"g":{"ab":true,"a":2,"n":"get_Encoding","t":8,"rt":$n[8].Encoding,"fg":"Encoding"},"fn":"Encoding"},{"v":true,"a":2,"n":"FormatProvider","t":16,"rt":$n[0].IFormatProvider,"g":{"v":true,"a":2,"n":"get_FormatProvider","t":8,"rt":$n[0].IFormatProvider,"fg":"FormatProvider"},"fn":"FormatProvider"},{"v":true,"a":2,"n":"NewLine","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_NewLine","t":8,"rt":$n[0].String,"fg":"NewLine"},"s":{"v":true,"a":2,"n":"set_NewLine","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"NewLine"},"fn":"NewLine"},{"a":3,"n":"CoreNewLine","t":4,"rt":$n[0].Array.type(System.Char),"sn":"CoreNewLine"},{"a":1,"n":"InitialNewLine","is":true,"t":4,"rt":$n[0].String,"sn":"InitialNewLine"},{"a":1,"n":"InternalFormatProvider","t":4,"rt":$n[0].IFormatProvider,"sn":"InternalFormatProvider"},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[13].TextWriter,"sn":"Null","ro":true}]}; }, $n);
    $m("System.IO.TextWriter.NullTextWriter", function () { return {"td":$n[13].TextWriter,"att":1057027,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":4,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"Write$10","rt":$n[0].Void,"p":[$n[0].String]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.Char),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Write$3","rt":$n[0].Void,"p":[$n[0].Array.type(System.Char),$n[0].Int32,$n[0].Int32]},{"ov":true,"a":2,"n":"WriteLine","t":8,"sn":"WriteLine","rt":$n[0].Void},{"ov":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"WriteLine$9","rt":$n[0].Void,"p":[$n[0].Object]},{"ov":true,"a":2,"n":"WriteLine","t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"WriteLine$11","rt":$n[0].Void,"p":[$n[0].String]},{"ov":true,"a":2,"n":"Encoding","t":16,"rt":$n[8].Encoding,"g":{"ov":true,"a":2,"n":"get_Encoding","t":8,"rt":$n[8].Encoding,"fg":"Encoding"},"fn":"Encoding"}]}; }, $n);
    $m("System.IO.__Error", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"EndOfFile","is":true,"t":8,"sn":"EndOfFile","rt":$n[0].Void},{"a":4,"n":"EndReadCalledTwice","is":true,"t":8,"sn":"EndReadCalledTwice","rt":$n[0].Void},{"a":4,"n":"EndWriteCalledTwice","is":true,"t":8,"sn":"EndWriteCalledTwice","rt":$n[0].Void},{"a":4,"n":"FileNotOpen","is":true,"t":8,"sn":"FileNotOpen","rt":$n[0].Void},{"a":4,"n":"MemoryStreamNotExpandable","is":true,"t":8,"sn":"MemoryStreamNotExpandable","rt":$n[0].Void},{"a":4,"n":"ReadNotSupported","is":true,"t":8,"sn":"ReadNotSupported","rt":$n[0].Void},{"a":4,"n":"ReaderClosed","is":true,"t":8,"sn":"ReaderClosed","rt":$n[0].Void},{"a":4,"n":"SeekNotSupported","is":true,"t":8,"sn":"SeekNotSupported","rt":$n[0].Void},{"a":4,"n":"StreamIsClosed","is":true,"t":8,"sn":"StreamIsClosed","rt":$n[0].Void},{"a":4,"n":"WriteNotSupported","is":true,"t":8,"sn":"WriteNotSupported","rt":$n[0].Void},{"a":4,"n":"WriterClosed","is":true,"t":8,"sn":"WriterClosed","rt":$n[0].Void},{"a":4,"n":"WrongAsyncResult","is":true,"t":8,"sn":"WrongAsyncResult","rt":$n[0].Void}]}; }, $n);
    $m("System.Globalization.BidiCategory", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ArabicNumber","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"ArabicNumber","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"BoundaryNeutral","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"BoundaryNeutral","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"CommonNumberSeparator","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"CommonNumberSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"EuropeanNumber","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"EuropeanNumber","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"EuropeanNumberSeparator","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"EuropeanNumberSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"EuropeanNumberTerminator","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"EuropeanNumberTerminator","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"FirstStrongIsolate","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"FirstStrongIsolate","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"LeftToRight","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"LeftToRight","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"LeftToRightEmbedding","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"LeftToRightEmbedding","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"LeftToRightIsolate","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"LeftToRightIsolate","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"LeftToRightOverride","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"LeftToRightOverride","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"NonSpacingMark","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"NonSpacingMark","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"OtherNeutrals","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"OtherNeutrals","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"ParagraphSeparator","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"ParagraphSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"PopDirectionIsolate","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"PopDirectionIsolate","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"PopDirectionalFormat","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"PopDirectionalFormat","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"RightToLeft","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"RightToLeft","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"RightToLeftArabic","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"RightToLeftArabic","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"RightToLeftEmbedding","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"RightToLeftEmbedding","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"RightToLeftIsolate","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"RightToLeftIsolate","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"RightToLeftOverride","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"RightToLeftOverride","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"SegmentSeparator","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"SegmentSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}},{"a":2,"n":"Whitespace","is":true,"t":4,"rt":$n[1].BidiCategory,"sn":"Whitespace","box":function ($v) { return Bridge.box($v, System.Globalization.BidiCategory, System.Enum.toStringFn(System.Globalization.BidiCategory));}}]}; }, $n);
    $m("System.Globalization.DaylightTime", function () { return {"att":1048577,"a":2,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].DateTime,$n[0].DateTime,$n[0].TimeSpan],"pi":[{"n":"start","pt":$n[0].DateTime,"ps":0},{"n":"end","pt":$n[0].DateTime,"ps":1},{"n":"delta","pt":$n[0].TimeSpan,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"Delta","t":16,"rt":$n[0].TimeSpan,"g":{"a":2,"n":"get_Delta","t":8,"rt":$n[0].TimeSpan,"fg":"Delta"},"fn":"Delta"},{"a":2,"n":"End","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_End","t":8,"rt":$n[0].DateTime,"fg":"End","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"End"},{"a":2,"n":"Start","t":16,"rt":$n[0].DateTime,"g":{"a":2,"n":"get_Start","t":8,"rt":$n[0].DateTime,"fg":"Start","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"Start"},{"a":1,"n":"_delta","t":4,"rt":$n[0].TimeSpan,"sn":"_delta","ro":true},{"a":1,"n":"_end","t":4,"rt":$n[0].DateTime,"sn":"_end","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"_start","t":4,"rt":$n[0].DateTime,"sn":"_start","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}]}; }, $n);
    $m("System.Globalization.DaylightTimeStruct", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].DateTime,$n[0].DateTime,$n[0].TimeSpan],"pi":[{"n":"start","pt":$n[0].DateTime,"ps":0},{"n":"end","pt":$n[0].DateTime,"ps":1},{"n":"delta","pt":$n[0].TimeSpan,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"Delta","t":4,"rt":$n[0].TimeSpan,"sn":"Delta","ro":true},{"a":2,"n":"End","t":4,"rt":$n[0].DateTime,"sn":"End","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"Start","t":4,"rt":$n[0].DateTime,"sn":"Start","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}]}; }, $n);
    $m("System.Globalization.SortVersion", function () { return {"att":1057025,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Guid],"pi":[{"n":"fullVersion","pt":$n[0].Int32,"ps":0},{"n":"sortId","pt":$n[0].Guid,"ps":1}],"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Int32,$n[0].Guid],"pi":[{"n":"nlsVersion","pt":$n[0].Int32,"ps":0},{"n":"effectiveId","pt":$n[0].Int32,"ps":1},{"n":"customVersion","pt":$n[0].Guid,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[1].SortVersion,"ps":0}],"sn":"equalsT","rt":$n[0].Boolean,"p":[$n[1].SortVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"left","pt":$n[1].SortVersion,"ps":0},{"n":"right","pt":$n[1].SortVersion,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[1].SortVersion,$n[1].SortVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"left","pt":$n[1].SortVersion,"ps":0},{"n":"right","pt":$n[1].SortVersion,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[1].SortVersion,$n[1].SortVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"FullVersion","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_FullVersion","t":8,"rt":$n[0].Int32,"fg":"FullVersion","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"FullVersion"},{"a":2,"n":"SortId","t":16,"rt":$n[0].Guid,"g":{"a":2,"n":"get_SortId","t":8,"rt":$n[0].Guid,"fg":"SortId"},"fn":"SortId"},{"a":1,"n":"m_NlsVersion","t":4,"rt":$n[0].Int32,"sn":"m_NlsVersion","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"m_SortId","t":4,"rt":$n[0].Guid,"sn":"m_SortId"}]}; }, $n);
    $m("System.Globalization.UnicodeCategory", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ClosePunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"ClosePunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"ConnectorPunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"ConnectorPunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"Control","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"Control","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"CurrencySymbol","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"CurrencySymbol","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"DashPunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"DashPunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"DecimalDigitNumber","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"DecimalDigitNumber","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"EnclosingMark","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"EnclosingMark","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"FinalQuotePunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"FinalQuotePunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"Format","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"Format","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"InitialQuotePunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"InitialQuotePunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"LetterNumber","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"LetterNumber","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"LineSeparator","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"LineSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"LowercaseLetter","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"LowercaseLetter","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"MathSymbol","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"MathSymbol","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"ModifierLetter","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"ModifierLetter","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"ModifierSymbol","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"ModifierSymbol","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"NonSpacingMark","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"NonSpacingMark","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"OpenPunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"OpenPunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"OtherLetter","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"OtherLetter","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"OtherNotAssigned","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"OtherNotAssigned","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"OtherNumber","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"OtherNumber","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"OtherPunctuation","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"OtherPunctuation","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"OtherSymbol","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"OtherSymbol","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"ParagraphSeparator","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"ParagraphSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"PrivateUse","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"PrivateUse","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"SpaceSeparator","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"SpaceSeparator","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"SpacingCombiningMark","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"SpacingCombiningMark","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"Surrogate","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"Surrogate","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"TitlecaseLetter","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"TitlecaseLetter","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}},{"a":2,"n":"UppercaseLetter","is":true,"t":4,"rt":$n[1].UnicodeCategory,"sn":"UppercaseLetter","box":function ($v) { return Bridge.box($v, System.Globalization.UnicodeCategory, System.Enum.toStringFn(System.Globalization.UnicodeCategory));}}]}; }, $n);
    $m("System.Globalization.CultureNotFoundException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0},{"n":"message","pt":$n[0].String,"ps":1}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"invalidCultureId","pt":$n[0].Int32,"ps":1},{"n":"innerException","pt":$n[0].Exception,"ps":2}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32,$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0},{"n":"invalidCultureId","pt":$n[0].Int32,"ps":1},{"n":"message","pt":$n[0].String,"ps":2}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"invalidCultureName","pt":$n[0].String,"ps":1},{"n":"innerException","pt":$n[0].Exception,"ps":2}],"sn":"$ctor6"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].String,$n[0].String],"pi":[{"n":"paramName","pt":$n[0].String,"ps":0},{"n":"invalidCultureName","pt":$n[0].String,"ps":1},{"n":"message","pt":$n[0].String,"ps":2}],"sn":"$ctor7"},{"a":1,"n":"DefaultMessage","is":true,"t":16,"rt":$n[0].String,"g":{"a":1,"n":"get_DefaultMessage","t":8,"rt":$n[0].String,"fg":"DefaultMessage","is":true},"fn":"DefaultMessage"},{"a":1,"n":"FormatedInvalidCultureId","t":16,"rt":$n[0].String,"g":{"a":1,"n":"get_FormatedInvalidCultureId","t":8,"rt":$n[0].String,"fg":"FormatedInvalidCultureId"},"fn":"FormatedInvalidCultureId"},{"v":true,"a":2,"n":"InvalidCultureId","t":16,"rt":$n[0].Nullable$1(System.Int32),"g":{"v":true,"a":2,"n":"get_InvalidCultureId","t":8,"rt":$n[0].Nullable$1(System.Int32),"fg":"InvalidCultureId","box":function ($v) { return Bridge.box($v, System.Int32, System.Nullable.toString, System.Nullable.getHashCode);}},"fn":"InvalidCultureId"},{"v":true,"a":2,"n":"InvalidCultureName","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_InvalidCultureName","t":8,"rt":$n[0].String,"fg":"InvalidCultureName"},"fn":"InvalidCultureName"},{"ov":true,"a":2,"n":"Message","t":16,"rt":$n[0].String,"g":{"ov":true,"a":2,"n":"get_Message","t":8,"rt":$n[0].String,"fg":"Message"},"fn":"Message"},{"a":1,"n":"_invalidCultureId","t":4,"rt":$n[0].Nullable$1(System.Int32),"sn":"_invalidCultureId","box":function ($v) { return Bridge.box($v, System.Int32, System.Nullable.toString, System.Nullable.getHashCode);}},{"a":1,"n":"_invalidCultureName","t":4,"rt":$n[0].String,"sn":"_invalidCultureName"}]}; }, $n);
    $m("System.Globalization.Calendar", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"Add","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"value","pt":$n[0].Double,"ps":1},{"n":"scale","pt":$n[0].Int32,"ps":2}],"sn":"Add","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Double,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"AddDays","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"days","pt":$n[0].Int32,"ps":1}],"sn":"AddDays","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"AddHours","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"hours","pt":$n[0].Int32,"ps":1}],"sn":"AddHours","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"AddMilliseconds","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"milliseconds","pt":$n[0].Double,"ps":1}],"sn":"AddMilliseconds","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Double],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"AddMinutes","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"minutes","pt":$n[0].Int32,"ps":1}],"sn":"AddMinutes","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"ab":true,"a":2,"n":"AddMonths","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"months","pt":$n[0].Int32,"ps":1}],"sn":"AddMonths","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"AddSeconds","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"seconds","pt":$n[0].Int32,"ps":1}],"sn":"AddSeconds","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"AddWeeks","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"weeks","pt":$n[0].Int32,"ps":1}],"sn":"AddWeeks","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"ab":true,"a":2,"n":"AddYears","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"years","pt":$n[0].Int32,"ps":1}],"sn":"AddYears","rt":$n[0].DateTime,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":4,"n":"CheckAddResult","is":true,"t":8,"pi":[{"n":"ticks","pt":$n[0].Int64,"ps":0},{"n":"minValue","pt":$n[0].DateTime,"ps":1},{"n":"maxValue","pt":$n[0].DateTime,"ps":2}],"sn":"CheckAddResult","rt":$n[0].Void,"p":[$n[0].Int64,$n[0].DateTime,$n[0].DateTime]},{"v":true,"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"ab":true,"a":2,"n":"GetDayOfMonth","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetDayOfMonth","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetDayOfWeek","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetDayOfWeek","rt":$n[0].DayOfWeek,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},{"ab":true,"a":2,"n":"GetDayOfYear","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetDayOfYear","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetDaysInMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1}],"sn":"GetDaysInMonth","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetDaysInMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"era","pt":$n[0].Int32,"ps":2}],"sn":"GetDaysInMonth$1","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetDaysInYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0}],"sn":"GetDaysInYear","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetDaysInYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"era","pt":$n[0].Int32,"ps":1}],"sn":"GetDaysInYear$1","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetEra","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetEra","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"GetFirstDayWeekOfYear","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"firstDayOfWeek","pt":$n[0].Int32,"ps":1}],"sn":"GetFirstDayWeekOfYear","rt":$n[0].Int32,"p":[$n[0].DateTime,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetHour","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetHour","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetLeapMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0}],"sn":"GetLeapMonth","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetLeapMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"era","pt":$n[0].Int32,"ps":1}],"sn":"GetLeapMonth$1","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetMilliseconds","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetMilliseconds","rt":$n[0].Double,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"v":true,"a":2,"n":"GetMinute","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetMinute","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetMonth","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetMonth","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetMonthsInYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0}],"sn":"GetMonthsInYear","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetMonthsInYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"era","pt":$n[0].Int32,"ps":1}],"sn":"GetMonthsInYear$1","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetSecond","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetSecond","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"GetSystemTwoDigitYearSetting","is":true,"t":8,"pi":[{"n":"CalID","pt":$n[1].CalendarId,"ps":0},{"n":"defaultYearValue","pt":$n[0].Int32,"ps":1}],"sn":"GetSystemTwoDigitYearSetting","rt":$n[0].Int32,"p":[$n[1].CalendarId,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"GetWeekOfYear","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"rule","pt":$n[1].CalendarWeekRule,"ps":1},{"n":"firstDayOfWeek","pt":$n[0].DayOfWeek,"ps":2}],"sn":"GetWeekOfYear","rt":$n[0].Int32,"p":[$n[0].DateTime,$n[1].CalendarWeekRule,$n[0].DayOfWeek],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetWeekOfYearFullDays","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0},{"n":"firstDayOfWeek","pt":$n[0].Int32,"ps":1},{"n":"fullDays","pt":$n[0].Int32,"ps":2}],"sn":"GetWeekOfYearFullDays","rt":$n[0].Int32,"p":[$n[0].DateTime,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GetWeekOfYearOfMinSupportedDateTime","t":8,"pi":[{"n":"firstDayOfWeek","pt":$n[0].Int32,"ps":0},{"n":"minimumDaysInFirstWeek","pt":$n[0].Int32,"ps":1}],"sn":"GetWeekOfYearOfMinSupportedDateTime","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"GetYear","t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"GetYear","rt":$n[0].Int32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":2,"n":"IsLeapDay","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2}],"sn":"IsLeapDay","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsLeapDay","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"era","pt":$n[0].Int32,"ps":3}],"sn":"IsLeapDay$1","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"IsLeapMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1}],"sn":"IsLeapMonth","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsLeapMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"era","pt":$n[0].Int32,"ps":2}],"sn":"IsLeapMonth$1","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"IsLeapYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0}],"sn":"IsLeapYear","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsLeapYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"era","pt":$n[0].Int32,"ps":1}],"sn":"IsLeapYear$1","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":4,"n":"IsValidDay","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"era","pt":$n[0].Int32,"ps":3}],"sn":"IsValidDay","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":4,"n":"IsValidMonth","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"era","pt":$n[0].Int32,"ps":2}],"sn":"IsValidMonth","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":4,"n":"IsValidYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"era","pt":$n[0].Int32,"ps":1}],"sn":"IsValidYear","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ReadOnly","is":true,"t":8,"pi":[{"n":"calendar","pt":$n[1].Calendar,"ps":0}],"sn":"ReadOnly","rt":$n[1].Calendar,"p":[$n[1].Calendar]},{"a":4,"n":"SetReadOnlyState","t":8,"pi":[{"n":"readOnly","pt":$n[0].Boolean,"ps":0}],"sn":"SetReadOnlyState","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"ToDateTime","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"millisecond","pt":$n[0].Int32,"ps":6}],"sn":"ToDateTime","rt":$n[0].DateTime,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"ab":true,"a":2,"n":"ToDateTime","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"millisecond","pt":$n[0].Int32,"ps":6},{"n":"era","pt":$n[0].Int32,"ps":7}],"sn":"ToDateTime$1","rt":$n[0].DateTime,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"v":true,"a":2,"n":"ToFourDigitYear","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0}],"sn":"ToFourDigitYear","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"v":true,"a":4,"n":"TryToDateTime","t":8,"pi":[{"n":"year","pt":$n[0].Int32,"ps":0},{"n":"month","pt":$n[0].Int32,"ps":1},{"n":"day","pt":$n[0].Int32,"ps":2},{"n":"hour","pt":$n[0].Int32,"ps":3},{"n":"minute","pt":$n[0].Int32,"ps":4},{"n":"second","pt":$n[0].Int32,"ps":5},{"n":"millisecond","pt":$n[0].Int32,"ps":6},{"n":"era","pt":$n[0].Int32,"ps":7},{"n":"result","out":true,"pt":$n[0].DateTime,"ps":8}],"sn":"TryToDateTime","rt":$n[0].Boolean,"p":[$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].Int32,$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"VerifyWritable","t":8,"sn":"VerifyWritable","rt":$n[0].Void},{"v":true,"a":2,"n":"AlgorithmType","t":16,"rt":$n[1].CalendarAlgorithmType,"g":{"v":true,"a":2,"n":"get_AlgorithmType","t":8,"rt":$n[1].CalendarAlgorithmType,"fg":"AlgorithmType","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarAlgorithmType, System.Enum.toStringFn(System.Globalization.CalendarAlgorithmType));}},"fn":"AlgorithmType"},{"v":true,"a":4,"n":"BaseCalendarID","t":16,"rt":$n[1].CalendarId,"g":{"v":true,"a":4,"n":"get_BaseCalendarID","t":8,"rt":$n[1].CalendarId,"fg":"BaseCalendarID","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},"fn":"BaseCalendarID"},{"v":true,"a":4,"n":"CurrentEraValue","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":4,"n":"get_CurrentEraValue","t":8,"rt":$n[0].Int32,"fg":"CurrentEraValue","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"CurrentEraValue"},{"v":true,"a":3,"n":"DaysInYearBeforeMinSupportedYear","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":3,"n":"get_DaysInYearBeforeMinSupportedYear","t":8,"rt":$n[0].Int32,"fg":"DaysInYearBeforeMinSupportedYear","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"DaysInYearBeforeMinSupportedYear"},{"ab":true,"a":2,"n":"Eras","t":16,"rt":$n[0].Array.type(System.Int32),"g":{"ab":true,"a":2,"n":"get_Eras","t":8,"rt":$n[0].Array.type(System.Int32),"fg":"Eras"},"fn":"Eras"},{"v":true,"a":4,"n":"ID","t":16,"rt":$n[1].CalendarId,"g":{"v":true,"a":4,"n":"get_ID","t":8,"rt":$n[1].CalendarId,"fg":"ID","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},"fn":"ID"},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReadOnly"},{"v":true,"a":2,"n":"MaxSupportedDateTime","t":16,"rt":$n[0].DateTime,"g":{"v":true,"a":2,"n":"get_MaxSupportedDateTime","t":8,"rt":$n[0].DateTime,"fg":"MaxSupportedDateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"MaxSupportedDateTime"},{"v":true,"a":2,"n":"MinSupportedDateTime","t":16,"rt":$n[0].DateTime,"g":{"v":true,"a":2,"n":"get_MinSupportedDateTime","t":8,"rt":$n[0].DateTime,"fg":"MinSupportedDateTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"MinSupportedDateTime"},{"v":true,"a":2,"n":"TwoDigitYearMax","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_TwoDigitYearMax","t":8,"rt":$n[0].Int32,"fg":"TwoDigitYearMax","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"v":true,"a":2,"n":"set_TwoDigitYearMax","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"TwoDigitYearMax"},"fn":"TwoDigitYearMax"},{"a":2,"n":"CurrentEra","is":true,"t":4,"rt":$n[0].Int32,"sn":"CurrentEra","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"DaysPer100Years","is":true,"t":4,"rt":$n[0].Int32,"sn":"DaysPer100Years","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"DaysPer400Years","is":true,"t":4,"rt":$n[0].Int32,"sn":"DaysPer400Years","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"DaysPer4Years","is":true,"t":4,"rt":$n[0].Int32,"sn":"DaysPer4Years","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"DaysPerYear","is":true,"t":4,"rt":$n[0].Int32,"sn":"DaysPerYear","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"DaysTo10000","is":true,"t":4,"rt":$n[0].Int32,"sn":"DaysTo10000","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"MaxMillis","is":true,"t":4,"rt":$n[0].Int64,"sn":"MaxMillis"},{"a":4,"n":"MillisPerDay","is":true,"t":4,"rt":$n[0].Int32,"sn":"MillisPerDay","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"MillisPerHour","is":true,"t":4,"rt":$n[0].Int32,"sn":"MillisPerHour","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"MillisPerMinute","is":true,"t":4,"rt":$n[0].Int32,"sn":"MillisPerMinute","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"MillisPerSecond","is":true,"t":4,"rt":$n[0].Int32,"sn":"MillisPerSecond","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"TicksPerDay","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerDay"},{"a":4,"n":"TicksPerHour","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerHour"},{"a":4,"n":"TicksPerMillisecond","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerMillisecond"},{"a":4,"n":"TicksPerMinute","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerMinute"},{"a":4,"n":"TicksPerSecond","is":true,"t":4,"rt":$n[0].Int64,"sn":"TicksPerSecond"},{"a":1,"n":"_isReadOnly","t":4,"rt":$n[0].Boolean,"sn":"_isReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"twoDigitYearMax","t":4,"rt":$n[0].Int32,"sn":"twoDigitYearMax","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Globalization.FORMATFLAGS", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"None","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"None","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":2,"n":"UseDigitPrefixInTokens","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"UseDigitPrefixInTokens","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":2,"n":"UseGenitiveMonth","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"UseGenitiveMonth","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":2,"n":"UseHebrewParsing","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"UseHebrewParsing","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":2,"n":"UseLeapYearMonth","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"UseLeapYearMonth","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":2,"n":"UseSpacesInDayNames","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"UseSpacesInDayNames","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":2,"n":"UseSpacesInMonthNames","is":true,"t":4,"rt":$n[1].FORMATFLAGS,"sn":"UseSpacesInMonthNames","box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}}]}; }, $n);
    $m("System.Globalization.CalendarId", function () { return {"att":256,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CHINESELUNISOLAR","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"CHINESELUNISOLAR","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"GREGORIAN","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"GREGORIAN","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"GREGORIAN_ARABIC","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"GREGORIAN_ARABIC","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"GREGORIAN_ME_FRENCH","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"GREGORIAN_ME_FRENCH","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"GREGORIAN_US","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"GREGORIAN_US","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"GREGORIAN_XLIT_ENGLISH","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"GREGORIAN_XLIT_ENGLISH","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"GREGORIAN_XLIT_FRENCH","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"GREGORIAN_XLIT_FRENCH","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"HEBREW","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"HEBREW","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"HIJRI","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"HIJRI","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"JAPAN","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"JAPAN","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"JAPANESELUNISOLAR","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"JAPANESELUNISOLAR","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"JULIAN","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"JULIAN","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"KOREA","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"KOREA","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"KOREANLUNISOLAR","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"KOREANLUNISOLAR","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"LAST_CALENDAR","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"LAST_CALENDAR","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"LUNAR_ETO_CHN","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"LUNAR_ETO_CHN","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"LUNAR_ETO_KOR","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"LUNAR_ETO_KOR","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"LUNAR_ETO_ROKUYOU","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"LUNAR_ETO_ROKUYOU","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"PERSIAN","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"PERSIAN","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"SAKA","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"SAKA","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"TAIWAN","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"TAIWAN","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"TAIWANLUNISOLAR","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"TAIWANLUNISOLAR","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"THAI","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"THAI","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"UMALQURA","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"UMALQURA","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}},{"a":2,"n":"UNINITIALIZED_VALUE","is":true,"t":4,"rt":$n[1].CalendarId,"sn":"UNINITIALIZED_VALUE","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarId, System.Enum.toStringFn(System.Globalization.CalendarId));}}]}; }, $n);
    $m("System.Globalization.DateTimeFormatInfoScanner", function () { return {"nested":[$n[1].DateTimeFormatInfoScanner.FoundDatePattern],"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"AddDateWordOrPostfix","t":8,"pi":[{"n":"formatPostfix","pt":$n[0].String,"ps":0},{"n":"str","pt":$n[0].String,"ps":1}],"sn":"AddDateWordOrPostfix","rt":$n[0].Void,"p":[$n[0].String,$n[0].String]},{"a":4,"n":"AddDateWords","t":8,"pi":[{"n":"pattern","pt":$n[0].String,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"formatPostfix","pt":$n[0].String,"ps":2}],"sn":"AddDateWords","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32,$n[0].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"AddIgnorableSymbols","t":8,"pi":[{"n":"text","pt":$n[0].String,"ps":0}],"sn":"AddIgnorableSymbols","rt":$n[0].Void,"p":[$n[0].String]},{"a":1,"n":"ArrayElementsBeginWithDigit","is":true,"t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.String),"ps":0}],"sn":"ArrayElementsBeginWithDigit","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.String)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ArrayElementsHaveSpace","is":true,"t":8,"pi":[{"n":"array","pt":$n[0].Array.type(System.String),"ps":0}],"sn":"ArrayElementsHaveSpace","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.String)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"EqualStringArrays","is":true,"t":8,"pi":[{"n":"array1","pt":$n[0].Array.type(System.String),"ps":0},{"n":"array2","pt":$n[0].Array.type(System.String),"ps":1}],"sn":"EqualStringArrays","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.String),$n[0].Array.type(System.String)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"GetDateWordsOfDTFI","t":8,"pi":[{"n":"dtfi","pt":$n[1].DateTimeFormatInfo,"ps":0}],"sn":"GetDateWordsOfDTFI","rt":$n[0].Array.type(System.String),"p":[$n[1].DateTimeFormatInfo]},{"a":4,"n":"GetFormatFlagGenitiveMonth","is":true,"t":8,"pi":[{"n":"monthNames","pt":$n[0].Array.type(System.String),"ps":0},{"n":"genitveMonthNames","pt":$n[0].Array.type(System.String),"ps":1},{"n":"abbrevMonthNames","pt":$n[0].Array.type(System.String),"ps":2},{"n":"genetiveAbbrevMonthNames","pt":$n[0].Array.type(System.String),"ps":3}],"sn":"GetFormatFlagGenitiveMonth","rt":$n[1].FORMATFLAGS,"p":[$n[0].Array.type(System.String),$n[0].Array.type(System.String),$n[0].Array.type(System.String),$n[0].Array.type(System.String)],"box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":4,"n":"GetFormatFlagUseHebrewCalendar","is":true,"t":8,"pi":[{"n":"calID","pt":$n[0].Int32,"ps":0}],"sn":"GetFormatFlagUseHebrewCalendar","rt":$n[1].FORMATFLAGS,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":4,"n":"GetFormatFlagUseSpaceInDayNames","is":true,"t":8,"pi":[{"n":"dayNames","pt":$n[0].Array.type(System.String),"ps":0},{"n":"abbrevDayNames","pt":$n[0].Array.type(System.String),"ps":1}],"sn":"GetFormatFlagUseSpaceInDayNames","rt":$n[1].FORMATFLAGS,"p":[$n[0].Array.type(System.String),$n[0].Array.type(System.String)],"box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":4,"n":"GetFormatFlagUseSpaceInMonthNames","is":true,"t":8,"pi":[{"n":"monthNames","pt":$n[0].Array.type(System.String),"ps":0},{"n":"genitveMonthNames","pt":$n[0].Array.type(System.String),"ps":1},{"n":"abbrevMonthNames","pt":$n[0].Array.type(System.String),"ps":2},{"n":"genetiveAbbrevMonthNames","pt":$n[0].Array.type(System.String),"ps":3}],"sn":"GetFormatFlagUseSpaceInMonthNames","rt":$n[1].FORMATFLAGS,"p":[$n[0].Array.type(System.String),$n[0].Array.type(System.String),$n[0].Array.type(System.String),$n[0].Array.type(System.String)],"box":function ($v) { return Bridge.box($v, System.Globalization.FORMATFLAGS, System.Enum.toStringFn(System.Globalization.FORMATFLAGS));}},{"a":4,"n":"ScanDateWord","t":8,"pi":[{"n":"pattern","pt":$n[0].String,"ps":0}],"sn":"ScanDateWord","rt":$n[0].Void,"p":[$n[0].String]},{"a":4,"n":"ScanRepeatChar","is":true,"t":8,"pi":[{"n":"pattern","pt":$n[0].String,"ps":0},{"n":"ch","pt":$n[0].Char,"ps":1},{"n":"index","pt":$n[0].Int32,"ps":2},{"n":"count","out":true,"pt":$n[0].Int32,"ps":3}],"sn":"ScanRepeatChar","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Char,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"SkipWhiteSpacesAndNonLetter","is":true,"t":8,"pi":[{"n":"pattern","pt":$n[0].String,"ps":0},{"n":"currentIndex","pt":$n[0].Int32,"ps":1}],"sn":"SkipWhiteSpacesAndNonLetter","rt":$n[0].Int32,"p":[$n[0].String,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"KnownWords","is":true,"t":16,"rt":$n[4].Dictionary$2(System.String,System.String),"g":{"a":1,"n":"get_KnownWords","t":8,"rt":$n[4].Dictionary$2(System.String,System.String),"fg":"KnownWords","is":true},"fn":"KnownWords"},{"a":4,"n":"CJKDaySuff","is":true,"t":4,"rt":$n[0].String,"sn":"CJKDaySuff"},{"a":4,"n":"CJKHourSuff","is":true,"t":4,"rt":$n[0].String,"sn":"CJKHourSuff"},{"a":4,"n":"CJKMinuteSuff","is":true,"t":4,"rt":$n[0].String,"sn":"CJKMinuteSuff"},{"a":4,"n":"CJKMonthSuff","is":true,"t":4,"rt":$n[0].String,"sn":"CJKMonthSuff"},{"a":4,"n":"CJKSecondSuff","is":true,"t":4,"rt":$n[0].String,"sn":"CJKSecondSuff"},{"a":4,"n":"CJKYearSuff","is":true,"t":4,"rt":$n[0].String,"sn":"CJKYearSuff"},{"a":4,"n":"ChineseHourSuff","is":true,"t":4,"rt":$n[0].String,"sn":"ChineseHourSuff"},{"a":4,"n":"IgnorableSymbolChar","is":true,"t":4,"rt":$n[0].Char,"sn":"IgnorableSymbolChar","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":4,"n":"KoreanDaySuff","is":true,"t":4,"rt":$n[0].String,"sn":"KoreanDaySuff"},{"a":4,"n":"KoreanHourSuff","is":true,"t":4,"rt":$n[0].String,"sn":"KoreanHourSuff"},{"a":4,"n":"KoreanMinuteSuff","is":true,"t":4,"rt":$n[0].String,"sn":"KoreanMinuteSuff"},{"a":4,"n":"KoreanMonthSuff","is":true,"t":4,"rt":$n[0].String,"sn":"KoreanMonthSuff"},{"a":4,"n":"KoreanSecondSuff","is":true,"t":4,"rt":$n[0].String,"sn":"KoreanSecondSuff"},{"a":4,"n":"KoreanYearSuff","is":true,"t":4,"rt":$n[0].String,"sn":"KoreanYearSuff"},{"a":4,"n":"MonthPostfixChar","is":true,"t":4,"rt":$n[0].Char,"sn":"MonthPostfixChar","box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":1,"n":"_ymdFlags","t":4,"rt":$n[1].DateTimeFormatInfoScanner.FoundDatePattern,"sn":"_ymdFlags","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern, System.Enum.toStringFn(System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern));}},{"a":4,"n":"m_dateWords","t":4,"rt":$n[4].List$1(System.String),"sn":"m_dateWords"},{"a":1,"n":"s_knownWords","is":true,"t":4,"rt":$n[4].Dictionary$2(System.String,System.String),"sn":"s_knownWords"}]}; }, $n);
    $m("System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern", function () { return {"td":$n[1].DateTimeFormatInfoScanner,"att":259,"a":1,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FoundDayPatternFlag","is":true,"t":4,"rt":$n[1].DateTimeFormatInfoScanner.FoundDatePattern,"sn":"FoundDayPatternFlag","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern, System.Enum.toStringFn(System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern));}},{"a":2,"n":"FoundMonthPatternFlag","is":true,"t":4,"rt":$n[1].DateTimeFormatInfoScanner.FoundDatePattern,"sn":"FoundMonthPatternFlag","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern, System.Enum.toStringFn(System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern));}},{"a":2,"n":"FoundYMDPatternFlag","is":true,"t":4,"rt":$n[1].DateTimeFormatInfoScanner.FoundDatePattern,"sn":"FoundYMDPatternFlag","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern, System.Enum.toStringFn(System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern));}},{"a":2,"n":"FoundYearPatternFlag","is":true,"t":4,"rt":$n[1].DateTimeFormatInfoScanner.FoundDatePattern,"sn":"FoundYearPatternFlag","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern, System.Enum.toStringFn(System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[1].DateTimeFormatInfoScanner.FoundDatePattern,"sn":"None","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern, System.Enum.toStringFn(System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern));}}]}; }, $n);
    $m("System.Globalization.GlobalizationMode", function () { return {"att":1048832,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"GetGlobalizationInvariantMode","is":true,"t":8,"sn":"GetGlobalizationInvariantMode","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"GetInvariantSwitchValue","is":true,"t":8,"sn":"GetInvariantSwitchValue","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"Invariant","is":true,"t":16,"rt":$n[0].Boolean,"g":{"a":4,"n":"get_Invariant","t":8,"rt":$n[0].Boolean,"fg":"Invariant","is":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"Invariant"},{"a":1,"n":"__Property__Initializer__Invariant","is":true,"t":4,"rt":$n[0].Boolean,"sn":"__Property__Initializer__Invariant","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Globalization.CalendarAlgorithmType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LunarCalendar","is":true,"t":4,"rt":$n[1].CalendarAlgorithmType,"sn":"LunarCalendar","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarAlgorithmType, System.Enum.toStringFn(System.Globalization.CalendarAlgorithmType));}},{"a":2,"n":"LunisolarCalendar","is":true,"t":4,"rt":$n[1].CalendarAlgorithmType,"sn":"LunisolarCalendar","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarAlgorithmType, System.Enum.toStringFn(System.Globalization.CalendarAlgorithmType));}},{"a":2,"n":"SolarCalendar","is":true,"t":4,"rt":$n[1].CalendarAlgorithmType,"sn":"SolarCalendar","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarAlgorithmType, System.Enum.toStringFn(System.Globalization.CalendarAlgorithmType));}},{"a":2,"n":"Unknown","is":true,"t":4,"rt":$n[1].CalendarAlgorithmType,"sn":"Unknown","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarAlgorithmType, System.Enum.toStringFn(System.Globalization.CalendarAlgorithmType));}}]}; }, $n);
    $m("System.Globalization.CalendarWeekRule", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FirstDay","is":true,"t":4,"rt":$n[1].CalendarWeekRule,"sn":"FirstDay","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarWeekRule, System.Enum.toStringFn(System.Globalization.CalendarWeekRule));}},{"a":2,"n":"FirstFourDayWeek","is":true,"t":4,"rt":$n[1].CalendarWeekRule,"sn":"FirstFourDayWeek","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarWeekRule, System.Enum.toStringFn(System.Globalization.CalendarWeekRule));}},{"a":2,"n":"FirstFullWeek","is":true,"t":4,"rt":$n[1].CalendarWeekRule,"sn":"FirstFullWeek","box":function ($v) { return Bridge.box($v, System.Globalization.CalendarWeekRule, System.Enum.toStringFn(System.Globalization.CalendarWeekRule));}}]}; }, $n);
    $m("System.Globalization.DateTimeStyles", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AdjustToUniversal","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AdjustToUniversal","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"AllowInnerWhite","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AllowInnerWhite","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"AllowLeadingWhite","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AllowLeadingWhite","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"AllowTrailingWhite","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AllowTrailingWhite","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"AllowWhiteSpaces","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AllowWhiteSpaces","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"AssumeLocal","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AssumeLocal","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"AssumeUniversal","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"AssumeUniversal","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"NoCurrentDateDefault","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"NoCurrentDateDefault","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"None","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}},{"a":2,"n":"RoundtripKind","is":true,"t":4,"rt":$n[1].DateTimeStyles,"sn":"RoundtripKind","box":function ($v) { return Bridge.box($v, System.Globalization.DateTimeStyles, System.Enum.toStringFn(System.Globalization.DateTimeStyles));}}]}; }, $n);
    $m("System.Globalization.DateTimeFormatInfo", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":2,"n":"GetAbbreviatedDayName","t":8,"pi":[{"n":"dayofweek","pt":$n[0].DayOfWeek,"ps":0}],"sn":"getAbbreviatedDayName","rt":$n[0].String,"p":[$n[0].DayOfWeek]},{"a":2,"n":"GetAbbreviatedMonthName","t":8,"pi":[{"n":"month","pt":$n[0].Int32,"ps":0}],"sn":"getAbbreviatedMonthName","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"GetAllDateTimePatterns","t":8,"sn":"getAllDateTimePatterns","rt":$n[0].Array.type(System.String)},{"a":2,"n":"GetAllDateTimePatterns","t":8,"pi":[{"n":"format","pt":$n[0].Char,"ps":0}],"sn":"getAllDateTimePatterns","rt":$n[0].Array.type(System.String),"p":[$n[0].Char]},{"a":2,"n":"GetDayName","t":8,"pi":[{"n":"dayofweek","pt":$n[0].DayOfWeek,"ps":0}],"sn":"getDayName","rt":$n[0].String,"p":[$n[0].DayOfWeek]},{"a":2,"n":"GetFormat","t":8,"pi":[{"n":"formatType","pt":Function,"ps":0}],"sn":"getFormat","rt":$n[0].Object,"p":[Function]},{"a":2,"n":"GetMonthName","t":8,"pi":[{"n":"month","pt":$n[0].Int32,"ps":0}],"sn":"getMonthName","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"GetShortestDayName","t":8,"pi":[{"n":"dayOfWeek","pt":$n[0].DayOfWeek,"ps":0}],"sn":"getShortestDayName","rt":$n[0].String,"p":[$n[0].DayOfWeek]},{"a":2,"n":"AMDesignator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_AMDesignator","t":8,"rt":$n[0].String,"fg":"amDesignator"},"s":{"a":2,"n":"set_AMDesignator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"amDesignator"},"fn":"amDesignator"},{"a":2,"n":"AbbreviatedDayNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_AbbreviatedDayNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"abbreviatedDayNames"},"s":{"a":2,"n":"set_AbbreviatedDayNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"abbreviatedDayNames"},"fn":"abbreviatedDayNames"},{"a":2,"n":"AbbreviatedMonthGenitiveNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_AbbreviatedMonthGenitiveNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"abbreviatedMonthGenitiveNames"},"s":{"a":2,"n":"set_AbbreviatedMonthGenitiveNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"abbreviatedMonthGenitiveNames"},"fn":"abbreviatedMonthGenitiveNames"},{"a":2,"n":"AbbreviatedMonthNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_AbbreviatedMonthNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"abbreviatedMonthNames"},"s":{"a":2,"n":"set_AbbreviatedMonthNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"abbreviatedMonthNames"},"fn":"abbreviatedMonthNames"},{"a":2,"n":"CurrentInfo","is":true,"t":16,"rt":$n[1].DateTimeFormatInfo,"g":{"a":2,"n":"get_CurrentInfo","t":8,"rt":$n[1].DateTimeFormatInfo,"fg":"currentInfo","is":true},"fn":"currentInfo"},{"a":2,"n":"DateSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_DateSeparator","t":8,"rt":$n[0].String,"fg":"dateSeparator"},"s":{"a":2,"n":"set_DateSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"dateSeparator"},"fn":"dateSeparator"},{"a":2,"n":"DayNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_DayNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"dayNames"},"s":{"a":2,"n":"set_DayNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"dayNames"},"fn":"dayNames"},{"a":2,"n":"FirstDayOfWeek","t":16,"rt":$n[0].DayOfWeek,"g":{"a":2,"n":"get_FirstDayOfWeek","t":8,"rt":$n[0].DayOfWeek,"fg":"firstDayOfWeek","box":function ($v) { return Bridge.box($v, System.DayOfWeek, System.Enum.toStringFn(System.DayOfWeek));}},"s":{"a":2,"n":"set_FirstDayOfWeek","t":8,"p":[$n[0].DayOfWeek],"rt":$n[0].Void,"fs":"firstDayOfWeek"},"fn":"firstDayOfWeek"},{"a":2,"n":"FullDateTimePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_FullDateTimePattern","t":8,"rt":$n[0].String,"fg":"fullDateTimePattern"},"s":{"a":2,"n":"set_FullDateTimePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"fullDateTimePattern"},"fn":"fullDateTimePattern"},{"a":2,"n":"InvariantInfo","is":true,"t":16,"rt":$n[1].DateTimeFormatInfo,"g":{"a":2,"n":"get_InvariantInfo","t":8,"rt":$n[1].DateTimeFormatInfo,"fg":"invariantInfo","is":true},"fn":"invariantInfo"},{"a":2,"n":"LongDatePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_LongDatePattern","t":8,"rt":$n[0].String,"fg":"longDatePattern"},"s":{"a":2,"n":"set_LongDatePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"longDatePattern"},"fn":"longDatePattern"},{"a":2,"n":"LongTimePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_LongTimePattern","t":8,"rt":$n[0].String,"fg":"longTimePattern"},"s":{"a":2,"n":"set_LongTimePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"longTimePattern"},"fn":"longTimePattern"},{"a":2,"n":"MonthDayPattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_MonthDayPattern","t":8,"rt":$n[0].String,"fg":"monthDayPattern"},"s":{"a":2,"n":"set_MonthDayPattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"monthDayPattern"},"fn":"monthDayPattern"},{"a":2,"n":"MonthGenitiveNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_MonthGenitiveNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"monthGenitiveNames"},"s":{"a":2,"n":"set_MonthGenitiveNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"monthGenitiveNames"},"fn":"monthGenitiveNames"},{"a":2,"n":"MonthNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_MonthNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"monthNames"},"s":{"a":2,"n":"set_MonthNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"monthNames"},"fn":"monthNames"},{"a":2,"n":"PMDesignator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PMDesignator","t":8,"rt":$n[0].String,"fg":"pmDesignator"},"s":{"a":2,"n":"set_PMDesignator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"pmDesignator"},"fn":"pmDesignator"},{"a":2,"n":"RFC1123Pattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_RFC1123Pattern","t":8,"rt":$n[0].String,"fg":"rfc1123Pattern"},"s":{"a":2,"n":"set_RFC1123Pattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"rfc1123Pattern"},"fn":"rfc1123Pattern"},{"a":2,"n":"RoundtripFormat","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_RoundtripFormat","t":8,"rt":$n[0].String,"fg":"roundtripFormat"},"s":{"a":2,"n":"set_RoundtripFormat","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"roundtripFormat"},"fn":"roundtripFormat"},{"a":2,"n":"ShortDatePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ShortDatePattern","t":8,"rt":$n[0].String,"fg":"shortDatePattern"},"s":{"a":2,"n":"set_ShortDatePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"shortDatePattern"},"fn":"shortDatePattern"},{"a":2,"n":"ShortTimePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_ShortTimePattern","t":8,"rt":$n[0].String,"fg":"shortTimePattern"},"s":{"a":2,"n":"set_ShortTimePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"shortTimePattern"},"fn":"shortTimePattern"},{"a":2,"n":"ShortestDayNames","t":16,"rt":$n[0].Array.type(System.String),"g":{"a":2,"n":"get_ShortestDayNames","t":8,"rt":$n[0].Array.type(System.String),"fg":"shortestDayNames"},"s":{"a":2,"n":"set_ShortestDayNames","t":8,"p":[$n[0].Array.type(System.String)],"rt":$n[0].Void,"fs":"shortestDayNames"},"fn":"shortestDayNames"},{"a":2,"n":"SortableDateTimePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_SortableDateTimePattern","t":8,"rt":$n[0].String,"fg":"sortableDateTimePattern"},"s":{"a":2,"n":"set_SortableDateTimePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"sortableDateTimePattern"},"fn":"sortableDateTimePattern"},{"a":2,"n":"TimeSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_TimeSeparator","t":8,"rt":$n[0].String,"fg":"timeSeparator"},"s":{"a":2,"n":"set_TimeSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"timeSeparator"},"fn":"timeSeparator"},{"a":2,"n":"UniversalSortableDateTimePattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_UniversalSortableDateTimePattern","t":8,"rt":$n[0].String,"fg":"universalSortableDateTimePattern"},"s":{"a":2,"n":"set_UniversalSortableDateTimePattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"universalSortableDateTimePattern"},"fn":"universalSortableDateTimePattern"},{"a":2,"n":"YearMonthPattern","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_YearMonthPattern","t":8,"rt":$n[0].String,"fg":"yearMonthPattern"},"s":{"a":2,"n":"set_YearMonthPattern","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"yearMonthPattern"},"fn":"yearMonthPattern"}]}; }, $n);
    $m("System.Globalization.TextInfo", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":1,"n":"VerifyWritable","t":8,"sn":"VerifyWritable","rt":$n[0].Void},{"v":true,"a":2,"n":"ANSICodePage","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_ANSICodePage","t":8,"rt":$n[0].Int32,"fg":"ANSICodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"ANSICodePage"},{"a":2,"n":"CultureName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CultureName","t":8,"rt":$n[0].String,"fg":"CultureName"},"fn":"CultureName"},{"v":true,"a":2,"n":"EBCDICCodePage","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_EBCDICCodePage","t":8,"rt":$n[0].Int32,"fg":"EBCDICCodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"EBCDICCodePage"},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReadOnly"},{"a":2,"n":"IsRightToLeft","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsRightToLeft","t":8,"rt":$n[0].Boolean,"fg":"IsRightToLeft","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsRightToLeft"},{"a":2,"n":"LCID","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_LCID","t":8,"rt":$n[0].Int32,"fg":"LCID","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"LCID"},{"v":true,"a":2,"n":"ListSeparator","t":16,"rt":$n[0].String,"g":{"v":true,"a":2,"n":"get_ListSeparator","t":8,"rt":$n[0].String,"fg":"ListSeparator"},"s":{"v":true,"a":2,"n":"set_ListSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"ListSeparator"},"fn":"ListSeparator"},{"v":true,"a":2,"n":"MacCodePage","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_MacCodePage","t":8,"rt":$n[0].Int32,"fg":"MacCodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"MacCodePage"},{"v":true,"a":2,"n":"OEMCodePage","t":16,"rt":$n[0].Int32,"g":{"v":true,"a":2,"n":"get_OEMCodePage","t":8,"rt":$n[0].Int32,"fg":"OEMCodePage","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"OEMCodePage"},{"a":1,"n":"listSeparator","t":4,"rt":$n[0].String,"sn":"listSeparator"}]}; }, $n);
    $m("System.Globalization.CultureInfo", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":2,"n":"CreateSpecificCulture","is":true,"t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"getCultureInfo","rt":$n[1].CultureInfo,"p":[$n[0].String]},{"a":2,"n":"GetCultureInfo","is":true,"t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"getCultureInfo","rt":$n[1].CultureInfo,"p":[$n[0].String]},{"a":2,"n":"GetCultures","is":true,"t":8,"sn":"getCultures","rt":System.Array.type(System.Globalization.CultureInfo)},{"v":true,"a":2,"n":"GetFormat","t":8,"pi":[{"n":"formatType","pt":Function,"ps":0}],"sn":"getFormat","rt":$n[0].Object,"p":[Function]},{"a":2,"n":"CurrentCulture","is":true,"t":16,"rt":$n[1].CultureInfo,"g":{"a":2,"n":"get_CurrentCulture","is":true,"t":8,"tpc":0,"def":function () { return this.getCurrentCulture(); },"rt":$n[1].CultureInfo},"s":{"a":2,"n":"set_CurrentCulture","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].CultureInfo,"ps":0}],"tpc":0,"def":function (value) { return this.setCurrentCulture(value); },"rt":$n[0].Void,"p":[$n[1].CultureInfo]}},{"a":2,"n":"DateTimeFormat","t":16,"rt":$n[1].DateTimeFormatInfo,"g":{"a":2,"n":"get_DateTimeFormat","t":8,"rt":$n[1].DateTimeFormatInfo,"fg":"dateTimeFormat"},"s":{"a":2,"n":"set_DateTimeFormat","t":8,"p":[$n[1].DateTimeFormatInfo],"rt":$n[0].Void,"fs":"dateTimeFormat"},"fn":"dateTimeFormat"},{"a":2,"n":"EnglishName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_EnglishName","t":8,"rt":$n[0].String,"fg":"englishName"},"s":{"a":2,"n":"set_EnglishName","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"englishName"},"fn":"englishName"},{"a":2,"n":"InvariantCulture","is":true,"t":16,"rt":$n[1].CultureInfo,"g":{"a":2,"n":"get_InvariantCulture","t":8,"rt":$n[1].CultureInfo,"fg":"invariantCulture","is":true},"fn":"invariantCulture"},{"a":2,"n":"Name","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Name","t":8,"rt":$n[0].String,"fg":"name"},"fn":"name"},{"a":2,"n":"NativeName","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NativeName","t":8,"rt":$n[0].String,"fg":"nativeName"},"s":{"a":2,"n":"set_NativeName","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"nativeName"},"fn":"nativeName"},{"a":2,"n":"NumberFormat","t":16,"rt":$n[1].NumberFormatInfo,"g":{"a":2,"n":"get_NumberFormat","t":8,"rt":$n[1].NumberFormatInfo,"fg":"numberFormat"},"s":{"a":2,"n":"set_NumberFormat","t":8,"p":[$n[1].NumberFormatInfo],"rt":$n[0].Void,"fs":"numberFormat"},"fn":"numberFormat"},{"v":true,"a":2,"n":"TextInfo","t":16,"rt":$n[1].TextInfo,"g":{"v":true,"a":2,"n":"get_TextInfo","t":8,"rt":$n[1].TextInfo,"fg":"TextInfo"},"fn":"TextInfo"}]}; }, $n);
    $m("System.Globalization.NumberFormatInfo", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":2,"n":"GetFormat","t":8,"pi":[{"n":"formatType","pt":Function,"ps":0}],"sn":"getFormat","rt":$n[0].Object,"p":[Function]},{"a":2,"n":"CurrencyDecimalDigits","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CurrencyDecimalDigits","t":8,"rt":$n[0].Int32,"fg":"currencyDecimalDigits","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_CurrencyDecimalDigits","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"currencyDecimalDigits"},"fn":"currencyDecimalDigits"},{"a":2,"n":"CurrencyDecimalSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CurrencyDecimalSeparator","t":8,"rt":$n[0].String,"fg":"currencyDecimalSeparator"},"s":{"a":2,"n":"set_CurrencyDecimalSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"currencyDecimalSeparator"},"fn":"currencyDecimalSeparator"},{"a":2,"n":"CurrencyGroupSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CurrencyGroupSeparator","t":8,"rt":$n[0].String,"fg":"currencyGroupSeparator"},"s":{"a":2,"n":"set_CurrencyGroupSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"currencyGroupSeparator"},"fn":"currencyGroupSeparator"},{"a":2,"n":"CurrencyGroupSizes","t":16,"rt":$n[0].Array.type(System.Int32),"g":{"a":2,"n":"get_CurrencyGroupSizes","t":8,"rt":$n[0].Array.type(System.Int32),"fg":"currencyGroupSizes"},"s":{"a":2,"n":"set_CurrencyGroupSizes","t":8,"p":[$n[0].Array.type(System.Int32)],"rt":$n[0].Void,"fs":"currencyGroupSizes"},"fn":"currencyGroupSizes"},{"a":2,"n":"CurrencyNegativePattern","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CurrencyNegativePattern","t":8,"rt":$n[0].Int32,"fg":"currencyNegativePattern","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_CurrencyNegativePattern","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"currencyNegativePattern"},"fn":"currencyNegativePattern"},{"a":2,"n":"CurrencyPositivePattern","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_CurrencyPositivePattern","t":8,"rt":$n[0].Int32,"fg":"currencyPositivePattern","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_CurrencyPositivePattern","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"currencyPositivePattern"},"fn":"currencyPositivePattern"},{"a":2,"n":"CurrencySymbol","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CurrencySymbol","t":8,"rt":$n[0].String,"fg":"currencySymbol"},"s":{"a":2,"n":"set_CurrencySymbol","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"currencySymbol"},"fn":"currencySymbol"},{"a":2,"n":"CurrentInfo","is":true,"t":16,"rt":$n[1].NumberFormatInfo,"g":{"a":2,"n":"get_CurrentInfo","t":8,"rt":$n[1].NumberFormatInfo,"fg":"currentInfo","is":true},"fn":"currentInfo"},{"a":2,"n":"InvariantInfo","is":true,"t":16,"rt":$n[1].NumberFormatInfo,"g":{"a":2,"n":"get_InvariantInfo","t":8,"rt":$n[1].NumberFormatInfo,"fg":"invariantInfo","is":true},"fn":"invariantInfo"},{"a":2,"n":"NaNSymbol","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NaNSymbol","t":8,"rt":$n[0].String,"fg":"nanSymbol"},"s":{"a":2,"n":"set_NaNSymbol","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"nanSymbol"},"fn":"nanSymbol"},{"a":2,"n":"NegativeInfinitySymbol","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NegativeInfinitySymbol","t":8,"rt":$n[0].String,"fg":"negativeInfinitySymbol"},"s":{"a":2,"n":"set_NegativeInfinitySymbol","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"negativeInfinitySymbol"},"fn":"negativeInfinitySymbol"},{"a":2,"n":"NegativeSign","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NegativeSign","t":8,"rt":$n[0].String,"fg":"negativeSign"},"s":{"a":2,"n":"set_NegativeSign","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"negativeSign"},"fn":"negativeSign"},{"a":2,"n":"NumberDecimalDigits","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_NumberDecimalDigits","t":8,"rt":$n[0].Int32,"fg":"numberDecimalDigits","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_NumberDecimalDigits","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"numberDecimalDigits"},"fn":"numberDecimalDigits"},{"a":2,"n":"NumberDecimalSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NumberDecimalSeparator","t":8,"rt":$n[0].String,"fg":"numberDecimalSeparator"},"s":{"a":2,"n":"set_NumberDecimalSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"numberDecimalSeparator"},"fn":"numberDecimalSeparator"},{"a":2,"n":"NumberGroupSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_NumberGroupSeparator","t":8,"rt":$n[0].String,"fg":"numberGroupSeparator"},"s":{"a":2,"n":"set_NumberGroupSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"numberGroupSeparator"},"fn":"numberGroupSeparator"},{"a":2,"n":"NumberGroupSizes","t":16,"rt":$n[0].Array.type(System.Int32),"g":{"a":2,"n":"get_NumberGroupSizes","t":8,"rt":$n[0].Array.type(System.Int32),"fg":"numberGroupSizes"},"s":{"a":2,"n":"set_NumberGroupSizes","t":8,"p":[$n[0].Array.type(System.Int32)],"rt":$n[0].Void,"fs":"numberGroupSizes"},"fn":"numberGroupSizes"},{"a":2,"n":"PercentDecimalDigits","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PercentDecimalDigits","t":8,"rt":$n[0].Int32,"fg":"percentDecimalDigits","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_PercentDecimalDigits","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"percentDecimalDigits"},"fn":"percentDecimalDigits"},{"a":2,"n":"PercentDecimalSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PercentDecimalSeparator","t":8,"rt":$n[0].String,"fg":"percentDecimalSeparator"},"s":{"a":2,"n":"set_PercentDecimalSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"percentDecimalSeparator"},"fn":"percentDecimalSeparator"},{"a":2,"n":"PercentGroupSeparator","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PercentGroupSeparator","t":8,"rt":$n[0].String,"fg":"percentGroupSeparator"},"s":{"a":2,"n":"set_PercentGroupSeparator","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"percentGroupSeparator"},"fn":"percentGroupSeparator"},{"a":2,"n":"PercentGroupSizes","t":16,"rt":$n[0].Array.type(System.Int32),"g":{"a":2,"n":"get_PercentGroupSizes","t":8,"rt":$n[0].Array.type(System.Int32),"fg":"percentGroupSizes"},"s":{"a":2,"n":"set_PercentGroupSizes","t":8,"p":[$n[0].Array.type(System.Int32)],"rt":$n[0].Void,"fs":"percentGroupSizes"},"fn":"percentGroupSizes"},{"a":2,"n":"PercentNegativePattern","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PercentNegativePattern","t":8,"rt":$n[0].Int32,"fg":"percentNegativePattern","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_PercentNegativePattern","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"percentNegativePattern"},"fn":"percentNegativePattern"},{"a":2,"n":"PercentPositivePattern","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PercentPositivePattern","t":8,"rt":$n[0].Int32,"fg":"percentPositivePattern","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_PercentPositivePattern","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"percentPositivePattern"},"fn":"percentPositivePattern"},{"a":2,"n":"PercentSymbol","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PercentSymbol","t":8,"rt":$n[0].String,"fg":"percentSymbol"},"s":{"a":2,"n":"set_PercentSymbol","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"percentSymbol"},"fn":"percentSymbol"},{"a":2,"n":"PositiveInfinitySymbol","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PositiveInfinitySymbol","t":8,"rt":$n[0].String,"fg":"positiveInfinitySymbol"},"s":{"a":2,"n":"set_PositiveInfinitySymbol","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"positiveInfinitySymbol"},"fn":"positiveInfinitySymbol"},{"a":2,"n":"PositiveSign","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_PositiveSign","t":8,"rt":$n[0].String,"fg":"positiveSign"},"s":{"a":2,"n":"set_PositiveSign","t":8,"p":[$n[0].String],"rt":$n[0].Void,"fs":"positiveSign"},"fn":"positiveSign"}]}; }, $n);
    $m("System.ComponentModel.DefaultValueAttribute", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean],"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Byte],"pi":[{"n":"value","pt":$n[0].Byte,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Char],"pi":[{"n":"value","pt":$n[0].Char,"ps":0}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Double],"pi":[{"n":"value","pt":$n[0].Double,"ps":0}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int16],"pi":[{"n":"value","pt":$n[0].Int16,"ps":0}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64],"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"$ctor6"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Object],"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"$ctor7"},{"a":2,"n":".ctor","t":1,"p":[$n[0].SByte],"pi":[{"n":"value","pt":$n[0].SByte,"ps":0}],"sn":"$ctor8"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Single],"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"$ctor9"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"$ctor10"},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt16],"pi":[{"n":"value","pt":$n[0].UInt16,"ps":0}],"sn":"$ctor12"},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt32],"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"$ctor13"},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt64],"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"$ctor14"},{"a":2,"n":".ctor","t":1,"p":[Function,$n[0].String],"pi":[{"n":"type","pt":Function,"ps":0},{"n":"value","pt":$n[0].String,"ps":1}],"sn":"$ctor11"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"SetValue","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"setValue","rt":$n[0].Void,"p":[$n[0].Object]},{"v":true,"a":2,"n":"Value","t":16,"rt":$n[0].Object,"g":{"v":true,"a":2,"n":"get_Value","t":8,"rt":$n[0].Object,"fg":"Value"},"fn":"Value"},{"a":1,"n":"_value","t":4,"rt":$n[0].Object,"sn":"_value"}]}; }, $n);
    $m("System.ComponentModel.BrowsableAttribute", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Boolean],"pi":[{"n":"browsable","pt":$n[0].Boolean,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Browsable","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_Browsable","t":8,"rt":$n[0].Boolean,"fg":"Browsable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"Browsable"},{"a":2,"n":"Default","is":true,"t":4,"rt":$n[14].BrowsableAttribute,"sn":"default","ro":true},{"a":2,"n":"No","is":true,"t":4,"rt":$n[14].BrowsableAttribute,"sn":"no","ro":true},{"a":2,"n":"Yes","is":true,"t":4,"rt":$n[14].BrowsableAttribute,"sn":"yes","ro":true},{"a":1,"n":"browsable","t":4,"rt":$n[0].Boolean,"sn":"browsable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("System.Collections.DictionaryEntry", function () { return {"att":1057033,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Object,$n[0].Object],"pi":[{"n":"key","pt":$n[0].Object,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"Key","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_Key","t":8,"rt":$n[0].Object,"fg":"Key"},"s":{"a":2,"n":"set_Key","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"Key"},"fn":"Key"},{"a":2,"n":"Value","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_Value","t":8,"rt":$n[0].Object,"fg":"Value"},"s":{"a":2,"n":"set_Value","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"Value"},"fn":"Value"},{"a":1,"n":"_key","t":4,"rt":$n[0].Object,"sn":"_key"},{"a":1,"n":"_value","t":4,"rt":$n[0].Object,"sn":"_value"}]}; }, $n);
    $m("System.Collections.IComparer", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Compare","t":8,"pi":[{"n":"x","pt":$n[0].Object,"ps":0},{"n":"y","pt":$n[0].Object,"ps":1}],"sn":"System$Collections$IComparer$compare","rt":$n[0].Int32,"p":[$n[0].Object,$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.IEnumerator", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"MoveNext","t":8,"sn":"System$Collections$IEnumerator$moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Reset","t":8,"sn":"System$Collections$IEnumerator$reset","rt":$n[0].Void},{"ab":true,"a":2,"n":"Current","t":16,"rt":$n[0].Object,"g":{"ab":true,"a":2,"n":"get_Current","t":8,"rt":$n[0].Object,"fg":"System$Collections$IEnumerator$Current"},"fn":"System$Collections$IEnumerator$Current"}]}; }, $n);
    $m("System.Collections.IEqualityComparer", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"x","pt":$n[0].Object,"ps":0},{"n":"y","pt":$n[0].Object,"ps":1}],"sn":"System$Collections$IEqualityComparer$equals","rt":$n[0].Boolean,"p":[$n[0].Object,$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"GetHashCode","t":8,"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"System$Collections$IEqualityComparer$getHashCode","rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.IStructuralComparable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CompareTo","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0},{"n":"comparer","pt":$n[7].IComparer,"ps":1}],"sn":"System$Collections$IStructuralComparable$CompareTo","rt":$n[0].Int32,"p":[$n[0].Object,$n[7].IComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.IStructuralEquatable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"other","pt":$n[0].Object,"ps":0},{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":1}],"sn":"System$Collections$IStructuralEquatable$Equals","rt":$n[0].Boolean,"p":[$n[0].Object,$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"GetHashCode","t":8,"pi":[{"n":"comparer","pt":$n[7].IEqualityComparer,"ps":0}],"sn":"System$Collections$IStructuralEquatable$GetHashCode","rt":$n[0].Int32,"p":[$n[7].IEqualityComparer],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.IDictionaryEnumerator", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Entry","t":16,"rt":$n[7].DictionaryEntry,"g":{"ab":true,"a":2,"n":"get_Entry","t":8,"rt":$n[7].DictionaryEntry,"fg":"System$Collections$IDictionaryEnumerator$Entry"},"fn":"System$Collections$IDictionaryEnumerator$Entry"},{"ab":true,"a":2,"n":"Key","t":16,"rt":$n[0].Object,"g":{"ab":true,"a":2,"n":"get_Key","t":8,"rt":$n[0].Object,"fg":"System$Collections$IDictionaryEnumerator$Key"},"fn":"System$Collections$IDictionaryEnumerator$Key"},{"ab":true,"a":2,"n":"Value","t":16,"rt":$n[0].Object,"g":{"ab":true,"a":2,"n":"get_Value","t":8,"rt":$n[0].Object,"fg":"System$Collections$IDictionaryEnumerator$Value"},"fn":"System$Collections$IDictionaryEnumerator$Value"}]}; }, $n);
    $m("System.Collections.BitArray", function () { return {"nested":[$n[7].BitArray.BitArrayEnumeratorSimple],"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Boolean)],"pi":[{"n":"values","pt":$n[0].Array.type(System.Boolean),"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte)],"pi":[{"n":"bytes","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[7].BitArray],"pi":[{"n":"bits","pt":$n[7].BitArray,"ps":0}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"length","pt":$n[0].Int32,"ps":0}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Int32)],"pi":[{"n":"values","pt":$n[0].Array.type(System.Int32),"ps":0}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Boolean],"pi":[{"n":"length","pt":$n[0].Int32,"ps":0},{"n":"defaultValue","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor4"},{"a":2,"n":"And","t":8,"pi":[{"n":"value","pt":$n[7].BitArray,"ps":0}],"sn":"And","rt":$n[7].BitArray,"p":[$n[7].BitArray]},{"a":2,"n":"Clone","t":8,"sn":"clone","rt":$n[0].Object},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"a":2,"n":"Get","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"Get","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"GetArrayLength","is":true,"t":8,"pi":[{"n":"n","pt":$n[0].Int32,"ps":0},{"n":"div","pt":$n[0].Int32,"ps":1}],"sn":"GetArrayLength","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[7].IEnumerator},{"a":2,"n":"Not","t":8,"sn":"Not","rt":$n[7].BitArray},{"a":2,"n":"Or","t":8,"pi":[{"n":"value","pt":$n[7].BitArray,"ps":0}],"sn":"Or","rt":$n[7].BitArray,"p":[$n[7].BitArray]},{"a":2,"n":"Set","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Boolean,"ps":1}],"sn":"Set","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"SetAll","t":8,"pi":[{"n":"value","pt":$n[0].Boolean,"ps":0}],"sn":"SetAll","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"Xor","t":8,"pi":[{"n":"value","pt":$n[7].BitArray,"ps":0}],"sn":"Xor","rt":$n[7].BitArray,"p":[$n[7].BitArray]},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReadOnly"},{"a":2,"n":"Item","t":16,"rt":$n[0].Boolean,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Boolean,"ps":1}],"sn":"setItem","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Boolean]}},{"a":2,"n":"Length","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Length","t":8,"rt":$n[0].Int32,"fg":"Length","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Length","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"Length"},"fn":"Length"},{"a":1,"n":"BitsPerByte","is":true,"t":4,"rt":$n[0].Int32,"sn":"BitsPerByte","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"BitsPerInt32","is":true,"t":4,"rt":$n[0].Int32,"sn":"BitsPerInt32","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"BytesPerInt32","is":true,"t":4,"rt":$n[0].Int32,"sn":"BytesPerInt32","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_ShrinkThreshold","is":true,"t":4,"rt":$n[0].Int32,"sn":"_ShrinkThreshold","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"m_array","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"m_array"},{"a":1,"n":"m_length","t":4,"rt":$n[0].Int32,"sn":"m_length","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.BitArray.BitArrayEnumeratorSimple", function () { return {"td":$n[7].BitArray,"att":1048579,"a":1,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[7].BitArray],"pi":[{"n":"bitarray","pt":$n[7].BitArray,"ps":0}],"sn":"ctor"},{"v":true,"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Reset","t":8,"sn":"reset","rt":$n[0].Void},{"v":true,"a":2,"n":"Current","t":16,"rt":$n[0].Object,"g":{"v":true,"a":2,"n":"get_Current","t":8,"rt":$n[0].Object,"fg":"Current"},"fn":"Current"},{"a":1,"n":"bitarray","t":4,"rt":$n[7].BitArray,"sn":"bitarray"},{"a":1,"n":"currentElement","t":4,"rt":$n[0].Boolean,"sn":"currentElement","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"index","t":4,"rt":$n[0].Int32,"sn":"index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"version","t":4,"rt":$n[0].Int32,"sn":"version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.HashHelpers", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":2,"n":"Combine","is":true,"t":8,"pi":[{"n":"h1","pt":$n[0].Int32,"ps":0},{"n":"h2","pt":$n[0].Int32,"ps":1}],"sn":"Combine","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ExpandPrime","is":true,"t":8,"pi":[{"n":"oldSize","pt":$n[0].Int32,"ps":0}],"sn":"ExpandPrime","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetMinPrime","is":true,"t":8,"sn":"GetMinPrime","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetPrime","is":true,"t":8,"pi":[{"n":"min","pt":$n[0].Int32,"ps":0}],"sn":"GetPrime","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IsPrime","is":true,"t":8,"pi":[{"n":"candidate","pt":$n[0].Int32,"ps":0}],"sn":"IsPrime","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"HashPrime","is":true,"t":4,"rt":$n[0].Int32,"sn":"HashPrime","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"MaxPrimeArrayLength","is":true,"t":4,"rt":$n[0].Int32,"sn":"MaxPrimeArrayLength","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"RandomSeed","is":true,"t":4,"rt":$n[0].Int32,"sn":"RandomSeed","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"primes","is":true,"t":4,"rt":$n[0].Array.type(System.Int32),"sn":"primes","ro":true}]}; }, $n);
    $m("System.Collections.IDictionary", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Add","t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"sn":"System$Collections$IDictionary$add","rt":$n[0].Void,"p":[$n[0].Object,$n[0].Object]},{"ab":true,"a":2,"n":"Clear","t":8,"sn":"System$Collections$IDictionary$clear","rt":$n[0].Void},{"ab":true,"a":2,"n":"Contains","t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0}],"sn":"System$Collections$IDictionary$contains","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"GetEnumerator","t":8,"sn":"System$Collections$IDictionary$GetEnumerator","rt":$n[7].IDictionaryEnumerator},{"ab":true,"a":2,"n":"Remove","t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0}],"sn":"System$Collections$IDictionary$remove","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsFixedSize","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsFixedSize","t":8,"rt":$n[0].Boolean,"fg":"System$Collections$IDictionary$IsFixedSize","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"System$Collections$IDictionary$IsFixedSize"},{"ab":true,"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"System$Collections$IDictionary$IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"System$Collections$IDictionary$IsReadOnly"},{"ab":true,"a":2,"n":"Item","t":16,"rt":$n[0].Object,"p":[$n[0].Object],"i":true,"ipi":[{"n":"key","pt":$n[0].Object,"ps":0}],"g":{"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0}],"sn":"System$Collections$IDictionary$getItem","rt":$n[0].Object,"p":[$n[0].Object]},"s":{"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"sn":"System$Collections$IDictionary$setItem","rt":$n[0].Void,"p":[$n[0].Object,$n[0].Object]}},{"ab":true,"a":2,"n":"Keys","t":16,"rt":$n[7].ICollection,"g":{"ab":true,"a":2,"n":"get_Keys","t":8,"rt":$n[7].ICollection,"fg":"System$Collections$IDictionary$Keys"},"fn":"System$Collections$IDictionary$Keys"},{"ab":true,"a":2,"n":"Values","t":16,"rt":$n[7].ICollection,"g":{"ab":true,"a":2,"n":"get_Values","t":8,"rt":$n[7].ICollection,"fg":"System$Collections$IDictionary$Values"},"fn":"System$Collections$IDictionary$Values"}]}; }, $n);
    $m("System.Collections.IList", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Add","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (value) { return System.Array.add(this, value, Object); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"Clear","t":8,"tpc":0,"def":function () { return System.Array.clear(this, Object); },"rt":$n[0].Void},{"ab":true,"a":2,"n":"Contains","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (value) { return System.Array.contains(this, value); },"rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (value) { return System.Array.indexOf(this, value, 0, null); },"rt":$n[0].Int32,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"tpc":0,"def":function (index, value) { return System.Array.insert(this, index, value, Object); },"rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Object]},{"ab":true,"a":2,"n":"Remove","t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"tpc":0,"def":function (value) { return System.Array.remove(this, value, Object); },"rt":$n[0].Void,"p":[$n[0].Object]},{"ab":true,"a":2,"n":"RemoveAt","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (index) { return System.Array.removeAt(this, index, Object); },"rt":$n[0].Void,"p":[$n[0].Int32]},{"ab":true,"a":2,"n":"IsFixedSize","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsFixedSize","t":8,"tpc":0,"def":function () { return System.Array.isFixedSize(this); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"ab":true,"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsReadOnly","t":8,"tpc":0,"def":function () { return System.Array.getIsReadOnly(this, Object); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"ab":true,"a":2,"n":"Item","t":16,"rt":$n[0].Object,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (index) { return System.Array.getItem(this, index); },"rt":$n[0].Object,"p":[$n[0].Int32]},"s":{"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":$n[0].Object,"ps":1}],"tpc":0,"def":function (index, value) { return System.Array.setItem(this, index, value); },"rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Object]}}]}; }, $n);
    $m("System.Collections.ICollection", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (array, arrayIndex) { return System.Array.copyTo(this, array, arrayIndex); },"rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"ab":true,"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"ab":true,"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return System.Array.getCount(this); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"ab":true,"a":2,"n":"IsSynchronized","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsSynchronized","t":8,"rt":$n[0].Boolean,"fg":"System$Collections$ICollection$IsSynchronized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"System$Collections$ICollection$IsSynchronized"},{"ab":true,"a":2,"n":"SyncRoot","t":16,"rt":$n[0].Object,"g":{"ab":true,"a":2,"n":"get_SyncRoot","t":8,"rt":$n[0].Object,"fg":"System$Collections$ICollection$SyncRoot"},"fn":"System$Collections$ICollection$SyncRoot"}]}; }, $n);
    $m("System.Collections.IEnumerable", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetEnumerator","t":8,"tpc":0,"def":function () { return Bridge.getEnumerator(this); },"rt":$n[7].IEnumerator}]}; }, $n);
    $m("System.Collections.ObjectModel.Collection$1", function (T) { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IList$1(T)],"pi":[{"n":"list","pt":$n[4].IList$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Add","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"add","rt":$n[0].Void,"p":[T]},{"a":2,"n":"Clear","t":8,"sn":"clear","rt":$n[0].Void},{"v":true,"a":3,"n":"ClearItems","t":8,"sn":"ClearItems","rt":$n[0].Void},{"a":2,"n":"Contains","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"contains","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].IEnumerator$1(T)},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"indexOf","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"item","pt":T,"ps":1}],"sn":"insert","rt":$n[0].Void,"p":[$n[0].Int32,T]},{"v":true,"a":3,"n":"InsertItem","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"item","pt":T,"ps":1}],"sn":"InsertItem","rt":$n[0].Void,"p":[$n[0].Int32,T]},{"a":1,"n":"IsCompatibleObject","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"IsCompatibleObject","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Remove","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"remove","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"RemoveAt","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"removeAt","rt":$n[0].Void,"p":[$n[0].Int32]},{"v":true,"a":3,"n":"RemoveItem","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"RemoveItem","rt":$n[0].Void,"p":[$n[0].Int32]},{"v":true,"a":3,"n":"SetItem","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"item","pt":T,"ps":1}],"sn":"SetItem","rt":$n[0].Void,"p":[$n[0].Int32,T]},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"Item","t":16,"rt":T,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":T,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":T,"ps":1}],"sn":"setItem","rt":$n[0].Void,"p":[$n[0].Int32,T]}},{"a":3,"n":"Items","t":16,"rt":$n[4].IList$1(T),"g":{"a":3,"n":"get_Items","t":8,"rt":$n[4].IList$1(T),"fg":"Items"},"fn":"Items"},{"a":1,"n":"_syncRoot","t":4,"rt":$n[0].Object,"sn":"_syncRoot"},{"a":1,"n":"items","t":4,"rt":$n[4].IList$1(T),"sn":"items"}]}; }, $n);
    $m("System.Collections.ObjectModel.ReadOnlyCollection$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[4].IList$1(T)],"pi":[{"n":"list","pt":$n[4].IList$1(T),"ps":0}],"sn":"ctor"},{"a":2,"n":"Contains","t":8,"pi":[{"n":"value","pt":T,"ps":0}],"sn":"contains","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].IEnumerator$1(T)},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"value","pt":T,"ps":0}],"sn":"indexOf","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"IsCompatibleObject","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"IsCompatibleObject","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"Item","t":16,"rt":T,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":T,"p":[$n[0].Int32]}},{"a":3,"n":"Items","t":16,"rt":$n[4].IList$1(T),"g":{"a":3,"n":"get_Items","t":8,"rt":$n[4].IList$1(T),"fg":"Items"},"fn":"Items"},{"a":1,"n":"list","t":4,"rt":$n[4].IList$1(T),"sn":"list"}]}; }, $n);
    $m("System.Collections.Generic.HashSet$1", function (T) { return {"nested":[$n[4].HashSet$1.ElementCount,$n[4].HashSet$1.Slot,$n[4].HashSet$1.Enumerator],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEnumerable$1(T)],"pi":[{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEqualityComparer$1(T)],"pi":[{"n":"comparer","pt":$n[4].IEqualityComparer$1(T),"ps":0}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEnumerable$1(T),$n[4].IEqualityComparer$1(T)],"pi":[{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":0},{"n":"comparer","pt":$n[4].IEqualityComparer$1(T),"ps":1}],"sn":"$ctor2"},{"a":2,"n":"Add","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"add","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"AddIfNotPresent","t":8,"pi":[{"n":"value","pt":T,"ps":0}],"sn":"AddIfNotPresent","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"AddOrGetLocation","t":8,"pi":[{"n":"value","pt":T,"ps":0},{"n":"location","out":true,"pt":$n[0].Int32,"ps":1}],"sn":"AddOrGetLocation","rt":$n[0].Boolean,"p":[T,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"AreEqualityComparersEqual","is":true,"t":8,"pi":[{"n":"set1","pt":$n[4].HashSet$1(T),"ps":0},{"n":"set2","pt":$n[4].HashSet$1(T),"ps":1}],"sn":"AreEqualityComparersEqual","rt":$n[0].Boolean,"p":[$n[4].HashSet$1(T),$n[4].HashSet$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ArrayClear","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2}],"sn":"ArrayClear","rt":$n[0].Void,"p":[Array,$n[0].Int32,$n[0].Int32]},{"a":1,"n":"CheckUniqueAndUnfoundElements","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0},{"n":"returnIfUnfound","pt":$n[0].Boolean,"ps":1}],"sn":"CheckUniqueAndUnfoundElements","rt":$n[4].HashSet$1.ElementCount(T),"p":[$n[4].IEnumerable$1(T),$n[0].Boolean]},{"a":2,"n":"Clear","t":8,"sn":"clear","rt":$n[0].Void},{"a":2,"n":"Contains","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"contains","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ContainsAllElements","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"ContainsAllElements","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0}],"sn":"CopyTo","rt":$n[0].Void,"p":[System.Array.type(T)]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"CopyTo$1","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"ExceptWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"exceptWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].HashSet$1.Enumerator(T)},{"a":4,"n":"HashSetEquals","is":true,"t":8,"pi":[{"n":"set1","pt":$n[4].HashSet$1(T),"ps":0},{"n":"set2","pt":$n[4].HashSet$1(T),"ps":1},{"n":"comparer","pt":$n[4].IEqualityComparer$1(T),"ps":2}],"sn":"HashSetEquals","rt":$n[0].Boolean,"p":[$n[4].HashSet$1(T),$n[4].HashSet$1(T),$n[4].IEqualityComparer$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"IncreaseCapacity","t":8,"sn":"IncreaseCapacity","rt":$n[0].Void},{"a":1,"n":"Initialize","t":8,"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"sn":"Initialize","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"InternalGetHashCode","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"InternalGetHashCode","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"InternalIndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"InternalIndexOf","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IntersectWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"intersectWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":1,"n":"IntersectWithEnumerable","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"IntersectWithEnumerable","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":1,"n":"IntersectWithHashSetWithSameEC","t":8,"pi":[{"n":"other","pt":$n[4].HashSet$1(T),"ps":0}],"sn":"IntersectWithHashSetWithSameEC","rt":$n[0].Void,"p":[$n[4].HashSet$1(T)]},{"a":2,"n":"IsProperSubsetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"isProperSubsetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsProperSupersetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"isProperSupersetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSubsetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"isSubsetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"IsSubsetOfHashSetWithSameEC","t":8,"pi":[{"n":"other","pt":$n[4].HashSet$1(T),"ps":0}],"sn":"IsSubsetOfHashSetWithSameEC","rt":$n[0].Boolean,"p":[$n[4].HashSet$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"IsSupersetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"isSupersetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Overlaps","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"overlaps","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Remove","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"remove","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"RemoveWhere","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"RemoveWhere","rt":$n[0].Int32,"p":[Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"SetCapacity","t":8,"pi":[{"n":"newSize","pt":$n[0].Int32,"ps":0},{"n":"forceNewHashCodes","pt":$n[0].Boolean,"ps":1}],"sn":"SetCapacity","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"SetEquals","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"setEquals","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"SymmetricExceptWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"symmetricExceptWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":1,"n":"SymmetricExceptWithEnumerable","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"SymmetricExceptWithEnumerable","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":1,"n":"SymmetricExceptWithUniqueHashSet","t":8,"pi":[{"n":"other","pt":$n[4].HashSet$1(T),"ps":0}],"sn":"SymmetricExceptWithUniqueHashSet","rt":$n[0].Void,"p":[$n[4].HashSet$1(T)]},{"a":4,"n":"ToArray","t":8,"sn":"ToArray","rt":System.Array.type(T)},{"a":2,"n":"TrimExcess","t":8,"sn":"TrimExcess","rt":$n[0].Void},{"a":2,"n":"UnionWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"unionWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":2,"n":"Comparer","t":16,"rt":$n[4].IEqualityComparer$1(T),"g":{"a":2,"n":"get_Comparer","t":8,"rt":$n[4].IEqualityComparer$1(T),"fg":"Comparer"},"fn":"Comparer"},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReadOnly"},{"a":1,"n":"Lower31BitMask","is":true,"t":4,"rt":$n[0].Int32,"sn":"Lower31BitMask","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"ShrinkThreshold","is":true,"t":4,"rt":$n[0].Int32,"sn":"ShrinkThreshold","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_buckets","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"_buckets"},{"a":1,"n":"_comparer","t":4,"rt":$n[4].IEqualityComparer$1(T),"sn":"_comparer"},{"a":1,"n":"_count","t":4,"rt":$n[0].Int32,"sn":"_count","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_freeList","t":4,"rt":$n[0].Int32,"sn":"_freeList","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_lastIndex","t":4,"rt":$n[0].Int32,"sn":"_lastIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_slots","t":4,"rt":System.Array.type(System.Collections.Generic.HashSet$1.Slot(T)),"sn":"_slots"},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.HashSet$1.ElementCount", function (T) { return {"td":$n[4].HashSet$1(T),"att":1048845,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"unfoundCount","t":4,"rt":$n[0].Int32,"sn":"unfoundCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"uniqueCount","t":4,"rt":$n[0].Int32,"sn":"uniqueCount","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.HashSet$1.Slot", function (T) { return {"td":$n[4].HashSet$1(T),"att":1048845,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"hashCode","t":4,"rt":$n[0].Int32,"sn":"hashCode","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"next","t":4,"rt":$n[0].Int32,"sn":"next","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"value","t":4,"rt":T,"sn":"value"}]}; }, $n);
    $m("System.Collections.Generic.HashSet$1.Enumerator", function (T) { return {"td":$n[4].HashSet$1(T),"att":1048842,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[4].HashSet$1(T)],"pi":[{"n":"set","pt":$n[4].HashSet$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Current","t":16,"rt":T,"g":{"a":2,"n":"get_Current","t":8,"rt":T,"fg":"Current"},"fn":"Current"},{"a":1,"n":"_current","t":4,"rt":T,"sn":"_current"},{"a":1,"n":"_index","t":4,"rt":$n[0].Int32,"sn":"_index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_set","t":4,"rt":$n[4].HashSet$1(T),"sn":"_set"},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.IComparer$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Compare","t":8,"pi":[{"n":"x","pt":T,"ps":0},{"n":"y","pt":T,"ps":1}],"sn":"System$Collections$Generic$IComparer$1$" + Bridge.getTypeAlias(T) + "$compare","rt":$n[0].Int32,"p":[T,T],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.IEnumerator$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Current","t":16,"rt":T,"g":{"ab":true,"a":2,"n":"get_Current","t":8,"rt":T,"fg":"\"System$Collections$Generic$IEnumerator$1$\" + Bridge.getTypeAlias(T) + \"$Current$1\""},"fn":"\"System$Collections$Generic$IEnumerator$1$\" + Bridge.getTypeAlias(T) + \"$Current$1\""}]}; }, $n);
    $m("System.Collections.Generic.ICollectionDebugView$1", function (T) { return {"att":1048832,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[4].ICollection$1(T)],"pi":[{"n":"collection","pt":$n[4].ICollection$1(T),"ps":0}],"sn":"ctor"},{"a":2,"n":"Items","t":16,"rt":System.Array.type(T),"g":{"a":2,"n":"get_Items","t":8,"rt":System.Array.type(T),"fg":"Items"},"fn":"Items"},{"a":1,"n":"_collection","t":4,"rt":$n[4].ICollection$1(T),"sn":"_collection","ro":true}]}; }, $n);
    $m("System.Collections.Generic.IDictionaryDebugView$2", function (K, V) { return {"att":1048832,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[4].IDictionary$2(K,V)],"pi":[{"n":"dictionary","pt":$n[4].IDictionary$2(K,V),"ps":0}],"sn":"ctor"},{"a":2,"n":"Items","t":16,"rt":System.Array.type(System.Collections.Generic.KeyValuePair$2(K,V)),"g":{"a":2,"n":"get_Items","t":8,"rt":System.Array.type(System.Collections.Generic.KeyValuePair$2(K,V)),"fg":"Items"},"fn":"Items"},{"a":1,"n":"_dict","t":4,"rt":$n[4].IDictionary$2(K,V),"sn":"_dict","ro":true}]}; }, $n);
    $m("System.Collections.Generic.DictionaryKeyCollectionDebugView$2", function (TKey, TValue) { return {"att":1048832,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[4].ICollection$1(TKey)],"pi":[{"n":"collection","pt":$n[4].ICollection$1(TKey),"ps":0}],"sn":"ctor"},{"a":2,"n":"Items","t":16,"rt":System.Array.type(TKey),"g":{"a":2,"n":"get_Items","t":8,"rt":System.Array.type(TKey),"fg":"Items"},"fn":"Items"},{"a":1,"n":"_collection","t":4,"rt":$n[4].ICollection$1(TKey),"sn":"_collection","ro":true}]}; }, $n);
    $m("System.Collections.Generic.DictionaryValueCollectionDebugView$2", function (TKey, TValue) { return {"att":1048832,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[4].ICollection$1(TValue)],"pi":[{"n":"collection","pt":$n[4].ICollection$1(TValue),"ps":0}],"sn":"ctor"},{"a":2,"n":"Items","t":16,"rt":System.Array.type(TValue),"g":{"a":2,"n":"get_Items","t":8,"rt":System.Array.type(TValue),"fg":"Items"},"fn":"Items"},{"a":1,"n":"_collection","t":4,"rt":$n[4].ICollection$1(TValue),"sn":"_collection","ro":true}]}; }, $n);
    $m("System.Collections.Generic.KeyNotFoundException", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String],"pi":[{"n":"message","pt":$n[0].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Exception],"pi":[{"n":"message","pt":$n[0].String,"ps":0},{"n":"innerException","pt":$n[0].Exception,"ps":1}],"sn":"$ctor2"}]}; }, $n);
    $m("System.Collections.Generic.BitHelper", function () { return {"att":1048832,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Int32),$n[0].Int32],"pi":[{"n":"bitArray","pt":$n[0].Array.type(System.Int32),"ps":0},{"n":"length","pt":$n[0].Int32,"ps":1}],"sn":"ctor"},{"a":4,"n":"IsMarked","t":8,"pi":[{"n":"bitPosition","pt":$n[0].Int32,"ps":0}],"sn":"IsMarked","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"MarkBit","t":8,"pi":[{"n":"bitPosition","pt":$n[0].Int32,"ps":0}],"sn":"MarkBit","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":4,"n":"ToIntArrayLength","is":true,"t":8,"pi":[{"n":"n","pt":$n[0].Int32,"ps":0}],"sn":"ToIntArrayLength","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"IntSize","is":true,"t":4,"rt":$n[0].Byte,"sn":"IntSize","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"MarkedBitFlag","is":true,"t":4,"rt":$n[0].Byte,"sn":"MarkedBitFlag","box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"_array","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"_array","ro":true},{"a":1,"n":"_length","t":4,"rt":$n[0].Int32,"sn":"_length","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.Dictionary$2", function (TKey, TValue) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IDictionary$2(TKey,TValue)],"pi":[{"n":"dictionary","pt":$n[4].IDictionary$2(TKey,TValue),"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEqualityComparer$1(TKey)],"pi":[{"n":"comparer","pt":$n[4].IEqualityComparer$1(TKey),"ps":0}],"def":function (comparer) { return new (System.Collections.Generic.Dictionary$2(TKey, TValue))(null, comparer); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"def":function (capacity) { return new (System.Collections.Generic.Dictionary$2(TKey, TValue))(); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Object],"pi":[{"n":"obj","pt":$n[0].Object,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IDictionary$2(TKey,TValue),$n[4].IEqualityComparer$1(TKey)],"pi":[{"n":"dictionary","pt":$n[4].IDictionary$2(TKey,TValue),"ps":0},{"n":"comparer","pt":$n[4].IEqualityComparer$1(TKey),"ps":1}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[4].IEqualityComparer$1(TKey)],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0},{"n":"comparer","pt":$n[4].IEqualityComparer$1(TKey),"ps":1}],"def":function (capacity, comparer) { return new (System.Collections.Generic.Dictionary$2(TKey, TValue))(null, comparer); }},{"a":2,"n":".ctor","t":1,"p":[$n[0].Object,$n[4].IEqualityComparer$1(TKey)],"pi":[{"n":"obj","pt":$n[0].Object,"ps":0},{"n":"comparer","pt":$n[4].IEqualityComparer$1(TKey),"ps":1}],"sn":"ctor"},{"a":2,"n":"Add","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","pt":TValue,"ps":1}],"sn":"add","rt":$n[0].Void,"p":[TKey,TValue]},{"a":2,"n":"Clear","t":8,"sn":"clear","rt":$n[0].Void},{"a":2,"n":"ContainsKey","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"containsKey","rt":$n[0].Boolean,"p":[TKey],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ContainsValue","t":8,"pi":[{"n":"value","pt":TValue,"ps":0}],"sn":"containsValue","rt":$n[0].Boolean,"p":[TValue],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Get","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"get","rt":TValue,"p":[TKey]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].IEnumerator$1(System.Collections.Generic.KeyValuePair$2(TKey,TValue))},{"a":1,"n":"IsCompatibleKey","is":true,"t":8,"pi":[{"n":"key","pt":$n[0].Object,"ps":0}],"sn":"isCompatibleKey","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"Items","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"items","rt":TValue,"p":[TKey]},{"a":2,"n":"Remove","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"remove","rt":$n[0].Boolean,"p":[TKey],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Set","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","pt":TValue,"ps":1}],"sn":"set","rt":$n[0].Void,"p":[TKey,TValue]},{"a":2,"n":"TryGetValue","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","out":true,"pt":TValue,"ps":1}],"sn":"tryGetValue","rt":$n[0].Boolean,"p":[TKey,TValue],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Comparer","t":16,"rt":$n[4].IEqualityComparer$1(TKey),"g":{"a":2,"n":"get_Comparer","t":8,"rt":$n[4].IEqualityComparer$1(TKey),"fg":"comparer"},"fn":"comparer"},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"count"},{"a":1,"n":"IsFixedSize","t":16,"rt":$n[0].Boolean,"g":{"a":1,"n":"get_IsFixedSize","t":8,"tpc":0,"def":function () { return this.false; },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":1,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":1,"n":"get_IsReadOnly","t":8,"tpc":0,"def":function () { return this.getIsReadOnly(); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}},{"a":2,"n":"Item","t":16,"rt":TValue,"p":[TKey],"i":true,"ipi":[{"n":"key","pt":TKey,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"get","rt":TValue,"p":[TKey]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","pt":TValue,"ps":1}],"sn":"set","rt":$n[0].Void,"p":[TKey,TValue]}},{"a":2,"n":"Keys","t":16,"rt":$n[4].ICollection$1(TKey),"g":{"a":2,"n":"get_Keys","t":8,"tpc":0,"def":function () { return this.getKeys(); },"rt":$n[4].ICollection$1(TKey)}},{"a":2,"n":"Values","t":16,"rt":$n[4].ICollection$1(TValue),"g":{"a":2,"n":"get_Values","t":8,"tpc":0,"def":function () { return this.getValues(); },"rt":$n[4].ICollection$1(TValue)}}]}; }, $n);
    $m("Bridge.Collections.EnumerableHelpers", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"ToArray","is":true,"t":8,"pi":[{"n":"source","pt":$n[4].IEnumerable$1(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"ToArray","rt":System.Array.type(System.Object),"p":[$n[4].IEnumerable$1(System.Object)]},{"a":4,"n":"ToArray","is":true,"t":8,"pi":[{"n":"source","pt":$n[4].IEnumerable$1(System.Object),"ps":0},{"n":"length","out":true,"pt":$n[0].Int32,"ps":1}],"tpc":1,"tprm":["T"],"sn":"ToArray$1","rt":System.Array.type(System.Object),"p":[$n[4].IEnumerable$1(System.Object),$n[0].Int32]}]}; }, $n);
    $m("System.Collections.Generic.IDictionary$2", function (TKey, TValue) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Add","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","pt":TValue,"ps":1}],"sn":"System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$add","rt":$n[0].Void,"p":[TKey,TValue]},{"ab":true,"a":2,"n":"ContainsKey","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$containsKey","rt":$n[0].Boolean,"p":[TKey],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Remove","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$remove","rt":$n[0].Boolean,"p":[TKey],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"TryGetValue","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","out":true,"pt":TValue,"ps":1}],"sn":"System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$tryGetValue","rt":$n[0].Boolean,"p":[TKey,TValue],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Item","t":16,"rt":TValue,"p":[TKey],"i":true,"ipi":[{"n":"key","pt":TKey,"ps":0}],"g":{"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getItem","rt":TValue,"p":[TKey]},"s":{"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","pt":TValue,"ps":1}],"sn":"System$Collections$Generic$IDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$setItem","rt":$n[0].Void,"p":[TKey,TValue]}},{"ab":true,"a":2,"n":"Keys","t":16,"rt":$n[4].ICollection$1(TKey),"g":{"ab":true,"a":2,"n":"get_Keys","t":8,"rt":$n[4].ICollection$1(TKey),"fg":"\"System$Collections$Generic$IDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Keys\""},"fn":"\"System$Collections$Generic$IDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Keys\""},{"ab":true,"a":2,"n":"Values","t":16,"rt":$n[4].ICollection$1(TValue),"g":{"ab":true,"a":2,"n":"get_Values","t":8,"rt":$n[4].ICollection$1(TValue),"fg":"\"System$Collections$Generic$IDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Values\""},"fn":"\"System$Collections$Generic$IDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Values\""}]}; }, $n);
    $m("System.Collections.Generic.IReadOnlyDictionary$2", function (TKey, TValue) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"ContainsKey","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$containsKey","rt":$n[0].Boolean,"p":[TKey],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"TryGetValue","t":8,"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","out":true,"pt":TValue,"ps":1}],"sn":"System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$tryGetValue","rt":$n[0].Boolean,"p":[TKey,TValue],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Item","t":16,"rt":TValue,"p":[TKey],"i":true,"ipi":[{"n":"key","pt":TKey,"ps":0}],"g":{"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"key","pt":TKey,"ps":0}],"sn":"System$Collections$Generic$IReadOnlyDictionary$2$" + Bridge.getTypeAlias(TKey) + "$" + Bridge.getTypeAlias(TValue) + "$getItem","rt":TValue,"p":[TKey]}},{"ab":true,"a":2,"n":"Keys","t":16,"rt":$n[4].IEnumerable$1(TKey),"g":{"ab":true,"a":2,"n":"get_Keys","t":8,"rt":$n[4].IEnumerable$1(TKey),"fg":"\"System$Collections$Generic$IReadOnlyDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Keys\""},"fn":"\"System$Collections$Generic$IReadOnlyDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Keys\""},{"ab":true,"a":2,"n":"Values","t":16,"rt":$n[4].IEnumerable$1(TValue),"g":{"ab":true,"a":2,"n":"get_Values","t":8,"rt":$n[4].IEnumerable$1(TValue),"fg":"\"System$Collections$Generic$IReadOnlyDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Values\""},"fn":"\"System$Collections$Generic$IReadOnlyDictionary$2$\" + Bridge.getTypeAlias(TKey) + \"$\" + Bridge.getTypeAlias(TValue) + \"$Values\""}]}; }, $n);
    $m("System.Collections.Generic.IReadOnlyCollection$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"ab":true,"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return System.Array.getCount(this, T); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}}]}; }, $n);
    $m("System.Collections.Generic.Queue$1", function (T) { return {"nested":[$n[4].Queue$1.Enumerator],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEnumerable$1(T)],"pi":[{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"sn":"$ctor2"},{"a":2,"n":"Clear","t":8,"sn":"Clear","rt":$n[0].Void},{"a":2,"n":"Contains","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"Contains","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"CopyTo","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"a":2,"n":"Dequeue","t":8,"sn":"Dequeue","rt":T},{"a":2,"n":"Enqueue","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"Enqueue","rt":$n[0].Void,"p":[T]},{"a":1,"n":"GetElement","t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0}],"sn":"GetElement","rt":T,"p":[$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].Queue$1.Enumerator(T)},{"a":1,"n":"MoveNext","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"MoveNext","rt":$n[0].Int32,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Peek","t":8,"sn":"Peek","rt":T},{"a":1,"n":"SetCapacity","t":8,"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"sn":"SetCapacity","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"ToArray","t":8,"sn":"ToArray","rt":System.Array.type(T)},{"a":2,"n":"TrimExcess","t":8,"sn":"TrimExcess","rt":$n[0].Void},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReadOnly"},{"a":1,"n":"DefaultCapacity","is":true,"t":4,"rt":$n[0].Int32,"sn":"DefaultCapacity","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"GrowFactor","is":true,"t":4,"rt":$n[0].Int32,"sn":"GrowFactor","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"MinimumGrow","is":true,"t":4,"rt":$n[0].Int32,"sn":"MinimumGrow","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_array","t":4,"rt":System.Array.type(T),"sn":"_array"},{"a":1,"n":"_head","t":4,"rt":$n[0].Int32,"sn":"_head","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_size","t":4,"rt":$n[0].Int32,"sn":"_size","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_tail","t":4,"rt":$n[0].Int32,"sn":"_tail","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.Queue$1.Enumerator", function (T) { return {"td":$n[4].Queue$1(T),"att":1048842,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[4].Queue$1(T)],"pi":[{"n":"q","pt":$n[4].Queue$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Current","t":16,"rt":T,"g":{"a":2,"n":"get_Current","t":8,"rt":T,"fg":"Current"},"fn":"Current"},{"a":1,"n":"_currentElement","t":4,"rt":T,"sn":"_currentElement"},{"a":1,"n":"_index","t":4,"rt":$n[0].Int32,"sn":"_index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_q","t":4,"rt":$n[4].Queue$1(T),"sn":"_q"},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.Stack$1", function (T) { return {"nested":[$n[4].Stack$1.Enumerator],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEnumerable$1(T)],"pi":[{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"sn":"$ctor2"},{"a":2,"n":"Clear","t":8,"sn":"Clear","rt":$n[0].Void},{"a":2,"n":"Contains","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"Contains","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":Array,"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[Array,$n[0].Int32]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"CopyTo","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].Stack$1.Enumerator(T)},{"a":2,"n":"Peek","t":8,"sn":"Peek","rt":T},{"a":2,"n":"Pop","t":8,"sn":"Pop","rt":T},{"a":2,"n":"Push","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"Push","rt":$n[0].Void,"p":[T]},{"a":2,"n":"ToArray","t":8,"sn":"ToArray","rt":System.Array.type(T)},{"a":2,"n":"TrimExcess","t":8,"sn":"TrimExcess","rt":$n[0].Void},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsReadOnly","t":8,"rt":$n[0].Boolean,"fg":"IsReadOnly","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsReadOnly"},{"a":1,"n":"DefaultCapacity","is":true,"t":4,"rt":$n[0].Int32,"sn":"DefaultCapacity","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_array","t":4,"rt":System.Array.type(T),"sn":"_array"},{"a":1,"n":"_size","t":4,"rt":$n[0].Int32,"sn":"_size","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.Stack$1.Enumerator", function (T) { return {"td":$n[4].Stack$1(T),"att":1048842,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[4].Stack$1(T)],"pi":[{"n":"stack","pt":$n[4].Stack$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Current","t":16,"rt":T,"g":{"a":2,"n":"get_Current","t":8,"rt":T,"fg":"Current"},"fn":"Current"},{"a":1,"n":"_currentElement","t":4,"rt":T,"sn":"_currentElement"},{"a":1,"n":"_index","t":4,"rt":$n[0].Int32,"sn":"_index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_stack","t":4,"rt":$n[4].Stack$1(T),"sn":"_stack"},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.IReadOnlyList$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Item","t":16,"rt":T,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (index) { return System.Array.getItem(this, index, T); },"rt":T,"p":[$n[0].Int32]}}]}; }, $n);
    $m("System.Collections.Generic.IList$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"IndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"tpc":0,"def":function (item) { return System.Array.indexOf(this, item, 0, null, T); },"rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ab":true,"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"item","pt":T,"ps":1}],"tpc":0,"def":function (index, item) { return System.Array.insert(this, index, item, T); },"rt":$n[0].Void,"p":[$n[0].Int32,T]},{"ab":true,"a":2,"n":"RemoveAt","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (index) { return System.Array.removeAt(this, index, T); },"rt":$n[0].Void,"p":[$n[0].Int32]},{"ab":true,"a":2,"n":"Item","t":16,"rt":T,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"ab":true,"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"tpc":0,"def":function (index) { return System.Array.getItem(this, index, T); },"rt":T,"p":[$n[0].Int32]},"s":{"ab":true,"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":T,"ps":1}],"tpc":0,"def":function (index, value) { return System.Array.setItem(this, index, value, T); },"rt":$n[0].Void,"p":[$n[0].Int32,T]}}]}; }, $n);
    $m("System.Collections.Generic.ISet$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Add","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$add","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"ExceptWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$exceptWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"ab":true,"a":2,"n":"IntersectWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$intersectWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"ab":true,"a":2,"n":"IsProperSubsetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isProperSubsetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsProperSupersetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isProperSupersetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsSubsetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isSubsetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"IsSupersetOf","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$isSupersetOf","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Overlaps","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$overlaps","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"SetEquals","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$setEquals","rt":$n[0].Boolean,"p":[$n[4].IEnumerable$1(T)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"SymmetricExceptWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$symmetricExceptWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"ab":true,"a":2,"n":"UnionWith","t":8,"pi":[{"n":"other","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"System$Collections$Generic$ISet$1$" + Bridge.getTypeAlias(T) + "$unionWith","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]}]}; }, $n);
    $m("System.Collections.Generic.ICollection$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Add","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"tpc":0,"def":function (item) { return System.Array.add(this, item, T); },"rt":$n[0].Void,"p":[T]},{"ab":true,"a":2,"n":"Clear","t":8,"tpc":0,"def":function () { return System.Array.clear(this, T); },"rt":$n[0].Void},{"ab":true,"a":2,"n":"Contains","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"tpc":0,"def":function (item) { return System.Array.contains(this, item, T); },"rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"tpc":0,"def":function (array, arrayIndex) { return System.Array.copyTo(this, array, arrayIndex, T); },"rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"ab":true,"a":2,"n":"Remove","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"tpc":0,"def":function (item) { return System.Array.remove(this, item, T); },"rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"ab":true,"a":2,"n":"get_Count","t":8,"tpc":0,"def":function () { return System.Array.getCount(this, T); },"rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}}},{"ab":true,"a":2,"n":"IsReadOnly","t":16,"rt":$n[0].Boolean,"g":{"ab":true,"a":2,"n":"get_IsReadOnly","t":8,"tpc":0,"def":function () { return System.Array.getIsReadOnly(this, T); },"rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}}]}; }, $n);
    $m("System.Collections.Generic.IEnumerable$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetEnumerator","t":8,"tpc":0,"def":function () { return Bridge.getEnumerator(this, T); },"rt":$n[4].IEnumerator$1(T)}]}; }, $n);
    $m("System.Collections.Generic.IEqualityComparer$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"x","pt":T,"ps":0},{"n":"y","pt":T,"ps":1}],"sn":"System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$equals2","rt":$n[0].Boolean,"p":[T,T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"GetHashCode","t":8,"pi":[{"n":"obj","pt":T,"ps":0}],"sn":"System$Collections$Generic$IEqualityComparer$1$" + Bridge.getTypeAlias(T) + "$getHashCode2","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.EqualityComparer$1", function (T) { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"x","pt":T,"ps":0},{"n":"y","pt":T,"ps":1}],"sn":"equals2","rt":$n[0].Boolean,"p":[T,T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"GetHashCode","t":8,"pi":[{"n":"obj","pt":T,"ps":0}],"sn":"getHashCode2","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Default","is":true,"t":16,"rt":$n[4].EqualityComparer$1(T),"g":{"a":2,"n":"get_Default","is":true,"t":8,"tpc":0,"def":function () { return System.Collections.Generic.EqualityComparer$1(T).def; },"rt":$n[4].EqualityComparer$1(T)}}]}; }, $n);
    $m("System.Collections.Generic.KeyValuePair$2", function (TKey, TValue) { return {"att":1057033,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[TKey,TValue],"pi":[{"n":"key","pt":TKey,"ps":0},{"n":"value","pt":TValue,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"Deconstruct","t":8,"pi":[{"n":"key","out":true,"pt":TKey,"ps":0},{"n":"value","out":true,"pt":TValue,"ps":1}],"sn":"Deconstruct","rt":$n[0].Void,"p":[TKey,TValue]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"Key","t":16,"rt":TKey,"g":{"a":2,"n":"get_Key","t":8,"rt":TKey,"fg":"key"},"fn":"key"},{"a":2,"n":"Value","t":16,"rt":TValue,"g":{"a":2,"n":"get_Value","t":8,"rt":TValue,"fg":"value"},"fn":"value"},{"a":1,"n":"key","t":4,"rt":TKey,"sn":"key$1"},{"a":1,"n":"value","t":4,"rt":TValue,"sn":"value$1"}]}; }, $n);
    $m("System.Collections.Generic.List$1", function (T) { return {"nested":[$n[4].List$1.Enumerator],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[4].IEnumerable$1(T)],"pi":[{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32],"pi":[{"n":"capacity","pt":$n[0].Int32,"ps":0}],"sn":"$ctor2"},{"a":2,"n":"Add","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"add","rt":$n[0].Void,"p":[T]},{"a":2,"n":"AddRange","t":8,"pi":[{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":0}],"sn":"AddRange","rt":$n[0].Void,"p":[$n[4].IEnumerable$1(T)]},{"a":2,"n":"AsReadOnly","t":8,"sn":"AsReadOnly","rt":$n[5].ReadOnlyCollection$1(T)},{"a":2,"n":"BinarySearch","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"BinarySearch","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"BinarySearch","t":8,"pi":[{"n":"item","pt":T,"ps":0},{"n":"comparer","pt":$n[4].IComparer$1(T),"ps":1}],"sn":"BinarySearch$1","rt":$n[0].Int32,"p":[T,$n[4].IComparer$1(T)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"BinarySearch","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"item","pt":T,"ps":2},{"n":"comparer","pt":$n[4].IComparer$1(T),"ps":3}],"sn":"BinarySearch$2","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,T,$n[4].IComparer$1(T)],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Clear","t":8,"sn":"clear","rt":$n[0].Void},{"a":2,"n":"Contains","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"contains","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ConvertAll","t":8,"pi":[{"n":"converter","pt":Function,"ps":0}],"tpc":1,"tprm":["TOutput"],"sn":"ConvertAll","rt":$n[4].List$1(System.Object),"p":[Function]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0}],"sn":"CopyTo","rt":$n[0].Void,"p":[System.Array.type(T)]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"array","pt":System.Array.type(T),"ps":0},{"n":"arrayIndex","pt":$n[0].Int32,"ps":1}],"sn":"copyTo","rt":$n[0].Void,"p":[System.Array.type(T),$n[0].Int32]},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"array","pt":System.Array.type(T),"ps":1},{"n":"arrayIndex","pt":$n[0].Int32,"ps":2},{"n":"count","pt":$n[0].Int32,"ps":3}],"sn":"CopyTo$1","rt":$n[0].Void,"p":[$n[0].Int32,System.Array.type(T),$n[0].Int32,$n[0].Int32]},{"a":1,"n":"EnsureCapacity","t":8,"pi":[{"n":"min","pt":$n[0].Int32,"ps":0}],"sn":"EnsureCapacity","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"Exists","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"Exists","rt":$n[0].Boolean,"p":[Function],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Find","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"Find","rt":T,"p":[Function]},{"a":2,"n":"FindAll","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"FindAll","rt":$n[4].List$1(T),"p":[Function]},{"a":2,"n":"FindIndex","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"FindIndex$2","rt":$n[0].Int32,"p":[Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FindIndex","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"match","pt":Function,"ps":1}],"sn":"FindIndex$1","rt":$n[0].Int32,"p":[$n[0].Int32,Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FindIndex","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"match","pt":Function,"ps":2}],"sn":"FindIndex","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FindLast","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"FindLast","rt":T,"p":[Function]},{"a":2,"n":"FindLastIndex","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"FindLastIndex$2","rt":$n[0].Int32,"p":[Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FindLastIndex","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"match","pt":Function,"ps":1}],"sn":"FindLastIndex$1","rt":$n[0].Int32,"p":[$n[0].Int32,Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FindLastIndex","t":8,"pi":[{"n":"startIndex","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"match","pt":Function,"ps":2}],"sn":"FindLastIndex","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32,Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ForEach","t":8,"pi":[{"n":"action","pt":Function,"ps":0}],"sn":"ForEach","rt":$n[0].Void,"p":[Function]},{"a":2,"n":"GetEnumerator","t":8,"sn":"GetEnumerator","rt":$n[4].List$1.Enumerator(T)},{"a":2,"n":"GetRange","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"sn":"GetRange","rt":$n[4].List$1(T),"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"indexOf","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"IndexOf","rt":$n[0].Int32,"p":[T,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"IndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"IndexOf$1","rt":$n[0].Int32,"p":[T,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Insert","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"item","pt":T,"ps":1}],"sn":"insert","rt":$n[0].Void,"p":[$n[0].Int32,T]},{"a":2,"n":"InsertRange","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"collection","pt":$n[4].IEnumerable$1(T),"ps":1}],"sn":"InsertRange","rt":$n[0].Void,"p":[$n[0].Int32,$n[4].IEnumerable$1(T)]},{"a":1,"n":"IsCompatibleObject","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Object,"ps":0}],"sn":"IsCompatibleObject","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"LastIndexOf","rt":$n[0].Int32,"p":[T],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1}],"sn":"LastIndexOf$1","rt":$n[0].Int32,"p":[T,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LastIndexOf","t":8,"pi":[{"n":"item","pt":T,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"LastIndexOf$2","rt":$n[0].Int32,"p":[T,$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Remove","t":8,"pi":[{"n":"item","pt":T,"ps":0}],"sn":"remove","rt":$n[0].Boolean,"p":[T],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"RemoveAll","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"RemoveAll","rt":$n[0].Int32,"p":[Function],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"RemoveAt","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"removeAt","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"RemoveRange","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"sn":"RemoveRange","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Reverse","t":8,"sn":"Reverse","rt":$n[0].Void},{"a":2,"n":"Reverse","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1}],"sn":"Reverse$1","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Sort","t":8,"sn":"Sort","rt":$n[0].Void},{"a":2,"n":"Sort","t":8,"pi":[{"n":"comparer","pt":$n[4].IComparer$1(T),"ps":0}],"sn":"Sort$1","rt":$n[0].Void,"p":[$n[4].IComparer$1(T)]},{"a":2,"n":"Sort","t":8,"pi":[{"n":"comparison","pt":Function,"ps":0}],"sn":"Sort$2","rt":$n[0].Void,"p":[Function]},{"a":2,"n":"Sort","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"count","pt":$n[0].Int32,"ps":1},{"n":"comparer","pt":$n[4].IComparer$1(T),"ps":2}],"sn":"Sort$3","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32,$n[4].IComparer$1(T)]},{"a":2,"n":"ToArray","t":8,"sn":"ToArray","rt":System.Array.type(T)},{"a":2,"n":"TrimExcess","t":8,"sn":"TrimExcess","rt":$n[0].Void},{"a":2,"n":"TrueForAll","t":8,"pi":[{"n":"match","pt":Function,"ps":0}],"sn":"TrueForAll","rt":$n[0].Boolean,"p":[Function],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"toJSON","t":8,"sn":"toJSON","rt":$n[0].Object},{"a":2,"n":"Capacity","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Capacity","t":8,"rt":$n[0].Int32,"fg":"Capacity","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Capacity","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"Capacity"},"fn":"Capacity"},{"a":2,"n":"Count","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Count","t":8,"rt":$n[0].Int32,"fg":"Count","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Count"},{"a":2,"n":"Item","t":16,"rt":T,"p":[$n[0].Int32],"i":true,"ipi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"g":{"a":2,"n":"get_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0}],"sn":"getItem","rt":T,"p":[$n[0].Int32]},"s":{"a":2,"n":"set_Item","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"value","pt":T,"ps":1}],"sn":"setItem","rt":$n[0].Void,"p":[$n[0].Int32,T]}},{"a":1,"n":"_defaultCapacity","is":true,"t":4,"rt":$n[0].Int32,"sn":"_defaultCapacity","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_emptyArray","is":true,"t":4,"rt":System.Array.type(T),"sn":"_emptyArray","ro":true},{"a":1,"n":"_items","t":4,"rt":System.Array.type(T),"sn":"_items"},{"a":1,"n":"_size","t":4,"rt":$n[0].Int32,"sn":"_size","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_version","t":4,"rt":$n[0].Int32,"sn":"_version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("System.Collections.Generic.List$1.Enumerator", function (T) { return {"td":$n[4].List$1(T),"att":1057034,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[4].List$1(T)],"pi":[{"n":"list","pt":$n[4].List$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[0].Void},{"a":2,"n":"MoveNext","t":8,"sn":"moveNext","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"MoveNextRare","t":8,"sn":"MoveNextRare","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Current","t":16,"rt":T,"g":{"a":2,"n":"get_Current","t":8,"rt":T,"fg":"Current"},"fn":"Current"},{"a":1,"n":"current","t":4,"rt":T,"sn":"current"},{"a":1,"n":"index","t":4,"rt":$n[0].Int32,"sn":"index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"list","t":4,"rt":$n[4].List$1(T),"sn":"list"},{"a":1,"n":"version","t":4,"rt":$n[0].Int32,"sn":"version","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Bridge.Ref$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[Function,Function],"pi":[{"n":"getter","pt":Function,"ps":0},{"n":"setter","pt":Function,"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"ov":true,"a":2,"n":"ValueOf","t":8,"sn":"valueOf","rt":$n[0].Object},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"reference","pt":$n[15].Ref$1(T),"ps":0}],"sn":"op_Implicit","rt":T,"p":[$n[15].Ref$1(T)]},{"a":2,"n":"Value","t":16,"rt":T,"g":{"a":2,"n":"get_Value","t":8,"rt":T,"fg":"Value"},"s":{"a":2,"n":"set_Value","t":8,"p":[T],"rt":$n[0].Void,"fs":"Value"},"fn":"Value"},{"a":1,"n":"v","t":16,"rt":T,"g":{"a":1,"n":"get_v","t":8,"rt":T,"fg":"v"},"s":{"a":1,"n":"set_v","t":8,"p":[T],"rt":$n[0].Void,"fs":"v"},"fn":"v"},{"a":1,"n":"getter","t":4,"rt":Function,"sn":"getter"},{"a":1,"n":"setter","t":4,"rt":Function,"sn":"setter"}]}; }, $n);
    $m("Bridge.Utils.SystemAssemblyVersion", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Version","is":true,"t":8,"sn":"Version","rt":$n[0].Void}]}; }, $n);
/**
 * @version 1.0.0.0
 * @copyright Copyright ©  2018
 * @compiler Bridge.NET 17.2.0
 */
Bridge.assembly("PhantasmaBridge", function ($asm, globals) {
    "use strict";

    Bridge.define("Phantasma.Cryptography.Array16$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Phantasma.Cryptography.Array16$1(T))(); }
            }
        },
        fields: {
            x0: Bridge.getDefaultValue(T),
            x1: Bridge.getDefaultValue(T),
            x2: Bridge.getDefaultValue(T),
            x3: Bridge.getDefaultValue(T),
            x4: Bridge.getDefaultValue(T),
            x5: Bridge.getDefaultValue(T),
            x6: Bridge.getDefaultValue(T),
            x7: Bridge.getDefaultValue(T),
            x8: Bridge.getDefaultValue(T),
            x9: Bridge.getDefaultValue(T),
            x10: Bridge.getDefaultValue(T),
            x11: Bridge.getDefaultValue(T),
            x12: Bridge.getDefaultValue(T),
            x13: Bridge.getDefaultValue(T),
            x14: Bridge.getDefaultValue(T),
            x15: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1638441914, this.x0, this.x1, this.x2, this.x3, this.x4, this.x5, this.x6, this.x7, this.x8, this.x9, this.x10, this.x11, this.x12, this.x13, this.x14, this.x15]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.Array16$1(T))) {
                    return false;
                }
                return Bridge.equals(this.x0, o.x0) && Bridge.equals(this.x1, o.x1) && Bridge.equals(this.x2, o.x2) && Bridge.equals(this.x3, o.x3) && Bridge.equals(this.x4, o.x4) && Bridge.equals(this.x5, o.x5) && Bridge.equals(this.x6, o.x6) && Bridge.equals(this.x7, o.x7) && Bridge.equals(this.x8, o.x8) && Bridge.equals(this.x9, o.x9) && Bridge.equals(this.x10, o.x10) && Bridge.equals(this.x11, o.x11) && Bridge.equals(this.x12, o.x12) && Bridge.equals(this.x13, o.x13) && Bridge.equals(this.x14, o.x14) && Bridge.equals(this.x15, o.x15);
            },
            $clone: function (to) {
                var s = to || new (Phantasma.Cryptography.Array16$1(T))();
                s.x0 = this.x0;
                s.x1 = this.x1;
                s.x2 = this.x2;
                s.x3 = this.x3;
                s.x4 = this.x4;
                s.x5 = this.x5;
                s.x6 = this.x6;
                s.x7 = this.x7;
                s.x8 = this.x8;
                s.x9 = this.x9;
                s.x10 = this.x10;
                s.x11 = this.x11;
                s.x12 = this.x12;
                s.x13 = this.x13;
                s.x14 = this.x14;
                s.x15 = this.x15;
                return s;
            }
        }
    }; });

    Bridge.define("Phantasma.Cryptography.Array8$1", function (T) { return {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new (Phantasma.Cryptography.Array8$1(T))(); }
            }
        },
        fields: {
            x0: Bridge.getDefaultValue(T),
            x1: Bridge.getDefaultValue(T),
            x2: Bridge.getDefaultValue(T),
            x3: Bridge.getDefaultValue(T),
            x4: Bridge.getDefaultValue(T),
            x5: Bridge.getDefaultValue(T),
            x6: Bridge.getDefaultValue(T),
            x7: Bridge.getDefaultValue(T)
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1634904762, this.x0, this.x1, this.x2, this.x3, this.x4, this.x5, this.x6, this.x7]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.Array8$1(T))) {
                    return false;
                }
                return Bridge.equals(this.x0, o.x0) && Bridge.equals(this.x1, o.x1) && Bridge.equals(this.x2, o.x2) && Bridge.equals(this.x3, o.x3) && Bridge.equals(this.x4, o.x4) && Bridge.equals(this.x5, o.x5) && Bridge.equals(this.x6, o.x6) && Bridge.equals(this.x7, o.x7);
            },
            $clone: function (to) {
                var s = to || new (Phantasma.Cryptography.Array8$1(T))();
                s.x0 = this.x0;
                s.x1 = this.x1;
                s.x2 = this.x2;
                s.x3 = this.x3;
                s.x4 = this.x4;
                s.x5 = this.x5;
                s.x6 = this.x6;
                s.x7 = this.x7;
                return s;
            }
        }
    }; });

    Bridge.define("Phantasma.Cryptography.Base58", {
        statics: {
            fields: {
                Alphabet: null
            },
            ctors: {
                init: function () {
                    this.Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
                }
            },
            methods: {
                Decode: function (input) {
                    var bi = System.Numerics.BigInteger.Zero;
                    for (var i = (input.length - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        var index = System.String.indexOf(Phantasma.Cryptography.Base58.Alphabet, String.fromCharCode(input.charCodeAt(i)));
                        if (index === -1) {
                            throw new System.FormatException.ctor();
                        }
                        bi = System.Numerics.BigInteger.op_Addition(bi, System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger.op_Implicit(index), System.Numerics.BigInteger.Pow(System.Numerics.BigInteger.op_Implicit(58), System.Numerics.BigInteger.op_Implicit(((((input.length - 1) | 0) - i) | 0)))));
                    }
                    var bytes = bi.ToByteArray();
                    System.Array.reverse(bytes);
                    var stripSignByte = bytes.length > 1 && bytes[System.Array.index(0, bytes)] === 0 && bytes[System.Array.index(1, bytes)] >= 128;
                    var leadingZeros = 0;
                    for (var i1 = 0; i1 < input.length && input.charCodeAt(i1) === Phantasma.Cryptography.Base58.Alphabet.charCodeAt(0); i1 = (i1 + 1) | 0) {
                        leadingZeros = (leadingZeros + 1) | 0;
                    }
                    var tmp = System.Array.init(((((bytes.length - (stripSignByte ? 1 : 0)) | 0) + leadingZeros) | 0), 0, System.Byte);
                    System.Array.copy(bytes, stripSignByte ? 1 : 0, tmp, leadingZeros, ((tmp.length - leadingZeros) | 0));
                    return tmp;
                },
                Encode: function (input) {
                    var $t;
                    var temp = System.Array.init(((input.length + 1) | 0), 0, System.Byte);
                    for (var i = 0; i < input.length; i = (i + 1) | 0) {
                        temp[System.Array.index(i, temp)] = input[System.Array.index((((((input.length - 1) | 0)) - i) | 0), input)];
                    }
                    temp[System.Array.index(input.length, temp)] = 0;

                    var value = new System.Numerics.BigInteger.$ctor1(temp);
                    var sb = new System.Text.StringBuilder();
                    while (System.Numerics.BigInteger.op_GreaterThanOrEqual(value, System.Numerics.BigInteger.op_Implicit(58))) {
                        var mod = System.Numerics.BigInteger.op_Modulus(value, System.Numerics.BigInteger.op_Implicit(58));
                        sb.insert(0, String.fromCharCode(Phantasma.Cryptography.Base58.Alphabet.charCodeAt(System.Numerics.BigInteger.op_Explicit(mod))));
                        value = System.Numerics.BigInteger.op_Division(value, System.Numerics.BigInteger.op_Implicit(58));
                    }
                    sb.insert(0, String.fromCharCode(Phantasma.Cryptography.Base58.Alphabet.charCodeAt(System.Numerics.BigInteger.op_Explicit(value))));
                    $t = Bridge.getEnumerator(input);
                    try {
                        while ($t.moveNext()) {
                            var b = $t.Current;
                            if (b === 0) {
                                sb.insert(0, String.fromCharCode(Phantasma.Cryptography.Base58.Alphabet.charCodeAt(0)));
                            } else {
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }return sb.toString();
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.ByteIntegerConverter", {
        statics: {
            methods: {
                LoadLittleEndian32: function (buf, offset) {
                    return (((((((buf[System.Array.index(((offset + 0) | 0), buf)]) | (((buf[System.Array.index(((offset + 1) | 0), buf)] << 8) >>> 0))) >>> 0) | (((buf[System.Array.index(((offset + 2) | 0), buf)] << 16) >>> 0))) >>> 0) | (((buf[System.Array.index(((offset + 3) | 0), buf)] << 24) >>> 0))) >>> 0);
                },
                StoreLittleEndian32: function (buf, offset, value) {
                    buf[System.Array.index(((offset + 0) | 0), buf)] = (value & 255);
                    buf[System.Array.index(((offset + 1) | 0), buf)] = ((value >>> 8) & 255);
                    buf[System.Array.index(((offset + 2) | 0), buf)] = ((value >>> 16) & 255);
                    buf[System.Array.index(((offset + 3) | 0), buf)] = ((value >>> 24) & 255);
                },
                LoadBigEndian64: function (buf, offset) {
                    return System.UInt64((buf[System.Array.index(((offset + 7) | 0), buf)])).or((System.UInt64(buf[System.Array.index(((offset + 6) | 0), buf)]).shl(8))).or((System.UInt64(buf[System.Array.index(((offset + 5) | 0), buf)]).shl(16))).or((System.UInt64(buf[System.Array.index(((offset + 4) | 0), buf)]).shl(24))).or((System.UInt64(buf[System.Array.index(((offset + 3) | 0), buf)]).shl(32))).or((System.UInt64(buf[System.Array.index(((offset + 2) | 0), buf)]).shl(40))).or((System.UInt64(buf[System.Array.index(((offset + 1) | 0), buf)]).shl(48))).or((System.UInt64(buf[System.Array.index(((offset + 0) | 0), buf)]).shl(56)));
                },
                StoreBigEndian64: function (buf, offset, value) {
                    buf[System.Array.index(((offset + 7) | 0), buf)] = System.Int64.clipu8(value);
                    buf[System.Array.index(((offset + 6) | 0), buf)] = System.Int64.clipu8(value.shru(8));
                    buf[System.Array.index(((offset + 5) | 0), buf)] = System.Int64.clipu8(value.shru(16));
                    buf[System.Array.index(((offset + 4) | 0), buf)] = System.Int64.clipu8(value.shru(24));
                    buf[System.Array.index(((offset + 3) | 0), buf)] = System.Int64.clipu8(value.shru(32));
                    buf[System.Array.index(((offset + 2) | 0), buf)] = System.Int64.clipu8(value.shru(40));
                    buf[System.Array.index(((offset + 1) | 0), buf)] = System.Int64.clipu8(value.shru(48));
                    buf[System.Array.index(((offset + 0) | 0), buf)] = System.Int64.clipu8(value.shru(56));
                },
                Array8LoadLittleEndian32: function (output, input, inputOffset) {
                    output.v.x0 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 0) | 0));
                    output.v.x1 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 4) | 0));
                    output.v.x2 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 8) | 0));
                    output.v.x3 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 12) | 0));
                    output.v.x4 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 16) | 0));
                    output.v.x5 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 20) | 0));
                    output.v.x6 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 24) | 0));
                    output.v.x7 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 28) | 0));
                },
                Array16LoadBigEndian64: function (output, input, inputOffset) {
                    output.v.x0 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 0) | 0));
                    output.v.x1 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 8) | 0));
                    output.v.x2 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 16) | 0));
                    output.v.x3 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 24) | 0));
                    output.v.x4 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 32) | 0));
                    output.v.x5 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 40) | 0));
                    output.v.x6 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 48) | 0));
                    output.v.x7 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 56) | 0));
                    output.v.x8 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 64) | 0));
                    output.v.x9 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 72) | 0));
                    output.v.x10 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 80) | 0));
                    output.v.x11 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 88) | 0));
                    output.v.x12 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 96) | 0));
                    output.v.x13 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 104) | 0));
                    output.v.x14 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 112) | 0));
                    output.v.x15 = Phantasma.Cryptography.ByteIntegerConverter.LoadBigEndian64(input, ((inputOffset + 120) | 0));
                },
                Array16LoadLittleEndian32: function (output, input, inputOffset) {
                    output.v.x0 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 0) | 0));
                    output.v.x1 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 4) | 0));
                    output.v.x2 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 8) | 0));
                    output.v.x3 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 12) | 0));
                    output.v.x4 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 16) | 0));
                    output.v.x5 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 20) | 0));
                    output.v.x6 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 24) | 0));
                    output.v.x7 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 28) | 0));
                    output.v.x8 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 32) | 0));
                    output.v.x9 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 36) | 0));
                    output.v.x10 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 40) | 0));
                    output.v.x11 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 44) | 0));
                    output.v.x12 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 48) | 0));
                    output.v.x13 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 52) | 0));
                    output.v.x14 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 56) | 0));
                    output.v.x15 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(input, ((inputOffset + 60) | 0));
                },
                Array16StoreLittleEndian32: function (output, outputOffset, input) {
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 0) | 0), input.v.x0);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 4) | 0), input.v.x1);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 8) | 0), input.v.x2);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 12) | 0), input.v.x3);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 16) | 0), input.v.x4);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 20) | 0), input.v.x5);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 24) | 0), input.v.x6);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 28) | 0), input.v.x7);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 32) | 0), input.v.x8);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 36) | 0), input.v.x9);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 40) | 0), input.v.x10);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 44) | 0), input.v.x11);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 48) | 0), input.v.x12);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 52) | 0), input.v.x13);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 56) | 0), input.v.x14);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 60) | 0), input.v.x15);
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.CryptoBytes", {
        statics: {
            methods: {
                ConstantTimeEquals$1: function (x, y) {
                    if (x == null) {
                        throw new System.ArgumentNullException.$ctor1("x");
                    }
                    if (y == null) {
                        throw new System.ArgumentNullException.$ctor1("y");
                    }
                    if (x.length !== y.length) {
                        throw new System.ArgumentException.$ctor1("x.Length must equal y.Length");
                    }
                    return Phantasma.Cryptography.CryptoBytes.InternalConstantTimeEquals(x, 0, y, 0, x.length) !== 0;
                },
                ConstantTimeEquals: function (x, y) {
                    if (x.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("x.Array");
                    }
                    if (y.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("y.Array");
                    }
                    if (x.getCount() !== y.getCount()) {
                        throw new System.ArgumentException.$ctor1("x.Count must equal y.Count");
                    }

                    return Phantasma.Cryptography.CryptoBytes.InternalConstantTimeEquals(x.getArray(), x.getOffset(), y.getArray(), y.getOffset(), x.getCount()) !== 0;
                },
                ConstantTimeEquals$2: function (x, xOffset, y, yOffset, length) {
                    if (x == null) {
                        throw new System.ArgumentNullException.$ctor1("x");
                    }
                    if (xOffset < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("xOffset", "xOffset < 0");
                    }
                    if (y == null) {
                        throw new System.ArgumentNullException.$ctor1("y");
                    }
                    if (yOffset < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("yOffset", "yOffset < 0");
                    }
                    if (length < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("length", "length < 0");
                    }
                    if (((x.length - xOffset) | 0) < length) {
                        throw new System.ArgumentException.$ctor1("xOffset + length > x.Length");
                    }
                    if (((y.length - yOffset) | 0) < length) {
                        throw new System.ArgumentException.$ctor1("yOffset + length > y.Length");
                    }

                    return Phantasma.Cryptography.CryptoBytes.InternalConstantTimeEquals(x, xOffset, y, yOffset, length) !== 0;
                },
                InternalConstantTimeEquals: function (x, xOffset, y, yOffset, length) {
                    var differentbits = 0;
                    for (var i = 0; i < length; i = (i + 1) | 0) {
                        differentbits = differentbits | (x[System.Array.index(((xOffset + i) | 0), x)] ^ y[System.Array.index(((yOffset + i) | 0), y)]);
                    }
                    return (((1 & ((((differentbits >>> 0) - 1) >>> 0) >>> 8)) >>> 0));
                },
                Wipe$1: function (data) {
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }
                    Phantasma.Cryptography.CryptoBytes.InternalWipe(data, 0, data.length);
                },
                Wipe$2: function (data, offset, count) {
                    if (data == null) {
                        throw new System.ArgumentNullException.$ctor1("data");
                    }
                    if (offset < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor1("offset");
                    }
                    if (count < 0) {
                        throw new System.ArgumentOutOfRangeException.$ctor4("count", "Requires count >= 0");
                    }
                    if ((((offset >>> 0) + (count >>> 0)) >>> 0) > ((data.length) >>> 0)) {
                        throw new System.ArgumentException.$ctor1("Requires offset + count <= data.Length");
                    }
                    Phantasma.Cryptography.CryptoBytes.InternalWipe(data, offset, count);
                },
                Wipe: function (data) {
                    if (data.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("data.Array");
                    }
                    Phantasma.Cryptography.CryptoBytes.InternalWipe(data.getArray(), data.getOffset(), data.getCount());
                },
                InternalWipe: function (data, offset, count) {
                    System.Array.fill(data, 0, offset, count);
                },
                InternalWipe$1: function (T, data) {
                    data.v = Bridge.getDefaultValue(T);
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.Ed25519", {
        statics: {
            fields: {
                PublicKeySizeInBytes: 0,
                SignatureSizeInBytes: 0,
                ExpandedPrivateKeySizeInBytes: 0,
                PrivateKeySeedSizeInBytes: 0,
                SharedKeySizeInBytes: 0,
                _zero16: null
            },
            ctors: {
                init: function () {
                    this.PublicKeySizeInBytes = 32;
                    this.SignatureSizeInBytes = 64;
                    this.ExpandedPrivateKeySizeInBytes = 64;
                    this.PrivateKeySeedSizeInBytes = 32;
                    this.SharedKeySizeInBytes = 32;
                    this._zero16 = System.Array.init(16, 0, System.Byte);
                }
            },
            methods: {
                Verify: function (signature, message, publicKey) {
                    if (signature.getCount() !== Phantasma.Cryptography.Ed25519.SignatureSizeInBytes) {
                        throw new System.ArgumentException.$ctor3(System.String.format("Signature size must be {0}", [Bridge.box(Phantasma.Cryptography.Ed25519.SignatureSizeInBytes, System.Int32)]), "signature.Count");
                    }
                    if (publicKey.getCount() !== Phantasma.Cryptography.Ed25519.PublicKeySizeInBytes) {
                        throw new System.ArgumentException.$ctor3(System.String.format("Public key size must be {0}", [Bridge.box(Phantasma.Cryptography.Ed25519.PublicKeySizeInBytes, System.Int32)]), "publicKey.Count");
                    }
                    return Phantasma.Cryptography.Ed25519Operations.crypto_sign_verify(signature.getArray(), signature.getOffset(), message.getArray(), message.getOffset(), message.getCount(), publicKey.getArray(), publicKey.getOffset());
                },
                Verify$1: function (signature, message, publicKey) {
                    if (signature == null) {
                        throw new System.ArgumentNullException.$ctor1("signature");
                    }
                    if (message == null) {
                        throw new System.ArgumentNullException.$ctor1("message");
                    }
                    if (publicKey == null) {
                        throw new System.ArgumentNullException.$ctor1("publicKey");
                    }
                    if (signature.length !== Phantasma.Cryptography.Ed25519.SignatureSizeInBytes) {
                        throw new System.ArgumentException.$ctor3(System.String.format("Signature size must be {0}", [Bridge.box(Phantasma.Cryptography.Ed25519.SignatureSizeInBytes, System.Int32)]), "signature.Length");
                    }
                    if (publicKey.length !== Phantasma.Cryptography.Ed25519.PublicKeySizeInBytes) {
                        throw new System.ArgumentException.$ctor3(System.String.format("Public key size must be {0}", [Bridge.box(Phantasma.Cryptography.Ed25519.PublicKeySizeInBytes, System.Int32)]), "publicKey.Length");
                    }
                    return Phantasma.Cryptography.Ed25519Operations.crypto_sign_verify(signature, 0, message, 0, message.length, publicKey, 0);
                },
                Sign$1: function (signature, message, expandedPrivateKey) {
                    if (signature.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("signature.Array");
                    }
                    if (signature.getCount() !== Phantasma.Cryptography.Ed25519.SignatureSizeInBytes) {
                        throw new System.ArgumentException.$ctor1("signature.Count");
                    }
                    if (expandedPrivateKey.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("expandedPrivateKey.Array");
                    }
                    if (expandedPrivateKey.getCount() !== Phantasma.Cryptography.Ed25519.ExpandedPrivateKeySizeInBytes) {
                        throw new System.ArgumentException.$ctor1("expandedPrivateKey.Count");
                    }
                    if (message.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("message.Array");
                    }
                    Phantasma.Cryptography.Ed25519Operations.crypto_sign2(signature.getArray(), signature.getOffset(), message.getArray(), message.getOffset(), message.getCount(), expandedPrivateKey.getArray(), expandedPrivateKey.getOffset());
                },
                Sign: function (message, expandedPrivateKey) {
                    var signature = System.Array.init(Phantasma.Cryptography.Ed25519.SignatureSizeInBytes, 0, System.Byte);
                    Phantasma.Cryptography.Ed25519.Sign$1(new System.ArraySegment(signature), new System.ArraySegment(message), new System.ArraySegment(expandedPrivateKey));
                    return signature;
                },
                PublicKeyFromSeed: function (privateKeySeed) {
                    var privateKey = { };
                    var publicKey = { };
                    Phantasma.Cryptography.Ed25519.KeyPairFromSeed$1(publicKey, privateKey, privateKeySeed);
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(privateKey.v);
                    return publicKey.v;
                },
                ExpandedPrivateKeyFromSeed: function (privateKeySeed) {
                    var privateKey = { };
                    var publicKey = { };
                    Phantasma.Cryptography.Ed25519.KeyPairFromSeed$1(publicKey, privateKey, privateKeySeed);
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(publicKey.v);
                    return privateKey.v;
                },
                KeyPairFromSeed$1: function (publicKey, expandedPrivateKey, privateKeySeed) {
                    if (privateKeySeed == null) {
                        throw new System.ArgumentNullException.$ctor1("privateKeySeed");
                    }
                    if (privateKeySeed.length !== Phantasma.Cryptography.Ed25519.PrivateKeySeedSizeInBytes) {
                        throw new System.ArgumentException.$ctor1("privateKeySeed");
                    }
                    var pk = System.Array.init(Phantasma.Cryptography.Ed25519.PublicKeySizeInBytes, 0, System.Byte);
                    var sk = System.Array.init(Phantasma.Cryptography.Ed25519.ExpandedPrivateKeySizeInBytes, 0, System.Byte);
                    Phantasma.Cryptography.Ed25519Operations.crypto_sign_keypair(pk, 0, sk, 0, privateKeySeed, 0);
                    publicKey.v = pk;
                    expandedPrivateKey.v = sk;
                },
                KeyPairFromSeed: function (publicKey, expandedPrivateKey, privateKeySeed) {
                    if (publicKey.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("publicKey.Array");
                    }
                    if (expandedPrivateKey.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("expandedPrivateKey.Array");
                    }
                    if (privateKeySeed.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("privateKeySeed.Array");
                    }
                    if (publicKey.getCount() !== Phantasma.Cryptography.Ed25519.PublicKeySizeInBytes) {
                        throw new System.ArgumentException.$ctor1("publicKey.Count");
                    }
                    if (expandedPrivateKey.getCount() !== Phantasma.Cryptography.Ed25519.ExpandedPrivateKeySizeInBytes) {
                        throw new System.ArgumentException.$ctor1("expandedPrivateKey.Count");
                    }
                    if (privateKeySeed.getCount() !== Phantasma.Cryptography.Ed25519.PrivateKeySeedSizeInBytes) {
                        throw new System.ArgumentException.$ctor1("privateKeySeed.Count");
                    }
                    Phantasma.Cryptography.Ed25519Operations.crypto_sign_keypair(publicKey.getArray(), publicKey.getOffset(), expandedPrivateKey.getArray(), expandedPrivateKey.getOffset(), privateKeySeed.getArray(), privateKeySeed.getOffset());
                },
                KeyExchange: function (publicKey, privateKey) {
                    var sharedKey = System.Array.init(Phantasma.Cryptography.Ed25519.SharedKeySizeInBytes, 0, System.Byte);
                    Phantasma.Cryptography.Ed25519.KeyExchange$1(new System.ArraySegment(sharedKey), new System.ArraySegment(publicKey), new System.ArraySegment(privateKey));
                    return sharedKey;
                },
                KeyExchange$1: function (sharedKey, publicKey, privateKey) {
                    if (sharedKey.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("sharedKey.Array");
                    }
                    if (publicKey.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("publicKey.Array");
                    }
                    if (privateKey.getArray() == null) {
                        throw new System.ArgumentNullException.$ctor1("privateKey");
                    }
                    if (sharedKey.getCount() !== 32) {
                        throw new System.ArgumentException.$ctor1("sharedKey.Count != 32");
                    }
                    if (publicKey.getCount() !== 32) {
                        throw new System.ArgumentException.$ctor1("publicKey.Count != 32");
                    }
                    if (privateKey.getCount() !== 64) {
                        throw new System.ArgumentException.$ctor1("privateKey.Count != 64");
                    }

                    var montgomeryX = { v : new Phantasma.Cryptography.FieldElement() }, edwardsY = { v : new Phantasma.Cryptography.FieldElement() }, edwardsZ = { v : new Phantasma.Cryptography.FieldElement() }, sharedMontgomeryX = { v : new Phantasma.Cryptography.FieldElement() };
                    Phantasma.Cryptography.FieldOperations.fe_frombytes(edwardsY, publicKey.getArray(), publicKey.getOffset());
                    Phantasma.Cryptography.FieldOperations.fe_1(edwardsZ);
                    Phantasma.Cryptography.Ed25519.EdwardsToMontgomeryX(montgomeryX, edwardsY, edwardsZ);
                    var h = Phantasma.Cryptography.SHA512.Hash$1(privateKey.getArray(), privateKey.getOffset(), 32);
                    Phantasma.Cryptography.ScalarOperations.sc_clamp(h, 0);
                    Phantasma.Cryptography.MontgomeryOperations.scalarmult$1(sharedMontgomeryX, h, 0, montgomeryX);
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(h);
                    Phantasma.Cryptography.FieldOperations.fe_tobytes(sharedKey.getArray(), sharedKey.getOffset(), sharedMontgomeryX);
                    Phantasma.Cryptography.Ed25519.KeyExchangeOutputHashNaCl(sharedKey.getArray(), sharedKey.getOffset());
                },
                EdwardsToMontgomeryX: function (montgomeryX, edwardsY, edwardsZ) {
                    var tempX = { v : new Phantasma.Cryptography.FieldElement() }, tempZ = { v : new Phantasma.Cryptography.FieldElement() };
                    Phantasma.Cryptography.FieldOperations.fe_add(tempX, edwardsZ, edwardsY);
                    Phantasma.Cryptography.FieldOperations.fe_sub(tempZ, edwardsZ, edwardsY);
                    Phantasma.Cryptography.FieldOperations.fe_invert(tempZ, tempZ);
                    Phantasma.Cryptography.FieldOperations.fe_mul(montgomeryX, tempX, tempZ);
                },
                KeyExchangeOutputHashNaCl: function (sharedKey, offset) {
                    Phantasma.Cryptography.Salsa20.HSalsa20(sharedKey, offset, sharedKey, offset, Phantasma.Cryptography.Ed25519._zero16, 0);
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.Ed25519Operations", {
        statics: {
            methods: {
                crypto_sign_keypair: function (pk, pkoffset, sk, skoffset, seed, seedoffset) {
                    var A = { v : new Phantasma.Cryptography.GroupElementP3() };
                    var i;

                    System.Array.copy(seed, seedoffset, sk, skoffset, 32);
                    var h = Phantasma.Cryptography.SHA512.Hash$1(sk, skoffset, 32);
                    Phantasma.Cryptography.ScalarOperations.sc_clamp(h, 0);

                    Phantasma.Cryptography.GroupOperations.ge_scalarmult_base(A, h, 0);
                    Phantasma.Cryptography.GroupOperations.ge_p3_tobytes(pk, pkoffset, A);

                    for (i = 0; i < 32; i = (i + 1) | 0) {
                        sk[System.Array.index(((((skoffset + 32) | 0) + i) | 0), sk)] = pk[System.Array.index(((pkoffset + i) | 0), pk)];
                    }
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(h);
                },
                crypto_sign_verify: function (sig, sigoffset, m, moffset, mlen, pk, pkoffset) {
                    var h;
                    var checkr = System.Array.init(32, 0, System.Byte);
                    var A = { v : new Phantasma.Cryptography.GroupElementP3() };
                    var R = { v : new Phantasma.Cryptography.GroupElementP2() };

                    if ((sig[System.Array.index(((sigoffset + 63) | 0), sig)] & 224) !== 0) {
                        return false;
                    }
                    if (Phantasma.Cryptography.GroupOperations.ge_frombytes_negate_vartime(A, pk, pkoffset) !== 0) {
                        return false;
                    }

                    var hasher = new Phantasma.Cryptography.SHA512();
                    hasher.Update$1(sig, sigoffset, 32);
                    hasher.Update$1(pk, pkoffset, 32);
                    hasher.Update$1(m, moffset, mlen);
                    h = hasher.Finish();

                    Phantasma.Cryptography.ScalarOperations.sc_reduce(h);

                    var sm32 = System.Array.init(32, 0, System.Byte);
                    System.Array.copy(sig, ((sigoffset + 32) | 0), sm32, 0, 32);
                    Phantasma.Cryptography.GroupOperations.ge_double_scalarmult_vartime(R, h, A, sm32);
                    Phantasma.Cryptography.GroupOperations.ge_tobytes(checkr, 0, R);
                    var result = Phantasma.Cryptography.CryptoBytes.ConstantTimeEquals$2(checkr, 0, sig, sigoffset, 32);
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(h);
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(checkr);
                    return result;
                },
                crypto_sign2: function (sig, sigoffset, m, moffset, mlen, sk, skoffset) {
                    var az;
                    var r;
                    var hram;
                    var R = { v : new Phantasma.Cryptography.GroupElementP3() };
                    var hasher = new Phantasma.Cryptography.SHA512();
                    {
                        hasher.Update$1(sk, skoffset, 32);
                        az = hasher.Finish();
                        Phantasma.Cryptography.ScalarOperations.sc_clamp(az, 0);

                        hasher.Init();
                        hasher.Update$1(az, 32, 32);
                        hasher.Update$1(m, moffset, mlen);
                        r = hasher.Finish();

                        Phantasma.Cryptography.ScalarOperations.sc_reduce(r);
                        Phantasma.Cryptography.GroupOperations.ge_scalarmult_base(R, r, 0);
                        Phantasma.Cryptography.GroupOperations.ge_p3_tobytes(sig, sigoffset, R);

                        hasher.Init();
                        hasher.Update$1(sig, sigoffset, 32);
                        hasher.Update$1(sk, ((skoffset + 32) | 0), 32);
                        hasher.Update$1(m, moffset, mlen);
                        hram = hasher.Finish();

                        Phantasma.Cryptography.ScalarOperations.sc_reduce(hram);
                        var s = System.Array.init(32, 0, System.Byte);
                        System.Array.copy(sig, ((sigoffset + 32) | 0), s, 0, 32);
                        Phantasma.Cryptography.ScalarOperations.sc_muladd(s, hram, az, r);
                        System.Array.copy(s, 0, sig, ((sigoffset + 32) | 0), 32);
                        Phantasma.Cryptography.CryptoBytes.Wipe$1(s);
                    }
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.FieldElement", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Phantasma.Cryptography.FieldElement(); }
            }
        },
        fields: {
            x0: 0,
            x1: 0,
            x2: 0,
            x3: 0,
            x4: 0,
            x5: 0,
            x6: 0,
            x7: 0,
            x8: 0,
            x9: 0
        },
        ctors: {
            $ctor1: function (elements) {
                if (elements === void 0) { elements = []; }

                this.$initialize();
                if (elements.length !== 10) {
                    throw new System.ArgumentException.$ctor1("elements.Length != 10");
                }

                this.x0 = elements[System.Array.index(0, elements)];
                this.x1 = elements[System.Array.index(1, elements)];
                this.x2 = elements[System.Array.index(2, elements)];
                this.x3 = elements[System.Array.index(3, elements)];
                this.x4 = elements[System.Array.index(4, elements)];
                this.x5 = elements[System.Array.index(5, elements)];
                this.x6 = elements[System.Array.index(6, elements)];
                this.x7 = elements[System.Array.index(7, elements)];
                this.x8 = elements[System.Array.index(8, elements)];
                this.x9 = elements[System.Array.index(9, elements)];
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5473571863, this.x0, this.x1, this.x2, this.x3, this.x4, this.x5, this.x6, this.x7, this.x8, this.x9]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.FieldElement)) {
                    return false;
                }
                return Bridge.equals(this.x0, o.x0) && Bridge.equals(this.x1, o.x1) && Bridge.equals(this.x2, o.x2) && Bridge.equals(this.x3, o.x3) && Bridge.equals(this.x4, o.x4) && Bridge.equals(this.x5, o.x5) && Bridge.equals(this.x6, o.x6) && Bridge.equals(this.x7, o.x7) && Bridge.equals(this.x8, o.x8) && Bridge.equals(this.x9, o.x9);
            },
            $clone: function (to) {
                var s = to || new Phantasma.Cryptography.FieldElement();
                s.x0 = this.x0;
                s.x1 = this.x1;
                s.x2 = this.x2;
                s.x3 = this.x3;
                s.x4 = this.x4;
                s.x5 = this.x5;
                s.x6 = this.x6;
                s.x7 = this.x7;
                s.x8 = this.x8;
                s.x9 = this.x9;
                return s;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.FieldOperations", {
        statics: {
            methods: {
                fe_0: function (h) {
                    h.v = Bridge.getDefaultValue(Phantasma.Cryptography.FieldElement);
                },
                fe_1: function (h) {
                    h.v = Bridge.getDefaultValue(Phantasma.Cryptography.FieldElement);
                    h.v.x0 = 1;
                },
                fe_add: function (h, f, g) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var g0 = g.v.x0;
                    var g1 = g.v.x1;
                    var g2 = g.v.x2;
                    var g3 = g.v.x3;
                    var g4 = g.v.x4;
                    var g5 = g.v.x5;
                    var g6 = g.v.x6;
                    var g7 = g.v.x7;
                    var g8 = g.v.x8;
                    var g9 = g.v.x9;
                    var h0 = (f0 + g0) | 0;
                    var h1 = (f1 + g1) | 0;
                    var h2 = (f2 + g2) | 0;
                    var h3 = (f3 + g3) | 0;
                    var h4 = (f4 + g4) | 0;
                    var h5 = (f5 + g5) | 0;
                    var h6 = (f6 + g6) | 0;
                    var h7 = (f7 + g7) | 0;
                    var h8 = (f8 + g8) | 0;
                    var h9 = (f9 + g9) | 0;
                    h.v.x0 = h0;
                    h.v.x1 = h1;
                    h.v.x2 = h2;
                    h.v.x3 = h3;
                    h.v.x4 = h4;
                    h.v.x5 = h5;
                    h.v.x6 = h6;
                    h.v.x7 = h7;
                    h.v.x8 = h8;
                    h.v.x9 = h9;
                },
                fe_cmov: function (f, g, b) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var g0 = g.v.x0;
                    var g1 = g.v.x1;
                    var g2 = g.v.x2;
                    var g3 = g.v.x3;
                    var g4 = g.v.x4;
                    var g5 = g.v.x5;
                    var g6 = g.v.x6;
                    var g7 = g.v.x7;
                    var g8 = g.v.x8;
                    var g9 = g.v.x9;
                    var x0 = f0 ^ g0;
                    var x1 = f1 ^ g1;
                    var x2 = f2 ^ g2;
                    var x3 = f3 ^ g3;
                    var x4 = f4 ^ g4;
                    var x5 = f5 ^ g5;
                    var x6 = f6 ^ g6;
                    var x7 = f7 ^ g7;
                    var x8 = f8 ^ g8;
                    var x9 = f9 ^ g9;
                    b = (-b) | 0;
                    x0 = x0 & b;
                    x1 = x1 & b;
                    x2 = x2 & b;
                    x3 = x3 & b;
                    x4 = x4 & b;
                    x5 = x5 & b;
                    x6 = x6 & b;
                    x7 = x7 & b;
                    x8 = x8 & b;
                    x9 = x9 & b;
                    f.v.x0 = f0 ^ x0;
                    f.v.x1 = f1 ^ x1;
                    f.v.x2 = f2 ^ x2;
                    f.v.x3 = f3 ^ x3;
                    f.v.x4 = f4 ^ x4;
                    f.v.x5 = f5 ^ x5;
                    f.v.x6 = f6 ^ x6;
                    f.v.x7 = f7 ^ x7;
                    f.v.x8 = f8 ^ x8;
                    f.v.x9 = f9 ^ x9;
                },
                fe_cswap: function (f, g, b) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var g0 = g.v.x0;
                    var g1 = g.v.x1;
                    var g2 = g.v.x2;
                    var g3 = g.v.x3;
                    var g4 = g.v.x4;
                    var g5 = g.v.x5;
                    var g6 = g.v.x6;
                    var g7 = g.v.x7;
                    var g8 = g.v.x8;
                    var g9 = g.v.x9;
                    var x0 = f0 ^ g0;
                    var x1 = f1 ^ g1;
                    var x2 = f2 ^ g2;
                    var x3 = f3 ^ g3;
                    var x4 = f4 ^ g4;
                    var x5 = f5 ^ g5;
                    var x6 = f6 ^ g6;
                    var x7 = f7 ^ g7;
                    var x8 = f8 ^ g8;
                    var x9 = f9 ^ g9;
                    var negb = System.Int64.clip32(System.Int64(b).neg());
                    x0 = x0 & negb;
                    x1 = x1 & negb;
                    x2 = x2 & negb;
                    x3 = x3 & negb;
                    x4 = x4 & negb;
                    x5 = x5 & negb;
                    x6 = x6 & negb;
                    x7 = x7 & negb;
                    x8 = x8 & negb;
                    x9 = x9 & negb;
                    f.v.x0 = f0 ^ x0;
                    f.v.x1 = f1 ^ x1;
                    f.v.x2 = f2 ^ x2;
                    f.v.x3 = f3 ^ x3;
                    f.v.x4 = f4 ^ x4;
                    f.v.x5 = f5 ^ x5;
                    f.v.x6 = f6 ^ x6;
                    f.v.x7 = f7 ^ x7;
                    f.v.x8 = f8 ^ x8;
                    f.v.x9 = f9 ^ x9;
                    g.v.x0 = g0 ^ x0;
                    g.v.x1 = g1 ^ x1;
                    g.v.x2 = g2 ^ x2;
                    g.v.x3 = g3 ^ x3;
                    g.v.x4 = g4 ^ x4;
                    g.v.x5 = g5 ^ x5;
                    g.v.x6 = g6 ^ x6;
                    g.v.x7 = g7 ^ x7;
                    g.v.x8 = g8 ^ x8;
                    g.v.x9 = g9 ^ x9;
                },
                load_3: function (data, offset) {
                    var result;
                    result = data[System.Array.index(((offset + 0) | 0), data)];
                    result = (result | (((data[System.Array.index(((offset + 1) | 0), data)] << 8) >>> 0))) >>> 0;
                    result = (result | (((data[System.Array.index(((offset + 2) | 0), data)] << 16) >>> 0))) >>> 0;
                    return System.Int64.clip64(System.UInt64(result));
                },
                load_4: function (data, offset) {
                    var result;
                    result = data[System.Array.index(((offset + 0) | 0), data)];
                    result = (result | (((data[System.Array.index(((offset + 1) | 0), data)] << 8) >>> 0))) >>> 0;
                    result = (result | (((data[System.Array.index(((offset + 2) | 0), data)] << 16) >>> 0))) >>> 0;
                    result = (result | (((data[System.Array.index(((offset + 3) | 0), data)] << 24) >>> 0))) >>> 0;
                    return System.Int64.clip64(System.UInt64(result));
                },
                fe_frombytes: function (h, data, offset) {
                    var h0 = Phantasma.Cryptography.FieldOperations.load_4(data, offset);
                    var h1 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 4) | 0)).shl(6);
                    var h2 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 7) | 0)).shl(5);
                    var h3 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 10) | 0)).shl(3);
                    var h4 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 13) | 0)).shl(2);
                    var h5 = Phantasma.Cryptography.FieldOperations.load_4(data, ((offset + 16) | 0));
                    var h6 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 20) | 0)).shl(7);
                    var h7 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 23) | 0)).shl(5);
                    var h8 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 26) | 0)).shl(4);
                    var h9 = (Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 29) | 0)).and(System.Int64(8388607))).shl(2);
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    carry9 = (h9.add(System.Int64(16777216))).shr(25);
                    h0 = h0.add((carry9.mul(System.Int64(19))));
                    h9 = h9.sub((carry9.shl(25)));
                    carry1 = (h1.add(System.Int64(16777216))).shr(25);
                    h2 = h2.add(carry1);
                    h1 = h1.sub((carry1.shl(25)));
                    carry3 = (h3.add(System.Int64(16777216))).shr(25);
                    h4 = h4.add(carry3);
                    h3 = h3.sub((carry3.shl(25)));
                    carry5 = (h5.add(System.Int64(16777216))).shr(25);
                    h6 = h6.add(carry5);
                    h5 = h5.sub((carry5.shl(25)));
                    carry7 = (h7.add(System.Int64(16777216))).shr(25);
                    h8 = h8.add(carry7);
                    h7 = h7.sub((carry7.shl(25)));

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    carry2 = (h2.add(System.Int64(33554432))).shr(26);
                    h3 = h3.add(carry2);
                    h2 = h2.sub((carry2.shl(26)));
                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    carry6 = (h6.add(System.Int64(33554432))).shr(26);
                    h7 = h7.add(carry6);
                    h6 = h6.sub((carry6.shl(26)));
                    carry8 = (h8.add(System.Int64(33554432))).shr(26);
                    h9 = h9.add(carry8);
                    h8 = h8.sub((carry8.shl(26)));

                    h.v.x0 = System.Int64.clip32(h0);
                    h.v.x1 = System.Int64.clip32(h1);
                    h.v.x2 = System.Int64.clip32(h2);
                    h.v.x3 = System.Int64.clip32(h3);
                    h.v.x4 = System.Int64.clip32(h4);
                    h.v.x5 = System.Int64.clip32(h5);
                    h.v.x6 = System.Int64.clip32(h6);
                    h.v.x7 = System.Int64.clip32(h7);
                    h.v.x8 = System.Int64.clip32(h8);
                    h.v.x9 = System.Int64.clip32(h9);
                },
                fe_frombytes2: function (h, data, offset) {
                    var h0 = Phantasma.Cryptography.FieldOperations.load_4(data, offset);
                    var h1 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 4) | 0)).shl(6);
                    var h2 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 7) | 0)).shl(5);
                    var h3 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 10) | 0)).shl(3);
                    var h4 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 13) | 0)).shl(2);
                    var h5 = Phantasma.Cryptography.FieldOperations.load_4(data, ((offset + 16) | 0));
                    var h6 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 20) | 0)).shl(7);
                    var h7 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 23) | 0)).shl(5);
                    var h8 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 26) | 0)).shl(4);
                    var h9 = Phantasma.Cryptography.FieldOperations.load_3(data, ((offset + 29) | 0)).shl(2);
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    carry9 = (h9.add(System.Int64(16777216))).shr(25);
                    h0 = h0.add((carry9.mul(System.Int64(19))));
                    h9 = h9.sub((carry9.shl(25)));
                    carry1 = (h1.add(System.Int64(16777216))).shr(25);
                    h2 = h2.add(carry1);
                    h1 = h1.sub((carry1.shl(25)));
                    carry3 = (h3.add(System.Int64(16777216))).shr(25);
                    h4 = h4.add(carry3);
                    h3 = h3.sub((carry3.shl(25)));
                    carry5 = (h5.add(System.Int64(16777216))).shr(25);
                    h6 = h6.add(carry5);
                    h5 = h5.sub((carry5.shl(25)));
                    carry7 = (h7.add(System.Int64(16777216))).shr(25);
                    h8 = h8.add(carry7);
                    h7 = h7.sub((carry7.shl(25)));

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    carry2 = (h2.add(System.Int64(33554432))).shr(26);
                    h3 = h3.add(carry2);
                    h2 = h2.sub((carry2.shl(26)));
                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    carry6 = (h6.add(System.Int64(33554432))).shr(26);
                    h7 = h7.add(carry6);
                    h6 = h6.sub((carry6.shl(26)));
                    carry8 = (h8.add(System.Int64(33554432))).shr(26);
                    h9 = h9.add(carry8);
                    h8 = h8.sub((carry8.shl(26)));

                    h.v.x0 = System.Int64.clip32(h0);
                    h.v.x1 = System.Int64.clip32(h1);
                    h.v.x2 = System.Int64.clip32(h2);
                    h.v.x3 = System.Int64.clip32(h3);
                    h.v.x4 = System.Int64.clip32(h4);
                    h.v.x5 = System.Int64.clip32(h5);
                    h.v.x6 = System.Int64.clip32(h6);
                    h.v.x7 = System.Int64.clip32(h7);
                    h.v.x8 = System.Int64.clip32(h8);
                    h.v.x9 = System.Int64.clip32(h9);
                },
                fe_invert: function (result, z) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };
                    var t1 = { v : new Phantasma.Cryptography.FieldElement() };
                    var t2 = { v : new Phantasma.Cryptography.FieldElement() };
                    var t3 = { v : new Phantasma.Cryptography.FieldElement() };
                    var i;

                    /* qhasm: fe z1 */

                    /* qhasm: fe z2 */

                    /* qhasm: fe z8 */

                    /* qhasm: fe z9 */

                    /* qhasm: fe z11 */

                    /* qhasm: fe z22 */

                    /* qhasm: fe z_5_0 */

                    /* qhasm: fe z_10_5 */

                    /* qhasm: fe z_10_0 */

                    /* qhasm: fe z_20_10 */

                    /* qhasm: fe z_20_0 */

                    /* qhasm: fe z_40_20 */

                    /* qhasm: fe z_40_0 */

                    /* qhasm: fe z_50_10 */

                    /* qhasm: fe z_50_0 */

                    /* qhasm: fe z_100_50 */

                    /* qhasm: fe z_100_0 */

                    /* qhasm: fe z_200_100 */

                    /* qhasm: fe z_200_0 */

                    /* qhasm: fe z_250_50 */

                    /* qhasm: fe z_250_0 */

                    /* qhasm: fe z_255_5 */

                    /* qhasm: fe z_255_21 */

                    /* qhasm: enter pow225521 */

                    /* qhasm: z2 = z1^2^1 */
                    /* asm 1: fe_sq(>z2=fe#1,<z1=fe#11); for (i = 1;i < 1;++i) fe_sq(>z2=fe#1,>z2=fe#1); */
                    /* asm 2: fe_sq(>z2=t0,<z1=z); for (i = 1;i < 1;++i) fe_sq(>z2=t0,>z2=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t0, z);

                    /* qhasm: z8 = z2^2^2 */
                    /* asm 1: fe_sq(>z8=fe#2,<z2=fe#1); for (i = 1;i < 2;++i) fe_sq(>z8=fe#2,>z8=fe#2); */
                    /* asm 2: fe_sq(>z8=t1,<z2=t0); for (i = 1;i < 2;++i) fe_sq(>z8=t1,>z8=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t0);
                    for (i = 1; i < 2; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z9 = z1*z8 */
                    /* asm 1: fe_mul(>z9=fe#2,<z1=fe#11,<z8=fe#2); */
                    /* asm 2: fe_mul(>z9=t1,<z1=z,<z8=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, z, t1);

                    /* qhasm: z11 = z2*z9 */
                    /* asm 1: fe_mul(>z11=fe#1,<z2=fe#1,<z9=fe#2); */
                    /* asm 2: fe_mul(>z11=t0,<z2=t0,<z9=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t0, t0, t1);

                    /* qhasm: z22 = z11^2^1 */
                    /* asm 1: fe_sq(>z22=fe#3,<z11=fe#1); for (i = 1;i < 1;++i) fe_sq(>z22=fe#3,>z22=fe#3); */
                    /* asm 2: fe_sq(>z22=t2,<z11=t0); for (i = 1;i < 1;++i) fe_sq(>z22=t2,>z22=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t0);

                    /* qhasm: z_5_0 = z9*z22 */
                    /* asm 1: fe_mul(>z_5_0=fe#2,<z9=fe#2,<z22=fe#3); */
                    /* asm 2: fe_mul(>z_5_0=t1,<z9=t1,<z22=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t1, t2);

                    /* qhasm: z_10_5 = z_5_0^2^5 */
                    /* asm 1: fe_sq(>z_10_5=fe#3,<z_5_0=fe#2); for (i = 1;i < 5;++i) fe_sq(>z_10_5=fe#3,>z_10_5=fe#3); */
                    /* asm 2: fe_sq(>z_10_5=t2,<z_5_0=t1); for (i = 1;i < 5;++i) fe_sq(>z_10_5=t2,>z_10_5=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t1);
                    for (i = 1; i < 5; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_10_0 = z_10_5*z_5_0 */
                    /* asm 1: fe_mul(>z_10_0=fe#2,<z_10_5=fe#3,<z_5_0=fe#2); */
                    /* asm 2: fe_mul(>z_10_0=t1,<z_10_5=t2,<z_5_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t2, t1);

                    /* qhasm: z_20_10 = z_10_0^2^10 */
                    /* asm 1: fe_sq(>z_20_10=fe#3,<z_10_0=fe#2); for (i = 1;i < 10;++i) fe_sq(>z_20_10=fe#3,>z_20_10=fe#3); */
                    /* asm 2: fe_sq(>z_20_10=t2,<z_10_0=t1); for (i = 1;i < 10;++i) fe_sq(>z_20_10=t2,>z_20_10=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t1);
                    for (i = 1; i < 10; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_20_0 = z_20_10*z_10_0 */
                    /* asm 1: fe_mul(>z_20_0=fe#3,<z_20_10=fe#3,<z_10_0=fe#2); */
                    /* asm 2: fe_mul(>z_20_0=t2,<z_20_10=t2,<z_10_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t2, t2, t1);

                    /* qhasm: z_40_20 = z_20_0^2^20 */
                    /* asm 1: fe_sq(>z_40_20=fe#4,<z_20_0=fe#3); for (i = 1;i < 20;++i) fe_sq(>z_40_20=fe#4,>z_40_20=fe#4); */
                    /* asm 2: fe_sq(>z_40_20=t3,<z_20_0=t2); for (i = 1;i < 20;++i) fe_sq(>z_40_20=t3,>z_40_20=t3); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t3, t2);
                    for (i = 1; i < 20; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t3, t3);
                    }

                    /* qhasm: z_40_0 = z_40_20*z_20_0 */
                    /* asm 1: fe_mul(>z_40_0=fe#3,<z_40_20=fe#4,<z_20_0=fe#3); */
                    /* asm 2: fe_mul(>z_40_0=t2,<z_40_20=t3,<z_20_0=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t2, t3, t2);

                    /* qhasm: z_50_10 = z_40_0^2^10 */
                    /* asm 1: fe_sq(>z_50_10=fe#3,<z_40_0=fe#3); for (i = 1;i < 10;++i) fe_sq(>z_50_10=fe#3,>z_50_10=fe#3); */
                    /* asm 2: fe_sq(>z_50_10=t2,<z_40_0=t2); for (i = 1;i < 10;++i) fe_sq(>z_50_10=t2,>z_50_10=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    for (i = 1; i < 10; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_50_0 = z_50_10*z_10_0 */
                    /* asm 1: fe_mul(>z_50_0=fe#2,<z_50_10=fe#3,<z_10_0=fe#2); */
                    /* asm 2: fe_mul(>z_50_0=t1,<z_50_10=t2,<z_10_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t2, t1);

                    /* qhasm: z_100_50 = z_50_0^2^50 */
                    /* asm 1: fe_sq(>z_100_50=fe#3,<z_50_0=fe#2); for (i = 1;i < 50;++i) fe_sq(>z_100_50=fe#3,>z_100_50=fe#3); */
                    /* asm 2: fe_sq(>z_100_50=t2,<z_50_0=t1); for (i = 1;i < 50;++i) fe_sq(>z_100_50=t2,>z_100_50=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t1);
                    for (i = 1; i < 50; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_100_0 = z_100_50*z_50_0 */
                    /* asm 1: fe_mul(>z_100_0=fe#3,<z_100_50=fe#3,<z_50_0=fe#2); */
                    /* asm 2: fe_mul(>z_100_0=t2,<z_100_50=t2,<z_50_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t2, t2, t1);

                    /* qhasm: z_200_100 = z_100_0^2^100 */
                    /* asm 1: fe_sq(>z_200_100=fe#4,<z_100_0=fe#3); for (i = 1;i < 100;++i) fe_sq(>z_200_100=fe#4,>z_200_100=fe#4); */
                    /* asm 2: fe_sq(>z_200_100=t3,<z_100_0=t2); for (i = 1;i < 100;++i) fe_sq(>z_200_100=t3,>z_200_100=t3); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t3, t2);
                    for (i = 1; i < 100; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t3, t3);
                    }

                    /* qhasm: z_200_0 = z_200_100*z_100_0 */
                    /* asm 1: fe_mul(>z_200_0=fe#3,<z_200_100=fe#4,<z_100_0=fe#3); */
                    /* asm 2: fe_mul(>z_200_0=t2,<z_200_100=t3,<z_100_0=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t2, t3, t2);

                    /* qhasm: z_250_50 = z_200_0^2^50 */
                    /* asm 1: fe_sq(>z_250_50=fe#3,<z_200_0=fe#3); for (i = 1;i < 50;++i) fe_sq(>z_250_50=fe#3,>z_250_50=fe#3); */
                    /* asm 2: fe_sq(>z_250_50=t2,<z_200_0=t2); for (i = 1;i < 50;++i) fe_sq(>z_250_50=t2,>z_250_50=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    for (i = 1; i < 50; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_250_0 = z_250_50*z_50_0 */
                    /* asm 1: fe_mul(>z_250_0=fe#2,<z_250_50=fe#3,<z_50_0=fe#2); */
                    /* asm 2: fe_mul(>z_250_0=t1,<z_250_50=t2,<z_50_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t2, t1);

                    /* qhasm: z_255_5 = z_250_0^2^5 */
                    /* asm 1: fe_sq(>z_255_5=fe#2,<z_250_0=fe#2); for (i = 1;i < 5;++i) fe_sq(>z_255_5=fe#2,>z_255_5=fe#2); */
                    /* asm 2: fe_sq(>z_255_5=t1,<z_250_0=t1); for (i = 1;i < 5;++i) fe_sq(>z_255_5=t1,>z_255_5=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    for (i = 1; i < 5; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z_255_21 = z_255_5*z11 */
                    /* asm 1: fe_mul(>z_255_21=fe#12,<z_255_5=fe#2,<z11=fe#1); */
                    /* asm 2: fe_mul(>z_255_21=out,<z_255_5=t1,<z11=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(result, t1, t0);

                    /* qhasm: return */


                    return;
                },
                fe_isnegative: function (f) {
                    var fr = { v : new Phantasma.Cryptography.FieldElement() };
                    Phantasma.Cryptography.FieldOperations.fe_reduce(fr, f);
                    return fr.v.x0 & 1;
                },
                fe_isnonzero: function (f) {
                    var fr = { v : new Phantasma.Cryptography.FieldElement() };
                    Phantasma.Cryptography.FieldOperations.fe_reduce(fr, f);
                    var differentBits = 0;
                    differentBits = differentBits | fr.v.x0;
                    differentBits = differentBits | fr.v.x1;
                    differentBits = differentBits | fr.v.x2;
                    differentBits = differentBits | fr.v.x3;
                    differentBits = differentBits | fr.v.x4;
                    differentBits = differentBits | fr.v.x5;
                    differentBits = differentBits | fr.v.x6;
                    differentBits = differentBits | fr.v.x7;
                    differentBits = differentBits | fr.v.x8;
                    differentBits = differentBits | fr.v.x9;
                    return ((((((((differentBits >>> 0) - 1) >>> 0) >>> 31) ^ 1) >>> 0)) | 0);
                },
                fe_mul: function (h, f, g) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var g0 = g.v.x0;
                    var g1 = g.v.x1;
                    var g2 = g.v.x2;
                    var g3 = g.v.x3;
                    var g4 = g.v.x4;
                    var g5 = g.v.x5;
                    var g6 = g.v.x6;
                    var g7 = g.v.x7;
                    var g8 = g.v.x8;
                    var g9 = g.v.x9;
                    var g1_19 = Bridge.Int.mul(19, g1); /* 1.959375*2^29 */
                    var g2_19 = Bridge.Int.mul(19, g2); /* 1.959375*2^30; still ok */
                    var g3_19 = Bridge.Int.mul(19, g3);
                    var g4_19 = Bridge.Int.mul(19, g4);
                    var g5_19 = Bridge.Int.mul(19, g5);
                    var g6_19 = Bridge.Int.mul(19, g6);
                    var g7_19 = Bridge.Int.mul(19, g7);
                    var g8_19 = Bridge.Int.mul(19, g8);
                    var g9_19 = Bridge.Int.mul(19, g9);
                    var f1_2 = Bridge.Int.mul(2, f1);
                    var f3_2 = Bridge.Int.mul(2, f3);
                    var f5_2 = Bridge.Int.mul(2, f5);
                    var f7_2 = Bridge.Int.mul(2, f7);
                    var f9_2 = Bridge.Int.mul(2, f9);
                    var f0g0 = System.Int64(f0).mul(System.Int64(g0));
                    var f0g1 = System.Int64(f0).mul(System.Int64(g1));
                    var f0g2 = System.Int64(f0).mul(System.Int64(g2));
                    var f0g3 = System.Int64(f0).mul(System.Int64(g3));
                    var f0g4 = System.Int64(f0).mul(System.Int64(g4));
                    var f0g5 = System.Int64(f0).mul(System.Int64(g5));
                    var f0g6 = System.Int64(f0).mul(System.Int64(g6));
                    var f0g7 = System.Int64(f0).mul(System.Int64(g7));
                    var f0g8 = System.Int64(f0).mul(System.Int64(g8));
                    var f0g9 = System.Int64(f0).mul(System.Int64(g9));
                    var f1g0 = System.Int64(f1).mul(System.Int64(g0));
                    var f1g1_2 = System.Int64(f1_2).mul(System.Int64(g1));
                    var f1g2 = System.Int64(f1).mul(System.Int64(g2));
                    var f1g3_2 = System.Int64(f1_2).mul(System.Int64(g3));
                    var f1g4 = System.Int64(f1).mul(System.Int64(g4));
                    var f1g5_2 = System.Int64(f1_2).mul(System.Int64(g5));
                    var f1g6 = System.Int64(f1).mul(System.Int64(g6));
                    var f1g7_2 = System.Int64(f1_2).mul(System.Int64(g7));
                    var f1g8 = System.Int64(f1).mul(System.Int64(g8));
                    var f1g9_38 = System.Int64(f1_2).mul(System.Int64(g9_19));
                    var f2g0 = System.Int64(f2).mul(System.Int64(g0));
                    var f2g1 = System.Int64(f2).mul(System.Int64(g1));
                    var f2g2 = System.Int64(f2).mul(System.Int64(g2));
                    var f2g3 = System.Int64(f2).mul(System.Int64(g3));
                    var f2g4 = System.Int64(f2).mul(System.Int64(g4));
                    var f2g5 = System.Int64(f2).mul(System.Int64(g5));
                    var f2g6 = System.Int64(f2).mul(System.Int64(g6));
                    var f2g7 = System.Int64(f2).mul(System.Int64(g7));
                    var f2g8_19 = System.Int64(f2).mul(System.Int64(g8_19));
                    var f2g9_19 = System.Int64(f2).mul(System.Int64(g9_19));
                    var f3g0 = System.Int64(f3).mul(System.Int64(g0));
                    var f3g1_2 = System.Int64(f3_2).mul(System.Int64(g1));
                    var f3g2 = System.Int64(f3).mul(System.Int64(g2));
                    var f3g3_2 = System.Int64(f3_2).mul(System.Int64(g3));
                    var f3g4 = System.Int64(f3).mul(System.Int64(g4));
                    var f3g5_2 = System.Int64(f3_2).mul(System.Int64(g5));
                    var f3g6 = System.Int64(f3).mul(System.Int64(g6));
                    var f3g7_38 = System.Int64(f3_2).mul(System.Int64(g7_19));
                    var f3g8_19 = System.Int64(f3).mul(System.Int64(g8_19));
                    var f3g9_38 = System.Int64(f3_2).mul(System.Int64(g9_19));
                    var f4g0 = System.Int64(f4).mul(System.Int64(g0));
                    var f4g1 = System.Int64(f4).mul(System.Int64(g1));
                    var f4g2 = System.Int64(f4).mul(System.Int64(g2));
                    var f4g3 = System.Int64(f4).mul(System.Int64(g3));
                    var f4g4 = System.Int64(f4).mul(System.Int64(g4));
                    var f4g5 = System.Int64(f4).mul(System.Int64(g5));
                    var f4g6_19 = System.Int64(f4).mul(System.Int64(g6_19));
                    var f4g7_19 = System.Int64(f4).mul(System.Int64(g7_19));
                    var f4g8_19 = System.Int64(f4).mul(System.Int64(g8_19));
                    var f4g9_19 = System.Int64(f4).mul(System.Int64(g9_19));
                    var f5g0 = System.Int64(f5).mul(System.Int64(g0));
                    var f5g1_2 = System.Int64(f5_2).mul(System.Int64(g1));
                    var f5g2 = System.Int64(f5).mul(System.Int64(g2));
                    var f5g3_2 = System.Int64(f5_2).mul(System.Int64(g3));
                    var f5g4 = System.Int64(f5).mul(System.Int64(g4));
                    var f5g5_38 = System.Int64(f5_2).mul(System.Int64(g5_19));
                    var f5g6_19 = System.Int64(f5).mul(System.Int64(g6_19));
                    var f5g7_38 = System.Int64(f5_2).mul(System.Int64(g7_19));
                    var f5g8_19 = System.Int64(f5).mul(System.Int64(g8_19));
                    var f5g9_38 = System.Int64(f5_2).mul(System.Int64(g9_19));
                    var f6g0 = System.Int64(f6).mul(System.Int64(g0));
                    var f6g1 = System.Int64(f6).mul(System.Int64(g1));
                    var f6g2 = System.Int64(f6).mul(System.Int64(g2));
                    var f6g3 = System.Int64(f6).mul(System.Int64(g3));
                    var f6g4_19 = System.Int64(f6).mul(System.Int64(g4_19));
                    var f6g5_19 = System.Int64(f6).mul(System.Int64(g5_19));
                    var f6g6_19 = System.Int64(f6).mul(System.Int64(g6_19));
                    var f6g7_19 = System.Int64(f6).mul(System.Int64(g7_19));
                    var f6g8_19 = System.Int64(f6).mul(System.Int64(g8_19));
                    var f6g9_19 = System.Int64(f6).mul(System.Int64(g9_19));
                    var f7g0 = System.Int64(f7).mul(System.Int64(g0));
                    var f7g1_2 = System.Int64(f7_2).mul(System.Int64(g1));
                    var f7g2 = System.Int64(f7).mul(System.Int64(g2));
                    var f7g3_38 = System.Int64(f7_2).mul(System.Int64(g3_19));
                    var f7g4_19 = System.Int64(f7).mul(System.Int64(g4_19));
                    var f7g5_38 = System.Int64(f7_2).mul(System.Int64(g5_19));
                    var f7g6_19 = System.Int64(f7).mul(System.Int64(g6_19));
                    var f7g7_38 = System.Int64(f7_2).mul(System.Int64(g7_19));
                    var f7g8_19 = System.Int64(f7).mul(System.Int64(g8_19));
                    var f7g9_38 = System.Int64(f7_2).mul(System.Int64(g9_19));
                    var f8g0 = System.Int64(f8).mul(System.Int64(g0));
                    var f8g1 = System.Int64(f8).mul(System.Int64(g1));
                    var f8g2_19 = System.Int64(f8).mul(System.Int64(g2_19));
                    var f8g3_19 = System.Int64(f8).mul(System.Int64(g3_19));
                    var f8g4_19 = System.Int64(f8).mul(System.Int64(g4_19));
                    var f8g5_19 = System.Int64(f8).mul(System.Int64(g5_19));
                    var f8g6_19 = System.Int64(f8).mul(System.Int64(g6_19));
                    var f8g7_19 = System.Int64(f8).mul(System.Int64(g7_19));
                    var f8g8_19 = System.Int64(f8).mul(System.Int64(g8_19));
                    var f8g9_19 = System.Int64(f8).mul(System.Int64(g9_19));
                    var f9g0 = System.Int64(f9).mul(System.Int64(g0));
                    var f9g1_38 = System.Int64(f9_2).mul(System.Int64(g1_19));
                    var f9g2_19 = System.Int64(f9).mul(System.Int64(g2_19));
                    var f9g3_38 = System.Int64(f9_2).mul(System.Int64(g3_19));
                    var f9g4_19 = System.Int64(f9).mul(System.Int64(g4_19));
                    var f9g5_38 = System.Int64(f9_2).mul(System.Int64(g5_19));
                    var f9g6_19 = System.Int64(f9).mul(System.Int64(g6_19));
                    var f9g7_38 = System.Int64(f9_2).mul(System.Int64(g7_19));
                    var f9g8_19 = System.Int64(f9).mul(System.Int64(g8_19));
                    var f9g9_38 = System.Int64(f9_2).mul(System.Int64(g9_19));
                    var h0 = f0g0.add(f1g9_38).add(f2g8_19).add(f3g7_38).add(f4g6_19).add(f5g5_38).add(f6g4_19).add(f7g3_38).add(f8g2_19).add(f9g1_38);
                    var h1 = f0g1.add(f1g0).add(f2g9_19).add(f3g8_19).add(f4g7_19).add(f5g6_19).add(f6g5_19).add(f7g4_19).add(f8g3_19).add(f9g2_19);
                    var h2 = f0g2.add(f1g1_2).add(f2g0).add(f3g9_38).add(f4g8_19).add(f5g7_38).add(f6g6_19).add(f7g5_38).add(f8g4_19).add(f9g3_38);
                    var h3 = f0g3.add(f1g2).add(f2g1).add(f3g0).add(f4g9_19).add(f5g8_19).add(f6g7_19).add(f7g6_19).add(f8g5_19).add(f9g4_19);
                    var h4 = f0g4.add(f1g3_2).add(f2g2).add(f3g1_2).add(f4g0).add(f5g9_38).add(f6g8_19).add(f7g7_38).add(f8g6_19).add(f9g5_38);
                    var h5 = f0g5.add(f1g4).add(f2g3).add(f3g2).add(f4g1).add(f5g0).add(f6g9_19).add(f7g8_19).add(f8g7_19).add(f9g6_19);
                    var h6 = f0g6.add(f1g5_2).add(f2g4).add(f3g3_2).add(f4g2).add(f5g1_2).add(f6g0).add(f7g9_38).add(f8g8_19).add(f9g7_38);
                    var h7 = f0g7.add(f1g6).add(f2g5).add(f3g4).add(f4g3).add(f5g2).add(f6g1).add(f7g0).add(f8g9_19).add(f9g8_19);
                    var h8 = f0g8.add(f1g7_2).add(f2g6).add(f3g5_2).add(f4g4).add(f5g3_2).add(f6g2).add(f7g1_2).add(f8g0).add(f9g9_38);
                    var h9 = f0g9.add(f1g8).add(f2g7).add(f3g6).add(f4g5).add(f5g4).add(f6g3).add(f7g2).add(f8g1).add(f9g0);
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    /* 
                    			|h0| <= (1.65*1.65*2^52*(1+19+19+19+19)+1.65*1.65*2^50*(38+38+38+38+38))
                    			  i.e. |h0| <= 1.4*2^60; narrower ranges for h2, h4, h6, h8
                    			|h1| <= (1.65*1.65*2^51*(1+1+19+19+19+19+19+19+19+19))
                    			  i.e. |h1| <= 1.7*2^59; narrower ranges for h3, h5, h7, h9
                    			*/

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    /* |h0| <= 2^25 */
                    /* |h4| <= 2^25 */
                    /* |h1| <= 1.71*2^59 */
                    /* |h5| <= 1.71*2^59 */

                    carry1 = (h1.add(System.Int64(16777216))).shr(25);
                    h2 = h2.add(carry1);
                    h1 = h1.sub((carry1.shl(25)));
                    carry5 = (h5.add(System.Int64(16777216))).shr(25);
                    h6 = h6.add(carry5);
                    h5 = h5.sub((carry5.shl(25)));
                    /* |h1| <= 2^24; from now on fits into int32 */
                    /* |h5| <= 2^24; from now on fits into int32 */
                    /* |h2| <= 1.41*2^60 */
                    /* |h6| <= 1.41*2^60 */

                    carry2 = (h2.add(System.Int64(33554432))).shr(26);
                    h3 = h3.add(carry2);
                    h2 = h2.sub((carry2.shl(26)));
                    carry6 = (h6.add(System.Int64(33554432))).shr(26);
                    h7 = h7.add(carry6);
                    h6 = h6.sub((carry6.shl(26)));
                    /* |h2| <= 2^25; from now on fits into int32 unchanged */
                    /* |h6| <= 2^25; from now on fits into int32 unchanged */
                    /* |h3| <= 1.71*2^59 */
                    /* |h7| <= 1.71*2^59 */

                    carry3 = (h3.add(System.Int64(16777216))).shr(25);
                    h4 = h4.add(carry3);
                    h3 = h3.sub((carry3.shl(25)));
                    carry7 = (h7.add(System.Int64(16777216))).shr(25);
                    h8 = h8.add(carry7);
                    h7 = h7.sub((carry7.shl(25)));
                    /* |h3| <= 2^24; from now on fits into int32 unchanged */
                    /* |h7| <= 2^24; from now on fits into int32 unchanged */
                    /* |h4| <= 1.72*2^34 */
                    /* |h8| <= 1.41*2^60 */

                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    carry8 = (h8.add(System.Int64(33554432))).shr(26);
                    h9 = h9.add(carry8);
                    h8 = h8.sub((carry8.shl(26)));
                    /* |h4| <= 2^25; from now on fits into int32 unchanged */
                    /* |h8| <= 2^25; from now on fits into int32 unchanged */
                    /* |h5| <= 1.01*2^24 */
                    /* |h9| <= 1.71*2^59 */

                    carry9 = (h9.add(System.Int64(16777216))).shr(25);
                    h0 = h0.add((carry9.mul(System.Int64(19))));
                    h9 = h9.sub((carry9.shl(25)));
                    /* |h9| <= 2^24; from now on fits into int32 unchanged */
                    /* |h0| <= 1.1*2^39 */

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    /* |h0| <= 2^25; from now on fits into int32 unchanged */
                    /* |h1| <= 1.01*2^24 */

                    h.v.x0 = System.Int64.clip32(h0);
                    h.v.x1 = System.Int64.clip32(h1);
                    h.v.x2 = System.Int64.clip32(h2);
                    h.v.x3 = System.Int64.clip32(h3);
                    h.v.x4 = System.Int64.clip32(h4);
                    h.v.x5 = System.Int64.clip32(h5);
                    h.v.x6 = System.Int64.clip32(h6);
                    h.v.x7 = System.Int64.clip32(h7);
                    h.v.x8 = System.Int64.clip32(h8);
                    h.v.x9 = System.Int64.clip32(h9);
                },
                fe_mul121666: function (h, f) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var h0 = System.Int64(f0).mul(System.Int64(121666));
                    var h1 = System.Int64(f1).mul(System.Int64(121666));
                    var h2 = System.Int64(f2).mul(System.Int64(121666));
                    var h3 = System.Int64(f3).mul(System.Int64(121666));
                    var h4 = System.Int64(f4).mul(System.Int64(121666));
                    var h5 = System.Int64(f5).mul(System.Int64(121666));
                    var h6 = System.Int64(f6).mul(System.Int64(121666));
                    var h7 = System.Int64(f7).mul(System.Int64(121666));
                    var h8 = System.Int64(f8).mul(System.Int64(121666));
                    var h9 = System.Int64(f9).mul(System.Int64(121666));
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    carry9 = (h9.add(System.Int64(16777216))).shr(25);
                    h0 = h0.add((carry9.mul(System.Int64(19))));
                    h9 = h9.sub((carry9.shl(25)));
                    carry1 = (h1.add(System.Int64(16777216))).shr(25);
                    h2 = h2.add(carry1);
                    h1 = h1.sub((carry1.shl(25)));
                    carry3 = (h3.add(System.Int64(16777216))).shr(25);
                    h4 = h4.add(carry3);
                    h3 = h3.sub((carry3.shl(25)));
                    carry5 = (h5.add(System.Int64(16777216))).shr(25);
                    h6 = h6.add(carry5);
                    h5 = h5.sub((carry5.shl(25)));
                    carry7 = (h7.add(System.Int64(16777216))).shr(25);
                    h8 = h8.add(carry7);
                    h7 = h7.sub((carry7.shl(25)));

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    carry2 = (h2.add(System.Int64(33554432))).shr(26);
                    h3 = h3.add(carry2);
                    h2 = h2.sub((carry2.shl(26)));
                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    carry6 = (h6.add(System.Int64(33554432))).shr(26);
                    h7 = h7.add(carry6);
                    h6 = h6.sub((carry6.shl(26)));
                    carry8 = (h8.add(System.Int64(33554432))).shr(26);
                    h9 = h9.add(carry8);
                    h8 = h8.sub((carry8.shl(26)));

                    h.v.x0 = System.Int64.clip32(h0);
                    h.v.x1 = System.Int64.clip32(h1);
                    h.v.x2 = System.Int64.clip32(h2);
                    h.v.x3 = System.Int64.clip32(h3);
                    h.v.x4 = System.Int64.clip32(h4);
                    h.v.x5 = System.Int64.clip32(h5);
                    h.v.x6 = System.Int64.clip32(h6);
                    h.v.x7 = System.Int64.clip32(h7);
                    h.v.x8 = System.Int64.clip32(h8);
                    h.v.x9 = System.Int64.clip32(h9);
                },
                fe_neg: function (h, f) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var h0 = (-f0) | 0;
                    var h1 = (-f1) | 0;
                    var h2 = (-f2) | 0;
                    var h3 = (-f3) | 0;
                    var h4 = (-f4) | 0;
                    var h5 = (-f5) | 0;
                    var h6 = (-f6) | 0;
                    var h7 = (-f7) | 0;
                    var h8 = (-f8) | 0;
                    var h9 = (-f9) | 0;
                    h.v.x0 = h0;
                    h.v.x1 = h1;
                    h.v.x2 = h2;
                    h.v.x3 = h3;
                    h.v.x4 = h4;
                    h.v.x5 = h5;
                    h.v.x6 = h6;
                    h.v.x7 = h7;
                    h.v.x8 = h8;
                    h.v.x9 = h9;
                },
                fe_pow22523: function (result, z) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };
                    var t1 = { v : new Phantasma.Cryptography.FieldElement() };
                    var t2 = { v : new Phantasma.Cryptography.FieldElement() };
                    var i;

                    /* qhasm: fe z1 */

                    /* qhasm: fe z2 */

                    /* qhasm: fe z8 */

                    /* qhasm: fe z9 */

                    /* qhasm: fe z11 */

                    /* qhasm: fe z22 */

                    /* qhasm: fe z_5_0 */

                    /* qhasm: fe z_10_5 */

                    /* qhasm: fe z_10_0 */

                    /* qhasm: fe z_20_10 */

                    /* qhasm: fe z_20_0 */

                    /* qhasm: fe z_40_20 */

                    /* qhasm: fe z_40_0 */

                    /* qhasm: fe z_50_10 */

                    /* qhasm: fe z_50_0 */

                    /* qhasm: fe z_100_50 */

                    /* qhasm: fe z_100_0 */

                    /* qhasm: fe z_200_100 */

                    /* qhasm: fe z_200_0 */

                    /* qhasm: fe z_250_50 */

                    /* qhasm: fe z_250_0 */

                    /* qhasm: fe z_252_2 */

                    /* qhasm: fe z_252_3 */

                    /* qhasm: enter pow22523 */

                    /* qhasm: z2 = z1^2^1 */
                    /* asm 1: fe_sq(>z2=fe#1,<z1=fe#11); for (i = 1;i < 1;++i) fe_sq(>z2=fe#1,>z2=fe#1); */
                    /* asm 2: fe_sq(>z2=t0,<z1=z); for (i = 1;i < 1;++i) fe_sq(>z2=t0,>z2=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t0, z);

                    /* qhasm: z8 = z2^2^2 */
                    /* asm 1: fe_sq(>z8=fe#2,<z2=fe#1); for (i = 1;i < 2;++i) fe_sq(>z8=fe#2,>z8=fe#2); */
                    /* asm 2: fe_sq(>z8=t1,<z2=t0); for (i = 1;i < 2;++i) fe_sq(>z8=t1,>z8=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t0);
                    for (i = 1; i < 2; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z9 = z1*z8 */
                    /* asm 1: fe_mul(>z9=fe#2,<z1=fe#11,<z8=fe#2); */
                    /* asm 2: fe_mul(>z9=t1,<z1=z,<z8=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, z, t1);

                    /* qhasm: z11 = z2*z9 */
                    /* asm 1: fe_mul(>z11=fe#1,<z2=fe#1,<z9=fe#2); */
                    /* asm 2: fe_mul(>z11=t0,<z2=t0,<z9=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t0, t0, t1);

                    /* qhasm: z22 = z11^2^1 */
                    /* asm 1: fe_sq(>z22=fe#1,<z11=fe#1); for (i = 1;i < 1;++i) fe_sq(>z22=fe#1,>z22=fe#1); */
                    /* asm 2: fe_sq(>z22=t0,<z11=t0); for (i = 1;i < 1;++i) fe_sq(>z22=t0,>z22=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t0, t0);

                    /* qhasm: z_5_0 = z9*z22 */
                    /* asm 1: fe_mul(>z_5_0=fe#1,<z9=fe#2,<z22=fe#1); */
                    /* asm 2: fe_mul(>z_5_0=t0,<z9=t1,<z22=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t0, t1, t0);

                    /* qhasm: z_10_5 = z_5_0^2^5 */
                    /* asm 1: fe_sq(>z_10_5=fe#2,<z_5_0=fe#1); for (i = 1;i < 5;++i) fe_sq(>z_10_5=fe#2,>z_10_5=fe#2); */
                    /* asm 2: fe_sq(>z_10_5=t1,<z_5_0=t0); for (i = 1;i < 5;++i) fe_sq(>z_10_5=t1,>z_10_5=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t0);
                    for (i = 1; i < 5; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z_10_0 = z_10_5*z_5_0 */
                    /* asm 1: fe_mul(>z_10_0=fe#1,<z_10_5=fe#2,<z_5_0=fe#1); */
                    /* asm 2: fe_mul(>z_10_0=t0,<z_10_5=t1,<z_5_0=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t0, t1, t0);

                    /* qhasm: z_20_10 = z_10_0^2^10 */
                    /* asm 1: fe_sq(>z_20_10=fe#2,<z_10_0=fe#1); for (i = 1;i < 10;++i) fe_sq(>z_20_10=fe#2,>z_20_10=fe#2); */
                    /* asm 2: fe_sq(>z_20_10=t1,<z_10_0=t0); for (i = 1;i < 10;++i) fe_sq(>z_20_10=t1,>z_20_10=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t0);
                    for (i = 1; i < 10; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z_20_0 = z_20_10*z_10_0 */
                    /* asm 1: fe_mul(>z_20_0=fe#2,<z_20_10=fe#2,<z_10_0=fe#1); */
                    /* asm 2: fe_mul(>z_20_0=t1,<z_20_10=t1,<z_10_0=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t1, t0);

                    /* qhasm: z_40_20 = z_20_0^2^20 */
                    /* asm 1: fe_sq(>z_40_20=fe#3,<z_20_0=fe#2); for (i = 1;i < 20;++i) fe_sq(>z_40_20=fe#3,>z_40_20=fe#3); */
                    /* asm 2: fe_sq(>z_40_20=t2,<z_20_0=t1); for (i = 1;i < 20;++i) fe_sq(>z_40_20=t2,>z_40_20=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t1);
                    for (i = 1; i < 20; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_40_0 = z_40_20*z_20_0 */
                    /* asm 1: fe_mul(>z_40_0=fe#2,<z_40_20=fe#3,<z_20_0=fe#2); */
                    /* asm 2: fe_mul(>z_40_0=t1,<z_40_20=t2,<z_20_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t2, t1);

                    /* qhasm: z_50_10 = z_40_0^2^10 */
                    /* asm 1: fe_sq(>z_50_10=fe#2,<z_40_0=fe#2); for (i = 1;i < 10;++i) fe_sq(>z_50_10=fe#2,>z_50_10=fe#2); */
                    /* asm 2: fe_sq(>z_50_10=t1,<z_40_0=t1); for (i = 1;i < 10;++i) fe_sq(>z_50_10=t1,>z_50_10=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    for (i = 1; i < 10; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z_50_0 = z_50_10*z_10_0 */
                    /* asm 1: fe_mul(>z_50_0=fe#1,<z_50_10=fe#2,<z_10_0=fe#1); */
                    /* asm 2: fe_mul(>z_50_0=t0,<z_50_10=t1,<z_10_0=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t0, t1, t0);

                    /* qhasm: z_100_50 = z_50_0^2^50 */
                    /* asm 1: fe_sq(>z_100_50=fe#2,<z_50_0=fe#1); for (i = 1;i < 50;++i) fe_sq(>z_100_50=fe#2,>z_100_50=fe#2); */
                    /* asm 2: fe_sq(>z_100_50=t1,<z_50_0=t0); for (i = 1;i < 50;++i) fe_sq(>z_100_50=t1,>z_100_50=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t0);
                    for (i = 1; i < 50; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z_100_0 = z_100_50*z_50_0 */
                    /* asm 1: fe_mul(>z_100_0=fe#2,<z_100_50=fe#2,<z_50_0=fe#1); */
                    /* asm 2: fe_mul(>z_100_0=t1,<z_100_50=t1,<z_50_0=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t1, t0);

                    /* qhasm: z_200_100 = z_100_0^2^100 */
                    /* asm 1: fe_sq(>z_200_100=fe#3,<z_100_0=fe#2); for (i = 1;i < 100;++i) fe_sq(>z_200_100=fe#3,>z_200_100=fe#3); */
                    /* asm 2: fe_sq(>z_200_100=t2,<z_100_0=t1); for (i = 1;i < 100;++i) fe_sq(>z_200_100=t2,>z_200_100=t2); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t2, t1);
                    for (i = 1; i < 100; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t2, t2);
                    }

                    /* qhasm: z_200_0 = z_200_100*z_100_0 */
                    /* asm 1: fe_mul(>z_200_0=fe#2,<z_200_100=fe#3,<z_100_0=fe#2); */
                    /* asm 2: fe_mul(>z_200_0=t1,<z_200_100=t2,<z_100_0=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t1, t2, t1);

                    /* qhasm: z_250_50 = z_200_0^2^50 */
                    /* asm 1: fe_sq(>z_250_50=fe#2,<z_200_0=fe#2); for (i = 1;i < 50;++i) fe_sq(>z_250_50=fe#2,>z_250_50=fe#2); */
                    /* asm 2: fe_sq(>z_250_50=t1,<z_200_0=t1); for (i = 1;i < 50;++i) fe_sq(>z_250_50=t1,>z_250_50=t1); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    for (i = 1; i < 50; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t1, t1);
                    }

                    /* qhasm: z_250_0 = z_250_50*z_50_0 */
                    /* asm 1: fe_mul(>z_250_0=fe#1,<z_250_50=fe#2,<z_50_0=fe#1); */
                    /* asm 2: fe_mul(>z_250_0=t0,<z_250_50=t1,<z_50_0=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(t0, t1, t0);

                    /* qhasm: z_252_2 = z_250_0^2^2 */
                    /* asm 1: fe_sq(>z_252_2=fe#1,<z_250_0=fe#1); for (i = 1;i < 2;++i) fe_sq(>z_252_2=fe#1,>z_252_2=fe#1); */
                    /* asm 2: fe_sq(>z_252_2=t0,<z_250_0=t0); for (i = 1;i < 2;++i) fe_sq(>z_252_2=t0,>z_252_2=t0); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t0, t0);
                    for (i = 1; i < 2; i = (i + 1) | 0) {
                        Phantasma.Cryptography.FieldOperations.fe_sq(t0, t0);
                    }

                    /* qhasm: z_252_3 = z_252_2*z1 */
                    /* asm 1: fe_mul(>z_252_3=fe#12,<z_252_2=fe#1,<z1=fe#11); */
                    /* asm 2: fe_mul(>z_252_3=out,<z_252_2=t0,<z1=z); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(result, t0, z);

                    /* qhasm: return */
                },
                fe_sq: function (h, f) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var f0_2 = Bridge.Int.mul(2, f0);
                    var f1_2 = Bridge.Int.mul(2, f1);
                    var f2_2 = Bridge.Int.mul(2, f2);
                    var f3_2 = Bridge.Int.mul(2, f3);
                    var f4_2 = Bridge.Int.mul(2, f4);
                    var f5_2 = Bridge.Int.mul(2, f5);
                    var f6_2 = Bridge.Int.mul(2, f6);
                    var f7_2 = Bridge.Int.mul(2, f7);
                    var f5_38 = Bridge.Int.mul(38, f5); /* 1.959375*2^30 */
                    var f6_19 = Bridge.Int.mul(19, f6); /* 1.959375*2^30 */
                    var f7_38 = Bridge.Int.mul(38, f7); /* 1.959375*2^30 */
                    var f8_19 = Bridge.Int.mul(19, f8); /* 1.959375*2^30 */
                    var f9_38 = Bridge.Int.mul(38, f9); /* 1.959375*2^30 */
                    var f0f0 = System.Int64(f0).mul(System.Int64(f0));
                    var f0f1_2 = System.Int64(f0_2).mul(System.Int64(f1));
                    var f0f2_2 = System.Int64(f0_2).mul(System.Int64(f2));
                    var f0f3_2 = System.Int64(f0_2).mul(System.Int64(f3));
                    var f0f4_2 = System.Int64(f0_2).mul(System.Int64(f4));
                    var f0f5_2 = System.Int64(f0_2).mul(System.Int64(f5));
                    var f0f6_2 = System.Int64(f0_2).mul(System.Int64(f6));
                    var f0f7_2 = System.Int64(f0_2).mul(System.Int64(f7));
                    var f0f8_2 = System.Int64(f0_2).mul(System.Int64(f8));
                    var f0f9_2 = System.Int64(f0_2).mul(System.Int64(f9));
                    var f1f1_2 = System.Int64(f1_2).mul(System.Int64(f1));
                    var f1f2_2 = System.Int64(f1_2).mul(System.Int64(f2));
                    var f1f3_4 = System.Int64(f1_2).mul(System.Int64(f3_2));
                    var f1f4_2 = System.Int64(f1_2).mul(System.Int64(f4));
                    var f1f5_4 = System.Int64(f1_2).mul(System.Int64(f5_2));
                    var f1f6_2 = System.Int64(f1_2).mul(System.Int64(f6));
                    var f1f7_4 = System.Int64(f1_2).mul(System.Int64(f7_2));
                    var f1f8_2 = System.Int64(f1_2).mul(System.Int64(f8));
                    var f1f9_76 = System.Int64(f1_2).mul(System.Int64(f9_38));
                    var f2f2 = System.Int64(f2).mul(System.Int64(f2));
                    var f2f3_2 = System.Int64(f2_2).mul(System.Int64(f3));
                    var f2f4_2 = System.Int64(f2_2).mul(System.Int64(f4));
                    var f2f5_2 = System.Int64(f2_2).mul(System.Int64(f5));
                    var f2f6_2 = System.Int64(f2_2).mul(System.Int64(f6));
                    var f2f7_2 = System.Int64(f2_2).mul(System.Int64(f7));
                    var f2f8_38 = System.Int64(f2_2).mul(System.Int64(f8_19));
                    var f2f9_38 = System.Int64(f2).mul(System.Int64(f9_38));
                    var f3f3_2 = System.Int64(f3_2).mul(System.Int64(f3));
                    var f3f4_2 = System.Int64(f3_2).mul(System.Int64(f4));
                    var f3f5_4 = System.Int64(f3_2).mul(System.Int64(f5_2));
                    var f3f6_2 = System.Int64(f3_2).mul(System.Int64(f6));
                    var f3f7_76 = System.Int64(f3_2).mul(System.Int64(f7_38));
                    var f3f8_38 = System.Int64(f3_2).mul(System.Int64(f8_19));
                    var f3f9_76 = System.Int64(f3_2).mul(System.Int64(f9_38));
                    var f4f4 = System.Int64(f4).mul(System.Int64(f4));
                    var f4f5_2 = System.Int64(f4_2).mul(System.Int64(f5));
                    var f4f6_38 = System.Int64(f4_2).mul(System.Int64(f6_19));
                    var f4f7_38 = System.Int64(f4).mul(System.Int64(f7_38));
                    var f4f8_38 = System.Int64(f4_2).mul(System.Int64(f8_19));
                    var f4f9_38 = System.Int64(f4).mul(System.Int64(f9_38));
                    var f5f5_38 = System.Int64(f5).mul(System.Int64(f5_38));
                    var f5f6_38 = System.Int64(f5_2).mul(System.Int64(f6_19));
                    var f5f7_76 = System.Int64(f5_2).mul(System.Int64(f7_38));
                    var f5f8_38 = System.Int64(f5_2).mul(System.Int64(f8_19));
                    var f5f9_76 = System.Int64(f5_2).mul(System.Int64(f9_38));
                    var f6f6_19 = System.Int64(f6).mul(System.Int64(f6_19));
                    var f6f7_38 = System.Int64(f6).mul(System.Int64(f7_38));
                    var f6f8_38 = System.Int64(f6_2).mul(System.Int64(f8_19));
                    var f6f9_38 = System.Int64(f6).mul(System.Int64(f9_38));
                    var f7f7_38 = System.Int64(f7).mul(System.Int64(f7_38));
                    var f7f8_38 = System.Int64(f7_2).mul(System.Int64(f8_19));
                    var f7f9_76 = System.Int64(f7_2).mul(System.Int64(f9_38));
                    var f8f8_19 = System.Int64(f8).mul(System.Int64(f8_19));
                    var f8f9_38 = System.Int64(f8).mul(System.Int64(f9_38));
                    var f9f9_38 = System.Int64(f9).mul(System.Int64(f9_38));
                    var h0 = f0f0.add(f1f9_76).add(f2f8_38).add(f3f7_76).add(f4f6_38).add(f5f5_38);
                    var h1 = f0f1_2.add(f2f9_38).add(f3f8_38).add(f4f7_38).add(f5f6_38);
                    var h2 = f0f2_2.add(f1f1_2).add(f3f9_76).add(f4f8_38).add(f5f7_76).add(f6f6_19);
                    var h3 = f0f3_2.add(f1f2_2).add(f4f9_38).add(f5f8_38).add(f6f7_38);
                    var h4 = f0f4_2.add(f1f3_4).add(f2f2).add(f5f9_76).add(f6f8_38).add(f7f7_38);
                    var h5 = f0f5_2.add(f1f4_2).add(f2f3_2).add(f6f9_38).add(f7f8_38);
                    var h6 = f0f6_2.add(f1f5_4).add(f2f4_2).add(f3f3_2).add(f7f9_76).add(f8f8_19);
                    var h7 = f0f7_2.add(f1f6_2).add(f2f5_2).add(f3f4_2).add(f8f9_38);
                    var h8 = f0f8_2.add(f1f7_4).add(f2f6_2).add(f3f5_4).add(f4f4).add(f9f9_38);
                    var h9 = f0f9_2.add(f1f8_2).add(f2f7_2).add(f3f6_2).add(f4f5_2);
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));

                    carry1 = (h1.add(System.Int64(16777216))).shr(25);
                    h2 = h2.add(carry1);
                    h1 = h1.sub((carry1.shl(25)));
                    carry5 = (h5.add(System.Int64(16777216))).shr(25);
                    h6 = h6.add(carry5);
                    h5 = h5.sub((carry5.shl(25)));

                    carry2 = (h2.add(System.Int64(33554432))).shr(26);
                    h3 = h3.add(carry2);
                    h2 = h2.sub((carry2.shl(26)));
                    carry6 = (h6.add(System.Int64(33554432))).shr(26);
                    h7 = h7.add(carry6);
                    h6 = h6.sub((carry6.shl(26)));

                    carry3 = (h3.add(System.Int64(16777216))).shr(25);
                    h4 = h4.add(carry3);
                    h3 = h3.sub((carry3.shl(25)));
                    carry7 = (h7.add(System.Int64(16777216))).shr(25);
                    h8 = h8.add(carry7);
                    h7 = h7.sub((carry7.shl(25)));

                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    carry8 = (h8.add(System.Int64(33554432))).shr(26);
                    h9 = h9.add(carry8);
                    h8 = h8.sub((carry8.shl(26)));

                    carry9 = (h9.add(System.Int64(16777216))).shr(25);
                    h0 = h0.add((carry9.mul(System.Int64(19))));
                    h9 = h9.sub((carry9.shl(25)));

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));

                    h.v.x0 = System.Int64.clip32(h0);
                    h.v.x1 = System.Int64.clip32(h1);
                    h.v.x2 = System.Int64.clip32(h2);
                    h.v.x3 = System.Int64.clip32(h3);
                    h.v.x4 = System.Int64.clip32(h4);
                    h.v.x5 = System.Int64.clip32(h5);
                    h.v.x6 = System.Int64.clip32(h6);
                    h.v.x7 = System.Int64.clip32(h7);
                    h.v.x8 = System.Int64.clip32(h8);
                    h.v.x9 = System.Int64.clip32(h9);
                },
                fe_sq2: function (h, f) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var f0_2 = Bridge.Int.mul(2, f0);
                    var f1_2 = Bridge.Int.mul(2, f1);
                    var f2_2 = Bridge.Int.mul(2, f2);
                    var f3_2 = Bridge.Int.mul(2, f3);
                    var f4_2 = Bridge.Int.mul(2, f4);
                    var f5_2 = Bridge.Int.mul(2, f5);
                    var f6_2 = Bridge.Int.mul(2, f6);
                    var f7_2 = Bridge.Int.mul(2, f7);
                    var f5_38 = Bridge.Int.mul(38, f5); /* 1.959375*2^30 */
                    var f6_19 = Bridge.Int.mul(19, f6); /* 1.959375*2^30 */
                    var f7_38 = Bridge.Int.mul(38, f7); /* 1.959375*2^30 */
                    var f8_19 = Bridge.Int.mul(19, f8); /* 1.959375*2^30 */
                    var f9_38 = Bridge.Int.mul(38, f9); /* 1.959375*2^30 */
                    var f0f0 = System.Int64(f0).mul(System.Int64(f0));
                    var f0f1_2 = System.Int64(f0_2).mul(System.Int64(f1));
                    var f0f2_2 = System.Int64(f0_2).mul(System.Int64(f2));
                    var f0f3_2 = System.Int64(f0_2).mul(System.Int64(f3));
                    var f0f4_2 = System.Int64(f0_2).mul(System.Int64(f4));
                    var f0f5_2 = System.Int64(f0_2).mul(System.Int64(f5));
                    var f0f6_2 = System.Int64(f0_2).mul(System.Int64(f6));
                    var f0f7_2 = System.Int64(f0_2).mul(System.Int64(f7));
                    var f0f8_2 = System.Int64(f0_2).mul(System.Int64(f8));
                    var f0f9_2 = System.Int64(f0_2).mul(System.Int64(f9));
                    var f1f1_2 = System.Int64(f1_2).mul(System.Int64(f1));
                    var f1f2_2 = System.Int64(f1_2).mul(System.Int64(f2));
                    var f1f3_4 = System.Int64(f1_2).mul(System.Int64(f3_2));
                    var f1f4_2 = System.Int64(f1_2).mul(System.Int64(f4));
                    var f1f5_4 = System.Int64(f1_2).mul(System.Int64(f5_2));
                    var f1f6_2 = System.Int64(f1_2).mul(System.Int64(f6));
                    var f1f7_4 = System.Int64(f1_2).mul(System.Int64(f7_2));
                    var f1f8_2 = System.Int64(f1_2).mul(System.Int64(f8));
                    var f1f9_76 = System.Int64(f1_2).mul(System.Int64(f9_38));
                    var f2f2 = System.Int64(f2).mul(System.Int64(f2));
                    var f2f3_2 = System.Int64(f2_2).mul(System.Int64(f3));
                    var f2f4_2 = System.Int64(f2_2).mul(System.Int64(f4));
                    var f2f5_2 = System.Int64(f2_2).mul(System.Int64(f5));
                    var f2f6_2 = System.Int64(f2_2).mul(System.Int64(f6));
                    var f2f7_2 = System.Int64(f2_2).mul(System.Int64(f7));
                    var f2f8_38 = System.Int64(f2_2).mul(System.Int64(f8_19));
                    var f2f9_38 = System.Int64(f2).mul(System.Int64(f9_38));
                    var f3f3_2 = System.Int64(f3_2).mul(System.Int64(f3));
                    var f3f4_2 = System.Int64(f3_2).mul(System.Int64(f4));
                    var f3f5_4 = System.Int64(f3_2).mul(System.Int64(f5_2));
                    var f3f6_2 = System.Int64(f3_2).mul(System.Int64(f6));
                    var f3f7_76 = System.Int64(f3_2).mul(System.Int64(f7_38));
                    var f3f8_38 = System.Int64(f3_2).mul(System.Int64(f8_19));
                    var f3f9_76 = System.Int64(f3_2).mul(System.Int64(f9_38));
                    var f4f4 = System.Int64(f4).mul(System.Int64(f4));
                    var f4f5_2 = System.Int64(f4_2).mul(System.Int64(f5));
                    var f4f6_38 = System.Int64(f4_2).mul(System.Int64(f6_19));
                    var f4f7_38 = System.Int64(f4).mul(System.Int64(f7_38));
                    var f4f8_38 = System.Int64(f4_2).mul(System.Int64(f8_19));
                    var f4f9_38 = System.Int64(f4).mul(System.Int64(f9_38));
                    var f5f5_38 = System.Int64(f5).mul(System.Int64(f5_38));
                    var f5f6_38 = System.Int64(f5_2).mul(System.Int64(f6_19));
                    var f5f7_76 = System.Int64(f5_2).mul(System.Int64(f7_38));
                    var f5f8_38 = System.Int64(f5_2).mul(System.Int64(f8_19));
                    var f5f9_76 = System.Int64(f5_2).mul(System.Int64(f9_38));
                    var f6f6_19 = System.Int64(f6).mul(System.Int64(f6_19));
                    var f6f7_38 = System.Int64(f6).mul(System.Int64(f7_38));
                    var f6f8_38 = System.Int64(f6_2).mul(System.Int64(f8_19));
                    var f6f9_38 = System.Int64(f6).mul(System.Int64(f9_38));
                    var f7f7_38 = System.Int64(f7).mul(System.Int64(f7_38));
                    var f7f8_38 = System.Int64(f7_2).mul(System.Int64(f8_19));
                    var f7f9_76 = System.Int64(f7_2).mul(System.Int64(f9_38));
                    var f8f8_19 = System.Int64(f8).mul(System.Int64(f8_19));
                    var f8f9_38 = System.Int64(f8).mul(System.Int64(f9_38));
                    var f9f9_38 = System.Int64(f9).mul(System.Int64(f9_38));
                    var h0 = f0f0.add(f1f9_76).add(f2f8_38).add(f3f7_76).add(f4f6_38).add(f5f5_38);
                    var h1 = f0f1_2.add(f2f9_38).add(f3f8_38).add(f4f7_38).add(f5f6_38);
                    var h2 = f0f2_2.add(f1f1_2).add(f3f9_76).add(f4f8_38).add(f5f7_76).add(f6f6_19);
                    var h3 = f0f3_2.add(f1f2_2).add(f4f9_38).add(f5f8_38).add(f6f7_38);
                    var h4 = f0f4_2.add(f1f3_4).add(f2f2).add(f5f9_76).add(f6f8_38).add(f7f7_38);
                    var h5 = f0f5_2.add(f1f4_2).add(f2f3_2).add(f6f9_38).add(f7f8_38);
                    var h6 = f0f6_2.add(f1f5_4).add(f2f4_2).add(f3f3_2).add(f7f9_76).add(f8f8_19);
                    var h7 = f0f7_2.add(f1f6_2).add(f2f5_2).add(f3f4_2).add(f8f9_38);
                    var h8 = f0f8_2.add(f1f7_4).add(f2f6_2).add(f3f5_4).add(f4f4).add(f9f9_38);
                    var h9 = f0f9_2.add(f1f8_2).add(f2f7_2).add(f3f6_2).add(f4f5_2);
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    h0 = h0.add(h0);
                    h1 = h1.add(h1);
                    h2 = h2.add(h2);
                    h3 = h3.add(h3);
                    h4 = h4.add(h4);
                    h5 = h5.add(h5);
                    h6 = h6.add(h6);
                    h7 = h7.add(h7);
                    h8 = h8.add(h8);
                    h9 = h9.add(h9);

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));
                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));

                    carry1 = (h1.add(System.Int64(16777216))).shr(25);
                    h2 = h2.add(carry1);
                    h1 = h1.sub((carry1.shl(25)));
                    carry5 = (h5.add(System.Int64(16777216))).shr(25);
                    h6 = h6.add(carry5);
                    h5 = h5.sub((carry5.shl(25)));

                    carry2 = (h2.add(System.Int64(33554432))).shr(26);
                    h3 = h3.add(carry2);
                    h2 = h2.sub((carry2.shl(26)));
                    carry6 = (h6.add(System.Int64(33554432))).shr(26);
                    h7 = h7.add(carry6);
                    h6 = h6.sub((carry6.shl(26)));

                    carry3 = (h3.add(System.Int64(16777216))).shr(25);
                    h4 = h4.add(carry3);
                    h3 = h3.sub((carry3.shl(25)));
                    carry7 = (h7.add(System.Int64(16777216))).shr(25);
                    h8 = h8.add(carry7);
                    h7 = h7.sub((carry7.shl(25)));

                    carry4 = (h4.add(System.Int64(33554432))).shr(26);
                    h5 = h5.add(carry4);
                    h4 = h4.sub((carry4.shl(26)));
                    carry8 = (h8.add(System.Int64(33554432))).shr(26);
                    h9 = h9.add(carry8);
                    h8 = h8.sub((carry8.shl(26)));

                    carry9 = (h9.add(System.Int64(16777216))).shr(25);
                    h0 = h0.add((carry9.mul(System.Int64(19))));
                    h9 = h9.sub((carry9.shl(25)));

                    carry0 = (h0.add(System.Int64(33554432))).shr(26);
                    h1 = h1.add(carry0);
                    h0 = h0.sub((carry0.shl(26)));

                    h.v.x0 = System.Int64.clip32(h0);
                    h.v.x1 = System.Int64.clip32(h1);
                    h.v.x2 = System.Int64.clip32(h2);
                    h.v.x3 = System.Int64.clip32(h3);
                    h.v.x4 = System.Int64.clip32(h4);
                    h.v.x5 = System.Int64.clip32(h5);
                    h.v.x6 = System.Int64.clip32(h6);
                    h.v.x7 = System.Int64.clip32(h7);
                    h.v.x8 = System.Int64.clip32(h8);
                    h.v.x9 = System.Int64.clip32(h9);
                },
                fe_sub: function (h, f, g) {
                    var f0 = f.v.x0;
                    var f1 = f.v.x1;
                    var f2 = f.v.x2;
                    var f3 = f.v.x3;
                    var f4 = f.v.x4;
                    var f5 = f.v.x5;
                    var f6 = f.v.x6;
                    var f7 = f.v.x7;
                    var f8 = f.v.x8;
                    var f9 = f.v.x9;
                    var g0 = g.v.x0;
                    var g1 = g.v.x1;
                    var g2 = g.v.x2;
                    var g3 = g.v.x3;
                    var g4 = g.v.x4;
                    var g5 = g.v.x5;
                    var g6 = g.v.x6;
                    var g7 = g.v.x7;
                    var g8 = g.v.x8;
                    var g9 = g.v.x9;
                    var h0 = (f0 - g0) | 0;
                    var h1 = (f1 - g1) | 0;
                    var h2 = (f2 - g2) | 0;
                    var h3 = (f3 - g3) | 0;
                    var h4 = (f4 - g4) | 0;
                    var h5 = (f5 - g5) | 0;
                    var h6 = (f6 - g6) | 0;
                    var h7 = (f7 - g7) | 0;
                    var h8 = (f8 - g8) | 0;
                    var h9 = (f9 - g9) | 0;
                    h.v.x0 = h0;
                    h.v.x1 = h1;
                    h.v.x2 = h2;
                    h.v.x3 = h3;
                    h.v.x4 = h4;
                    h.v.x5 = h5;
                    h.v.x6 = h6;
                    h.v.x7 = h7;
                    h.v.x8 = h8;
                    h.v.x9 = h9;
                },
                fe_tobytes: function (s, offset, h) {
                    var hr = { v : new Phantasma.Cryptography.FieldElement() };
                    Phantasma.Cryptography.FieldOperations.fe_reduce(hr, h);

                    var h0 = hr.v.x0;
                    var h1 = hr.v.x1;
                    var h2 = hr.v.x2;
                    var h3 = hr.v.x3;
                    var h4 = hr.v.x4;
                    var h5 = hr.v.x5;
                    var h6 = hr.v.x6;
                    var h7 = hr.v.x7;
                    var h8 = hr.v.x8;
                    var h9 = hr.v.x9;

                    /* 
                    Goal: Output h0+...+2^255 h10-2^255 q, which is between 0 and 2^255-20.
                    Have h0+...+2^230 h9 between 0 and 2^255-1;
                    evidently 2^255 h10-2^255 q = 0.
                    Goal: Output h0+...+2^230 h9.
                    */
                    s[((offset + 0) | 0)] = (h0 >> 0) & 255;
                    s[((offset + 1) | 0)] = (h0 >> 8) & 255;
                    s[((offset + 2) | 0)] = (h0 >> 16) & 255;
                    s[((offset + 3) | 0)] = ((h0 >> 24) | (h1 << 2)) & 255;
                    s[((offset + 4) | 0)] = (h1 >> 6) & 255;
                    s[((offset + 5) | 0)] = (h1 >> 14) & 255;
                    s[((offset + 6) | 0)] = ((h1 >> 22) | (h2 << 3)) & 255;
                    s[((offset + 7) | 0)] = (h2 >> 5) & 255;
                    s[((offset + 8) | 0)] = (h2 >> 13) & 255;
                    s[((offset + 9) | 0)] = ((h2 >> 21) | (h3 << 5)) & 255;
                    s[((offset + 10) | 0)] = (h3 >> 3) & 255;
                    s[((offset + 11) | 0)] = (h3 >> 11) & 255;
                    s[((offset + 12) | 0)] = ((h3 >> 19) | (h4 << 6)) & 255;
                    s[((offset + 13) | 0)] = (h4 >> 2) & 255;
                    s[((offset + 14) | 0)] = (h4 >> 10) & 255;
                    s[((offset + 15) | 0)] = (h4 >> 18) & 255;
                    s[((offset + 16) | 0)] = (h5 >> 0) & 255;
                    s[((offset + 17) | 0)] = (h5 >> 8) & 255;
                    s[((offset + 18) | 0)] = (h5 >> 16) & 255;
                    s[((offset + 19) | 0)] = ((h5 >> 24) | (h6 << 1)) & 255;
                    s[((offset + 20) | 0)] = (h6 >> 7) & 255;
                    s[((offset + 21) | 0)] = (h6 >> 15) & 255;
                    s[((offset + 22) | 0)] = ((h6 >> 23) | (h7 << 3)) & 255;
                    s[((offset + 23) | 0)] = (h7 >> 5) & 255;
                    s[((offset + 24) | 0)] = (h7 >> 13) & 255;
                    s[((offset + 25) | 0)] = ((h7 >> 21) | (h8 << 4)) & 255;
                    s[((offset + 26) | 0)] = (h8 >> 4) & 255;
                    s[((offset + 27) | 0)] = (h8 >> 12) & 255;
                    s[((offset + 28) | 0)] = ((h8 >> 20) | (h9 << 6)) & 255;
                    s[((offset + 29) | 0)] = (h9 >> 2) & 255;
                    s[((offset + 30) | 0)] = (h9 >> 10) & 255;
                    s[((offset + 31) | 0)] = (h9 >> 18) & 255;
                },
                fe_reduce: function (hr, h) {
                    var h0 = h.v.x0;
                    var h1 = h.v.x1;
                    var h2 = h.v.x2;
                    var h3 = h.v.x3;
                    var h4 = h.v.x4;
                    var h5 = h.v.x5;
                    var h6 = h.v.x6;
                    var h7 = h.v.x7;
                    var h8 = h.v.x8;
                    var h9 = h.v.x9;
                    var q;
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;

                    q = (((Bridge.Int.mul(19, h9) + (16777216)) | 0)) >> 25;
                    q = (((h0 + q) | 0)) >> 26;
                    q = (((h1 + q) | 0)) >> 25;
                    q = (((h2 + q) | 0)) >> 26;
                    q = (((h3 + q) | 0)) >> 25;
                    q = (((h4 + q) | 0)) >> 26;
                    q = (((h5 + q) | 0)) >> 25;
                    q = (((h6 + q) | 0)) >> 26;
                    q = (((h7 + q) | 0)) >> 25;
                    q = (((h8 + q) | 0)) >> 26;
                    q = (((h9 + q) | 0)) >> 25;

                    /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
                    h0 = (h0 + (Bridge.Int.mul(19, q))) | 0;
                    /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */

                    carry0 = h0 >> 26;
                    h1 = (h1 + carry0) | 0;
                    h0 = (h0 - (carry0 << 26)) | 0;
                    carry1 = h1 >> 25;
                    h2 = (h2 + carry1) | 0;
                    h1 = (h1 - (carry1 << 25)) | 0;
                    carry2 = h2 >> 26;
                    h3 = (h3 + carry2) | 0;
                    h2 = (h2 - (carry2 << 26)) | 0;
                    carry3 = h3 >> 25;
                    h4 = (h4 + carry3) | 0;
                    h3 = (h3 - (carry3 << 25)) | 0;
                    carry4 = h4 >> 26;
                    h5 = (h5 + carry4) | 0;
                    h4 = (h4 - (carry4 << 26)) | 0;
                    carry5 = h5 >> 25;
                    h6 = (h6 + carry5) | 0;
                    h5 = (h5 - (carry5 << 25)) | 0;
                    carry6 = h6 >> 26;
                    h7 = (h7 + carry6) | 0;
                    h6 = (h6 - (carry6 << 26)) | 0;
                    carry7 = h7 >> 25;
                    h8 = (h8 + carry7) | 0;
                    h7 = (h7 - (carry7 << 25)) | 0;
                    carry8 = h8 >> 26;
                    h9 = (h9 + carry8) | 0;
                    h8 = (h8 - (carry8 << 26)) | 0;
                    carry9 = h9 >> 25;
                    h9 = (h9 - (carry9 << 25)) | 0;
                    /* h10 = carry9 */

                    hr.v.x0 = h0;
                    hr.v.x1 = h1;
                    hr.v.x2 = h2;
                    hr.v.x3 = h3;
                    hr.v.x4 = h4;
                    hr.v.x5 = h5;
                    hr.v.x6 = h6;
                    hr.v.x7 = h7;
                    hr.v.x8 = h8;
                    hr.v.x9 = h9;
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.GroupElementCached", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Phantasma.Cryptography.GroupElementCached(); }
            }
        },
        fields: {
            YplusX: null,
            YminusX: null,
            Z: null,
            T2d: null
        },
        ctors: {
            init: function () {
                this.YplusX = new Phantasma.Cryptography.FieldElement();
                this.YminusX = new Phantasma.Cryptography.FieldElement();
                this.Z = new Phantasma.Cryptography.FieldElement();
                this.T2d = new Phantasma.Cryptography.FieldElement();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7376593612, this.YplusX, this.YminusX, this.Z, this.T2d]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.GroupElementCached)) {
                    return false;
                }
                return Bridge.equals(this.YplusX, o.YplusX) && Bridge.equals(this.YminusX, o.YminusX) && Bridge.equals(this.Z, o.Z) && Bridge.equals(this.T2d, o.T2d);
            },
            $clone: function (to) {
                var s = to || new Phantasma.Cryptography.GroupElementCached();
                s.YplusX = this.YplusX.$clone();
                s.YminusX = this.YminusX.$clone();
                s.Z = this.Z.$clone();
                s.T2d = this.T2d.$clone();
                return s;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.GroupElementP1P1", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Phantasma.Cryptography.GroupElementP1P1(); }
            }
        },
        fields: {
            X: null,
            Y: null,
            Z: null,
            T: null
        },
        ctors: {
            init: function () {
                this.X = new Phantasma.Cryptography.FieldElement();
                this.Y = new Phantasma.Cryptography.FieldElement();
                this.Z = new Phantasma.Cryptography.FieldElement();
                this.T = new Phantasma.Cryptography.FieldElement();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([6452563572, this.X, this.Y, this.Z, this.T]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.GroupElementP1P1)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y) && Bridge.equals(this.Z, o.Z) && Bridge.equals(this.T, o.T);
            },
            $clone: function (to) {
                var s = to || new Phantasma.Cryptography.GroupElementP1P1();
                s.X = this.X.$clone();
                s.Y = this.Y.$clone();
                s.Z = this.Z.$clone();
                s.T = this.T.$clone();
                return s;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.GroupElementP2", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Phantasma.Cryptography.GroupElementP2(); }
            }
        },
        fields: {
            X: null,
            Y: null,
            Z: null
        },
        ctors: {
            init: function () {
                this.X = new Phantasma.Cryptography.FieldElement();
                this.Y = new Phantasma.Cryptography.FieldElement();
                this.Z = new Phantasma.Cryptography.FieldElement();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5625237364, this.X, this.Y, this.Z]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.GroupElementP2)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y) && Bridge.equals(this.Z, o.Z);
            },
            $clone: function (to) {
                var s = to || new Phantasma.Cryptography.GroupElementP2();
                s.X = this.X.$clone();
                s.Y = this.Y.$clone();
                s.Z = this.Z.$clone();
                return s;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.GroupElementP3", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Phantasma.Cryptography.GroupElementP3(); }
            }
        },
        fields: {
            X: null,
            Y: null,
            Z: null,
            T: null
        },
        ctors: {
            init: function () {
                this.X = new Phantasma.Cryptography.FieldElement();
                this.Y = new Phantasma.Cryptography.FieldElement();
                this.Z = new Phantasma.Cryptography.FieldElement();
                this.T = new Phantasma.Cryptography.FieldElement();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5625237620, this.X, this.Y, this.Z, this.T]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.GroupElementP3)) {
                    return false;
                }
                return Bridge.equals(this.X, o.X) && Bridge.equals(this.Y, o.Y) && Bridge.equals(this.Z, o.Z) && Bridge.equals(this.T, o.T);
            },
            $clone: function (to) {
                var s = to || new Phantasma.Cryptography.GroupElementP3();
                s.X = this.X.$clone();
                s.Y = this.Y.$clone();
                s.Z = this.Z.$clone();
                s.T = this.T.$clone();
                return s;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.GroupElementPreComp", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Phantasma.Cryptography.GroupElementPreComp(); }
            }
        },
        fields: {
            yplusx: null,
            yminusx: null,
            xy2d: null
        },
        ctors: {
            init: function () {
                this.yplusx = new Phantasma.Cryptography.FieldElement();
                this.yminusx = new Phantasma.Cryptography.FieldElement();
                this.xy2d = new Phantasma.Cryptography.FieldElement();
            },
            $ctor1: function (yplusx, yminusx, xy2d) {
                this.$initialize();
                this.yplusx = yplusx.$clone();
                this.yminusx = yminusx.$clone();
                this.xy2d = xy2d.$clone();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([6763314403, this.yplusx, this.yminusx, this.xy2d]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Phantasma.Cryptography.GroupElementPreComp)) {
                    return false;
                }
                return Bridge.equals(this.yplusx, o.yplusx) && Bridge.equals(this.yminusx, o.yminusx) && Bridge.equals(this.xy2d, o.xy2d);
            },
            $clone: function (to) {
                var s = to || new Phantasma.Cryptography.GroupElementPreComp();
                s.yplusx = this.yplusx.$clone();
                s.yminusx = this.yminusx.$clone();
                s.xy2d = this.xy2d.$clone();
                return s;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.GroupOperations", {
        statics: {
            methods: {
                ge_add: function (r, p, q) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };

                    /* qhasm: enter GroupElementadd */

                    /* qhasm: fe X1 */

                    /* qhasm: fe Y1 */

                    /* qhasm: fe Z1 */

                    /* qhasm: fe Z2 */

                    /* qhasm: fe T1 */

                    /* qhasm: fe ZZ */

                    /* qhasm: fe YpX2 */

                    /* qhasm: fe YmX2 */

                    /* qhasm: fe T2d2 */

                    /* qhasm: fe X3 */

                    /* qhasm: fe Y3 */

                    /* qhasm: fe Z3 */

                    /* qhasm: fe T3 */

                    /* qhasm: fe YpX1 */

                    /* qhasm: fe YmX1 */

                    /* qhasm: fe A */

                    /* qhasm: fe B */

                    /* qhasm: fe C */

                    /* qhasm: fe D */

                    /* qhasm: YpX1 = Y1+X1 */
                    /* asm 1: fe_add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: YmX1 = Y1-X1 */
                    /* asm 1: fe_sub(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_sub(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: A = YpX1*YpX2 */
                    /* asm 1: fe_mul(>A=fe#3,<YpX1=fe#1,<YpX2=fe#15); */
                    /* asm 2: fe_mul(>A=r.Z,<YpX1=r.X,<YpX2=q.YplusX); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "X"), Bridge.ref(q.v, "YplusX"));

                    /* qhasm: B = YmX1*YmX2 */
                    /* asm 1: fe_mul(>B=fe#2,<YmX1=fe#2,<YmX2=fe#16); */
                    /* asm 2: fe_mul(>B=r.Y,<YmX1=r.Y,<YmX2=q.YminusX); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Y"), Bridge.ref(q.v, "YminusX"));

                    /* qhasm: C = T2d2*T1 */
                    /* asm 1: fe_mul(>C=fe#4,<T2d2=fe#18,<T1=fe#14); */
                    /* asm 2: fe_mul(>C=r.T,<T2d2=q.T2d,<T1=p.T); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "T"), Bridge.ref(q.v, "T2d"), Bridge.ref(p.v, "T"));

                    /* qhasm: ZZ = Z1*Z2 */
                    /* asm 1: fe_mul(>ZZ=fe#1,<Z1=fe#13,<Z2=fe#17); */
                    /* asm 2: fe_mul(>ZZ=r.X,<Z1=p.Z,<Z2=q.Z); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "Z"), Bridge.ref(q.v, "Z"));

                    /* qhasm: D = 2*ZZ */
                    /* asm 1: fe_add(>D=fe#5,<ZZ=fe#1,<ZZ=fe#1); */
                    /* asm 2: fe_add(>D=t0,<ZZ=r.X,<ZZ=r.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(t0, Bridge.ref(r.v, "X"), Bridge.ref(r.v, "X"));

                    /* qhasm: X3 = A-B */
                    /* asm 1: fe_sub(>X3=fe#1,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_sub(>X3=r.X,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "X"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Y3 = A+B */
                    /* asm 1: fe_add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Z3 = D+C */
                    /* asm 1: fe_add(>Z3=fe#3,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_add(>Z3=r.Z,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Z"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: T3 = D-C */
                    /* asm 1: fe_sub(>T3=fe#4,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_sub(>T3=r.T,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "T"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: return */
                },
                slide: function (r, a) {
                    var i;
                    var b;
                    var k;

                    for (i = 0; i < 256; i = (i + 1) | 0) {
                        r[System.Array.index(i, r)] = Bridge.Int.sxb((1 & (a[System.Array.index(i >> 3, a)] >> (i & 7))) & 255);
                    }

                    for (i = 0; i < 256; i = (i + 1) | 0) {
                        if (r[System.Array.index(i, r)] !== 0) {
                            for (b = 1; b <= 6 && ((i + b) | 0) < 256; b = (b + 1) | 0) {
                                if (r[System.Array.index(((i + b) | 0), r)] !== 0) {
                                    if (((r[System.Array.index(i, r)] + (r[System.Array.index(((i + b) | 0), r)] << b)) | 0) <= 15) {
                                        r[System.Array.index(i, r)] = Bridge.Int.sxb((r[System.Array.index(i, r)] + (Bridge.Int.sxb((r[System.Array.index(((i + b) | 0), r)] << b) & 255))) & 255);
                                        r[System.Array.index(((i + b) | 0), r)] = 0;
                                    } else if (((r[System.Array.index(i, r)] - (r[System.Array.index(((i + b) | 0), r)] << b)) | 0) >= -15) {
                                        r[System.Array.index(i, r)] = Bridge.Int.sxb((r[System.Array.index(i, r)] - (Bridge.Int.sxb((r[System.Array.index(((i + b) | 0), r)] << b) & 255))) & 255);
                                        for (k = (i + b) | 0; k < 256; k = (k + 1) | 0) {
                                            if (r[System.Array.index(k, r)] === 0) {
                                                r[System.Array.index(k, r)] = 1;
                                                break;
                                            }
                                            r[System.Array.index(k, r)] = 0;
                                        }
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                    }

                },
                ge_double_scalarmult_vartime: function (r, a, A, b) {
                    var Bi = Phantasma.Cryptography.LookupTables.Base2;
                    var aslide = System.Array.init(256, 0, System.SByte);
                    var bslide = System.Array.init(256, 0, System.SByte);
                    var Ai = System.Array.init(8, function (){
                        return new Phantasma.Cryptography.GroupElementCached();
                    }, Phantasma.Cryptography.GroupElementCached); /* A,3A,5A,7A,9A,11A,13A,15A */
                    var t = { v : new Phantasma.Cryptography.GroupElementP1P1() };
                    var u = { v : new Phantasma.Cryptography.GroupElementP3() };
                    var A2 = { v : new Phantasma.Cryptography.GroupElementP3() };
                    var i;

                    Phantasma.Cryptography.GroupOperations.slide(aslide, a);
                    Phantasma.Cryptography.GroupOperations.slide(bslide, b);

                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 0), A);
                    Phantasma.Cryptography.GroupOperations.ge_p3_dbl(t, A);
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(A2, t);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 0));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 1), u);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 1));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 2), u);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 2));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 3), u);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 3));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 4), u);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 4));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 5), u);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 5));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 6), u);
                    Phantasma.Cryptography.GroupOperations.ge_add(t, A2, Bridge.ref(Ai, 6));
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_cached(Bridge.ref(Ai, 7), u);

                    Phantasma.Cryptography.GroupOperations.ge_p2_0(r);

                    for (i = 255; i >= 0; i = (i - 1) | 0) {
                        if ((aslide[System.Array.index(i, aslide)] !== 0) || (bslide[System.Array.index(i, bslide)] !== 0)) {
                            break;
                        }
                    }

                    for (; i >= 0; i = (i - 1) | 0) {
                        Phantasma.Cryptography.GroupOperations.ge_p2_dbl(t, r);

                        if (aslide[System.Array.index(i, aslide)] > 0) {
                            Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                            Phantasma.Cryptography.GroupOperations.ge_add(t, u, Bridge.ref(Ai, ((Bridge.Int.div(aslide[System.Array.index(i, aslide)], 2)) | 0)));
                        } else if (aslide[System.Array.index(i, aslide)] < 0) {
                            Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                            Phantasma.Cryptography.GroupOperations.ge_sub(t, u, Bridge.ref(Ai, ((Bridge.Int.div((((-aslide[System.Array.index(i, aslide)]) | 0)), 2)) | 0)));
                        }

                        if (bslide[System.Array.index(i, bslide)] > 0) {
                            Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                            Phantasma.Cryptography.GroupOperations.ge_madd(t, u, Bridge.ref(Bi, ((Bridge.Int.div(bslide[System.Array.index(i, bslide)], 2)) | 0)));
                        } else if (bslide[System.Array.index(i, bslide)] < 0) {
                            Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(u, t);
                            Phantasma.Cryptography.GroupOperations.ge_msub(t, u, Bridge.ref(Bi, ((Bridge.Int.div((((-bslide[System.Array.index(i, bslide)]) | 0)), 2)) | 0)));
                        }

                        Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p2(r, t);
                    }
                },
                ge_frombytes_negate_vartime: function (h, data, offset) {
                    var u = { v : new Phantasma.Cryptography.FieldElement() };
                    var v = { v : new Phantasma.Cryptography.FieldElement() };
                    var v3 = { v : new Phantasma.Cryptography.FieldElement() };
                    var vxx = { v : new Phantasma.Cryptography.FieldElement() };
                    var check = { v : new Phantasma.Cryptography.FieldElement() };

                    Phantasma.Cryptography.FieldOperations.fe_frombytes(Bridge.ref(h.v, "Y"), data, offset);
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "Z"));
                    Phantasma.Cryptography.FieldOperations.fe_sq(u, Bridge.ref(h.v, "Y"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(v, u, Bridge.ref(Phantasma.Cryptography.LookupTables, "d"));
                    Phantasma.Cryptography.FieldOperations.fe_sub(u, u, Bridge.ref(h.v, "Z")); /* u = y^2-1 */
                    Phantasma.Cryptography.FieldOperations.fe_add(v, v, Bridge.ref(h.v, "Z")); /* v = dy^2+1 */

                    Phantasma.Cryptography.FieldOperations.fe_sq(v3, v);
                    Phantasma.Cryptography.FieldOperations.fe_mul(v3, v3, v); /* v3 = v^3 */
                    Phantasma.Cryptography.FieldOperations.fe_sq(Bridge.ref(h.v, "X"), v3);
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X"), v);
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X"), u); /* x = uv^7 */

                    Phantasma.Cryptography.FieldOperations.fe_pow22523(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X")); /* x = (uv^7)^((q-5)/8) */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X"), v3);
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X"), u); /* x = uv^3(uv^7)^((q-5)/8) */

                    Phantasma.Cryptography.FieldOperations.fe_sq(vxx, Bridge.ref(h.v, "X"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(vxx, vxx, v);
                    Phantasma.Cryptography.FieldOperations.fe_sub(check, vxx, u); /* vx^2-u */
                    if (Phantasma.Cryptography.FieldOperations.fe_isnonzero(check) !== 0) {
                        Phantasma.Cryptography.FieldOperations.fe_add(check, vxx, u); /* vx^2+u */
                        if (Phantasma.Cryptography.FieldOperations.fe_isnonzero(check) !== 0) {
                            h.v = Bridge.getDefaultValue(Phantasma.Cryptography.GroupElementP3);
                            return -1;
                        }
                        Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X"), Bridge.ref(Phantasma.Cryptography.LookupTables, "sqrtm1"));
                    }

                    if (Phantasma.Cryptography.FieldOperations.fe_isnegative(Bridge.ref(h.v, "X")) === (data[System.Array.index(((offset + 31) | 0), data)] >> 7)) {
                        Phantasma.Cryptography.FieldOperations.fe_neg(Bridge.ref(h.v, "X"), Bridge.ref(h.v, "X"));
                    }

                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(h.v, "T"), Bridge.ref(h.v, "X"), Bridge.ref(h.v, "Y"));
                    return 0;
                },
                ge_madd: function (r, p, q) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };

                    /* qhasm: enter ge_madd */

                    /* qhasm: fe X1 */

                    /* qhasm: fe Y1 */

                    /* qhasm: fe Z1 */

                    /* qhasm: fe T1 */

                    /* qhasm: fe ypx2 */

                    /* qhasm: fe ymx2 */

                    /* qhasm: fe xy2d2 */

                    /* qhasm: fe X3 */

                    /* qhasm: fe Y3 */

                    /* qhasm: fe Z3 */

                    /* qhasm: fe T3 */

                    /* qhasm: fe YpX1 */

                    /* qhasm: fe YmX1 */

                    /* qhasm: fe A */

                    /* qhasm: fe B */

                    /* qhasm: fe C */

                    /* qhasm: fe D */

                    /* qhasm: YpX1 = Y1+X1 */
                    /* asm 1: fe_add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: YmX1 = Y1-X1 */
                    /* asm 1: fe_sub(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_sub(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: A = YpX1*ypx2 */
                    /* asm 1: fe_mul(>A=fe#3,<YpX1=fe#1,<ypx2=fe#15); */
                    /* asm 2: fe_mul(>A=r.Z,<YpX1=r.X,<ypx2=q.yplusx); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "X"), Bridge.ref(q.v, "yplusx"));

                    /* qhasm: B = YmX1*ymx2 */
                    /* asm 1: fe_mul(>B=fe#2,<YmX1=fe#2,<ymx2=fe#16); */
                    /* asm 2: fe_mul(>B=r.Y,<YmX1=r.Y,<ymx2=q.yminusx); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Y"), Bridge.ref(q.v, "yminusx"));

                    /* qhasm: C = xy2d2*T1 */
                    /* asm 1: fe_mul(>C=fe#4,<xy2d2=fe#17,<T1=fe#14); */
                    /* asm 2: fe_mul(>C=r.T,<xy2d2=q.xy2d,<T1=p.T); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "T"), Bridge.ref(q.v, "xy2d"), Bridge.ref(p.v, "T"));

                    /* qhasm: D = 2*Z1 */
                    /* asm 1: fe_add(>D=fe#5,<Z1=fe#13,<Z1=fe#13); */
                    /* asm 2: fe_add(>D=t0,<Z1=p.Z,<Z1=p.Z); */
                    Phantasma.Cryptography.FieldOperations.fe_add(t0, Bridge.ref(p.v, "Z"), Bridge.ref(p.v, "Z"));

                    /* qhasm: X3 = A-B */
                    /* asm 1: fe_sub(>X3=fe#1,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_sub(>X3=r.X,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "X"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Y3 = A+B */
                    /* asm 1: fe_add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Z3 = D+C */
                    /* asm 1: fe_add(>Z3=fe#3,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_add(>Z3=r.Z,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Z"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: T3 = D-C */
                    /* asm 1: fe_sub(>T3=fe#4,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_sub(>T3=r.T,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "T"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: return */

                },
                ge_msub: function (r, p, q) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };

                    /* qhasm: enter ge_msub */

                    /* qhasm: fe X1 */

                    /* qhasm: fe Y1 */

                    /* qhasm: fe Z1 */

                    /* qhasm: fe T1 */

                    /* qhasm: fe ypx2 */

                    /* qhasm: fe ymx2 */

                    /* qhasm: fe xy2d2 */

                    /* qhasm: fe X3 */

                    /* qhasm: fe Y3 */

                    /* qhasm: fe Z3 */

                    /* qhasm: fe T3 */

                    /* qhasm: fe YpX1 */

                    /* qhasm: fe YmX1 */

                    /* qhasm: fe A */

                    /* qhasm: fe B */

                    /* qhasm: fe C */

                    /* qhasm: fe D */

                    /* qhasm: YpX1 = Y1+X1 */
                    /* asm 1: fe_add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: YmX1 = Y1-X1 */
                    /* asm 1: fe_sub(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_sub(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: A = YpX1*ymx2 */
                    /* asm 1: fe_mul(>A=fe#3,<YpX1=fe#1,<ymx2=fe#16); */
                    /* asm 2: fe_mul(>A=r.Z,<YpX1=r.X,<ymx2=q.yminusx); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "X"), Bridge.ref(q.v, "yminusx"));

                    /* qhasm: B = YmX1*ypx2 */
                    /* asm 1: fe_mul(>B=fe#2,<YmX1=fe#2,<ypx2=fe#15); */
                    /* asm 2: fe_mul(>B=r.Y,<YmX1=r.Y,<ypx2=q.yplusx); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Y"), Bridge.ref(q.v, "yplusx"));

                    /* qhasm: C = xy2d2*T1 */
                    /* asm 1: fe_mul(>C=fe#4,<xy2d2=fe#17,<T1=fe#14); */
                    /* asm 2: fe_mul(>C=r.T,<xy2d2=q.xy2d,<T1=p.T); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "T"), Bridge.ref(q.v, "xy2d"), Bridge.ref(p.v, "T"));

                    /* qhasm: D = 2*Z1 */
                    /* asm 1: fe_add(>D=fe#5,<Z1=fe#13,<Z1=fe#13); */
                    /* asm 2: fe_add(>D=t0,<Z1=p.Z,<Z1=p.Z); */
                    Phantasma.Cryptography.FieldOperations.fe_add(t0, Bridge.ref(p.v, "Z"), Bridge.ref(p.v, "Z"));

                    /* qhasm: X3 = A-B */
                    /* asm 1: fe_sub(>X3=fe#1,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_sub(>X3=r.X,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "X"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Y3 = A+B */
                    /* asm 1: fe_add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Z3 = D-C */
                    /* asm 1: fe_sub(>Z3=fe#3,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_sub(>Z3=r.Z,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Z"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: T3 = D+C */
                    /* asm 1: fe_add(>T3=fe#4,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_add(>T3=r.T,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "T"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: return */

                },
                ge_p1p1_to_p2: function (r, p) {
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "X"), Bridge.ref(p.v, "T"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "Z"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Z"), Bridge.ref(p.v, "Z"), Bridge.ref(p.v, "T"));
                },
                ge_p1p1_to_p3: function (r, p) {
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "X"), Bridge.ref(p.v, "T"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "Z"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Z"), Bridge.ref(p.v, "Z"), Bridge.ref(p.v, "T"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "T"), Bridge.ref(p.v, "X"), Bridge.ref(p.v, "Y"));
                },
                ge_p2_0: function (h) {
                    Phantasma.Cryptography.FieldOperations.fe_0(Bridge.ref(h.v, "X"));
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "Y"));
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "Z"));
                },
                ge_p2_dbl: function (r, p) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };

                    /* qhasm: enter ge_p2_dbl */

                    /* qhasm: fe X1 */

                    /* qhasm: fe Y1 */

                    /* qhasm: fe Z1 */

                    /* qhasm: fe A */

                    /* qhasm: fe AA */

                    /* qhasm: fe XX */

                    /* qhasm: fe YY */

                    /* qhasm: fe B */

                    /* qhasm: fe X3 */

                    /* qhasm: fe Y3 */

                    /* qhasm: fe Z3 */

                    /* qhasm: fe T3 */

                    /* qhasm: XX=X1^2 */
                    /* asm 1: fe_sq(>XX=fe#1,<X1=fe#11); */
                    /* asm 2: fe_sq(>XX=r.X,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "X"));

                    /* qhasm: YY=Y1^2 */
                    /* asm 1: fe_sq(>YY=fe#3,<Y1=fe#12); */
                    /* asm 2: fe_sq(>YY=r.Z,<Y1=p.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(Bridge.ref(r.v, "Z"), Bridge.ref(p.v, "Y"));

                    /* qhasm: B=2*Z1^2 */
                    /* asm 1: fe_sq2(>B=fe#4,<Z1=fe#13); */
                    /* asm 2: fe_sq2(>B=r.T,<Z1=p.Z); */
                    Phantasma.Cryptography.FieldOperations.fe_sq2(Bridge.ref(r.v, "T"), Bridge.ref(p.v, "Z"));

                    /* qhasm: A=X1+Y1 */
                    /* asm 1: fe_add(>A=fe#2,<X1=fe#11,<Y1=fe#12); */
                    /* asm 2: fe_add(>A=r.Y,<X1=p.X,<Y1=p.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "X"), Bridge.ref(p.v, "Y"));

                    /* qhasm: AA=A^2 */
                    /* asm 1: fe_sq(>AA=fe#5,<A=fe#2); */
                    /* asm 2: fe_sq(>AA=t0,<A=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sq(t0, Bridge.ref(r.v, "Y"));

                    /* qhasm: Y3=YY+XX */
                    /* asm 1: fe_add(>Y3=fe#2,<YY=fe#3,<XX=fe#1); */
                    /* asm 2: fe_add(>Y3=r.Y,<YY=r.Z,<XX=r.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "X"));

                    /* qhasm: Z3=YY-XX */
                    /* asm 1: fe_sub(>Z3=fe#3,<YY=fe#3,<XX=fe#1); */
                    /* asm 2: fe_sub(>Z3=r.Z,<YY=r.Z,<XX=r.X); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "X"));

                    /* qhasm: X3=AA-Y3 */
                    /* asm 1: fe_sub(>X3=fe#1,<AA=fe#5,<Y3=fe#2); */
                    /* asm 2: fe_sub(>X3=r.X,<AA=t0,<Y3=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "X"), t0, Bridge.ref(r.v, "Y"));

                    /* qhasm: T3=B-Z3 */
                    /* asm 1: fe_sub(>T3=fe#4,<B=fe#4,<Z3=fe#3); */
                    /* asm 2: fe_sub(>T3=r.T,<B=r.T,<Z3=r.Z); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "T"), Bridge.ref(r.v, "T"), Bridge.ref(r.v, "Z"));

                    /* qhasm: return */

                },
                ge_p3_0: function (h) {
                    Phantasma.Cryptography.FieldOperations.fe_0(Bridge.ref(h.v, "X"));
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "Y"));
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "Z"));
                    Phantasma.Cryptography.FieldOperations.fe_0(Bridge.ref(h.v, "T"));
                },
                ge_p3_dbl: function (r, p) {
                    var q = { v : new Phantasma.Cryptography.GroupElementP2() };
                    Phantasma.Cryptography.GroupOperations.ge_p3_to_p2(q, p);
                    Phantasma.Cryptography.GroupOperations.ge_p2_dbl(r, q);
                },
                ge_p3_to_cached: function (r, p) {
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "YplusX"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "YminusX"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));
                    r.v.Z = p.v.Z.$clone();
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "T2d"), Bridge.ref(p.v, "T"), Bridge.ref(Phantasma.Cryptography.LookupTables, "d2"));
                },
                ge_p3_to_p2: function (r, p) {
                    r.v.X = p.v.X.$clone();
                    r.v.Y = p.v.Y.$clone();
                    r.v.Z = p.v.Z.$clone();
                },
                ge_p3_tobytes: function (s, offset, h) {
                    var $t;
                    var recip = { v : new Phantasma.Cryptography.FieldElement() };
                    var x = { v : new Phantasma.Cryptography.FieldElement() };
                    var y = { v : new Phantasma.Cryptography.FieldElement() };

                    Phantasma.Cryptography.FieldOperations.fe_invert(recip, Bridge.ref(h.v, "Z"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(x, Bridge.ref(h.v, "X"), recip);
                    Phantasma.Cryptography.FieldOperations.fe_mul(y, Bridge.ref(h.v, "Y"), recip);
                    Phantasma.Cryptography.FieldOperations.fe_tobytes(s, offset, y);
                    s[System.Array.index(($t = ((offset + 31) | 0)), s)] = (s[System.Array.index($t, s)] ^ (((Phantasma.Cryptography.FieldOperations.fe_isnegative(x) << 7) & 255))) & 255;
                },
                ge_precomp_0: function (h) {
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "yplusx"));
                    Phantasma.Cryptography.FieldOperations.fe_1(Bridge.ref(h.v, "yminusx"));
                    Phantasma.Cryptography.FieldOperations.fe_0(Bridge.ref(h.v, "xy2d"));
                },
                equal: function (b, c) {

                    var ub = b;
                    var uc = c;
                    var x = (ub ^ uc) & 255; /* 0: yes; 1..255: no */
                    var y = x; /* 0: yes; 1..255: no */
                    y = (y - 1) >>> 0; /* 4294967295: yes; 0..254: no */
                    y = y >>> 31; /* 1: yes; 0: no */
                    return (y & 255);
                },
                negative: function (b) {
                    var x = System.Int64.clipu64(System.Int64(b)); /* 18446744073709551361..18446744073709551615: yes; 0..255: no */
                    x = x.shru(63); /* 1: yes; 0: no */
                    return System.Int64.clipu8(x);
                },
                cmov: function (t, u, b) {
                    Phantasma.Cryptography.FieldOperations.fe_cmov(Bridge.ref(t.v, "yplusx"), Bridge.ref(u.v, "yplusx"), b);
                    Phantasma.Cryptography.FieldOperations.fe_cmov(Bridge.ref(t.v, "yminusx"), Bridge.ref(u.v, "yminusx"), b);
                    Phantasma.Cryptography.FieldOperations.fe_cmov(Bridge.ref(t.v, "xy2d"), Bridge.ref(u.v, "xy2d"), b);
                },
                select: function (t, pos, b) {
                    var minust = { v : new Phantasma.Cryptography.GroupElementPreComp() };
                    var bnegative = Phantasma.Cryptography.GroupOperations.negative(b);
                    var babs = (((b - (((((-bnegative) | 0)) & b) << 1)) | 0)) & 255;

                    Phantasma.Cryptography.GroupOperations.ge_precomp_0(t);
                    var table = Phantasma.Cryptography.LookupTables.Base[System.Array.index(pos, Phantasma.Cryptography.LookupTables.Base)];
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 0), Phantasma.Cryptography.GroupOperations.equal(babs, 1));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 1), Phantasma.Cryptography.GroupOperations.equal(babs, 2));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 2), Phantasma.Cryptography.GroupOperations.equal(babs, 3));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 3), Phantasma.Cryptography.GroupOperations.equal(babs, 4));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 4), Phantasma.Cryptography.GroupOperations.equal(babs, 5));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 5), Phantasma.Cryptography.GroupOperations.equal(babs, 6));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 6), Phantasma.Cryptography.GroupOperations.equal(babs, 7));
                    Phantasma.Cryptography.GroupOperations.cmov(t, Bridge.ref(table, 7), Phantasma.Cryptography.GroupOperations.equal(babs, 8));
                    minust.v.yplusx = t.v.yminusx.$clone();
                    minust.v.yminusx = t.v.yplusx.$clone();
                    Phantasma.Cryptography.FieldOperations.fe_neg(Bridge.ref(minust.v, "xy2d"), Bridge.ref(t.v, "xy2d"));
                    Phantasma.Cryptography.GroupOperations.cmov(t, minust, bnegative);
                },
                ge_scalarmult_base: function (h, a, offset) {
                    var e = System.Array.init(64, 0, System.SByte);
                    var carry;
                    var r = { v : new Phantasma.Cryptography.GroupElementP1P1() };
                    var s = { v : new Phantasma.Cryptography.GroupElementP2() };
                    var t = { v : new Phantasma.Cryptography.GroupElementPreComp() };
                    var i;

                    for (i = 0; i < 32; i = (i + 1) | 0) {
                        e[System.Array.index(((Bridge.Int.mul(2, i) + 0) | 0), e)] = Bridge.Int.sxb(((a[System.Array.index(((offset + i) | 0), a)] >> 0) & 15) & 255);
                        e[System.Array.index(((Bridge.Int.mul(2, i) + 1) | 0), e)] = Bridge.Int.sxb(((a[System.Array.index(((offset + i) | 0), a)] >> 4) & 15) & 255);
                    }
                    /* each e[i] is between 0 and 15 */
                    /* e[63] is between 0 and 7 */

                    carry = 0;
                    for (i = 0; i < 63; i = (i + 1) | 0) {
                        e[System.Array.index(i, e)] = Bridge.Int.sxb((e[System.Array.index(i, e)] + carry) & 255);
                        carry = Bridge.Int.sxb((((e[System.Array.index(i, e)] + 8) | 0)) & 255);
                        carry = Bridge.Int.sxb((carry >> 4) & 255);
                        e[System.Array.index(i, e)] = Bridge.Int.sxb((e[System.Array.index(i, e)] - (Bridge.Int.sxb((carry << 4) & 255))) & 255);
                    }
                    e[System.Array.index(63, e)] = Bridge.Int.sxb((e[System.Array.index(63, e)] + carry) & 255);
                    /* each e[i] is between -8 and 8 */

                    Phantasma.Cryptography.GroupOperations.ge_p3_0(h);
                    for (i = 1; i < 64; i = (i + 2) | 0) {
                        Phantasma.Cryptography.GroupOperations.select(t, ((Bridge.Int.div(i, 2)) | 0), e[System.Array.index(i, e)]);
                        Phantasma.Cryptography.GroupOperations.ge_madd(r, h, t);
                        Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(h, r);
                    }

                    Phantasma.Cryptography.GroupOperations.ge_p3_dbl(r, h);
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p2(s, r);
                    Phantasma.Cryptography.GroupOperations.ge_p2_dbl(r, s);
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p2(s, r);
                    Phantasma.Cryptography.GroupOperations.ge_p2_dbl(r, s);
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p2(s, r);
                    Phantasma.Cryptography.GroupOperations.ge_p2_dbl(r, s);
                    Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(h, r);

                    for (i = 0; i < 64; i = (i + 2) | 0) {
                        Phantasma.Cryptography.GroupOperations.select(t, ((Bridge.Int.div(i, 2)) | 0), e[System.Array.index(i, e)]);
                        Phantasma.Cryptography.GroupOperations.ge_madd(r, h, t);
                        Phantasma.Cryptography.GroupOperations.ge_p1p1_to_p3(h, r);
                    }
                },
                ge_sub: function (r, p, q) {
                    var t0 = { v : new Phantasma.Cryptography.FieldElement() };

                    /* qhasm: enter ge_sub */

                    /* qhasm: fe X1 */

                    /* qhasm: fe Y1 */

                    /* qhasm: fe Z1 */

                    /* qhasm: fe Z2 */

                    /* qhasm: fe T1 */

                    /* qhasm: fe ZZ */

                    /* qhasm: fe YpX2 */

                    /* qhasm: fe YmX2 */

                    /* qhasm: fe T2d2 */

                    /* qhasm: fe X3 */

                    /* qhasm: fe Y3 */

                    /* qhasm: fe Z3 */

                    /* qhasm: fe T3 */

                    /* qhasm: fe YpX1 */

                    /* qhasm: fe YmX1 */

                    /* qhasm: fe A */

                    /* qhasm: fe B */

                    /* qhasm: fe C */

                    /* qhasm: fe D */

                    /* qhasm: YpX1 = Y1+X1 */
                    /* asm 1: fe_add(>YpX1=fe#1,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_add(>YpX1=r.X,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: YmX1 = Y1-X1 */
                    /* asm 1: fe_sub(>YmX1=fe#2,<Y1=fe#12,<X1=fe#11); */
                    /* asm 2: fe_sub(>YmX1=r.Y,<Y1=p.Y,<X1=p.X); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Y"), Bridge.ref(p.v, "Y"), Bridge.ref(p.v, "X"));

                    /* qhasm: A = YpX1*YmX2 */
                    /* asm 1: fe_mul(>A=fe#3,<YpX1=fe#1,<YmX2=fe#16); */
                    /* asm 2: fe_mul(>A=r.Z,<YpX1=r.X,<YmX2=q.YminusX); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "X"), Bridge.ref(q.v, "YminusX"));

                    /* qhasm: B = YmX1*YpX2 */
                    /* asm 1: fe_mul(>B=fe#2,<YmX1=fe#2,<YpX2=fe#15); */
                    /* asm 2: fe_mul(>B=r.Y,<YmX1=r.Y,<YpX2=q.YplusX); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Y"), Bridge.ref(q.v, "YplusX"));

                    /* qhasm: C = T2d2*T1 */
                    /* asm 1: fe_mul(>C=fe#4,<T2d2=fe#18,<T1=fe#14); */
                    /* asm 2: fe_mul(>C=r.T,<T2d2=q.T2d,<T1=p.T); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "T"), Bridge.ref(q.v, "T2d"), Bridge.ref(p.v, "T"));

                    /* qhasm: ZZ = Z1*Z2 */
                    /* asm 1: fe_mul(>ZZ=fe#1,<Z1=fe#13,<Z2=fe#17); */
                    /* asm 2: fe_mul(>ZZ=r.X,<Z1=p.Z,<Z2=q.Z); */
                    Phantasma.Cryptography.FieldOperations.fe_mul(Bridge.ref(r.v, "X"), Bridge.ref(p.v, "Z"), Bridge.ref(q.v, "Z"));

                    /* qhasm: D = 2*ZZ */
                    /* asm 1: fe_add(>D=fe#5,<ZZ=fe#1,<ZZ=fe#1); */
                    /* asm 2: fe_add(>D=t0,<ZZ=r.X,<ZZ=r.X); */
                    Phantasma.Cryptography.FieldOperations.fe_add(t0, Bridge.ref(r.v, "X"), Bridge.ref(r.v, "X"));

                    /* qhasm: X3 = A-B */
                    /* asm 1: fe_sub(>X3=fe#1,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_sub(>X3=r.X,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "X"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Y3 = A+B */
                    /* asm 1: fe_add(>Y3=fe#2,<A=fe#3,<B=fe#2); */
                    /* asm 2: fe_add(>Y3=r.Y,<A=r.Z,<B=r.Y); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "Y"), Bridge.ref(r.v, "Z"), Bridge.ref(r.v, "Y"));

                    /* qhasm: Z3 = D-C */
                    /* asm 1: fe_sub(>Z3=fe#3,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_sub(>Z3=r.Z,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_sub(Bridge.ref(r.v, "Z"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: T3 = D+C */
                    /* asm 1: fe_add(>T3=fe#4,<D=fe#5,<C=fe#4); */
                    /* asm 2: fe_add(>T3=r.T,<D=t0,<C=r.T); */
                    Phantasma.Cryptography.FieldOperations.fe_add(Bridge.ref(r.v, "T"), t0, Bridge.ref(r.v, "T"));

                    /* qhasm: return */
                },
                ge_tobytes: function (s, offset, h) {
                    var $t;
                    var recip = { v : new Phantasma.Cryptography.FieldElement() };
                    var x = { v : new Phantasma.Cryptography.FieldElement() };
                    var y = { v : new Phantasma.Cryptography.FieldElement() };

                    Phantasma.Cryptography.FieldOperations.fe_invert(recip, Bridge.ref(h.v, "Z"));
                    Phantasma.Cryptography.FieldOperations.fe_mul(x, Bridge.ref(h.v, "X"), recip);
                    Phantasma.Cryptography.FieldOperations.fe_mul(y, Bridge.ref(h.v, "Y"), recip);
                    Phantasma.Cryptography.FieldOperations.fe_tobytes(s, offset, y);
                    s[System.Array.index(($t = ((offset + 31) | 0)), s)] = (s[System.Array.index($t, s)] ^ (((Phantasma.Cryptography.FieldOperations.fe_isnegative(x) << 7) & 255))) & 255;
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.KeyPair", {
        statics: {
            fields: {
                PublicKeyLength: 0,
                rnd: null
            },
            ctors: {
                init: function () {
                    this.PublicKeyLength = 36;
                    this.rnd = new System.Random.ctor();
                }
            },
            methods: {
                Generate: function () {
                    var bytes = System.Array.init(32, 0, System.Byte);
                    Phantasma.Cryptography.KeyPair.rnd.NextBytes(bytes);
                    return new Phantasma.Cryptography.KeyPair(bytes);
                },
                FromWIF: function (wif) {
                    if (wif == null) {
                        throw new System.ArgumentNullException.ctor();
                    }
                    var data = Phantasma.Utils.CryptoUtils.Base58CheckDecode(wif);
                    if (data.length !== 34 || data[System.Array.index(0, data)] !== 128 || data[System.Array.index(33, data)] !== 1) {
                        throw new System.FormatException.ctor();
                    }
                    var privateKey = System.Array.init(32, 0, System.Byte);
                    System.Array.copy(data, 1, privateKey, 0, privateKey.length);
                    System.Array.fill(data, 0, 0, data.length);
                    return new Phantasma.Cryptography.KeyPair(privateKey);
                },
                XOR: function (x, y) {
                    if (x.length !== y.length) {
                        throw new System.ArgumentException.ctor();
                    }
                    return System.Linq.Enumerable.from(x).zip(y, function (a, b) {
                            return ((a ^ b) & 255);
                        }).ToArray(System.Byte);
                },
                GetScriptHashFromAddress: function (address) {
                    var temp = Phantasma.Utils.CryptoUtils.Base58CheckDecode(address);
                    temp = Phantasma.Utils.CryptoUtils.SubArray(System.Byte, temp, 1, 20);
                    return temp;
                }
            }
        },
        fields: {
            PrivateKey: null,
            PublicKey: null,
            Address: null
        },
        ctors: {
            ctor: function (privateKey) {
                this.$initialize();
                if (privateKey.length !== 32) {
                    throw new System.ArgumentException.ctor();
                }

                this.PrivateKey = System.Array.init(32, 0, System.Byte);
                System.Array.copy(privateKey, 0, this.PrivateKey, 0, 32);

                this.PublicKey = Phantasma.Cryptography.Ed25519.PublicKeyFromSeed(privateKey);

                this.Address = Phantasma.Utils.CryptoUtils.PublicKeyToAddress(this.PublicKey);
            }
        },
        methods: {
            ToWIF: function () {
                var data = System.Array.init(34, 0, System.Byte);
                data[System.Array.index(0, data)] = 128;
                System.Array.copy(this.PrivateKey, 0, data, 1, 32);
                data[System.Array.index(33, data)] = 1;
                var wif = Phantasma.Utils.CryptoUtils.Base58CheckEncode(data);
                System.Array.fill(data, 0, 0, data.length);
                return wif;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.LookupTables", {
        statics: {
            fields: {
                d: null,
                d2: null,
                sqrtm1: null,
                Base: null,
                Base2: null
            },
            ctors: {
                init: function () {
                    this.d = new Phantasma.Cryptography.FieldElement();
                    this.d2 = new Phantasma.Cryptography.FieldElement();
                    this.sqrtm1 = new Phantasma.Cryptography.FieldElement();
                    this.d = new Phantasma.Cryptography.FieldElement.$ctor1([-10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116]);
                    this.d2 = new Phantasma.Cryptography.FieldElement.$ctor1([-21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199]);
                    this.sqrtm1 = new Phantasma.Cryptography.FieldElement.$ctor1([-32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482]);
                    this.Base = System.Array.init([System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605]), new Phantasma.Cryptography.FieldElement.$ctor1([-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378]), new Phantasma.Cryptography.FieldElement.$ctor1([-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12815894, -12976347, -21581243, 11784320, -25355658, -2750717, -11717903, -3814571, -358445, -10211303]), new Phantasma.Cryptography.FieldElement.$ctor1([-21703237, 6903825, 27185491, 6451973, -29577724, -9554005, -15616551, 11189268, -26829678, -5319081]), new Phantasma.Cryptography.FieldElement.$ctor1([26966642, 11152617, 32442495, 15396054, 14353839, -12752335, -3128826, -9541118, -15472047, -4166697])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024]), new Phantasma.Cryptography.FieldElement.$ctor1([16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574]), new Phantasma.Cryptography.FieldElement.$ctor1([30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-17036878, 13921892, 10945806, -6033431, 27105052, -16084379, -28926210, 15006023, 3284568, -6276540]), new Phantasma.Cryptography.FieldElement.$ctor1([23599295, -8306047, -11193664, -7687416, 13236774, 10506355, 7464579, 9656445, 13059162, 10374397]), new Phantasma.Cryptography.FieldElement.$ctor1([7798556, 16710257, 3033922, 2874086, 28997861, 2835604, 32406664, -3839045, -641708, -101325])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380]), new Phantasma.Cryptography.FieldElement.$ctor1([4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306]), new Phantasma.Cryptography.FieldElement.$ctor1([19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-15371964, -12862754, 32573250, 4720197, -26436522, 5875511, -19188627, -15224819, -9818940, -12085777]), new Phantasma.Cryptography.FieldElement.$ctor1([-8549212, 109983, 15149363, 2178705, 22900618, 4543417, 3044240, -15689887, 1762328, 14866737]), new Phantasma.Cryptography.FieldElement.$ctor1([-18199695, -15951423, -10473290, 1707278, -17185920, 3916101, -28236412, 3959421, 27914454, 4383652])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766]), new Phantasma.Cryptography.FieldElement.$ctor1([-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701]), new Phantasma.Cryptography.FieldElement.$ctor1([28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([14499471, -2729599, -33191113, -4254652, 28494862, 14271267, 30290735, 10876454, -33154098, 2381726]), new Phantasma.Cryptography.FieldElement.$ctor1([-7195431, -2655363, -14730155, 462251, -27724326, 3941372, -6236617, 3696005, -32300832, 15351955]), new Phantasma.Cryptography.FieldElement.$ctor1([27431194, 8222322, 16448760, -3907995, -18707002, 11938355, -32961401, -2970515, 29551813, 10109425]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-13657040, -13155431, -31283750, 11777098, 21447386, 6519384, -2378284, -1627556, 10092783, -4764171]), new Phantasma.Cryptography.FieldElement.$ctor1([27939166, 14210322, 4677035, 16277044, -22964462, -12398139, -32508754, 12005538, -17810127, 12803510]), new Phantasma.Cryptography.FieldElement.$ctor1([17228999, -15661624, -1233527, 300140, -1224870, -11714777, 30364213, -9038194, 18016357, 4397660])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-10958843, -7690207, 4776341, -14954238, 27850028, -15602212, -26619106, 14544525, -17477504, 982639]), new Phantasma.Cryptography.FieldElement.$ctor1([29253598, 15796703, -2863982, -9908884, 10057023, 3163536, 7332899, -4120128, -21047696, 9934963]), new Phantasma.Cryptography.FieldElement.$ctor1([5793303, 16271923, -24131614, -10116404, 29188560, 1206517, -14747930, 4559895, -30123922, -10897950])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-27643952, -11493006, 16282657, -11036493, 28414021, -15012264, 24191034, 4541697, -13338309, 5500568]), new Phantasma.Cryptography.FieldElement.$ctor1([12650548, -1497113, 9052871, 11355358, -17680037, -8400164, -17430592, 12264343, 10874051, 13524335]), new Phantasma.Cryptography.FieldElement.$ctor1([25556948, -3045990, 714651, 2510400, 23394682, -10415330, 33119038, 5080568, -22528059, 5376628])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-26088264, -4011052, -17013699, -3537628, -6726793, 1920897, -22321305, -9447443, 4535768, 1569007]), new Phantasma.Cryptography.FieldElement.$ctor1([-2255422, 14606630, -21692440, -8039818, 28430649, 8775819, -30494562, 3044290, 31848280, 12543772]), new Phantasma.Cryptography.FieldElement.$ctor1([-22028579, 2943893, -31857513, 6777306, 13784462, -4292203, -27377195, -2062731, 7718482, 14474653])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([2385315, 2454213, -22631320, 46603, -4437935, -15680415, 656965, -7236665, 24316168, -5253567]), new Phantasma.Cryptography.FieldElement.$ctor1([13741529, 10911568, -33233417, -8603737, -20177830, -1033297, 33040651, -13424532, -20729456, 8321686]), new Phantasma.Cryptography.FieldElement.$ctor1([21060490, -2212744, 15712757, -4336099, 1639040, 10656336, 23845965, -11874838, -9984458, 608372])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-13672732, -15087586, -10889693, -7557059, -6036909, 11305547, 1123968, -6780577, 27229399, 23887]), new Phantasma.Cryptography.FieldElement.$ctor1([-23244140, -294205, -11744728, 14712571, -29465699, -2029617, 12797024, -6440308, -1633405, 16678954]), new Phantasma.Cryptography.FieldElement.$ctor1([-29500620, 4770662, -16054387, 14001338, 7830047, 9564805, -1508144, -4795045, -17169265, 4904953])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([24059557, 14617003, 19037157, -15039908, 19766093, -14906429, 5169211, 16191880, 2128236, -4326833]), new Phantasma.Cryptography.FieldElement.$ctor1([-16981152, 4124966, -8540610, -10653797, 30336522, -14105247, -29806336, 916033, -6882542, -2986532]), new Phantasma.Cryptography.FieldElement.$ctor1([-22630907, 12419372, -7134229, -7473371, -16478904, 16739175, 285431, 2763829, 15736322, 4143876])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([2379352, 11839345, -4110402, -5988665, 11274298, 794957, 212801, -14594663, 23527084, -16458268]), new Phantasma.Cryptography.FieldElement.$ctor1([33431127, -11130478, -17838966, -15626900, 8909499, 8376530, -32625340, 4087881, -15188911, -14416214]), new Phantasma.Cryptography.FieldElement.$ctor1([1767683, 7197987, -13205226, -2022635, -13091350, 448826, 5799055, 4357868, -4774191, -16323038]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([6721966, 13833823, -23523388, -1551314, 26354293, -11863321, 23365147, -3949732, 7390890, 2759800]), new Phantasma.Cryptography.FieldElement.$ctor1([4409041, 2052381, 23373853, 10530217, 7676779, -12885954, 21302353, -4264057, 1244380, -12919645]), new Phantasma.Cryptography.FieldElement.$ctor1([-4421239, 7169619, 4982368, -2957590, 30256825, -2777540, 14086413, 9208236, 15886429, 16489664])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([1996075, 10375649, 14346367, 13311202, -6874135, -16438411, -13693198, 398369, -30606455, -712933]), new Phantasma.Cryptography.FieldElement.$ctor1([-25307465, 9795880, -2777414, 14878809, -33531835, 14780363, 13348553, 12076947, -30836462, 5113182]), new Phantasma.Cryptography.FieldElement.$ctor1([-17770784, 11797796, 31950843, 13929123, -25888302, 12288344, -30341101, -7336386, 13847711, 5387222])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-18582163, -3416217, 17824843, -2340966, 22744343, -10442611, 8763061, 3617786, -19600662, 10370991]), new Phantasma.Cryptography.FieldElement.$ctor1([20246567, -14369378, 22358229, -543712, 18507283, -10413996, 14554437, -8746092, 32232924, 16763880]), new Phantasma.Cryptography.FieldElement.$ctor1([9648505, 10094563, 26416693, 14745928, -30374318, -6472621, 11094161, 15689506, 3140038, -16510092])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-16160072, 5472695, 31895588, 4744994, 8823515, 10365685, -27224800, 9448613, -28774454, 366295]), new Phantasma.Cryptography.FieldElement.$ctor1([19153450, 11523972, -11096490, -6503142, -24647631, 5420647, 28344573, 8041113, 719605, 11671788]), new Phantasma.Cryptography.FieldElement.$ctor1([8678025, 2694440, -6808014, 2517372, 4964326, 11152271, -15432916, -15266516, 27000813, -10195553])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-15157904, 7134312, 8639287, -2814877, -7235688, 10421742, 564065, 5336097, 6750977, -14521026]), new Phantasma.Cryptography.FieldElement.$ctor1([11836410, -3979488, 26297894, 16080799, 23455045, 15735944, 1695823, -8819122, 8169720, 16220347]), new Phantasma.Cryptography.FieldElement.$ctor1([-18115838, 8653647, 17578566, -6092619, -8025777, -16012763, -11144307, -2627664, -5990708, -14166033])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23308498, -10968312, 15213228, -10081214, -30853605, -11050004, 27884329, 2847284, 2655861, 1738395]), new Phantasma.Cryptography.FieldElement.$ctor1([-27537433, -14253021, -25336301, -8002780, -9370762, 8129821, 21651608, -3239336, -19087449, -11005278]), new Phantasma.Cryptography.FieldElement.$ctor1([1533110, 3437855, 23735889, 459276, 29970501, 11335377, 26030092, 5821408, 10478196, 8544890])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([32173121, -16129311, 24896207, 3921497, 22579056, -3410854, 19270449, 12217473, 17789017, -3395995]), new Phantasma.Cryptography.FieldElement.$ctor1([-30552961, -2228401, -15578829, -10147201, 13243889, 517024, 15479401, -3853233, 30460520, 1052596]), new Phantasma.Cryptography.FieldElement.$ctor1([-11614875, 13323618, 32618793, 8175907, -15230173, 12596687, 27491595, -4612359, 3179268, -9478891])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([31947069, -14366651, -4640583, -15339921, -15125977, -6039709, -14756777, -16411740, 19072640, -9511060]), new Phantasma.Cryptography.FieldElement.$ctor1([11685058, 11822410, 3158003, -13952594, 33402194, -4165066, 5977896, -5215017, 473099, 5040608]), new Phantasma.Cryptography.FieldElement.$ctor1([-20290863, 8198642, -27410132, 11602123, 1290375, -2799760, 28326862, 1721092, -19558642, -3131606]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([7881532, 10687937, 7578723, 7738378, -18951012, -2553952, 21820786, 8076149, -27868496, 11538389]), new Phantasma.Cryptography.FieldElement.$ctor1([-19935666, 3899861, 18283497, -6801568, -15728660, -11249211, 8754525, 7446702, -5676054, 5797016]), new Phantasma.Cryptography.FieldElement.$ctor1([-11295600, -3793569, -15782110, -7964573, 12708869, -8456199, 2014099, -9050574, -2369172, -5877341])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-22472376, -11568741, -27682020, 1146375, 18956691, 16640559, 1192730, -3714199, 15123619, 10811505]), new Phantasma.Cryptography.FieldElement.$ctor1([14352098, -3419715, -18942044, 10822655, 32750596, 4699007, -70363, 15776356, -28886779, -11974553]), new Phantasma.Cryptography.FieldElement.$ctor1([-28241164, -8072475, -4978962, -5315317, 29416931, 1847569, -20654173, -16484855, 4714547, -9600655])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15200332, 8368572, 19679101, 15970074, -31872674, 1959451, 24611599, -4543832, -11745876, 12340220]), new Phantasma.Cryptography.FieldElement.$ctor1([12876937, -10480056, 33134381, 6590940, -6307776, 14872440, 9613953, 8241152, 15370987, 9608631]), new Phantasma.Cryptography.FieldElement.$ctor1([-4143277, -12014408, 8446281, -391603, 4407738, 13629032, -7724868, 15866074, -28210621, -8814099])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([26660628, -15677655, 8393734, 358047, -7401291, 992988, -23904233, 858697, 20571223, 8420556]), new Phantasma.Cryptography.FieldElement.$ctor1([14620715, 13067227, -15447274, 8264467, 14106269, 15080814, 33531827, 12516406, -21574435, -12476749]), new Phantasma.Cryptography.FieldElement.$ctor1([236881, 10476226, 57258, -14677024, 6472998, 2466984, 17258519, 7256740, 8791136, 15069930])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([1276410, -9371918, 22949635, -16322807, -23493039, -5702186, 14711875, 4874229, -30663140, -2331391]), new Phantasma.Cryptography.FieldElement.$ctor1([5855666, 4990204, -13711848, 7294284, -7804282, 1924647, -1423175, -7912378, -33069337, 9234253]), new Phantasma.Cryptography.FieldElement.$ctor1([20590503, -9018988, 31529744, -7352666, -2706834, 10650548, 31559055, -11609587, 18979186, 13396066])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([24474287, 4968103, 22267082, 4407354, 24063882, -8325180, -18816887, 13594782, 33514650, 7021958]), new Phantasma.Cryptography.FieldElement.$ctor1([-11566906, -6565505, -21365085, 15928892, -26158305, 4315421, -25948728, -3916677, -21480480, 12868082]), new Phantasma.Cryptography.FieldElement.$ctor1([-28635013, 13504661, 19988037, -2132761, 21078225, 6443208, -21446107, 2244500, -12455797, -8089383])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-30595528, 13793479, -5852820, 319136, -25723172, -6263899, 33086546, 8957937, -15233648, 5540521]), new Phantasma.Cryptography.FieldElement.$ctor1([-11630176, -11503902, -8119500, -7643073, 2620056, 1022908, -23710744, -1568984, -16128528, -14962807]), new Phantasma.Cryptography.FieldElement.$ctor1([23152971, 775386, 27395463, 14006635, -9701118, 4649512, 1689819, 892185, -11513277, -15205948])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([9770129, 9586738, 26496094, 4324120, 1556511, -3550024, 27453819, 4763127, -19179614, 5867134]), new Phantasma.Cryptography.FieldElement.$ctor1([-32765025, 1927590, 31726409, -4753295, 23962434, -16019500, 27846559, 5931263, -29749703, -16108455]), new Phantasma.Cryptography.FieldElement.$ctor1([27461885, -2977536, 22380810, 1815854, -23033753, -3031938, 7283490, -15148073, -19526700, 7734629]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-8010264, -9590817, -11120403, 6196038, 29344158, -13430885, 7585295, -3176626, 18549497, 15302069]), new Phantasma.Cryptography.FieldElement.$ctor1([-32658337, -6171222, -7672793, -11051681, 6258878, 13504381, 10458790, -6418461, -8872242, 8424746]), new Phantasma.Cryptography.FieldElement.$ctor1([24687205, 8613276, -30667046, -3233545, 1863892, -1830544, 19206234, 7134917, -11284482, -828919])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([11334899, -9218022, 8025293, 12707519, 17523892, -10476071, 10243738, -14685461, -5066034, 16498837]), new Phantasma.Cryptography.FieldElement.$ctor1([8911542, 6887158, -9584260, -6958590, 11145641, -9543680, 17303925, -14124238, 6536641, 10543906]), new Phantasma.Cryptography.FieldElement.$ctor1([-28946384, 15479763, -17466835, 568876, -1497683, 11223454, -2669190, -16625574, -27235709, 8876771])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25742899, -12566864, -15649966, -846607, -33026686, -796288, -33481822, 15824474, -604426, -9039817]), new Phantasma.Cryptography.FieldElement.$ctor1([10330056, 70051, 7957388, -9002667, 9764902, 15609756, 27698697, -4890037, 1657394, 3084098]), new Phantasma.Cryptography.FieldElement.$ctor1([10477963, -7470260, 12119566, -13250805, 29016247, -5365589, 31280319, 14396151, -30233575, 15272409])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12288309, 3169463, 28813183, 16658753, 25116432, -5630466, -25173957, -12636138, -25014757, 1950504]), new Phantasma.Cryptography.FieldElement.$ctor1([-26180358, 9489187, 11053416, -14746161, -31053720, 5825630, -8384306, -8767532, 15341279, 8373727]), new Phantasma.Cryptography.FieldElement.$ctor1([28685821, 7759505, -14378516, -12002860, -31971820, 4079242, 298136, -10232602, -2878207, 15190420])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-32932876, 13806336, -14337485, -15794431, -24004620, 10940928, 8669718, 2742393, -26033313, -6875003]), new Phantasma.Cryptography.FieldElement.$ctor1([-1580388, -11729417, -25979658, -11445023, -17411874, -10912854, 9291594, -16247779, -12154742, 6048605]), new Phantasma.Cryptography.FieldElement.$ctor1([-30305315, 14843444, 1539301, 11864366, 20201677, 1900163, 13934231, 5128323, 11213262, 9168384])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-26280513, 11007847, 19408960, -940758, -18592965, -4328580, -5088060, -11105150, 20470157, -16398701]), new Phantasma.Cryptography.FieldElement.$ctor1([-23136053, 9282192, 14855179, -15390078, -7362815, -14408560, -22783952, 14461608, 14042978, 5230683]), new Phantasma.Cryptography.FieldElement.$ctor1([29969567, -2741594, -16711867, -8552442, 9175486, -2468974, 21556951, 3506042, -5933891, -12449708])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-3144746, 8744661, 19704003, 4581278, -20430686, 6830683, -21284170, 8971513, -28539189, 15326563]), new Phantasma.Cryptography.FieldElement.$ctor1([-19464629, 10110288, -17262528, -3503892, -23500387, 1355669, -15523050, 15300988, -20514118, 9168260]), new Phantasma.Cryptography.FieldElement.$ctor1([-5353335, 4488613, -23803248, 16314347, 7780487, -15638939, -28948358, 9601605, 33087103, -9011387])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-19443170, -15512900, -20797467, -12445323, -29824447, 10229461, -27444329, -15000531, -5996870, 15664672]), new Phantasma.Cryptography.FieldElement.$ctor1([23294591, -16632613, -22650781, -8470978, 27844204, 11461195, 13099750, -2460356, 18151676, 13417686]), new Phantasma.Cryptography.FieldElement.$ctor1([-24722913, -4176517, -31150679, 5988919, -26858785, 6685065, 1661597, -12551441, 15271676, -15452665]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([11433042, -13228665, 8239631, -5279517, -1985436, -725718, -18698764, 2167544, -6921301, -13440182]), new Phantasma.Cryptography.FieldElement.$ctor1([-31436171, 15575146, 30436815, 12192228, -22463353, 9395379, -9917708, -8638997, 12215110, 12028277]), new Phantasma.Cryptography.FieldElement.$ctor1([14098400, 6555944, 23007258, 5757252, -15427832, -12950502, 30123440, 4617780, -16900089, -655628])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-4026201, -15240835, 11893168, 13718664, -14809462, 1847385, -15819999, 10154009, 23973261, -12684474]), new Phantasma.Cryptography.FieldElement.$ctor1([-26531820, -3695990, -1908898, 2534301, -31870557, -16550355, 18341390, -11419951, 32013174, -10103539]), new Phantasma.Cryptography.FieldElement.$ctor1([-25479301, 10876443, -11771086, -14625140, -12369567, 1838104, 21911214, 6354752, 4425632, -837822])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-10433389, -14612966, 22229858, -3091047, -13191166, 776729, -17415375, -12020462, 4725005, 14044970]), new Phantasma.Cryptography.FieldElement.$ctor1([19268650, -7304421, 1555349, 8692754, -21474059, -9910664, 6347390, -1411784, -19522291, -16109756]), new Phantasma.Cryptography.FieldElement.$ctor1([-24864089, 12986008, -10898878, -5558584, -11312371, -148526, 19541418, 8180106, 9282262, 10282508])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-26205082, 4428547, -8661196, -13194263, 4098402, -14165257, 15522535, 8372215, 5542595, -10702683]), new Phantasma.Cryptography.FieldElement.$ctor1([-10562541, 14895633, 26814552, -16673850, -17480754, -2489360, -2781891, 6993761, -18093885, 10114655]), new Phantasma.Cryptography.FieldElement.$ctor1([-20107055, -929418, 31422704, 10427861, -7110749, 6150669, -29091755, -11529146, 25953725, -106158])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-4234397, -8039292, -9119125, 3046000, 2101609, -12607294, 19390020, 6094296, -3315279, 12831125]), new Phantasma.Cryptography.FieldElement.$ctor1([-15998678, 7578152, 5310217, 14408357, -33548620, -224739, 31575954, 6326196, 7381791, -2421839]), new Phantasma.Cryptography.FieldElement.$ctor1([-20902779, 3296811, 24736065, -16328389, 18374254, 7318640, 6295303, 8082724, -15362489, 12339664])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([27724736, 2291157, 6088201, -14184798, 1792727, 5857634, 13848414, 15768922, 25091167, 14856294]), new Phantasma.Cryptography.FieldElement.$ctor1([-18866652, 8331043, 24373479, 8541013, -701998, -9269457, 12927300, -12695493, -22182473, -9012899]), new Phantasma.Cryptography.FieldElement.$ctor1([-11423429, -5421590, 11632845, 3405020, 30536730, -11674039, -27260765, 13866390, 30146206, 9142070])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([3924129, -15307516, -13817122, -10054960, 12291820, -668366, -27702774, 9326384, -8237858, 4171294]), new Phantasma.Cryptography.FieldElement.$ctor1([-15921940, 16037937, 6713787, 16606682, -21612135, 2790944, 26396185, 3731949, 345228, -5462949]), new Phantasma.Cryptography.FieldElement.$ctor1([-21327538, 13448259, 25284571, 1143661, 20614966, -8849387, 2031539, -12391231, -16253183, -13582083])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([31016211, -16722429, 26371392, -14451233, -5027349, 14854137, 17477601, 3842657, 28012650, -16405420]), new Phantasma.Cryptography.FieldElement.$ctor1([-5075835, 9368966, -8562079, -4600902, -15249953, 6970560, -9189873, 16292057, -8867157, 3507940]), new Phantasma.Cryptography.FieldElement.$ctor1([29439664, 3537914, 23333589, 6997794, -17555561, -11018068, -15209202, -15051267, -9164929, 6580396]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12185861, -7679788, 16438269, 10826160, -8696817, -6235611, 17860444, -9273846, -2095802, 9304567]), new Phantasma.Cryptography.FieldElement.$ctor1([20714564, -4336911, 29088195, 7406487, 11426967, -5095705, 14792667, -14608617, 5289421, -477127]), new Phantasma.Cryptography.FieldElement.$ctor1([-16665533, -10650790, -6160345, -13305760, 9192020, -1802462, 17271490, 12349094, 26939669, -3752294])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12889898, 9373458, 31595848, 16374215, 21471720, 13221525, -27283495, -12348559, -3698806, 117887]), new Phantasma.Cryptography.FieldElement.$ctor1([22263325, -6560050, 3984570, -11174646, -15114008, -566785, 28311253, 5358056, -23319780, 541964]), new Phantasma.Cryptography.FieldElement.$ctor1([16259219, 3261970, 2309254, -15534474, -16885711, -4581916, 24134070, -16705829, -13337066, -13552195])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([9378160, -13140186, -22845982, -12745264, 28198281, -7244098, -2399684, -717351, 690426, 14876244]), new Phantasma.Cryptography.FieldElement.$ctor1([24977353, -314384, -8223969, -13465086, 28432343, -1176353, -13068804, -12297348, -22380984, 6618999]), new Phantasma.Cryptography.FieldElement.$ctor1([-1538174, 11685646, 12944378, 13682314, -24389511, -14413193, 8044829, -13817328, 32239829, -5652762])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-18603066, 4762990, -926250, 8885304, -28412480, -3187315, 9781647, -10350059, 32779359, 5095274]), new Phantasma.Cryptography.FieldElement.$ctor1([-33008130, -5214506, -32264887, -3685216, 9460461, -9327423, -24601656, 14506724, 21639561, -2630236]), new Phantasma.Cryptography.FieldElement.$ctor1([-16400943, -13112215, 25239338, 15531969, 3987758, -4499318, -1289502, -6863535, 17874574, 558605])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-13600129, 10240081, 9171883, 16131053, -20869254, 9599700, 33499487, 5080151, 2085892, 5119761]), new Phantasma.Cryptography.FieldElement.$ctor1([-22205145, -2519528, -16381601, 414691, -25019550, 2170430, 30634760, -8363614, -31999993, -5759884]), new Phantasma.Cryptography.FieldElement.$ctor1([-6845704, 15791202, 8550074, -1312654, 29928809, -12092256, 27534430, -7192145, -22351378, 12961482])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-24492060, -9570771, 10368194, 11582341, -23397293, -2245287, 16533930, 8206996, -30194652, -5159638]), new Phantasma.Cryptography.FieldElement.$ctor1([-11121496, -3382234, 2307366, 6362031, -135455, 8868177, -16835630, 7031275, 7589640, 8945490]), new Phantasma.Cryptography.FieldElement.$ctor1([-32152748, 8917967, 6661220, -11677616, -1192060, -15793393, 7251489, -11182180, 24099109, -14456170])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([5019558, -7907470, 4244127, -14714356, -26933272, 6453165, -19118182, -13289025, -6231896, -10280736]), new Phantasma.Cryptography.FieldElement.$ctor1([10853594, 10721687, 26480089, 5861829, -22995819, 1972175, -1866647, -10557898, -3363451, -6441124]), new Phantasma.Cryptography.FieldElement.$ctor1([-17002408, 5906790, 221599, -6563147, 7828208, -13248918, 24362661, -2008168, -13866408, 7421392])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([8139927, -6546497, 32257646, -5890546, 30375719, 1886181, -21175108, 15441252, 28826358, -4123029]), new Phantasma.Cryptography.FieldElement.$ctor1([6267086, 9695052, 7709135, -16603597, -32869068, -1886135, 14795160, -7840124, 13746021, -1742048]), new Phantasma.Cryptography.FieldElement.$ctor1([28584902, 7787108, -6732942, -15050729, 22846041, -7571236, -3181936, -363524, 4771362, -8419958]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([24949256, 6376279, -27466481, -8174608, -18646154, -9930606, 33543569, -12141695, 3569627, 11342593]), new Phantasma.Cryptography.FieldElement.$ctor1([26514989, 4740088, 27912651, 3697550, 19331575, -11472339, 6809886, 4608608, 7325975, -14801071]), new Phantasma.Cryptography.FieldElement.$ctor1([-11618399, -14554430, -24321212, 7655128, -1369274, 5214312, -27400540, 10258390, -17646694, -8186692])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([11431204, 15823007, 26570245, 14329124, 18029990, 4796082, -31446179, 15580664, 9280358, -3973687]), new Phantasma.Cryptography.FieldElement.$ctor1([-160783, -10326257, -22855316, -4304997, -20861367, -13621002, -32810901, -11181622, -15545091, 4387441]), new Phantasma.Cryptography.FieldElement.$ctor1([-20799378, 12194512, 3937617, -5805892, -27154820, 9340370, -24513992, 8548137, 20617071, -7482001])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-938825, -3930586, -8714311, 16124718, 24603125, -6225393, -13775352, -11875822, 24345683, 10325460]), new Phantasma.Cryptography.FieldElement.$ctor1([-19855277, -1568885, -22202708, 8714034, 14007766, 6928528, 16318175, -1010689, 4766743, 3552007]), new Phantasma.Cryptography.FieldElement.$ctor1([-21751364, -16730916, 1351763, -803421, -4009670, 3950935, 3217514, 14481909, 10988822, -3994762])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15564307, -14311570, 3101243, 5684148, 30446780, -8051356, 12677127, -6505343, -8295852, 13296005]), new Phantasma.Cryptography.FieldElement.$ctor1([-9442290, 6624296, -30298964, -11913677, -4670981, -2057379, 31521204, 9614054, -30000824, 12074674]), new Phantasma.Cryptography.FieldElement.$ctor1([4771191, -135239, 14290749, -13089852, 27992298, 14998318, -1413936, -1556716, 29832613, -16391035])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([7064884, -7541174, -19161962, -5067537, -18891269, -2912736, 25825242, 5293297, -27122660, 13101590]), new Phantasma.Cryptography.FieldElement.$ctor1([-2298563, 2439670, -7466610, 1719965, -27267541, -16328445, 32512469, -5317593, -30356070, -4190957]), new Phantasma.Cryptography.FieldElement.$ctor1([-30006540, 10162316, -33180176, 3981723, -16482138, -13070044, 14413974, 9515896, 19568978, 9628812])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([33053803, 199357, 15894591, 1583059, 27380243, -4580435, -17838894, -6106839, -6291786, 3437740]), new Phantasma.Cryptography.FieldElement.$ctor1([-18978877, 3884493, 19469877, 12726490, 15913552, 13614290, -22961733, 70104, 7463304, 4176122]), new Phantasma.Cryptography.FieldElement.$ctor1([-27124001, 10659917, 11482427, -16070381, 12771467, -6635117, -32719404, -5322751, 24216882, 5944158])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([8894125, 7450974, -2664149, -9765752, -28080517, -12389115, 19345746, 14680796, 11632993, 5847885]), new Phantasma.Cryptography.FieldElement.$ctor1([26942781, -2315317, 9129564, -4906607, 26024105, 11769399, -11518837, 6367194, -9727230, 4782140]), new Phantasma.Cryptography.FieldElement.$ctor1([19916461, -4828410, -22910704, -11414391, 25606324, -5972441, 33253853, 8220911, 6358847, -1873857])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([801428, -2081702, 16569428, 11065167, 29875704, 96627, 7908388, -4480480, -13538503, 1387155]), new Phantasma.Cryptography.FieldElement.$ctor1([19646058, 5720633, -11416706, 12814209, 11607948, 12749789, 14147075, 15156355, -21866831, 11835260]), new Phantasma.Cryptography.FieldElement.$ctor1([19299512, 1155910, 28703737, 14890794, 2925026, 7269399, 26121523, 15467869, -26560550, 5052483]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-3017432, 10058206, 1980837, 3964243, 22160966, 12322533, -6431123, -12618185, 12228557, -7003677]), new Phantasma.Cryptography.FieldElement.$ctor1([32944382, 14922211, -22844894, 5188528, 21913450, -8719943, 4001465, 13238564, -6114803, 8653815]), new Phantasma.Cryptography.FieldElement.$ctor1([22865569, -4652735, 27603668, -12545395, 14348958, 8234005, 24808405, 5719875, 28483275, 2841751])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-16420968, -1113305, -327719, -12107856, 21886282, -15552774, -1887966, -315658, 19932058, -12739203]), new Phantasma.Cryptography.FieldElement.$ctor1([-11656086, 10087521, -8864888, -5536143, -19278573, -3055912, 3999228, 13239134, -4777469, -13910208]), new Phantasma.Cryptography.FieldElement.$ctor1([1382174, -11694719, 17266790, 9194690, -13324356, 9720081, 20403944, 11284705, -14013818, 3093230])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([16650921, -11037932, -1064178, 1570629, -8329746, 7352753, -302424, 16271225, -24049421, -6691850]), new Phantasma.Cryptography.FieldElement.$ctor1([-21911077, -5927941, -4611316, -5560156, -31744103, -10785293, 24123614, 15193618, -21652117, -16739389]), new Phantasma.Cryptography.FieldElement.$ctor1([-9935934, -4289447, -25279823, 4372842, 2087473, 10399484, 31870908, 14690798, 17361620, 11864968])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-11307610, 6210372, 13206574, 5806320, -29017692, -13967200, -12331205, -7486601, -25578460, -16240689]), new Phantasma.Cryptography.FieldElement.$ctor1([14668462, -12270235, 26039039, 15305210, 25515617, 4542480, 10453892, 6577524, 9145645, -6443880]), new Phantasma.Cryptography.FieldElement.$ctor1([5974874, 3053895, -9433049, -10385191, -31865124, 3225009, -7972642, 3936128, -5652273, -3050304])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30625386, -4729400, -25555961, -12792866, -20484575, 7695099, 17097188, -16303496, -27999779, 1803632]), new Phantasma.Cryptography.FieldElement.$ctor1([-3553091, 9865099, -5228566, 4272701, -5673832, -16689700, 14911344, 12196514, -21405489, 7047412]), new Phantasma.Cryptography.FieldElement.$ctor1([20093277, 9920966, -11138194, -5343857, 13161587, 12044805, -32856851, 4124601, -32343828, -10257566])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-20788824, 14084654, -13531713, 7842147, 19119038, -13822605, 4752377, -8714640, -21679658, 2288038]), new Phantasma.Cryptography.FieldElement.$ctor1([-26819236, -3283715, 29965059, 3039786, -14473765, 2540457, 29457502, 14625692, -24819617, 12570232]), new Phantasma.Cryptography.FieldElement.$ctor1([-1063558, -11551823, 16920318, 12494842, 1278292, -5869109, -21159943, -3498680, -11974704, 4724943])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([17960970, -11775534, -4140968, -9702530, -8876562, -1410617, -12907383, -8659932, -29576300, 1903856]), new Phantasma.Cryptography.FieldElement.$ctor1([23134274, -14279132, -10681997, -1611936, 20684485, 15770816, -12989750, 3190296, 26955097, 14109738]), new Phantasma.Cryptography.FieldElement.$ctor1([15308788, 5320727, -30113809, -14318877, 22902008, 7767164, 29425325, -11277562, 31960942, 11934971])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-27395711, 8435796, 4109644, 12222639, -24627868, 14818669, 20638173, 4875028, 10491392, 1379718]), new Phantasma.Cryptography.FieldElement.$ctor1([-13159415, 9197841, 3875503, -8936108, -1383712, -5879801, 33518459, 16176658, 21432314, 12180697]), new Phantasma.Cryptography.FieldElement.$ctor1([-11787308, 11500838, 13787581, -13832590, -22430679, 10140205, 1465425, 12689540, -10301319, -13872883]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([5414091, -15386041, -21007664, 9643570, 12834970, 1186149, -2622916, -1342231, 26128231, 6032912]), new Phantasma.Cryptography.FieldElement.$ctor1([-26337395, -13766162, 32496025, -13653919, 17847801, -12669156, 3604025, 8316894, -25875034, -10437358]), new Phantasma.Cryptography.FieldElement.$ctor1([3296484, 6223048, 24680646, -12246460, -23052020, 5903205, -8862297, -4639164, 12376617, 3188849])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([29190488, -14659046, 27549113, -1183516, 3520066, -10697301, 32049515, -7309113, -16109234, -9852307]), new Phantasma.Cryptography.FieldElement.$ctor1([-14744486, -9309156, 735818, -598978, -20407687, -5057904, 25246078, -15795669, 18640741, -960977]), new Phantasma.Cryptography.FieldElement.$ctor1([-6928835, -16430795, 10361374, 5642961, 4910474, 12345252, -31638386, -494430, 10530747, 1053335])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-29265967, -14186805, -13538216, -12117373, -19457059, -10655384, -31462369, -2948985, 24018831, 15026644]), new Phantasma.Cryptography.FieldElement.$ctor1([-22592535, -3145277, -2289276, 5953843, -13440189, 9425631, 25310643, 13003497, -2314791, -15145616]), new Phantasma.Cryptography.FieldElement.$ctor1([-27419985, -603321, -8043984, -1669117, -26092265, 13987819, -27297622, 187899, -23166419, -2531735])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-21744398, -13810475, 1844840, 5021428, -10434399, -15911473, 9716667, 16266922, -5070217, 726099]), new Phantasma.Cryptography.FieldElement.$ctor1([29370922, -6053998, 7334071, -15342259, 9385287, 2247707, -13661962, -4839461, 30007388, -15823341]), new Phantasma.Cryptography.FieldElement.$ctor1([-936379, 16086691, 23751945, -543318, -1167538, -5189036, 9137109, 730663, 9835848, 4555336])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23376435, 1410446, -22253753, -12899614, 30867635, 15826977, 17693930, 544696, -11985298, 12422646]), new Phantasma.Cryptography.FieldElement.$ctor1([31117226, -12215734, -13502838, 6561947, -9876867, -12757670, -5118685, -4096706, 29120153, 13924425]), new Phantasma.Cryptography.FieldElement.$ctor1([-17400879, -14233209, 19675799, -2734756, -11006962, -5858820, -9383939, -11317700, 7240931, -237388])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-31361739, -11346780, -15007447, -5856218, -22453340, -12152771, 1222336, 4389483, 3293637, -15551743]), new Phantasma.Cryptography.FieldElement.$ctor1([-16684801, -14444245, 11038544, 11054958, -13801175, -3338533, -24319580, 7733547, 12796905, -6335822]), new Phantasma.Cryptography.FieldElement.$ctor1([-8759414, -10817836, -25418864, 10783769, -30615557, -9746811, -28253339, 3647836, 3222231, -11160462])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([18606113, 1693100, -25448386, -15170272, 4112353, 10045021, 23603893, -2048234, -7550776, 2484985]), new Phantasma.Cryptography.FieldElement.$ctor1([9255317, -3131197, -12156162, -1004256, 13098013, -9214866, 16377220, -2102812, -19802075, -3034702]), new Phantasma.Cryptography.FieldElement.$ctor1([-22729289, 7496160, -5742199, 11329249, 19991973, -3347502, -31718148, 9936966, -30097688, -10618797])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([21878590, -5001297, 4338336, 13643897, -3036865, 13160960, 19708896, 5415497, -7360503, -4109293]), new Phantasma.Cryptography.FieldElement.$ctor1([27736861, 10103576, 12500508, 8502413, -3413016, -9633558, 10436918, -1550276, -23659143, -8132100]), new Phantasma.Cryptography.FieldElement.$ctor1([19492550, -12104365, -29681976, -852630, -3208171, 12403437, 30066266, 8367329, 13243957, 8709688]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([12015105, 2801261, 28198131, 10151021, 24818120, -4743133, -11194191, -5645734, 5150968, 7274186]), new Phantasma.Cryptography.FieldElement.$ctor1([2831366, -12492146, 1478975, 6122054, 23825128, -12733586, 31097299, 6083058, 31021603, -9793610]), new Phantasma.Cryptography.FieldElement.$ctor1([-2529932, -2229646, 445613, 10720828, -13849527, -11505937, -23507731, 16354465, 15067285, -14147707])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([7840942, 14037873, -33364863, 15934016, -728213, -3642706, 21403988, 1057586, -19379462, -12403220]), new Phantasma.Cryptography.FieldElement.$ctor1([915865, -16469274, 15608285, -8789130, -24357026, 6060030, -17371319, 8410997, -7220461, 16527025]), new Phantasma.Cryptography.FieldElement.$ctor1([32922597, -556987, 20336074, -16184568, 10903705, -5384487, 16957574, 52992, 23834301, 6588044])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([32752030, 11232950, 3381995, -8714866, 22652988, -10744103, 17159699, 16689107, -20314580, -1305992]), new Phantasma.Cryptography.FieldElement.$ctor1([-4689649, 9166776, -25710296, -10847306, 11576752, 12733943, 7924251, -2752281, 1976123, -7249027]), new Phantasma.Cryptography.FieldElement.$ctor1([21251222, 16309901, -2983015, -6783122, 30810597, 12967303, 156041, -3371252, 12331345, -8237197])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([8651614, -4477032, -16085636, -4996994, 13002507, 2950805, 29054427, -5106970, 10008136, -4667901]), new Phantasma.Cryptography.FieldElement.$ctor1([31486080, 15114593, -14261250, 12951354, 14369431, -7387845, 16347321, -13662089, 8684155, -10532952]), new Phantasma.Cryptography.FieldElement.$ctor1([19443825, 11385320, 24468943, -9659068, -23919258, 2187569, -26263207, -6086921, 31316348, 14219878])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-28594490, 1193785, 32245219, 11392485, 31092169, 15722801, 27146014, 6992409, 29126555, 9207390]), new Phantasma.Cryptography.FieldElement.$ctor1([32382935, 1110093, 18477781, 11028262, -27411763, -7548111, -4980517, 10843782, -7957600, -14435730]), new Phantasma.Cryptography.FieldElement.$ctor1([2814918, 7836403, 27519878, -7868156, -20894015, -11553689, -21494559, 8550130, 28346258, 1994730])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-19578299, 8085545, -14000519, -3948622, 2785838, -16231307, -19516951, 7174894, 22628102, 8115180]), new Phantasma.Cryptography.FieldElement.$ctor1([-30405132, 955511, -11133838, -15078069, -32447087, -13278079, -25651578, 3317160, -9943017, 930272]), new Phantasma.Cryptography.FieldElement.$ctor1([-15303681, -6833769, 28856490, 1357446, 23421993, 1057177, 24091212, -1388970, -22765376, -10650715])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-22751231, -5303997, -12907607, -12768866, -15811511, -7797053, -14839018, -16554220, -1867018, 8398970]), new Phantasma.Cryptography.FieldElement.$ctor1([-31969310, 2106403, -4736360, 1362501, 12813763, 16200670, 22981545, -6291273, 18009408, -15772772]), new Phantasma.Cryptography.FieldElement.$ctor1([-17220923, -9545221, -27784654, 14166835, 29815394, 7444469, 29551787, -3727419, 19288549, 1325865])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15100157, -15835752, -23923978, -1005098, -26450192, 15509408, 12376730, -3479146, 33166107, -8042750]), new Phantasma.Cryptography.FieldElement.$ctor1([20909231, 13023121, -9209752, 16251778, -5778415, -8094914, 12412151, 10018715, 2213263, -13878373]), new Phantasma.Cryptography.FieldElement.$ctor1([32529814, -11074689, 30361439, -16689753, -9135940, 1513226, 22922121, 6382134, -5766928, 8371348]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([9923462, 11271500, 12616794, 3544722, -29998368, -1721626, 12891687, -8193132, -26442943, 10486144]), new Phantasma.Cryptography.FieldElement.$ctor1([-22597207, -7012665, 8587003, -8257861, 4084309, -12970062, 361726, 2610596, -23921530, -11455195]), new Phantasma.Cryptography.FieldElement.$ctor1([5408411, -1136691, -4969122, 10561668, 24145918, 14240566, 31319731, -4235541, 19985175, -3436086])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-13994457, 16616821, 14549246, 3341099, 32155958, 13648976, -17577068, 8849297, 65030, 8370684]), new Phantasma.Cryptography.FieldElement.$ctor1([-8320926, -12049626, 31204563, 5839400, -20627288, -1057277, -19442942, 6922164, 12743482, -9800518]), new Phantasma.Cryptography.FieldElement.$ctor1([-2361371, 12678785, 28815050, 4759974, -23893047, 4884717, 23783145, 11038569, 18800704, 255233])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-5269658, -1773886, 13957886, 7990715, 23132995, 728773, 13393847, 9066957, 19258688, -14753793]), new Phantasma.Cryptography.FieldElement.$ctor1([-2936654, -10827535, -10432089, 14516793, -3640786, 4372541, -31934921, 2209390, -1524053, 2055794]), new Phantasma.Cryptography.FieldElement.$ctor1([580882, 16705327, 5468415, -2683018, -30926419, -14696000, -7203346, -8994389, -30021019, 7394435])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([23838809, 1822728, -15738443, 15242727, 8318092, -3733104, -21672180, -3492205, -4821741, 14799921]), new Phantasma.Cryptography.FieldElement.$ctor1([13345610, 9759151, 3371034, -16137791, 16353039, 8577942, 31129804, 13496856, -9056018, 7402518]), new Phantasma.Cryptography.FieldElement.$ctor1([2286874, -4435931, -20042458, -2008336, -13696227, 5038122, 11006906, -15760352, 8205061, 1607563])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([14414086, -8002132, 3331830, -3208217, 22249151, -5594188, 18364661, -2906958, 30019587, -9029278]), new Phantasma.Cryptography.FieldElement.$ctor1([-27688051, 1585953, -10775053, 931069, -29120221, -11002319, -14410829, 12029093, 9944378, 8024]), new Phantasma.Cryptography.FieldElement.$ctor1([4368715, -3709630, 29874200, -15022983, -20230386, -11410704, -16114594, -999085, -8142388, 5640030])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([10299610, 13746483, 11661824, 16234854, 7630238, 5998374, 9809887, -16694564, 15219798, -14327783]), new Phantasma.Cryptography.FieldElement.$ctor1([27425505, -5719081, 3055006, 10660664, 23458024, 595578, -15398605, -1173195, -18342183, 9742717]), new Phantasma.Cryptography.FieldElement.$ctor1([6744077, 2427284, 26042789, 2720740, -847906, 1118974, 32324614, 7406442, 12420155, 1994844])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([14012521, -5024720, -18384453, -9578469, -26485342, -3936439, -13033478, -10909803, 24319929, -6446333]), new Phantasma.Cryptography.FieldElement.$ctor1([16412690, -4507367, 10772641, 15929391, -17068788, -4658621, 10555945, -10484049, -30102368, -4739048]), new Phantasma.Cryptography.FieldElement.$ctor1([22397382, -7767684, -9293161, -12792868, 17166287, -9755136, -27333065, 6199366, 21880021, -12250760])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-4283307, 5368523, -31117018, 8163389, -30323063, 3209128, 16557151, 8890729, 8840445, 4957760]), new Phantasma.Cryptography.FieldElement.$ctor1([-15447727, 709327, -6919446, -10870178, -29777922, 6522332, -21720181, 12130072, -14796503, 5005757]), new Phantasma.Cryptography.FieldElement.$ctor1([-2114751, -14308128, 23019042, 15765735, -25269683, 6002752, 10183197, -13239326, -16395286, -2176112]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-19025756, 1632005, 13466291, -7995100, -23640451, 16573537, -32013908, -3057104, 22208662, 2000468]), new Phantasma.Cryptography.FieldElement.$ctor1([3065073, -1412761, -25598674, -361432, -17683065, -5703415, -8164212, 11248527, -3691214, -7414184]), new Phantasma.Cryptography.FieldElement.$ctor1([10379208, -6045554, 8877319, 1473647, -29291284, -12507580, 16690915, 2553332, -3132688, 16400289])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15716668, 1254266, -18472690, 7446274, -8448918, 6344164, -22097271, -7285580, 26894937, 9132066]), new Phantasma.Cryptography.FieldElement.$ctor1([24158887, 12938817, 11085297, -8177598, -28063478, -4457083, -30576463, 64452, -6817084, -2692882]), new Phantasma.Cryptography.FieldElement.$ctor1([13488534, 7794716, 22236231, 5989356, 25426474, -12578208, 2350710, -3418511, -4688006, 2364226])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([16335052, 9132434, 25640582, 6678888, 1725628, 8517937, -11807024, -11697457, 15445875, -7798101]), new Phantasma.Cryptography.FieldElement.$ctor1([29004207, -7867081, 28661402, -640412, -12794003, -7943086, 31863255, -4135540, -278050, -15759279]), new Phantasma.Cryptography.FieldElement.$ctor1([-6122061, -14866665, -28614905, 14569919, -10857999, -3591829, 10343412, -6976290, -29828287, -10815811])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([27081650, 3463984, 14099042, -4517604, 1616303, -6205604, 29542636, 15372179, 17293797, 960709]), new Phantasma.Cryptography.FieldElement.$ctor1([20263915, 11434237, -5765435, 11236810, 13505955, -10857102, -16111345, 6493122, -19384511, 7639714]), new Phantasma.Cryptography.FieldElement.$ctor1([-2830798, -14839232, 25403038, -8215196, -8317012, -16173699, 18006287, -16043750, 29994677, -15808121])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([9769828, 5202651, -24157398, -13631392, -28051003, -11561624, -24613141, -13860782, -31184575, 709464]), new Phantasma.Cryptography.FieldElement.$ctor1([12286395, 13076066, -21775189, -1176622, -25003198, 4057652, -32018128, -8890874, 16102007, 13205847]), new Phantasma.Cryptography.FieldElement.$ctor1([13733362, 5599946, 10557076, 3195751, -5557991, 8536970, -25540170, 8525972, 10151379, 10394400])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([4024660, -16137551, 22436262, 12276534, -9099015, -2686099, 19698229, 11743039, -33302334, 8934414]), new Phantasma.Cryptography.FieldElement.$ctor1([-15879800, -4525240, -8580747, -2934061, 14634845, -698278, -9449077, 3137094, -11536886, 11721158]), new Phantasma.Cryptography.FieldElement.$ctor1([17555939, -5013938, 8268606, 2331751, -22738815, 9761013, 9319229, 8835153, -9205489, -1280045])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-461409, -7830014, 20614118, 16688288, -7514766, -4807119, 22300304, 505429, 6108462, -6183415]), new Phantasma.Cryptography.FieldElement.$ctor1([-5070281, 12367917, -30663534, 3234473, 32617080, -8422642, 29880583, -13483331, -26898490, -7867459]), new Phantasma.Cryptography.FieldElement.$ctor1([-31975283, 5726539, 26934134, 10237677, -3173717, -605053, 24199304, 3795095, 7592688, -14992079])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([21594432, -14964228, 17466408, -4077222, 32537084, 2739898, 6407723, 12018833, -28256052, 4298412]), new Phantasma.Cryptography.FieldElement.$ctor1([-20650503, -11961496, -27236275, 570498, 3767144, -1717540, 13891942, -1569194, 13717174, 10805743]), new Phantasma.Cryptography.FieldElement.$ctor1([-14676630, -15644296, 15287174, 11927123, 24177847, -8175568, -796431, 14860609, -26938930, -5863836]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([12962541, 5311799, -10060768, 11658280, 18855286, -7954201, 13286263, -12808704, -4381056, 9882022]), new Phantasma.Cryptography.FieldElement.$ctor1([18512079, 11319350, -20123124, 15090309, 18818594, 5271736, -22727904, 3666879, -23967430, -3299429]), new Phantasma.Cryptography.FieldElement.$ctor1([-6789020, -3146043, 16192429, 13241070, 15898607, -14206114, -10084880, -6661110, -2403099, 5276065])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30169808, -5317648, 26306206, -11750859, 27814964, 7069267, 7152851, 3684982, 1449224, 13082861]), new Phantasma.Cryptography.FieldElement.$ctor1([10342826, 3098505, 2119311, 193222, 25702612, 12233820, 23697382, 15056736, -21016438, -8202000]), new Phantasma.Cryptography.FieldElement.$ctor1([-33150110, 3261608, 22745853, 7948688, 19370557, -15177665, -26171976, 6482814, -10300080, -11060101])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([32869458, -5408545, 25609743, 15678670, -10687769, -15471071, 26112421, 2521008, -22664288, 6904815]), new Phantasma.Cryptography.FieldElement.$ctor1([29506923, 4457497, 3377935, -9796444, -30510046, 12935080, 1561737, 3841096, -29003639, -6657642]), new Phantasma.Cryptography.FieldElement.$ctor1([10340844, -6630377, -18656632, -2278430, 12621151, -13339055, 30878497, -11824370, -25584551, 5181966])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([25940115, -12658025, 17324188, -10307374, -8671468, 15029094, 24396252, -16450922, -2322852, -12388574]), new Phantasma.Cryptography.FieldElement.$ctor1([-21765684, 9916823, -1300409, 4079498, -1028346, 11909559, 1782390, 12641087, 20603771, -6561742]), new Phantasma.Cryptography.FieldElement.$ctor1([-18882287, -11673380, 24849422, 11501709, 13161720, -4768874, 1925523, 11914390, 4662781, 7820689])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([12241050, -425982, 8132691, 9393934, 32846760, -1599620, 29749456, 12172924, 16136752, 15264020]), new Phantasma.Cryptography.FieldElement.$ctor1([-10349955, -14680563, -8211979, 2330220, -17662549, -14545780, 10658213, 6671822, 19012087, 3772772]), new Phantasma.Cryptography.FieldElement.$ctor1([3753511, -3421066, 10617074, 2028709, 14841030, -6721664, 28718732, -15762884, 20527771, 12988982])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-14822485, -5797269, -3707987, 12689773, -898983, -10914866, -24183046, -10564943, 3299665, -12424953]), new Phantasma.Cryptography.FieldElement.$ctor1([-16777703, -15253301, -9642417, 4978983, 3308785, 8755439, 6943197, 6461331, -25583147, 8991218]), new Phantasma.Cryptography.FieldElement.$ctor1([-17226263, 1816362, -1673288, -6086439, 31783888, -8175991, -32948145, 7417950, -30242287, 1507265])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([29692663, 6829891, -10498800, 4334896, 20945975, -11906496, -28887608, 8209391, 14606362, -10647073]), new Phantasma.Cryptography.FieldElement.$ctor1([-3481570, 8707081, 32188102, 5672294, 22096700, 1711240, -33020695, 9761487, 4170404, -2085325]), new Phantasma.Cryptography.FieldElement.$ctor1([-11587470, 14855945, -4127778, -1531857, -26649089, 15084046, 22186522, 16002000, -14276837, -8400798])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-4811456, 13761029, -31703877, -2483919, -3312471, 7869047, -7113572, -9620092, 13240845, 10965870]), new Phantasma.Cryptography.FieldElement.$ctor1([-7742563, -8256762, -14768334, -13656260, -23232383, 12387166, 4498947, 14147411, 29514390, 4302863]), new Phantasma.Cryptography.FieldElement.$ctor1([-13413405, -12407859, 20757302, -13801832, 14785143, 8976368, -5061276, -2144373, 17846988, -13971927]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-2244452, -754728, -4597030, -1066309, -6247172, 1455299, -21647728, -9214789, -5222701, 12650267]), new Phantasma.Cryptography.FieldElement.$ctor1([-9906797, -16070310, 21134160, 12198166, -27064575, 708126, 387813, 13770293, -19134326, 10958663]), new Phantasma.Cryptography.FieldElement.$ctor1([22470984, 12369526, 23446014, -5441109, -21520802, -9698723, -11772496, -11574455, -25083830, 4271862])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25169565, -10053642, -19909332, 15361595, -5984358, 2159192, 75375, -4278529, -32526221, 8469673]), new Phantasma.Cryptography.FieldElement.$ctor1([15854970, 4148314, -8893890, 7259002, 11666551, 13824734, -30531198, 2697372, 24154791, -9460943]), new Phantasma.Cryptography.FieldElement.$ctor1([15446137, -15806644, 29759747, 14019369, 30811221, -9610191, -31582008, 12840104, 24913809, 9815020])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-4709286, -5614269, -31841498, -12288893, -14443537, 10799414, -9103676, 13438769, 18735128, 9466238]), new Phantasma.Cryptography.FieldElement.$ctor1([11933045, 9281483, 5081055, -5183824, -2628162, -4905629, -7727821, -10896103, -22728655, 16199064]), new Phantasma.Cryptography.FieldElement.$ctor1([14576810, 379472, -26786533, -8317236, -29426508, -10812974, -102766, 1876699, 30801119, 2164795])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15995086, 3199873, 13672555, 13712240, -19378835, -4647646, -13081610, -15496269, -13492807, 1268052]), new Phantasma.Cryptography.FieldElement.$ctor1([-10290614, -3659039, -3286592, 10948818, 23037027, 3794475, -3470338, -12600221, -17055369, 3565904]), new Phantasma.Cryptography.FieldElement.$ctor1([29210088, -9419337, -5919792, -4952785, 10834811, -13327726, -16512102, -10820713, -27162222, -14030531])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-13161890, 15508588, 16663704, -8156150, -28349942, 9019123, -29183421, -3769423, 2244111, -14001979]), new Phantasma.Cryptography.FieldElement.$ctor1([-5152875, -3800936, -9306475, -6071583, 16243069, 14684434, -25673088, -16180800, 13491506, 4641841]), new Phantasma.Cryptography.FieldElement.$ctor1([10813417, 643330, -19188515, -728916, 30292062, -16600078, 27548447, -7721242, 14476989, -12767431])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([10292079, 9984945, 6481436, 8279905, -7251514, 7032743, 27282937, -1644259, -27912810, 12651324]), new Phantasma.Cryptography.FieldElement.$ctor1([-31185513, -813383, 22271204, 11835308, 10201545, 15351028, 17099662, 3988035, 21721536, -3148940]), new Phantasma.Cryptography.FieldElement.$ctor1([10202177, -6545839, -31373232, -9574638, -32150642, -8119683, -12906320, 3852694, 13216206, 14842320])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-15815640, -10601066, -6538952, -7258995, -6984659, -6581778, -31500847, 13765824, -27434397, 9900184]), new Phantasma.Cryptography.FieldElement.$ctor1([14465505, -13833331, -32133984, -14738873, -27443187, 12990492, 33046193, 15796406, -7051866, -8040114]), new Phantasma.Cryptography.FieldElement.$ctor1([30924417, -8279620, 6359016, -12816335, 16508377, 9071735, -25488601, 15413635, 9524356, -7018878])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([12274201, -13175547, 32627641, -1785326, 6736625, 13267305, 5237659, -5109483, 15663516, 4035784]), new Phantasma.Cryptography.FieldElement.$ctor1([-2951309, 8903985, 17349946, 601635, -16432815, -4612556, -13732739, -15889334, -22258478, 4659091]), new Phantasma.Cryptography.FieldElement.$ctor1([-16916263, -4952973, -30393711, -15158821, 20774812, 15897498, 5736189, 15026997, -2178256, -13455585]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-8858980, -2219056, 28571666, -10155518, -474467, -10105698, -3801496, 278095, 23440562, -290208]), new Phantasma.Cryptography.FieldElement.$ctor1([10226241, -5928702, 15139956, 120818, -14867693, 5218603, 32937275, 11551483, -16571960, -7442864]), new Phantasma.Cryptography.FieldElement.$ctor1([17932739, -12437276, -24039557, 10749060, 11316803, 7535897, 22503767, 5561594, -3646624, 3898661])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([7749907, -969567, -16339731, -16464, -25018111, 15122143, -1573531, 7152530, 21831162, 1245233]), new Phantasma.Cryptography.FieldElement.$ctor1([26958459, -14658026, 4314586, 8346991, -5677764, 11960072, -32589295, -620035, -30402091, -16716212]), new Phantasma.Cryptography.FieldElement.$ctor1([-12165896, 9166947, 33491384, 13673479, 29787085, 13096535, 6280834, 14587357, -22338025, 13987525])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-24349909, 7778775, 21116000, 15572597, -4833266, -5357778, -4300898, -5124639, -7469781, -2858068]), new Phantasma.Cryptography.FieldElement.$ctor1([9681908, -6737123, -31951644, 13591838, -6883821, 386950, 31622781, 6439245, -14581012, 4091397]), new Phantasma.Cryptography.FieldElement.$ctor1([-8426427, 1470727, -28109679, -1596990, 3978627, -5123623, -19622683, 12092163, 29077877, -14741988])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([5269168, -6859726, -13230211, -8020715, 25932563, 1763552, -5606110, -5505881, -20017847, 2357889]), new Phantasma.Cryptography.FieldElement.$ctor1([32264008, -15407652, -5387735, -1160093, -2091322, -3946900, 23104804, -12869908, 5727338, 189038]), new Phantasma.Cryptography.FieldElement.$ctor1([14609123, -8954470, -6000566, -16622781, -14577387, -7743898, -26745169, 10942115, -25888931, -14884697])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([20513500, 5557931, -15604613, 7829531, 26413943, -2019404, -21378968, 7471781, 13913677, -5137875]), new Phantasma.Cryptography.FieldElement.$ctor1([-25574376, 11967826, 29233242, 12948236, -6754465, 4713227, -8940970, 14059180, 12878652, 8511905]), new Phantasma.Cryptography.FieldElement.$ctor1([-25656801, 3393631, -2955415, -7075526, -2250709, 9366908, -30223418, 6812974, 5568676, -3127656])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([11630004, 12144454, 2116339, 13606037, 27378885, 15676917, -17408753, -13504373, -14395196, 8070818]), new Phantasma.Cryptography.FieldElement.$ctor1([27117696, -10007378, -31282771, -5570088, 1127282, 12772488, -29845906, 10483306, -11552749, -1028714]), new Phantasma.Cryptography.FieldElement.$ctor1([10637467, -5688064, 5674781, 1072708, -26343588, -6982302, -1683975, 9177853, -27493162, 15431203])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([20525145, 10892566, -12742472, 12779443, -29493034, 16150075, -28240519, 14943142, -15056790, -7935931]), new Phantasma.Cryptography.FieldElement.$ctor1([-30024462, 5626926, -551567, -9981087, 753598, 11981191, 25244767, -3239766, -3356550, 9594024]), new Phantasma.Cryptography.FieldElement.$ctor1([-23752644, 2636870, -5163910, -10103818, 585134, 7877383, 11345683, -6492290, 13352335, -10977084])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-1931799, -5407458, 3304649, -12884869, 17015806, -4877091, -29783850, -7752482, -13215537, -319204]), new Phantasma.Cryptography.FieldElement.$ctor1([20239939, 6607058, 6203985, 3483793, -18386976, -779229, -20723742, 15077870, -22750759, 14523817]), new Phantasma.Cryptography.FieldElement.$ctor1([27406042, -6041657, 27423596, -4497394, 4996214, 10002360, -28842031, -4545494, -30172742, -4805667]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([11374242, 12660715, 17861383, -12540833, 10935568, 1099227, -13886076, -9091740, -27727044, 11358504]), new Phantasma.Cryptography.FieldElement.$ctor1([-12730809, 10311867, 1510375, 10778093, -2119455, -9145702, 32676003, 11149336, -26123651, 4985768]), new Phantasma.Cryptography.FieldElement.$ctor1([-19096303, 341147, -6197485, -239033, 15756973, -8796662, -983043, 13794114, -19414307, -15621255])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([6490081, 11940286, 25495923, -7726360, 8668373, -8751316, 3367603, 6970005, -1691065, -9004790]), new Phantasma.Cryptography.FieldElement.$ctor1([1656497, 13457317, 15370807, 6364910, 13605745, 8362338, -19174622, -5475723, -16796596, -5031438]), new Phantasma.Cryptography.FieldElement.$ctor1([-22273315, -13524424, -64685, -4334223, -18605636, -10921968, -20571065, -7007978, -99853, -10237333])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([17747465, 10039260, 19368299, -4050591, -20630635, -16041286, 31992683, -15857976, -29260363, -5511971]), new Phantasma.Cryptography.FieldElement.$ctor1([31932027, -4986141, -19612382, 16366580, 22023614, 88450, 11371999, -3744247, 4882242, -10626905]), new Phantasma.Cryptography.FieldElement.$ctor1([29796507, 37186, 19818052, 10115756, -11829032, 3352736, 18551198, 3272828, -5190932, -4162409])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([12501286, 4044383, -8612957, -13392385, -32430052, 5136599, -19230378, -3529697, 330070, -3659409]), new Phantasma.Cryptography.FieldElement.$ctor1([6384877, 2899513, 17807477, 7663917, -2358888, 12363165, 25366522, -8573892, -271295, 12071499]), new Phantasma.Cryptography.FieldElement.$ctor1([-8365515, -4042521, 25133448, -4517355, -6211027, 2265927, -32769618, 1936675, -5159697, 3829363])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([28425966, -5835433, -577090, -4697198, -14217555, 6870930, 7921550, -6567787, 26333140, 14267664]), new Phantasma.Cryptography.FieldElement.$ctor1([-11067219, 11871231, 27385719, -10559544, -4585914, -11189312, 10004786, -8709488, -21761224, 8930324]), new Phantasma.Cryptography.FieldElement.$ctor1([-21197785, -16396035, 25654216, -1725397, 12282012, 11008919, 1541940, 4757911, -26491501, -16408940])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([13537262, -7759490, -20604840, 10961927, -5922820, -13218065, -13156584, 6217254, -15943699, 13814990]), new Phantasma.Cryptography.FieldElement.$ctor1([-17422573, 15157790, 18705543, 29619, 24409717, -260476, 27361681, 9257833, -1956526, -1776914]), new Phantasma.Cryptography.FieldElement.$ctor1([-25045300, -10191966, 15366585, 15166509, -13105086, 8423556, -29171540, 12361135, -18685978, 4578290])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([24579768, 3711570, 1342322, -11180126, -27005135, 14124956, -22544529, 14074919, 21964432, 8235257]), new Phantasma.Cryptography.FieldElement.$ctor1([-6528613, -2411497, 9442966, -5925588, 12025640, -1487420, -2981514, -1669206, 13006806, 2355433]), new Phantasma.Cryptography.FieldElement.$ctor1([-16304899, -13605259, -6632427, -5142349, 16974359, -10911083, 27202044, 1719366, 1141648, -12796236])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12863944, -13219986, -8318266, -11018091, -6810145, -4843894, 13475066, -3133972, 32674895, 13715045]), new Phantasma.Cryptography.FieldElement.$ctor1([11423335, -5468059, 32344216, 8962751, 24989809, 9241752, -13265253, 16086212, -28740881, -15642093]), new Phantasma.Cryptography.FieldElement.$ctor1([-1409668, 12530728, -6368726, 10847387, 19531186, -14132160, -11709148, 7791794, -27245943, 4383347]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-28970898, 5271447, -1266009, -9736989, -12455236, 16732599, -4862407, -4906449, 27193557, 6245191]), new Phantasma.Cryptography.FieldElement.$ctor1([-15193956, 5362278, -1783893, 2695834, 4960227, 12840725, 23061898, 3260492, 22510453, 8577507]), new Phantasma.Cryptography.FieldElement.$ctor1([-12632451, 11257346, -32692994, 13548177, -721004, 10879011, 31168030, 13952092, -29571492, -3635906])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([3877321, -9572739, 32416692, 5405324, -11004407, -13656635, 3759769, 11935320, 5611860, 8164018]), new Phantasma.Cryptography.FieldElement.$ctor1([-16275802, 14667797, 15906460, 12155291, -22111149, -9039718, 32003002, -8832289, 5773085, -8422109]), new Phantasma.Cryptography.FieldElement.$ctor1([-23788118, -8254300, 1950875, 8937633, 18686727, 16459170, -905725, 12376320, 31632953, 190926])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-24593607, -16138885, -8423991, 13378746, 14162407, 6901328, -8288749, 4508564, -25341555, -3627528]), new Phantasma.Cryptography.FieldElement.$ctor1([8884438, -5884009, 6023974, 10104341, -6881569, -4941533, 18722941, -14786005, -1672488, 827625]), new Phantasma.Cryptography.FieldElement.$ctor1([-32720583, -16289296, -32503547, 7101210, 13354605, 2659080, -1800575, -14108036, -24878478, 1541286])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([2901347, -1117687, 3880376, -10059388, -17620940, -3612781, -21802117, -3567481, 20456845, -1885033]), new Phantasma.Cryptography.FieldElement.$ctor1([27019610, 12299467, -13658288, -1603234, -12861660, -4861471, -19540150, -5016058, 29439641, 15138866]), new Phantasma.Cryptography.FieldElement.$ctor1([21536104, -6626420, -32447818, -10690208, -22408077, 5175814, -5420040, -16361163, 7779328, 109896])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30279744, 14648750, -8044871, 6425558, 13639621, -743509, 28698390, 12180118, 23177719, -554075]), new Phantasma.Cryptography.FieldElement.$ctor1([26572847, 3405927, -31701700, 12890905, -19265668, 5335866, -6493768, 2378492, 4439158, -13279347]), new Phantasma.Cryptography.FieldElement.$ctor1([-22716706, 3489070, -9225266, -332753, 18875722, -1140095, 14819434, -12731527, -17717757, -5461437])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-5056483, 16566551, 15953661, 3767752, -10436499, 15627060, -820954, 2177225, 8550082, -15114165]), new Phantasma.Cryptography.FieldElement.$ctor1([-18473302, 16596775, -381660, 15663611, 22860960, 15585581, -27844109, -3582739, -23260460, -8428588]), new Phantasma.Cryptography.FieldElement.$ctor1([-32480551, 15707275, -8205912, -5652081, 29464558, 2713815, -22725137, 15860482, -21902570, 1494193])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-19562091, -14087393, -25583872, -9299552, 13127842, 759709, 21923482, 16529112, 8742704, 12967017]), new Phantasma.Cryptography.FieldElement.$ctor1([-28464899, 1553205, 32536856, -10473729, -24691605, -406174, -8914625, -2933896, -29903758, 15553883]), new Phantasma.Cryptography.FieldElement.$ctor1([21877909, 3230008, 9881174, 10539357, -4797115, 2841332, 11543572, 14513274, 19375923, -12647961])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([8832269, -14495485, 13253511, 5137575, 5037871, 4078777, 24880818, -6222716, 2862653, 9455043]), new Phantasma.Cryptography.FieldElement.$ctor1([29306751, 5123106, 20245049, -14149889, 9592566, 8447059, -2077124, -2990080, 15511449, 4789663]), new Phantasma.Cryptography.FieldElement.$ctor1([-20679756, 7004547, 8824831, -9434977, -4045704, -3750736, -5754762, 108893, 23513200, 16652362]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-33256173, 4144782, -4476029, -6579123, 10770039, -7155542, -6650416, -12936300, -18319198, 10212860]), new Phantasma.Cryptography.FieldElement.$ctor1([2756081, 8598110, 7383731, -6859892, 22312759, -1105012, 21179801, 2600940, -9988298, -12506466]), new Phantasma.Cryptography.FieldElement.$ctor1([-24645692, 13317462, -30449259, -15653928, 21365574, -10869657, 11344424, 864440, -2499677, -16710063])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-26432803, 6148329, -17184412, -14474154, 18782929, -275997, -22561534, 211300, 2719757, 4940997]), new Phantasma.Cryptography.FieldElement.$ctor1([-1323882, 3911313, -6948744, 14759765, -30027150, 7851207, 21690126, 8518463, 26699843, 5276295]), new Phantasma.Cryptography.FieldElement.$ctor1([-13149873, -6429067, 9396249, 365013, 24703301, -10488939, 1321586, 149635, -15452774, 7159369])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([9987780, -3404759, 17507962, 9505530, 9731535, -2165514, 22356009, 8312176, 22477218, -8403385]), new Phantasma.Cryptography.FieldElement.$ctor1([18155857, -16504990, 19744716, 9006923, 15154154, -10538976, 24256460, -4864995, -22548173, 9334109]), new Phantasma.Cryptography.FieldElement.$ctor1([2986088, -4911893, 10776628, -3473844, 10620590, -7083203, -21413845, 14253545, -22587149, 536906])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([4377756, 8115836, 24567078, 15495314, 11625074, 13064599, 7390551, 10589625, 10838060, -15420424]), new Phantasma.Cryptography.FieldElement.$ctor1([-19342404, 867880, 9277171, -3218459, -14431572, -1986443, 19295826, -15796950, 6378260, 699185]), new Phantasma.Cryptography.FieldElement.$ctor1([7895026, 4057113, -7081772, -13077756, -17886831, -323126, -716039, 15693155, -5045064, -13373962])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-7737563, -5869402, -14566319, -7406919, 11385654, 13201616, 31730678, -10962840, -3918636, -9669325]), new Phantasma.Cryptography.FieldElement.$ctor1([10188286, -15770834, -7336361, 13427543, 22223443, 14896287, 30743455, 7116568, -21786507, 5427593]), new Phantasma.Cryptography.FieldElement.$ctor1([696102, 13206899, 27047647, -10632082, 15285305, -9853179, 10798490, -4578720, 19236243, 12477404])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-11229439, 11243796, -17054270, -8040865, -788228, -8167967, -3897669, 11180504, -23169516, 7733644]), new Phantasma.Cryptography.FieldElement.$ctor1([17800790, -14036179, -27000429, -11766671, 23887827, 3149671, 23466177, -10538171, 10322027, 15313801]), new Phantasma.Cryptography.FieldElement.$ctor1([26246234, 11968874, 32263343, -5468728, 6830755, -13323031, -15794704, -101982, -24449242, 10890804])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-31365647, 10271363, -12660625, -6267268, 16690207, -13062544, -14982212, 16484931, 25180797, -5334884]), new Phantasma.Cryptography.FieldElement.$ctor1([-586574, 10376444, -32586414, -11286356, 19801893, 10997610, 2276632, 9482883, 316878, 13820577]), new Phantasma.Cryptography.FieldElement.$ctor1([-9882808, -4510367, -2115506, 16457136, -11100081, 11674996, 30756178, -7515054, 30696930, -3712849])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([32988917, -9603412, 12499366, 7910787, -10617257, -11931514, -7342816, -9985397, -32349517, 7392473]), new Phantasma.Cryptography.FieldElement.$ctor1([-8855661, 15927861, 9866406, -3649411, -2396914, -16655781, -30409476, -9134995, 25112947, -2926644]), new Phantasma.Cryptography.FieldElement.$ctor1([-2504044, -436966, 25621774, -5678772, 15085042, -5479877, -24884878, -13526194, 5537438, -13914319]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-11225584, 2320285, -9584280, 10149187, -33444663, 5808648, -14876251, -1729667, 31234590, 6090599]), new Phantasma.Cryptography.FieldElement.$ctor1([-9633316, 116426, 26083934, 2897444, -6364437, -2688086, 609721, 15878753, -6970405, -9034768]), new Phantasma.Cryptography.FieldElement.$ctor1([-27757857, 247744, -15194774, -9002551, 23288161, -10011936, -23869595, 6503646, 20650474, 1804084])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-27589786, 15456424, 8972517, 8469608, 15640622, 4439847, 3121995, -10329713, 27842616, -202328]), new Phantasma.Cryptography.FieldElement.$ctor1([-15306973, 2839644, 22530074, 10026331, 4602058, 5048462, 28248656, 5031932, -11375082, 12714369]), new Phantasma.Cryptography.FieldElement.$ctor1([20807691, -7270825, 29286141, 11421711, -27876523, -13868230, -21227475, 1035546, -19733229, 12796920])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([12076899, -14301286, -8785001, -11848922, -25012791, 16400684, -17591495, -12899438, 3480665, -15182815]), new Phantasma.Cryptography.FieldElement.$ctor1([-32361549, 5457597, 28548107, 7833186, 7303070, -11953545, -24363064, -15921875, -33374054, 2771025]), new Phantasma.Cryptography.FieldElement.$ctor1([-21389266, 421932, 26597266, 6860826, 22486084, -6737172, -17137485, -4210226, -24552282, 15673397])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-20184622, 2338216, 19788685, -9620956, -4001265, -8740893, -20271184, 4733254, 3727144, -12934448]), new Phantasma.Cryptography.FieldElement.$ctor1([6120119, 814863, -11794402, -622716, 6812205, -15747771, 2019594, 7975683, 31123697, -10958981]), new Phantasma.Cryptography.FieldElement.$ctor1([30069250, -11435332, 30434654, 2958439, 18399564, -976289, 12296869, 9204260, -16432438, 9648165])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([32705432, -1550977, 30705658, 7451065, -11805606, 9631813, 3305266, 5248604, -26008332, -11377501]), new Phantasma.Cryptography.FieldElement.$ctor1([17219865, 2375039, -31570947, -5575615, -19459679, 9219903, 294711, 15298639, 2662509, -16297073]), new Phantasma.Cryptography.FieldElement.$ctor1([-1172927, -7558695, -4366770, -4287744, -21346413, -8434326, 32087529, -1222777, 32247248, -14389861])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([14312628, 1221556, 17395390, -8700143, -4945741, -8684635, -28197744, -9637817, -16027623, -13378845]), new Phantasma.Cryptography.FieldElement.$ctor1([-1428825, -9678990, -9235681, 6549687, -7383069, -468664, 23046502, 9803137, 17597934, 2346211]), new Phantasma.Cryptography.FieldElement.$ctor1([18510800, 15337574, 26171504, 981392, -22241552, 7827556, -23491134, -11323352, 3059833, -11782870])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([10141598, 6082907, 17829293, -1947643, 9830092, 13613136, -25556636, -5544586, -33502212, 3592096]), new Phantasma.Cryptography.FieldElement.$ctor1([33114168, -15889352, -26525686, -13343397, 33076705, 8716171, 1151462, 1521897, -982665, -6837803]), new Phantasma.Cryptography.FieldElement.$ctor1([-32939165, -4255815, 23947181, -324178, -33072974, -12305637, -16637686, 3891704, 26353178, 693168])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30374239, 1595580, -16884039, 13186931, 4600344, 406904, 9585294, -400668, 31375464, 14369965]), new Phantasma.Cryptography.FieldElement.$ctor1([-14370654, -7772529, 1510301, 6434173, -18784789, -6262728, 32732230, -13108839, 17901441, 16011505]), new Phantasma.Cryptography.FieldElement.$ctor1([18171223, -11934626, -12500402, 15197122, -11038147, -15230035, -19172240, -16046376, 8764035, 12309598]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([5975908, -5243188, -19459362, -9681747, -11541277, 14015782, -23665757, 1228319, 17544096, -10593782]), new Phantasma.Cryptography.FieldElement.$ctor1([5811932, -1715293, 3442887, -2269310, -18367348, -8359541, -18044043, -15410127, -5565381, 12348900]), new Phantasma.Cryptography.FieldElement.$ctor1([-31399660, 11407555, 25755363, 6891399, -3256938, 14872274, -24849353, 8141295, -10632534, -585479])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12675304, 694026, -5076145, 13300344, 14015258, -14451394, -9698672, -11329050, 30944593, 1130208]), new Phantasma.Cryptography.FieldElement.$ctor1([8247766, -6710942, -26562381, -7709309, -14401939, -14648910, 4652152, 2488540, 23550156, -271232]), new Phantasma.Cryptography.FieldElement.$ctor1([17294316, -3788438, 7026748, 15626851, 22990044, 113481, 2267737, -5908146, -408818, -137719])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([16091085, -16253926, 18599252, 7340678, 2137637, -1221657, -3364161, 14550936, 3260525, -7166271]), new Phantasma.Cryptography.FieldElement.$ctor1([-4910104, -13332887, 18550887, 10864893, -16459325, -7291596, -23028869, -13204905, -12748722, 2701326]), new Phantasma.Cryptography.FieldElement.$ctor1([-8574695, 16099415, 4629974, -16340524, -20786213, -6005432, -10018363, 9276971, 11329923, 1862132])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([14763076, -15903608, -30918270, 3689867, 3511892, 10313526, -21951088, 12219231, -9037963, -940300]), new Phantasma.Cryptography.FieldElement.$ctor1([8894987, -3446094, 6150753, 3013931, 301220, 15693451, -31981216, -2909717, -15438168, 11595570]), new Phantasma.Cryptography.FieldElement.$ctor1([15214962, 3537601, -26238722, -14058872, 4418657, -15230761, 13947276, 10730794, -13489462, -4363670])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-2538306, 7682793, 32759013, 263109, -29984731, -7955452, -22332124, -10188635, 977108, 699994]), new Phantasma.Cryptography.FieldElement.$ctor1([-12466472, 4195084, -9211532, 550904, -15565337, 12917920, 19118110, -439841, -30534533, -14337913]), new Phantasma.Cryptography.FieldElement.$ctor1([31788461, -14507657, 4799989, 7372237, 8808585, -14747943, 9408237, -10051775, 12493932, -5409317])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25680606, 5260744, -19235809, -6284470, -3695942, 16566087, 27218280, 2607121, 29375955, 6024730]), new Phantasma.Cryptography.FieldElement.$ctor1([842132, -2794693, -4763381, -8722815, 26332018, -12405641, 11831880, 6985184, -9940361, 2854096]), new Phantasma.Cryptography.FieldElement.$ctor1([-4847262, -7969331, 2516242, -5847713, 9695691, -7221186, 16512645, 960770, 12121869, 16648078])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-15218652, 14667096, -13336229, 2013717, 30598287, -464137, -31504922, -7882064, 20237806, 2838411]), new Phantasma.Cryptography.FieldElement.$ctor1([-19288047, 4453152, 15298546, -16178388, 22115043, -15972604, 12544294, -13470457, 1068881, -12499905]), new Phantasma.Cryptography.FieldElement.$ctor1([-9558883, -16518835, 33238498, 13506958, 30505848, -1114596, -8486907, -2630053, 12521378, 4845654])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-28198521, 10744108, -2958380, 10199664, 7759311, -13088600, 3409348, -873400, -6482306, -12885870]), new Phantasma.Cryptography.FieldElement.$ctor1([-23561822, 6230156, -20382013, 10655314, -24040585, -11621172, 10477734, -1240216, -3113227, 13974498]), new Phantasma.Cryptography.FieldElement.$ctor1([12966261, 15550616, -32038948, -1615346, 21025980, -629444, 5642325, 7188737, 18895762, 12629579]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([14741879, -14946887, 22177208, -11721237, 1279741, 8058600, 11758140, 789443, 32195181, 3895677]), new Phantasma.Cryptography.FieldElement.$ctor1([10758205, 15755439, -4509950, 9243698, -4879422, 6879879, -2204575, -3566119, -8982069, 4429647]), new Phantasma.Cryptography.FieldElement.$ctor1([-2453894, 15725973, -20436342, -10410672, -5803908, -11040220, -7135870, -11642895, 18047436, -15281743])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25173001, -11307165, 29759956, 11776784, -22262383, -15820455, 10993114, -12850837, -17620701, -9408468]), new Phantasma.Cryptography.FieldElement.$ctor1([21987233, 700364, -24505048, 14972008, -7774265, -5718395, 32155026, 2581431, -29958985, 8773375]), new Phantasma.Cryptography.FieldElement.$ctor1([-25568350, 454463, -13211935, 16126715, 25240068, 8594567, 20656846, 12017935, -7874389, -13920155])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([6028182, 6263078, -31011806, -11301710, -818919, 2461772, -31841174, -5468042, -1721788, -2776725]), new Phantasma.Cryptography.FieldElement.$ctor1([-12278994, 16624277, 987579, -5922598, 32908203, 1248608, 7719845, -4166698, 28408820, 6816612]), new Phantasma.Cryptography.FieldElement.$ctor1([-10358094, -8237829, 19549651, -12169222, 22082623, 16147817, 20613181, 13982702, -10339570, 5067943])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-30505967, -3821767, 12074681, 13582412, -19877972, 2443951, -19719286, 12746132, 5331210, -10105944]), new Phantasma.Cryptography.FieldElement.$ctor1([30528811, 3601899, -1957090, 4619785, -27361822, -15436388, 24180793, -12570394, 27679908, -1648928]), new Phantasma.Cryptography.FieldElement.$ctor1([9402404, -13957065, 32834043, 10838634, -26580150, -13237195, 26653274, -8685565, 22611444, -12715406])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([22190590, 1118029, 22736441, 15130463, -30460692, -5991321, 19189625, -4648942, 4854859, 6622139]), new Phantasma.Cryptography.FieldElement.$ctor1([-8310738, -2953450, -8262579, -3388049, -10401731, -271929, 13424426, -3567227, 26404409, 13001963]), new Phantasma.Cryptography.FieldElement.$ctor1([-31241838, -15415700, -2994250, 8939346, 11562230, -12840670, -26064365, -11621720, -15405155, 11020693])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([1866042, -7949489, -7898649, -10301010, 12483315, 13477547, 3175636, -12424163, 28761762, 1406734]), new Phantasma.Cryptography.FieldElement.$ctor1([-448555, -1777666, 13018551, 3194501, -9580420, -11161737, 24760585, -4347088, 25577411, -13378680]), new Phantasma.Cryptography.FieldElement.$ctor1([-24290378, 4759345, -690653, -1852816, 2066747, 10693769, -29595790, 9884936, -9368926, 4745410])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-9141284, 6049714, -19531061, -4341411, -31260798, 9944276, -15462008, -11311852, 10931924, -11931931]), new Phantasma.Cryptography.FieldElement.$ctor1([-16561513, 14112680, -8012645, 4817318, -8040464, -11414606, -22853429, 10856641, -20470770, 13434654]), new Phantasma.Cryptography.FieldElement.$ctor1([22759489, -10073434, -16766264, -1871422, 13637442, -10168091, 1765144, -12654326, 28445307, -5364710])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([29875063, 12493613, 2795536, -3786330, 1710620, 15181182, -10195717, -8788675, 9074234, 1167180]), new Phantasma.Cryptography.FieldElement.$ctor1([-26205683, 11014233, -9842651, -2635485, -26908120, 7532294, -18716888, -9535498, 3843903, 9367684]), new Phantasma.Cryptography.FieldElement.$ctor1([-10969595, -6403711, 9591134, 9582310, 11349256, 108879, 16235123, 8601684, -139197, 4242895]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([22092954, -13191123, -2042793, -11968512, 32186753, -11517388, -6574341, 2470660, -27417366, 16625501]), new Phantasma.Cryptography.FieldElement.$ctor1([-11057722, 3042016, 13770083, -9257922, 584236, -544855, -7770857, 2602725, -27351616, 14247413]), new Phantasma.Cryptography.FieldElement.$ctor1([6314175, -10264892, -32772502, 15957557, -10157730, 168750, -8618807, 14290061, 27108877, -1180880])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-8586597, -7170966, 13241782, 10960156, -32991015, -13794596, 33547976, -11058889, -27148451, 981874]), new Phantasma.Cryptography.FieldElement.$ctor1([22833440, 9293594, -32649448, -13618667, -9136966, 14756819, -22928859, -13970780, -10479804, -16197962]), new Phantasma.Cryptography.FieldElement.$ctor1([-7768587, 3326786, -28111797, 10783824, 19178761, 14905060, 22680049, 13906969, -15933690, 3797899])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([21721356, -4212746, -12206123, 9310182, -3882239, -13653110, 23740224, -2709232, 20491983, -8042152]), new Phantasma.Cryptography.FieldElement.$ctor1([9209270, -15135055, -13256557, -6167798, -731016, 15289673, 25947805, 15286587, 30997318, -6703063]), new Phantasma.Cryptography.FieldElement.$ctor1([7392032, 16618386, 23946583, -8039892, -13265164, -1533858, -14197445, -2321576, 17649998, -250080])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-9301088, -14193827, 30609526, -3049543, -25175069, -1283752, -15241566, -9525724, -2233253, 7662146]), new Phantasma.Cryptography.FieldElement.$ctor1([-17558673, 1763594, -33114336, 15908610, -30040870, -12174295, 7335080, -8472199, -3174674, 3440183]), new Phantasma.Cryptography.FieldElement.$ctor1([-19889700, -5977008, -24111293, -9688870, 10799743, -16571957, 40450, -4431835, 4862400, 1133])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-32856209, -7873957, -5422389, 14860950, -16319031, 7956142, 7258061, 311861, -30594991, -7379421]), new Phantasma.Cryptography.FieldElement.$ctor1([-3773428, -1565936, 28985340, 7499440, 24445838, 9325937, 29727763, 16527196, 18278453, 15405622]), new Phantasma.Cryptography.FieldElement.$ctor1([-4381906, 8508652, -19898366, -3674424, -5984453, 15149970, -13313598, 843523, -21875062, 13626197])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([2281448, -13487055, -10915418, -2609910, 1879358, 16164207, -10783882, 3953792, 13340839, 15928663]), new Phantasma.Cryptography.FieldElement.$ctor1([31727126, -7179855, -18437503, -8283652, 2875793, -16390330, -25269894, -7014826, -23452306, 5964753]), new Phantasma.Cryptography.FieldElement.$ctor1([4100420, -5959452, -17179337, 6017714, -18705837, 12227141, -26684835, 11344144, 2538215, -7570755])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-9433605, 6123113, 11159803, -2156608, 30016280, 14966241, -20474983, 1485421, -629256, -15958862]), new Phantasma.Cryptography.FieldElement.$ctor1([-26804558, 4260919, 11851389, 9658551, -32017107, 16367492, -20205425, -13191288, 11659922, -11115118]), new Phantasma.Cryptography.FieldElement.$ctor1([26180396, 10015009, -30844224, -8581293, 5418197, 9480663, 2231568, -10170080, 33100372, -1306171])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15121113, -5201871, -10389905, 15427821, -27509937, -15992507, 21670947, 4486675, -5931810, -14466380]), new Phantasma.Cryptography.FieldElement.$ctor1([16166486, -9483733, -11104130, 6023908, -31926798, -1364923, 2340060, -16254968, -10735770, -10039824]), new Phantasma.Cryptography.FieldElement.$ctor1([28042865, -3557089, -12126526, 12259706, -3717498, -6945899, 6766453, -8689599, 18036436, 5803270]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-817581, 6763912, 11803561, 1585585, 10958447, -2671165, 23855391, 4598332, -6159431, -14117438]), new Phantasma.Cryptography.FieldElement.$ctor1([-31031306, -14256194, 17332029, -2383520, 31312682, -5967183, 696309, 50292, -20095739, 11763584]), new Phantasma.Cryptography.FieldElement.$ctor1([-594563, -2514283, -32234153, 12643980, 12650761, 14811489, 665117, -12613632, -19773211, -10713562])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30464590, -11262872, -4127476, -12734478, 19835327, -7105613, -24396175, 2075773, -17020157, 992471]), new Phantasma.Cryptography.FieldElement.$ctor1([18357185, -6994433, 7766382, 16342475, -29324918, 411174, 14578841, 8080033, -11574335, -10601610]), new Phantasma.Cryptography.FieldElement.$ctor1([19598397, 10334610, 12555054, 2555664, 18821899, -10339780, 21873263, 16014234, 26224780, 16452269])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-30223925, 5145196, 5944548, 16385966, 3976735, 2009897, -11377804, -7618186, -20533829, 3698650]), new Phantasma.Cryptography.FieldElement.$ctor1([14187449, 3448569, -10636236, -10810935, -22663880, -3433596, 7268410, -10890444, 27394301, 12015369]), new Phantasma.Cryptography.FieldElement.$ctor1([19695761, 16087646, 28032085, 12999827, 6817792, 11427614, 20244189, -1312777, -13259127, -3402461])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30860103, 12735208, -1888245, -4699734, -16974906, 2256940, -8166013, 12298312, -8550524, -10393462]), new Phantasma.Cryptography.FieldElement.$ctor1([-5719826, -11245325, -1910649, 15569035, 26642876, -7587760, -5789354, -15118654, -4976164, 12651793]), new Phantasma.Cryptography.FieldElement.$ctor1([-2848395, 9953421, 11531313, -5282879, 26895123, -12697089, -13118820, -16517902, 9768698, -2533218])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-24719459, 1894651, -287698, -4704085, 15348719, -8156530, 32767513, 12765450, 4940095, 10678226]), new Phantasma.Cryptography.FieldElement.$ctor1([18860224, 15980149, -18987240, -1562570, -26233012, -11071856, -7843882, 13944024, -24372348, 16582019]), new Phantasma.Cryptography.FieldElement.$ctor1([-15504260, 4970268, -29893044, 4175593, -20993212, -2199756, -11704054, 15444560, -11003761, 7989037])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([31490452, 5568061, -2412803, 2182383, -32336847, 4531686, -32078269, 6200206, -19686113, -14800171]), new Phantasma.Cryptography.FieldElement.$ctor1([-17308668, -15879940, -31522777, -2831, -32887382, 16375549, 8680158, -16371713, 28550068, -6857132]), new Phantasma.Cryptography.FieldElement.$ctor1([-28126887, -5688091, 16837845, -1820458, -6850681, 12700016, -30039981, 4364038, 1155602, 5988841])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([21890435, -13272907, -12624011, 12154349, -7831873, 15300496, 23148983, -4470481, 24618407, 8283181]), new Phantasma.Cryptography.FieldElement.$ctor1([-33136107, -10512751, 9975416, 6841041, -31559793, 16356536, 3070187, -7025928, 1466169, 10740210]), new Phantasma.Cryptography.FieldElement.$ctor1([-1509399, -15488185, -13503385, -10655916, 32799044, 909394, -13938903, -5779719, -32164649, -15327040])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([3960823, -14267803, -28026090, -15918051, -19404858, 13146868, 15567327, 951507, -3260321, -573935]), new Phantasma.Cryptography.FieldElement.$ctor1([24740841, 5052253, -30094131, 8961361, 25877428, 6165135, -24368180, 14397372, -7380369, -6144105]), new Phantasma.Cryptography.FieldElement.$ctor1([-28888365, 3510803, -28103278, -1158478, -11238128, -10631454, -15441463, -14453128, -1625486, -6494814]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([793299, -9230478, 8836302, -6235707, -27360908, -2369593, 33152843, -4885251, -9906200, -621852]), new Phantasma.Cryptography.FieldElement.$ctor1([5666233, 525582, 20782575, -8038419, -24538499, 14657740, 16099374, 1468826, -6171428, -15186581]), new Phantasma.Cryptography.FieldElement.$ctor1([-4859255, -3779343, -2917758, -6748019, 7778750, 11688288, -30404353, -9871238, -1558923, -9863646])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([10896332, -7719704, 824275, 472601, -19460308, 3009587, 25248958, 14783338, -30581476, -15757844]), new Phantasma.Cryptography.FieldElement.$ctor1([10566929, 12612572, -31944212, 11118703, -12633376, 12362879, 21752402, 8822496, 24003793, 14264025]), new Phantasma.Cryptography.FieldElement.$ctor1([27713862, -7355973, -11008240, 9227530, 27050101, 2504721, 23886875, -13117525, 13958495, -5732453])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23481610, 4867226, -27247128, 3900521, 29838369, -8212291, -31889399, -10041781, 7340521, -15410068]), new Phantasma.Cryptography.FieldElement.$ctor1([4646514, -8011124, -22766023, -11532654, 23184553, 8566613, 31366726, -1381061, -15066784, -10375192]), new Phantasma.Cryptography.FieldElement.$ctor1([-17270517, 12723032, -16993061, 14878794, 21619651, -6197576, 27584817, 3093888, -8843694, 3849921])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-9064912, 2103172, 25561640, -15125738, -5239824, 9582958, 32477045, -9017955, 5002294, -15550259]), new Phantasma.Cryptography.FieldElement.$ctor1([-12057553, -11177906, 21115585, -13365155, 8808712, -12030708, 16489530, 13378448, -25845716, 12741426]), new Phantasma.Cryptography.FieldElement.$ctor1([-5946367, 10645103, -30911586, 15390284, -3286982, -7118677, 24306472, 15852464, 28834118, -7646072])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-17335748, -9107057, -24531279, 9434953, -8472084, -583362, -13090771, 455841, 20461858, 5491305]), new Phantasma.Cryptography.FieldElement.$ctor1([13669248, -16095482, -12481974, -10203039, -14569770, -11893198, -24995986, 11293807, -28588204, -9421832]), new Phantasma.Cryptography.FieldElement.$ctor1([28497928, 6272777, -33022994, 14470570, 8906179, -1225630, 18504674, -14165166, 29867745, -8795943])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-16207023, 13517196, -27799630, -13697798, 24009064, -6373891, -6367600, -13175392, 22853429, -4012011]), new Phantasma.Cryptography.FieldElement.$ctor1([24191378, 16712145, -13931797, 15217831, 14542237, 1646131, 18603514, -11037887, 12876623, -2112447]), new Phantasma.Cryptography.FieldElement.$ctor1([17902668, 4518229, -411702, -2829247, 26878217, 5258055, -12860753, 608397, 16031844, 3723494])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-28632773, 12763728, -20446446, 7577504, 33001348, -13017745, 17558842, -7872890, 23896954, -4314245]), new Phantasma.Cryptography.FieldElement.$ctor1([-20005381, -12011952, 31520464, 605201, 2543521, 5991821, -2945064, 7229064, -9919646, -8826859]), new Phantasma.Cryptography.FieldElement.$ctor1([28816045, 298879, -28165016, -15920938, 19000928, -1665890, -12680833, -2949325, -18051778, -2082915])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([16000882, -344896, 3493092, -11447198, -29504595, -13159789, 12577740, 16041268, -19715240, 7847707]), new Phantasma.Cryptography.FieldElement.$ctor1([10151868, 10572098, 27312476, 7922682, 14825339, 4723128, -32855931, -6519018, -10020567, 3852848]), new Phantasma.Cryptography.FieldElement.$ctor1([-11430470, 15697596, -21121557, -4420647, 5386314, 15063598, 16514493, -15932110, 29330899, -15076224]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25499735, -4378794, -15222908, -6901211, 16615731, 2051784, 3303702, 15490, -27548796, 12314391]), new Phantasma.Cryptography.FieldElement.$ctor1([15683520, -6003043, 18109120, -9980648, 15337968, -5997823, -16717435, 15921866, 16103996, -3731215]), new Phantasma.Cryptography.FieldElement.$ctor1([-23169824, -10781249, 13588192, -1628807, -3798557, -1074929, -19273607, 5402699, -29815713, -9841101])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([23190676, 2384583, -32714340, 3462154, -29903655, -1529132, -11266856, 8911517, -25205859, 2739713]), new Phantasma.Cryptography.FieldElement.$ctor1([21374101, -3554250, -33524649, 9874411, 15377179, 11831242, -33529904, 6134907, 4931255, 11987849]), new Phantasma.Cryptography.FieldElement.$ctor1([-7732, -2978858, -16223486, 7277597, 105524, -322051, -31480539, 13861388, -30076310, 10117930])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-29501170, -10744872, -26163768, 13051539, -25625564, 5089643, -6325503, 6704079, 12890019, 15728940]), new Phantasma.Cryptography.FieldElement.$ctor1([-21972360, -11771379, -951059, -4418840, 14704840, 2695116, 903376, -10428139, 12885167, 8311031]), new Phantasma.Cryptography.FieldElement.$ctor1([-17516482, 5352194, 10384213, -13811658, 7506451, 13453191, 26423267, 4384730, 1888765, -5435404])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25817338, -3107312, -13494599, -3182506, 30896459, -13921729, -32251644, -12707869, -19464434, -3340243]), new Phantasma.Cryptography.FieldElement.$ctor1([-23607977, -2665774, -526091, 4651136, 5765089, 4618330, 6092245, 14845197, 17151279, -9854116]), new Phantasma.Cryptography.FieldElement.$ctor1([-24830458, -12733720, -15165978, 10367250, -29530908, -265356, 22825805, -7087279, -16866484, 16176525])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23583256, 6564961, 20063689, 3798228, -4740178, 7359225, 2006182, -10363426, -28746253, -10197509]), new Phantasma.Cryptography.FieldElement.$ctor1([-10626600, -4486402, -13320562, -5125317, 3432136, -6393229, 23632037, -1940610, 32808310, 1099883]), new Phantasma.Cryptography.FieldElement.$ctor1([15030977, 5768825, -27451236, -2887299, -6427378, -15361371, -15277896, -6809350, 2051441, -15225865])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-3362323, -7239372, 7517890, 9824992, 23555850, 295369, 5148398, -14154188, -22686354, 16633660]), new Phantasma.Cryptography.FieldElement.$ctor1([4577086, -16752288, 13249841, -15304328, 19958763, -14537274, 18559670, -10759549, 8402478, -9864273]), new Phantasma.Cryptography.FieldElement.$ctor1([-28406330, -1051581, -26790155, -907698, -17212414, -11030789, 9453451, -14980072, 17983010, 9967138])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25762494, 6524722, 26585488, 9969270, 24709298, 1220360, -1677990, 7806337, 17507396, 3651560]), new Phantasma.Cryptography.FieldElement.$ctor1([-10420457, -4118111, 14584639, 15971087, -15768321, 8861010, 26556809, -5574557, -18553322, -11357135]), new Phantasma.Cryptography.FieldElement.$ctor1([2839101, 14284142, 4029895, 3472686, 14402957, 12689363, -26642121, 8459447, -5605463, -7621941])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-4839289, -3535444, 9744961, 2871048, 25113978, 3187018, -25110813, -849066, 17258084, -7977739]), new Phantasma.Cryptography.FieldElement.$ctor1([18164541, -10595176, -17154882, -1542417, 19237078, -9745295, 23357533, -15217008, 26908270, 12150756]), new Phantasma.Cryptography.FieldElement.$ctor1([-30264870, -7647865, 5112249, -7036672, -1499807, -6974257, 43168, -5537701, -32302074, 16215819]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-6898905, 9824394, -12304779, -4401089, -31397141, -6276835, 32574489, 12532905, -7503072, -8675347]), new Phantasma.Cryptography.FieldElement.$ctor1([-27343522, -16515468, -27151524, -10722951, 946346, 16291093, 254968, 7168080, 21676107, -1943028]), new Phantasma.Cryptography.FieldElement.$ctor1([21260961, -8424752, -16831886, -11920822, -23677961, 3968121, -3651949, -6215466, -3556191, -7913075])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([16544754, 13250366, -16804428, 15546242, -4583003, 12757258, -2462308, -8680336, -18907032, -9662799]), new Phantasma.Cryptography.FieldElement.$ctor1([-2415239, -15577728, 18312303, 4964443, -15272530, -12653564, 26820651, 16690659, 25459437, -4564609]), new Phantasma.Cryptography.FieldElement.$ctor1([-25144690, 11425020, 28423002, -11020557, -6144921, -15826224, 9142795, -2391602, -6432418, -1644817])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23104652, 6253476, 16964147, -3768872, -25113972, -12296437, -27457225, -16344658, 6335692, 7249989]), new Phantasma.Cryptography.FieldElement.$ctor1([-30333227, 13979675, 7503222, -12368314, -11956721, -4621693, -30272269, 2682242, 25993170, -12478523]), new Phantasma.Cryptography.FieldElement.$ctor1([4364628, 5930691, 32304656, -10044554, -8054781, 15091131, 22857016, -10598955, 31820368, 15075278])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([31879134, -8918693, 17258761, 90626, -8041836, -4917709, 24162788, -9650886, -17970238, 12833045]), new Phantasma.Cryptography.FieldElement.$ctor1([19073683, 14851414, -24403169, -11860168, 7625278, 11091125, -19619190, 2074449, -9413939, 14905377]), new Phantasma.Cryptography.FieldElement.$ctor1([24483667, -11935567, -2518866, -11547418, -1553130, 15355506, -25282080, 9253129, 27628530, -7555480])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([17597607, 8340603, 19355617, 552187, 26198470, -3176583, 4593324, -9157582, -14110875, 15297016]), new Phantasma.Cryptography.FieldElement.$ctor1([510886, 14337390, -31785257, 16638632, 6328095, 2713355, -20217417, -11864220, 8683221, 2921426]), new Phantasma.Cryptography.FieldElement.$ctor1([18606791, 11874196, 27155355, -5281482, -24031742, 6265446, -25178240, -1278924, 4674690, 13890525])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([13609624, 13069022, -27372361, -13055908, 24360586, 9592974, 14977157, 9835105, 4389687, 288396]), new Phantasma.Cryptography.FieldElement.$ctor1([9922506, -519394, 13613107, 5883594, -18758345, -434263, -12304062, 8317628, 23388070, 16052080]), new Phantasma.Cryptography.FieldElement.$ctor1([12720016, 11937594, -31970060, -5028689, 26900120, 8561328, -20155687, -11632979, -14754271, -10812892])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15961858, 14150409, 26716931, -665832, -22794328, 13603569, 11829573, 7467844, -28822128, 929275]), new Phantasma.Cryptography.FieldElement.$ctor1([11038231, -11582396, -27310482, -7316562, -10498527, -16307831, -23479533, -9371869, -21393143, 2465074]), new Phantasma.Cryptography.FieldElement.$ctor1([20017163, -4323226, 27915242, 1529148, 12396362, 15675764, 13817261, -9658066, 2463391, -4622140])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-16358878, -12663911, -12065183, 4996454, -1256422, 1073572, 9583558, 12851107, 4003896, 12673717]), new Phantasma.Cryptography.FieldElement.$ctor1([-1731589, -15155870, -3262930, 16143082, 19294135, 13385325, 14741514, -9103726, 7903886, 2348101]), new Phantasma.Cryptography.FieldElement.$ctor1([24536016, -16515207, 12715592, -3862155, 1511293, 10047386, -3842346, -7129159, -28377538, 10048127]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-12622226, -6204820, 30718825, 2591312, -10617028, 12192840, 18873298, -7297090, -32297756, 15221632]), new Phantasma.Cryptography.FieldElement.$ctor1([-26478122, -11103864, 11546244, -1852483, 9180880, 7656409, -21343950, 2095755, 29769758, 6593415]), new Phantasma.Cryptography.FieldElement.$ctor1([-31994208, -2907461, 4176912, 3264766, 12538965, -868111, 26312345, -6118678, 30958054, 8292160])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([31429822, -13959116, 29173532, 15632448, 12174511, -2760094, 32808831, 3977186, 26143136, -3148876]), new Phantasma.Cryptography.FieldElement.$ctor1([22648901, 1402143, -22799984, 13746059, 7936347, 365344, -8668633, -1674433, -3758243, -2304625]), new Phantasma.Cryptography.FieldElement.$ctor1([-15491917, 8012313, -2514730, -12702462, -23965846, -10254029, -1612713, -1535569, -16664475, 8194478])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([27338066, -7507420, -7414224, 10140405, -19026427, -6589889, 27277191, 8855376, 28572286, 3005164]), new Phantasma.Cryptography.FieldElement.$ctor1([26287124, 4821776, 25476601, -4145903, -3764513, -15788984, -18008582, 1182479, -26094821, -13079595]), new Phantasma.Cryptography.FieldElement.$ctor1([-7171154, 3178080, 23970071, 6201893, -17195577, -4489192, -21876275, -13982627, 32208683, -1198248])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-16657702, 2817643, -10286362, 14811298, 6024667, 13349505, -27315504, -10497842, -27672585, -11539858]), new Phantasma.Cryptography.FieldElement.$ctor1([15941029, -9405932, -21367050, 8062055, 31876073, -238629, -15278393, -1444429, 15397331, -4130193]), new Phantasma.Cryptography.FieldElement.$ctor1([8934485, -13485467, -23286397, -13423241, -32446090, 14047986, 31170398, -1441021, -27505566, 15087184])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-18357243, -2156491, 24524913, -16677868, 15520427, -6360776, -15502406, 11461896, 16788528, -5868942]), new Phantasma.Cryptography.FieldElement.$ctor1([-1947386, 16013773, 21750665, 3714552, -17401782, -16055433, -3770287, -10323320, 31322514, -11615635]), new Phantasma.Cryptography.FieldElement.$ctor1([21426655, -5650218, -13648287, -5347537, -28812189, -4920970, -18275391, -14621414, 13040862, -12112948])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([11293895, 12478086, -27136401, 15083750, -29307421, 14748872, 14555558, -13417103, 1613711, 4896935]), new Phantasma.Cryptography.FieldElement.$ctor1([-25894883, 15323294, -8489791, -8057900, 25967126, -13425460, 2825960, -4897045, -23971776, -11267415]), new Phantasma.Cryptography.FieldElement.$ctor1([-15924766, -5229880, -17443532, 6410664, 3622847, 10243618, 20615400, 12405433, -23753030, -8436416])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-7091295, 12556208, -20191352, 9025187, -17072479, 4333801, 4378436, 2432030, 23097949, -566018]), new Phantasma.Cryptography.FieldElement.$ctor1([4565804, -16025654, 20084412, -7842817, 1724999, 189254, 24767264, 10103221, -18512313, 2424778]), new Phantasma.Cryptography.FieldElement.$ctor1([366633, -11976806, 8173090, -6890119, 30788634, 5745705, -7168678, 1344109, -3642553, 12412659])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-24001791, 7690286, 14929416, -168257, -32210835, -13412986, 24162697, -15326504, -3141501, 11179385]), new Phantasma.Cryptography.FieldElement.$ctor1([18289522, -14724954, 8056945, 16430056, -21729724, 7842514, -6001441, -1486897, -18684645, -11443503]), new Phantasma.Cryptography.FieldElement.$ctor1([476239, 6601091, -6152790, -9723375, 17503545, -4863900, 27672959, 13403813, 11052904, 5219329]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([20678546, -8375738, -32671898, 8849123, -5009758, 14574752, 31186971, -3973730, 9014762, -8579056]), new Phantasma.Cryptography.FieldElement.$ctor1([-13644050, -10350239, -15962508, 5075808, -1514661, -11534600, -33102500, 9160280, 8473550, -3256838]), new Phantasma.Cryptography.FieldElement.$ctor1([24900749, 14435722, 17209120, -15292541, -22592275, 9878983, -7689309, -16335821, -24568481, 11788948])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-3118155, -11395194, -13802089, 14797441, 9652448, -6845904, -20037437, 10410733, -24568470, -1458691]), new Phantasma.Cryptography.FieldElement.$ctor1([-15659161, 16736706, -22467150, 10215878, -9097177, 7563911, 11871841, -12505194, -18513325, 8464118]), new Phantasma.Cryptography.FieldElement.$ctor1([-23400612, 8348507, -14585951, -861714, -3950205, -6373419, 14325289, 8628612, 33313881, -8370517])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-20186973, -4967935, 22367356, 5271547, -1097117, -4788838, -24805667, -10236854, -8940735, -5818269]), new Phantasma.Cryptography.FieldElement.$ctor1([-6948785, -1795212, -32625683, -16021179, 32635414, -7374245, 15989197, -12838188, 28358192, -4253904]), new Phantasma.Cryptography.FieldElement.$ctor1([-23561781, -2799059, -32351682, -1661963, -9147719, 10429267, -16637684, 4072016, -5351664, 5596589])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-28236598, -3390048, 12312896, 6213178, 3117142, 16078565, 29266239, 2557221, 1768301, 15373193]), new Phantasma.Cryptography.FieldElement.$ctor1([-7243358, -3246960, -4593467, -7553353, -127927, -912245, -1090902, -4504991, -24660491, 3442910]), new Phantasma.Cryptography.FieldElement.$ctor1([-30210571, 5124043, 14181784, 8197961, 18964734, -11939093, 22597931, 7176455, -18585478, 13365930])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-7877390, -1499958, 8324673, 4690079, 6261860, 890446, 24538107, -8570186, -9689599, -3031667]), new Phantasma.Cryptography.FieldElement.$ctor1([25008904, -10771599, -4305031, -9638010, 16265036, 15721635, 683793, -11823784, 15723479, -15163481]), new Phantasma.Cryptography.FieldElement.$ctor1([-9660625, 12374379, -27006999, -7026148, -7724114, -12314514, 11879682, 5400171, 519526, -1235876])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([22258397, -16332233, -7869817, 14613016, -22520255, -2950923, -20353881, 7315967, 16648397, 7605640]), new Phantasma.Cryptography.FieldElement.$ctor1([-8081308, -8464597, -8223311, 9719710, 19259459, -15348212, 23994942, -5281555, -9468848, 4763278]), new Phantasma.Cryptography.FieldElement.$ctor1([-21699244, 9220969, -15730624, 1084137, -25476107, -2852390, 31088447, -7764523, -11356529, 728112])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([26047220, -11751471, -6900323, -16521798, 24092068, 9158119, -4273545, -12555558, -29365436, -5498272]), new Phantasma.Cryptography.FieldElement.$ctor1([17510331, -322857, 5854289, 8403524, 17133918, -3112612, -28111007, 12327945, 10750447, 10014012]), new Phantasma.Cryptography.FieldElement.$ctor1([-10312768, 3936952, 9156313, -8897683, 16498692, -994647, -27481051, -666732, 3424691, 7540221])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30322361, -6964110, 11361005, -4143317, 7433304, 4989748, -7071422, -16317219, -9244265, 15258046]), new Phantasma.Cryptography.FieldElement.$ctor1([13054562, -2779497, 19155474, 469045, -12482797, 4566042, 5631406, 2711395, 1062915, -5136345]), new Phantasma.Cryptography.FieldElement.$ctor1([-19240248, -11254599, -29509029, -7499965, -5835763, 13005411, -6066489, 12194497, 32960380, 1459310]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([19852034, 7027924, 23669353, 10020366, 8586503, -6657907, 394197, -6101885, 18638003, -11174937]), new Phantasma.Cryptography.FieldElement.$ctor1([31395534, 15098109, 26581030, 8030562, -16527914, -5007134, 9012486, -7584354, -6643087, -5442636]), new Phantasma.Cryptography.FieldElement.$ctor1([-9192165, -2347377, -1997099, 4529534, 25766844, 607986, -13222, 9677543, -32294889, -6456008])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-2444496, -149937, 29348902, 8186665, 1873760, 12489863, -30934579, -7839692, -7852844, -8138429]), new Phantasma.Cryptography.FieldElement.$ctor1([-15236356, -15433509, 7766470, 746860, 26346930, -10221762, -27333451, 10754588, -9431476, 5203576]), new Phantasma.Cryptography.FieldElement.$ctor1([31834314, 14135496, -770007, 5159118, 20917671, -16768096, -7467973, -7337524, 31809243, 7347066])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-9606723, -11874240, 20414459, 13033986, 13716524, -11691881, 19797970, -12211255, 15192876, -2087490]), new Phantasma.Cryptography.FieldElement.$ctor1([-12663563, -2181719, 1168162, -3804809, 26747877, -14138091, 10609330, 12694420, 33473243, -13382104]), new Phantasma.Cryptography.FieldElement.$ctor1([33184999, 11180355, 15832085, -11385430, -1633671, 225884, 15089336, -11023903, -6135662, 14480053])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([31308717, -5619998, 31030840, -1897099, 15674547, -6582883, 5496208, 13685227, 27595050, 8737275]), new Phantasma.Cryptography.FieldElement.$ctor1([-20318852, -15150239, 10933843, -16178022, 8335352, -7546022, -31008351, -12610604, 26498114, 66511]), new Phantasma.Cryptography.FieldElement.$ctor1([22644454, -8761729, -16671776, 4884562, -3105614, -13559366, 30540766, -4286747, -13327787, -7515095])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-28017847, 9834845, 18617207, -2681312, -3401956, -13307506, 8205540, 13585437, -17127465, 15115439]), new Phantasma.Cryptography.FieldElement.$ctor1([23711543, -672915, 31206561, -8362711, 6164647, -9709987, -33535882, -1426096, 8236921, 16492939]), new Phantasma.Cryptography.FieldElement.$ctor1([-23910559, -13515526, -26299483, -4503841, 25005590, -7687270, 19574902, 10071562, 6708380, -6222424])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([2101391, -4930054, 19702731, 2367575, -15427167, 1047675, 5301017, 9328700, 29955601, -11678310]), new Phantasma.Cryptography.FieldElement.$ctor1([3096359, 9271816, -21620864, -15521844, -14847996, -7592937, -25892142, -12635595, -9917575, 6216608]), new Phantasma.Cryptography.FieldElement.$ctor1([-32615849, 338663, -25195611, 2510422, -29213566, -13820213, 24822830, -6146567, -26767480, 7525079])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23066649, -13985623, 16133487, -7896178, -3389565, 778788, -910336, -2782495, -19386633, 11994101]), new Phantasma.Cryptography.FieldElement.$ctor1([21691500, -13624626, -641331, -14367021, 3285881, -3483596, -25064666, 9718258, -7477437, 13381418]), new Phantasma.Cryptography.FieldElement.$ctor1([18445390, -4202236, 14979846, 11622458, -1727110, -3582980, 23111648, -6375247, 28535282, 15779576])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30098053, 3089662, -9234387, 16662135, -21306940, 11308411, -14068454, 12021730, 9955285, -16303356]), new Phantasma.Cryptography.FieldElement.$ctor1([9734894, -14576830, -7473633, -9138735, 2060392, 11313496, -18426029, 9924399, 20194861, 13380996]), new Phantasma.Cryptography.FieldElement.$ctor1([-26378102, -7965207, -22167821, 15789297, -18055342, -6168792, -1984914, 15707771, 26342023, 10146099]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-26016874, -219943, 21339191, -41388, 19745256, -2878700, -29637280, 2227040, 21612326, -545728]), new Phantasma.Cryptography.FieldElement.$ctor1([-13077387, 1184228, 23562814, -5970442, -20351244, -6348714, 25764461, 12243797, -20856566, 11649658]), new Phantasma.Cryptography.FieldElement.$ctor1([-10031494, 11262626, 27384172, 2271902, 26947504, -15997771, 39944, 6114064, 33514190, 2333242])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-21433588, -12421821, 8119782, 7219913, -21830522, -9016134, -6679750, -12670638, 24350578, -13450001]), new Phantasma.Cryptography.FieldElement.$ctor1([-4116307, -11271533, -23886186, 4843615, -30088339, 690623, -31536088, -10406836, 8317860, 12352766]), new Phantasma.Cryptography.FieldElement.$ctor1([18200138, -14475911, -33087759, -2696619, -23702521, -9102511, -23552096, -2287550, 20712163, 6719373])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([26656208, 6075253, -7858556, 1886072, -28344043, 4262326, 11117530, -3763210, 26224235, -3297458]), new Phantasma.Cryptography.FieldElement.$ctor1([-17168938, -14854097, -3395676, -16369877, -19954045, 14050420, 21728352, 9493610, 18620611, -16428628]), new Phantasma.Cryptography.FieldElement.$ctor1([-13323321, 13325349, 11432106, 5964811, 18609221, 6062965, -5269471, -9725556, -30701573, -16479657])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-23860538, -11233159, 26961357, 1640861, -32413112, -16737940, 12248509, -5240639, 13735342, 1934062]), new Phantasma.Cryptography.FieldElement.$ctor1([25089769, 6742589, 17081145, -13406266, 21909293, -16067981, -15136294, -3765346, -21277997, 5473616]), new Phantasma.Cryptography.FieldElement.$ctor1([31883677, -7961101, 1083432, -11572403, 22828471, 13290673, -7125085, 12469656, 29111212, -5451014])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([24244947, -15050407, -26262976, 2791540, -14997599, 16666678, 24367466, 6388839, -10295587, 452383]), new Phantasma.Cryptography.FieldElement.$ctor1([-25640782, -3417841, 5217916, 16224624, 19987036, -4082269, -24236251, -5915248, 15766062, 8407814]), new Phantasma.Cryptography.FieldElement.$ctor1([-20406999, 13990231, 15495425, 16395525, 5377168, 15166495, -8917023, -4388953, -8067909, 2276718])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([30157918, 12924066, -17712050, 9245753, 19895028, 3368142, -23827587, 5096219, 22740376, -7303417]), new Phantasma.Cryptography.FieldElement.$ctor1([2041139, -14256350, 7783687, 13876377, -25946985, -13352459, 24051124, 13742383, -15637599, 13295222]), new Phantasma.Cryptography.FieldElement.$ctor1([33338237, -8505733, 12532113, 7977527, 9106186, -1715251, -17720195, -4612972, -4451357, -14669444])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-20045281, 5454097, -14346548, 6447146, 28862071, 1883651, -2469266, -4141880, 7770569, 9620597]), new Phantasma.Cryptography.FieldElement.$ctor1([23208068, 7979712, 33071466, 8149229, 1758231, -10834995, 30945528, -1694323, -33502340, -14767970]), new Phantasma.Cryptography.FieldElement.$ctor1([1439958, -16270480, -1079989, -793782, 4625402, 10647766, -5043801, 1220118, 30494170, -11440799])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-5037580, -13028295, -2970559, -3061767, 15640974, -6701666, -26739026, 926050, -1684339, -13333647]), new Phantasma.Cryptography.FieldElement.$ctor1([13908495, -3549272, 30919928, -6273825, -21521863, 7989039, 9021034, 9078865, 3353509, 4033511]), new Phantasma.Cryptography.FieldElement.$ctor1([-29663431, -15113610, 32259991, -344482, 24295849, -12912123, 23161163, 8839127, 27485041, 7356032]))], Phantasma.Cryptography.GroupElementPreComp), System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([9661027, 705443, 11980065, -5370154, -1628543, 14661173, -6346142, 2625015, 28431036, -16771834]), new Phantasma.Cryptography.FieldElement.$ctor1([-23839233, -8311415, -25945511, 7480958, -17681669, -8354183, -22545972, 14150565, 15970762, 4099461]), new Phantasma.Cryptography.FieldElement.$ctor1([29262576, 16756590, 26350592, -8793563, 8529671, -11208050, 13617293, -9937143, 11465739, 8317062])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25493081, -6962928, 32500200, -9419051, -23038724, -2302222, 14898637, 3848455, 20969334, -5157516]), new Phantasma.Cryptography.FieldElement.$ctor1([-20384450, -14347713, -18336405, 13884722, -33039454, 2842114, -21610826, -3649888, 11177095, 14989547]), new Phantasma.Cryptography.FieldElement.$ctor1([-24496721, -11716016, 16959896, 2278463, 12066309, 10137771, 13515641, 2581286, -28487508, 9930240])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-17751622, -2097826, 16544300, -13009300, -15914807, -14949081, 18345767, -13403753, 16291481, -5314038]), new Phantasma.Cryptography.FieldElement.$ctor1([-33229194, 2553288, 32678213, 9875984, 8534129, 6889387, -9676774, 6957617, 4368891, 9788741]), new Phantasma.Cryptography.FieldElement.$ctor1([16660756, 7281060, -10830758, 12911820, 20108584, -8101676, -21722536, -8613148, 16250552, -11111103])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-19765507, 2390526, -16551031, 14161980, 1905286, 6414907, 4689584, 10604807, -30190403, 4782747]), new Phantasma.Cryptography.FieldElement.$ctor1([-1354539, 14736941, -7367442, -13292886, 7710542, -14155590, -9981571, 4383045, 22546403, 437323]), new Phantasma.Cryptography.FieldElement.$ctor1([31665577, -12180464, -16186830, 1491339, -18368625, 3294682, 27343084, 2786261, -30633590, -14097016])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-14467279, -683715, -33374107, 7448552, 19294360, 14334329, -19690631, 2355319, -19284671, -6114373]), new Phantasma.Cryptography.FieldElement.$ctor1([15121312, -15796162, 6377020, -6031361, -10798111, -12957845, 18952177, 15496498, -29380133, 11754228]), new Phantasma.Cryptography.FieldElement.$ctor1([-2637277, -13483075, 8488727, -14303896, 12728761, -1622493, 7141596, 11724556, 22761615, -10134141])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([16918416, 11729663, -18083579, 3022987, -31015732, -13339659, -28741185, -12227393, 32851222, 11717399]), new Phantasma.Cryptography.FieldElement.$ctor1([11166634, 7338049, -6722523, 4531520, -29468672, -7302055, 31474879, 3483633, -1193175, -4030831]), new Phantasma.Cryptography.FieldElement.$ctor1([-185635, 9921305, 31456609, -13536438, -12013818, 13348923, 33142652, 6546660, -19985279, -3948376])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-32460596, 11266712, -11197107, -7899103, 31703694, 3855903, -8537131, -12833048, -30772034, -15486313]), new Phantasma.Cryptography.FieldElement.$ctor1([-18006477, 12709068, 3991746, -6479188, -21491523, -10550425, -31135347, -16049879, 10928917, 3011958]), new Phantasma.Cryptography.FieldElement.$ctor1([-6957757, -15594337, 31696059, 334240, 29576716, 14796075, -30831056, -12805180, 18008031, 10258577])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-22448644, 15655569, 7018479, -4410003, -30314266, -1201591, -1853465, 1367120, 25127874, 6671743]), new Phantasma.Cryptography.FieldElement.$ctor1([29701166, -14373934, -10878120, 9279288, -17568, 13127210, 21382910, 11042292, 25838796, 4642684]), new Phantasma.Cryptography.FieldElement.$ctor1([-20430234, 14955537, -24126347, 8124619, -5369288, -5990470, 30468147, -13900640, 18423289, 4177476]))], Phantasma.Cryptography.GroupElementPreComp)], System.Array.type(Phantasma.Cryptography.GroupElementPreComp));
                    this.Base2 = System.Array.init([new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605]), new Phantasma.Cryptography.FieldElement.$ctor1([-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378]), new Phantasma.Cryptography.FieldElement.$ctor1([-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024]), new Phantasma.Cryptography.FieldElement.$ctor1([16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574]), new Phantasma.Cryptography.FieldElement.$ctor1([30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380]), new Phantasma.Cryptography.FieldElement.$ctor1([4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306]), new Phantasma.Cryptography.FieldElement.$ctor1([19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766]), new Phantasma.Cryptography.FieldElement.$ctor1([-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701]), new Phantasma.Cryptography.FieldElement.$ctor1([28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-22518993, -6692182, 14201702, -8745502, -23510406, 8844726, 18474211, -1361450, -13062696, 13821877]), new Phantasma.Cryptography.FieldElement.$ctor1([-6455177, -7839871, 3374702, -4740862, -27098617, -10571707, 31655028, -7212327, 18853322, -14220951]), new Phantasma.Cryptography.FieldElement.$ctor1([4566830, -12963868, -28974889, -12240689, -7602672, -2830569, -8514358, -10431137, 2207753, -3209784])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-25154831, -4185821, 29681144, 7868801, -6854661, -9423865, -12437364, -663000, -31111463, -16132436]), new Phantasma.Cryptography.FieldElement.$ctor1([25576264, -2703214, 7349804, -11814844, 16472782, 9300885, 3844789, 15725684, 171356, 6466918]), new Phantasma.Cryptography.FieldElement.$ctor1([23103977, 13316479, 9739013, -16149481, 817875, -15038942, 8965339, -14088058, -30714912, 16193877])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-33521811, 3180713, -2394130, 14003687, -16903474, -16270840, 17238398, 4729455, -18074513, 9256800]), new Phantasma.Cryptography.FieldElement.$ctor1([-25182317, -4174131, 32336398, 5036987, -21236817, 11360617, 22616405, 9761698, -19827198, 630305]), new Phantasma.Cryptography.FieldElement.$ctor1([-13720693, 2639453, -24237460, -7406481, 9494427, -5774029, -6554551, -15960994, -2449256, -14291300])), new Phantasma.Cryptography.GroupElementPreComp.$ctor1(new Phantasma.Cryptography.FieldElement.$ctor1([-3151181, -5046075, 9282714, 6866145, -31907062, -863023, -18940575, 15033784, 25105118, -7894876]), new Phantasma.Cryptography.FieldElement.$ctor1([-24326370, 15950226, -31801215, -14592823, -11662737, -5090925, 1573892, -2625887, 2198790, -15804619]), new Phantasma.Cryptography.FieldElement.$ctor1([-3099351, 10324967, -2241613, 7453183, -5446979, -2735503, -13812022, -16236442, -32461234, -12290683]))], Phantasma.Cryptography.GroupElementPreComp);
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.MontgomeryOperations", {
        statics: {
            methods: {
                scalarmult: function (q, qoffset, n, noffset, p, poffset) {
                    var p0 = { v : new Phantasma.Cryptography.FieldElement() };
                    var q0 = { v : new Phantasma.Cryptography.FieldElement() };
                    Phantasma.Cryptography.FieldOperations.fe_frombytes2(p0, p, poffset);
                    Phantasma.Cryptography.MontgomeryOperations.scalarmult$1(q0, n, noffset, p0);
                    Phantasma.Cryptography.FieldOperations.fe_tobytes(q, qoffset, q0);
                },
                scalarmult$1: function (q, n, noffset, p) {
                    var e = System.Array.init(32, 0, System.Byte);
                    var i;
                    var x1 = { v : new Phantasma.Cryptography.FieldElement() };
                    var x2 = { v : new Phantasma.Cryptography.FieldElement() };
                    var z2 = { v : new Phantasma.Cryptography.FieldElement() };
                    var x3 = { v : new Phantasma.Cryptography.FieldElement() };
                    var z3 = { v : new Phantasma.Cryptography.FieldElement() };
                    var tmp0 = { v : new Phantasma.Cryptography.FieldElement() };
                    var tmp1 = { v : new Phantasma.Cryptography.FieldElement() };
                    var pos;
                    var swap;
                    var b;

                    for (i = 0; i < 32; i = (i + 1) >>> 0) {
                        e[System.Array.index(i, e)] = n[System.Array.index(System.Int64.toNumber(System.Int64(noffset).add(System.Int64(i))), n)];
                    }
                    Phantasma.Cryptography.ScalarOperations.sc_clamp(e, 0);
                    x1.v = p.v.$clone();
                    Phantasma.Cryptography.FieldOperations.fe_1(x2);
                    Phantasma.Cryptography.FieldOperations.fe_0(z2);
                    x3.v = x1.v.$clone();
                    Phantasma.Cryptography.FieldOperations.fe_1(z3);

                    swap = 0;
                    for (pos = 254; pos >= 0; pos = (pos - 1) | 0) {
                        b = (e[System.Array.index(((Bridge.Int.div(pos, 8)) | 0), e)] >> (pos & 7)) >>> 0;
                        b = (b & 1) >>> 0;
                        swap = (swap ^ b) >>> 0;
                        Phantasma.Cryptography.FieldOperations.fe_cswap(x2, x3, swap);
                        Phantasma.Cryptography.FieldOperations.fe_cswap(z2, z3, swap);
                        swap = b;
                        /* qhasm: fe X2 */

                        /* qhasm: fe Z2 */

                        /* qhasm: fe X3 */

                        /* qhasm: fe Z3 */

                        /* qhasm: fe X4 */

                        /* qhasm: fe Z4 */

                        /* qhasm: fe X5 */

                        /* qhasm: fe Z5 */

                        /* qhasm: fe A */

                        /* qhasm: fe B */

                        /* qhasm: fe C */

                        /* qhasm: fe D */

                        /* qhasm: fe E */

                        /* qhasm: fe AA */

                        /* qhasm: fe BB */

                        /* qhasm: fe DA */

                        /* qhasm: fe CB */

                        /* qhasm: fe t0 */

                        /* qhasm: fe t1 */

                        /* qhasm: fe t2 */

                        /* qhasm: fe t3 */

                        /* qhasm: fe t4 */

                        /* qhasm: enter ladder */

                        /* qhasm: D = X3-Z3 */
                        /* asm 1: fe_sub(>D=fe#5,<X3=fe#3,<Z3=fe#4); */
                        /* asm 2: fe_sub(>D=tmp0,<X3=x3,<Z3=z3); */
                        Phantasma.Cryptography.FieldOperations.fe_sub(tmp0, x3, z3);

                        /* qhasm: B = X2-Z2 */
                        /* asm 1: fe_sub(>B=fe#6,<X2=fe#1,<Z2=fe#2); */
                        /* asm 2: fe_sub(>B=tmp1,<X2=x2,<Z2=z2); */
                        Phantasma.Cryptography.FieldOperations.fe_sub(tmp1, x2, z2);

                        /* qhasm: A = X2+Z2 */
                        /* asm 1: fe_add(>A=fe#1,<X2=fe#1,<Z2=fe#2); */
                        /* asm 2: fe_add(>A=x2,<X2=x2,<Z2=z2); */
                        Phantasma.Cryptography.FieldOperations.fe_add(x2, x2, z2);

                        /* qhasm: C = X3+Z3 */
                        /* asm 1: fe_add(>C=fe#2,<X3=fe#3,<Z3=fe#4); */
                        /* asm 2: fe_add(>C=z2,<X3=x3,<Z3=z3); */
                        Phantasma.Cryptography.FieldOperations.fe_add(z2, x3, z3);

                        /* qhasm: DA = D*A */
                        /* asm 1: fe_mul(>DA=fe#4,<D=fe#5,<A=fe#1); */
                        /* asm 2: fe_mul(>DA=z3,<D=tmp0,<A=x2); */
                        Phantasma.Cryptography.FieldOperations.fe_mul(z3, tmp0, x2);

                        /* qhasm: CB = C*B */
                        /* asm 1: fe_mul(>CB=fe#2,<C=fe#2,<B=fe#6); */
                        /* asm 2: fe_mul(>CB=z2,<C=z2,<B=tmp1); */
                        Phantasma.Cryptography.FieldOperations.fe_mul(z2, z2, tmp1);

                        /* qhasm: BB = B^2 */
                        /* asm 1: fe_sq(>BB=fe#5,<B=fe#6); */
                        /* asm 2: fe_sq(>BB=tmp0,<B=tmp1); */
                        Phantasma.Cryptography.FieldOperations.fe_sq(tmp0, tmp1);

                        /* qhasm: AA = A^2 */
                        /* asm 1: fe_sq(>AA=fe#6,<A=fe#1); */
                        /* asm 2: fe_sq(>AA=tmp1,<A=x2); */
                        Phantasma.Cryptography.FieldOperations.fe_sq(tmp1, x2);

                        /* qhasm: t0 = DA+CB */
                        /* asm 1: fe_add(>t0=fe#3,<DA=fe#4,<CB=fe#2); */
                        /* asm 2: fe_add(>t0=x3,<DA=z3,<CB=z2); */
                        Phantasma.Cryptography.FieldOperations.fe_add(x3, z3, z2);

                        /* qhasm: assign x3 to t0 */

                        /* qhasm: t1 = DA-CB */
                        /* asm 1: fe_sub(>t1=fe#2,<DA=fe#4,<CB=fe#2); */
                        /* asm 2: fe_sub(>t1=z2,<DA=z3,<CB=z2); */
                        Phantasma.Cryptography.FieldOperations.fe_sub(z2, z3, z2);

                        /* qhasm: X4 = AA*BB */
                        /* asm 1: fe_mul(>X4=fe#1,<AA=fe#6,<BB=fe#5); */
                        /* asm 2: fe_mul(>X4=x2,<AA=tmp1,<BB=tmp0); */
                        Phantasma.Cryptography.FieldOperations.fe_mul(x2, tmp1, tmp0);

                        /* qhasm: E = AA-BB */
                        /* asm 1: fe_sub(>E=fe#6,<AA=fe#6,<BB=fe#5); */
                        /* asm 2: fe_sub(>E=tmp1,<AA=tmp1,<BB=tmp0); */
                        Phantasma.Cryptography.FieldOperations.fe_sub(tmp1, tmp1, tmp0);

                        /* qhasm: t2 = t1^2 */
                        /* asm 1: fe_sq(>t2=fe#2,<t1=fe#2); */
                        /* asm 2: fe_sq(>t2=z2,<t1=z2); */
                        Phantasma.Cryptography.FieldOperations.fe_sq(z2, z2);

                        /* qhasm: t3 = a24*E */
                        /* asm 1: fe_mul121666(>t3=fe#4,<E=fe#6); */
                        /* asm 2: fe_mul121666(>t3=z3,<E=tmp1); */
                        Phantasma.Cryptography.FieldOperations.fe_mul121666(z3, tmp1);

                        /* qhasm: X5 = t0^2 */
                        /* asm 1: fe_sq(>X5=fe#3,<t0=fe#3); */
                        /* asm 2: fe_sq(>X5=x3,<t0=x3); */
                        Phantasma.Cryptography.FieldOperations.fe_sq(x3, x3);

                        /* qhasm: t4 = BB+t3 */
                        /* asm 1: fe_add(>t4=fe#5,<BB=fe#5,<t3=fe#4); */
                        /* asm 2: fe_add(>t4=tmp0,<BB=tmp0,<t3=z3); */
                        Phantasma.Cryptography.FieldOperations.fe_add(tmp0, tmp0, z3);

                        /* qhasm: Z5 = X1*t2 */
                        /* asm 1: fe_mul(>Z5=fe#4,x1,<t2=fe#2); */
                        /* asm 2: fe_mul(>Z5=z3,x1,<t2=z2); */
                        Phantasma.Cryptography.FieldOperations.fe_mul(z3, x1, z2);

                        /* qhasm: Z4 = E*t4 */
                        /* asm 1: fe_mul(>Z4=fe#2,<E=fe#6,<t4=fe#5); */
                        /* asm 2: fe_mul(>Z4=z2,<E=tmp1,<t4=tmp0); */
                        Phantasma.Cryptography.FieldOperations.fe_mul(z2, tmp1, tmp0);

                        /* qhasm: return */

                    }
                    Phantasma.Cryptography.FieldOperations.fe_cswap(x2, x3, swap);
                    Phantasma.Cryptography.FieldOperations.fe_cswap(z2, z3, swap);

                    Phantasma.Cryptography.FieldOperations.fe_invert(z2, z2);
                    Phantasma.Cryptography.FieldOperations.fe_mul(x2, x2, z2);
                    q.v = x2.v.$clone();
                    Phantasma.Cryptography.CryptoBytes.Wipe$1(e);
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.Salsa20", {
        statics: {
            fields: {
                SalsaConst0: 0,
                SalsaConst1: 0,
                SalsaConst2: 0,
                SalsaConst3: 0
            },
            ctors: {
                init: function () {
                    this.SalsaConst0 = 1634760805;
                    this.SalsaConst1 = 857760878;
                    this.SalsaConst2 = 2036477234;
                    this.SalsaConst3 = 1797285236;
                }
            },
            methods: {
                HSalsa20: function (output, outputOffset, key, keyOffset, nonce, nonceOffset) {
                    var state = { v : new (Phantasma.Cryptography.Array16$1(System.UInt32))() };
                    state.v.x0 = Phantasma.Cryptography.Salsa20.SalsaConst0;
                    state.v.x1 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 0) | 0));
                    state.v.x2 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 4) | 0));
                    state.v.x3 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 8) | 0));
                    state.v.x4 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 12) | 0));
                    state.v.x5 = Phantasma.Cryptography.Salsa20.SalsaConst1;
                    state.v.x6 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(nonce, ((nonceOffset + 0) | 0));
                    state.v.x7 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(nonce, ((nonceOffset + 4) | 0));
                    state.v.x8 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(nonce, ((nonceOffset + 8) | 0));
                    state.v.x9 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(nonce, ((nonceOffset + 12) | 0));
                    state.v.x10 = Phantasma.Cryptography.Salsa20.SalsaConst2;
                    state.v.x11 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 16) | 0));
                    state.v.x12 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 20) | 0));
                    state.v.x13 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 24) | 0));
                    state.v.x14 = Phantasma.Cryptography.ByteIntegerConverter.LoadLittleEndian32(key, ((keyOffset + 28) | 0));
                    state.v.x15 = Phantasma.Cryptography.Salsa20.SalsaConst3;

                    Phantasma.Cryptography.Salsa20.HSalsa(state, state, 20);

                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 0) | 0), state.v.x0);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 4) | 0), state.v.x5);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 8) | 0), state.v.x10);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 12) | 0), state.v.x15);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 16) | 0), state.v.x6);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 20) | 0), state.v.x7);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 24) | 0), state.v.x8);
                    Phantasma.Cryptography.ByteIntegerConverter.StoreLittleEndian32(output, ((outputOffset + 28) | 0), state.v.x9);
                },
                HSalsa: function (output, input, rounds) {
                    if (rounds % 2 !== 0) {
                        throw new System.ArgumentException.$ctor1("Number of salsa rounds must be even");
                    }

                    var doubleRounds = (Bridge.Int.div(rounds, 2)) | 0;

                    var x0 = input.v.x0;
                    var x1 = input.v.x1;
                    var x2 = input.v.x2;
                    var x3 = input.v.x3;
                    var x4 = input.v.x4;
                    var x5 = input.v.x5;
                    var x6 = input.v.x6;
                    var x7 = input.v.x7;
                    var x8 = input.v.x8;
                    var x9 = input.v.x9;
                    var x10 = input.v.x10;
                    var x11 = input.v.x11;
                    var x12 = input.v.x12;
                    var x13 = input.v.x13;
                    var x14 = input.v.x14;
                    var x15 = input.v.x15;

                    for (var i = 0; i < doubleRounds; i = (i + 1) | 0) {
                        var y;

                        y = (x0 + x12) >>> 0;
                        x4 = (x4 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x4 + x0) >>> 0;
                        x8 = (x8 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x8 + x4) >>> 0;
                        x12 = (x12 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x12 + x8) >>> 0;
                        x0 = (x0 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x5 + x1) >>> 0;
                        x9 = (x9 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x9 + x5) >>> 0;
                        x13 = (x13 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x13 + x9) >>> 0;
                        x1 = (x1 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x1 + x13) >>> 0;
                        x5 = (x5 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x10 + x6) >>> 0;
                        x14 = (x14 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x14 + x10) >>> 0;
                        x2 = (x2 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x2 + x14) >>> 0;
                        x6 = (x6 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x6 + x2) >>> 0;
                        x10 = (x10 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x15 + x11) >>> 0;
                        x3 = (x3 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x3 + x15) >>> 0;
                        x7 = (x7 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x7 + x3) >>> 0;
                        x11 = (x11 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x11 + x7) >>> 0;
                        x15 = (x15 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x0 + x3) >>> 0;
                        x1 = (x1 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x1 + x0) >>> 0;
                        x2 = (x2 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x2 + x1) >>> 0;
                        x3 = (x3 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x3 + x2) >>> 0;
                        x0 = (x0 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x5 + x4) >>> 0;
                        x6 = (x6 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x6 + x5) >>> 0;
                        x7 = (x7 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x7 + x6) >>> 0;
                        x4 = (x4 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x4 + x7) >>> 0;
                        x5 = (x5 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x10 + x9) >>> 0;
                        x11 = (x11 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x11 + x10) >>> 0;
                        x8 = (x8 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x8 + x11) >>> 0;
                        x9 = (x9 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x9 + x8) >>> 0;
                        x10 = (x10 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;

                        y = (x15 + x14) >>> 0;
                        x12 = (x12 ^ ((((((y << 7) >>> 0)) | (y >>> (25))) >>> 0))) >>> 0;
                        y = (x12 + x15) >>> 0;
                        x13 = (x13 ^ ((((((y << 9) >>> 0)) | (y >>> (23))) >>> 0))) >>> 0;
                        y = (x13 + x12) >>> 0;
                        x14 = (x14 ^ ((((((y << 13) >>> 0)) | (y >>> (19))) >>> 0))) >>> 0;
                        y = (x14 + x13) >>> 0;
                        x15 = (x15 ^ ((((((y << 18) >>> 0)) | (y >>> (14))) >>> 0))) >>> 0;
                    }

                    output.v.x0 = x0;
                    output.v.x1 = x1;
                    output.v.x2 = x2;
                    output.v.x3 = x3;
                    output.v.x4 = x4;
                    output.v.x5 = x5;
                    output.v.x6 = x6;
                    output.v.x7 = x7;
                    output.v.x8 = x8;
                    output.v.x9 = x9;
                    output.v.x10 = x10;
                    output.v.x11 = x11;
                    output.v.x12 = x12;
                    output.v.x13 = x13;
                    output.v.x14 = x14;
                    output.v.x15 = x15;
                },
                Salsa: function (output, input, rounds) {
                    var temp = { v : new (Phantasma.Cryptography.Array16$1(System.UInt32))() };
                    Phantasma.Cryptography.Salsa20.HSalsa(temp, input, rounds);
                    output.v.x0 = (temp.v.x0 + input.v.x0) >>> 0;
                    output.v.x1 = (temp.v.x1 + input.v.x1) >>> 0;
                    output.v.x2 = (temp.v.x2 + input.v.x2) >>> 0;
                    output.v.x3 = (temp.v.x3 + input.v.x3) >>> 0;
                    output.v.x4 = (temp.v.x4 + input.v.x4) >>> 0;
                    output.v.x5 = (temp.v.x5 + input.v.x5) >>> 0;
                    output.v.x6 = (temp.v.x6 + input.v.x6) >>> 0;
                    output.v.x7 = (temp.v.x7 + input.v.x7) >>> 0;
                    output.v.x8 = (temp.v.x8 + input.v.x8) >>> 0;
                    output.v.x9 = (temp.v.x9 + input.v.x9) >>> 0;
                    output.v.x10 = (temp.v.x10 + input.v.x10) >>> 0;
                    output.v.x11 = (temp.v.x11 + input.v.x11) >>> 0;
                    output.v.x12 = (temp.v.x12 + input.v.x12) >>> 0;
                    output.v.x13 = (temp.v.x13 + input.v.x13) >>> 0;
                    output.v.x14 = (temp.v.x14 + input.v.x14) >>> 0;
                    output.v.x15 = (temp.v.x15 + input.v.x15) >>> 0;
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.ScalarOperations", {
        statics: {
            methods: {
                sc_clamp: function (s, offset) {
                    var $t, $t1, $t2;
                    s[System.Array.index(($t = ((offset + 0) | 0)), s)] = (s[System.Array.index($t, s)] & 248) & 255;
                    s[System.Array.index(($t1 = ((offset + 31) | 0)), s)] = (s[System.Array.index($t1, s)] & 127) & 255;
                    s[System.Array.index(($t2 = ((offset + 31) | 0)), s)] = (s[System.Array.index($t2, s)] | 64) & 255;
                },
                sc_reduce: function (s) {
                    var s0 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(s, 0));
                    var s1 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 2).shr(5)));
                    var s2 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 5).shr(2)));
                    var s3 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 7).shr(7)));
                    var s4 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 10).shr(4)));
                    var s5 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 13).shr(1)));
                    var s6 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 15).shr(6)));
                    var s7 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 18).shr(3)));
                    var s8 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(s, 21));
                    var s9 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 23).shr(5)));
                    var s10 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 26).shr(2)));
                    var s11 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 28).shr(7)));
                    var s12 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 31).shr(4)));
                    var s13 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 34).shr(1)));
                    var s14 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 36).shr(6)));
                    var s15 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 39).shr(3)));
                    var s16 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(s, 42));
                    var s17 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 44).shr(5)));
                    var s18 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 47).shr(2)));
                    var s19 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 49).shr(7)));
                    var s20 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 52).shr(4)));
                    var s21 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(s, 55).shr(1)));
                    var s22 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(s, 57).shr(6)));
                    var s23 = (Phantasma.Cryptography.ScalarOperations.load_4(s, 60).shr(3));
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;
                    var carry10;
                    var carry11;
                    var carry12;
                    var carry13;
                    var carry14;
                    var carry15;
                    var carry16;

                    s11 = s11.add((s23.mul(System.Int64(666643))));
                    s12 = s12.add((s23.mul(System.Int64(470296))));
                    s13 = s13.add((s23.mul(System.Int64(654183))));
                    s14 = s14.sub((s23.mul(System.Int64(997805))));
                    s15 = s15.add((s23.mul(System.Int64(136657))));
                    s16 = s16.sub((s23.mul(System.Int64(683901))));
                    s23 = System.Int64(0);

                    s10 = s10.add((s22.mul(System.Int64(666643))));
                    s11 = s11.add((s22.mul(System.Int64(470296))));
                    s12 = s12.add((s22.mul(System.Int64(654183))));
                    s13 = s13.sub((s22.mul(System.Int64(997805))));
                    s14 = s14.add((s22.mul(System.Int64(136657))));
                    s15 = s15.sub((s22.mul(System.Int64(683901))));
                    s22 = System.Int64(0);

                    s9 = s9.add((s21.mul(System.Int64(666643))));
                    s10 = s10.add((s21.mul(System.Int64(470296))));
                    s11 = s11.add((s21.mul(System.Int64(654183))));
                    s12 = s12.sub((s21.mul(System.Int64(997805))));
                    s13 = s13.add((s21.mul(System.Int64(136657))));
                    s14 = s14.sub((s21.mul(System.Int64(683901))));
                    s21 = System.Int64(0);

                    s8 = s8.add((s20.mul(System.Int64(666643))));
                    s9 = s9.add((s20.mul(System.Int64(470296))));
                    s10 = s10.add((s20.mul(System.Int64(654183))));
                    s11 = s11.sub((s20.mul(System.Int64(997805))));
                    s12 = s12.add((s20.mul(System.Int64(136657))));
                    s13 = s13.sub((s20.mul(System.Int64(683901))));
                    s20 = System.Int64(0);

                    s7 = s7.add((s19.mul(System.Int64(666643))));
                    s8 = s8.add((s19.mul(System.Int64(470296))));
                    s9 = s9.add((s19.mul(System.Int64(654183))));
                    s10 = s10.sub((s19.mul(System.Int64(997805))));
                    s11 = s11.add((s19.mul(System.Int64(136657))));
                    s12 = s12.sub((s19.mul(System.Int64(683901))));
                    s19 = System.Int64(0);

                    s6 = s6.add((s18.mul(System.Int64(666643))));
                    s7 = s7.add((s18.mul(System.Int64(470296))));
                    s8 = s8.add((s18.mul(System.Int64(654183))));
                    s9 = s9.sub((s18.mul(System.Int64(997805))));
                    s10 = s10.add((s18.mul(System.Int64(136657))));
                    s11 = s11.sub((s18.mul(System.Int64(683901))));
                    s18 = System.Int64(0);

                    carry6 = (s6.add(System.Int64((1048576)))).shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry8 = (s8.add(System.Int64((1048576)))).shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry10 = (s10.add(System.Int64((1048576)))).shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));
                    carry12 = (s12.add(System.Int64((1048576)))).shr(21);
                    s13 = s13.add(carry12);
                    s12 = s12.sub((carry12.shl(21)));
                    carry14 = (s14.add(System.Int64((1048576)))).shr(21);
                    s15 = s15.add(carry14);
                    s14 = s14.sub((carry14.shl(21)));
                    carry16 = (s16.add(System.Int64((1048576)))).shr(21);
                    s17 = s17.add(carry16);
                    s16 = s16.sub((carry16.shl(21)));

                    carry7 = (s7.add(System.Int64((1048576)))).shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry9 = (s9.add(System.Int64((1048576)))).shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry11 = (s11.add(System.Int64((1048576)))).shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));
                    carry13 = (s13.add(System.Int64((1048576)))).shr(21);
                    s14 = s14.add(carry13);
                    s13 = s13.sub((carry13.shl(21)));
                    carry15 = (s15.add(System.Int64((1048576)))).shr(21);
                    s16 = s16.add(carry15);
                    s15 = s15.sub((carry15.shl(21)));

                    s5 = s5.add((s17.mul(System.Int64(666643))));
                    s6 = s6.add((s17.mul(System.Int64(470296))));
                    s7 = s7.add((s17.mul(System.Int64(654183))));
                    s8 = s8.sub((s17.mul(System.Int64(997805))));
                    s9 = s9.add((s17.mul(System.Int64(136657))));
                    s10 = s10.sub((s17.mul(System.Int64(683901))));
                    s17 = System.Int64(0);

                    s4 = s4.add((s16.mul(System.Int64(666643))));
                    s5 = s5.add((s16.mul(System.Int64(470296))));
                    s6 = s6.add((s16.mul(System.Int64(654183))));
                    s7 = s7.sub((s16.mul(System.Int64(997805))));
                    s8 = s8.add((s16.mul(System.Int64(136657))));
                    s9 = s9.sub((s16.mul(System.Int64(683901))));
                    s16 = System.Int64(0);

                    s3 = s3.add((s15.mul(System.Int64(666643))));
                    s4 = s4.add((s15.mul(System.Int64(470296))));
                    s5 = s5.add((s15.mul(System.Int64(654183))));
                    s6 = s6.sub((s15.mul(System.Int64(997805))));
                    s7 = s7.add((s15.mul(System.Int64(136657))));
                    s8 = s8.sub((s15.mul(System.Int64(683901))));
                    s15 = System.Int64(0);

                    s2 = s2.add((s14.mul(System.Int64(666643))));
                    s3 = s3.add((s14.mul(System.Int64(470296))));
                    s4 = s4.add((s14.mul(System.Int64(654183))));
                    s5 = s5.sub((s14.mul(System.Int64(997805))));
                    s6 = s6.add((s14.mul(System.Int64(136657))));
                    s7 = s7.sub((s14.mul(System.Int64(683901))));
                    s14 = System.Int64(0);

                    s1 = s1.add((s13.mul(System.Int64(666643))));
                    s2 = s2.add((s13.mul(System.Int64(470296))));
                    s3 = s3.add((s13.mul(System.Int64(654183))));
                    s4 = s4.sub((s13.mul(System.Int64(997805))));
                    s5 = s5.add((s13.mul(System.Int64(136657))));
                    s6 = s6.sub((s13.mul(System.Int64(683901))));
                    s13 = System.Int64(0);

                    s0 = s0.add((s12.mul(System.Int64(666643))));
                    s1 = s1.add((s12.mul(System.Int64(470296))));
                    s2 = s2.add((s12.mul(System.Int64(654183))));
                    s3 = s3.sub((s12.mul(System.Int64(997805))));
                    s4 = s4.add((s12.mul(System.Int64(136657))));
                    s5 = s5.sub((s12.mul(System.Int64(683901))));
                    s12 = System.Int64(0);

                    carry0 = (s0.add(System.Int64((1048576)))).shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry2 = (s2.add(System.Int64((1048576)))).shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry4 = (s4.add(System.Int64((1048576)))).shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry6 = (s6.add(System.Int64((1048576)))).shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry8 = (s8.add(System.Int64((1048576)))).shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry10 = (s10.add(System.Int64((1048576)))).shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));

                    carry1 = (s1.add(System.Int64((1048576)))).shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry3 = (s3.add(System.Int64((1048576)))).shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry5 = (s5.add(System.Int64((1048576)))).shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry7 = (s7.add(System.Int64((1048576)))).shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry9 = (s9.add(System.Int64((1048576)))).shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry11 = (s11.add(System.Int64((1048576)))).shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));

                    s0 = s0.add((s12.mul(System.Int64(666643))));
                    s1 = s1.add((s12.mul(System.Int64(470296))));
                    s2 = s2.add((s12.mul(System.Int64(654183))));
                    s3 = s3.sub((s12.mul(System.Int64(997805))));
                    s4 = s4.add((s12.mul(System.Int64(136657))));
                    s5 = s5.sub((s12.mul(System.Int64(683901))));
                    s12 = System.Int64(0);

                    carry0 = s0.shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry1 = s1.shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry2 = s2.shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry3 = s3.shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry4 = s4.shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry5 = s5.shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry6 = s6.shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry7 = s7.shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry8 = s8.shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry9 = s9.shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry10 = s10.shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));
                    carry11 = s11.shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));

                    s0 = s0.add((s12.mul(System.Int64(666643))));
                    s1 = s1.add((s12.mul(System.Int64(470296))));
                    s2 = s2.add((s12.mul(System.Int64(654183))));
                    s3 = s3.sub((s12.mul(System.Int64(997805))));
                    s4 = s4.add((s12.mul(System.Int64(136657))));
                    s5 = s5.sub((s12.mul(System.Int64(683901))));
                    s12 = System.Int64(0);

                    carry0 = s0.shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry1 = s1.shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry2 = s2.shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry3 = s3.shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry4 = s4.shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry5 = s5.shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry6 = s6.shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry7 = s7.shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry8 = s8.shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry9 = s9.shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry10 = s10.shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));

                    s[0] = System.Int64.clipu8(s0.shr(0));
                    s[1] = System.Int64.clipu8(s0.shr(8));
                    s[2] = System.Int64.clipu8((s0.shr(16)).or((s1.shl(5))));
                    s[3] = System.Int64.clipu8(s1.shr(3));
                    s[4] = System.Int64.clipu8(s1.shr(11));
                    s[5] = System.Int64.clipu8((s1.shr(19)).or((s2.shl(2))));
                    s[6] = System.Int64.clipu8(s2.shr(6));
                    s[7] = System.Int64.clipu8((s2.shr(14)).or((s3.shl(7))));
                    s[8] = System.Int64.clipu8(s3.shr(1));
                    s[9] = System.Int64.clipu8(s3.shr(9));
                    s[10] = System.Int64.clipu8((s3.shr(17)).or((s4.shl(4))));
                    s[11] = System.Int64.clipu8(s4.shr(4));
                    s[12] = System.Int64.clipu8(s4.shr(12));
                    s[13] = System.Int64.clipu8((s4.shr(20)).or((s5.shl(1))));
                    s[14] = System.Int64.clipu8(s5.shr(7));
                    s[15] = System.Int64.clipu8((s5.shr(15)).or((s6.shl(6))));
                    s[16] = System.Int64.clipu8(s6.shr(2));
                    s[17] = System.Int64.clipu8(s6.shr(10));
                    s[18] = System.Int64.clipu8((s6.shr(18)).or((s7.shl(3))));
                    s[19] = System.Int64.clipu8(s7.shr(5));
                    s[20] = System.Int64.clipu8(s7.shr(13));
                    s[21] = System.Int64.clipu8(s8.shr(0));
                    s[22] = System.Int64.clipu8(s8.shr(8));
                    s[23] = System.Int64.clipu8((s8.shr(16)).or((s9.shl(5))));
                    s[24] = System.Int64.clipu8(s9.shr(3));
                    s[25] = System.Int64.clipu8(s9.shr(11));
                    s[26] = System.Int64.clipu8((s9.shr(19)).or((s10.shl(2))));
                    s[27] = System.Int64.clipu8(s10.shr(6));
                    s[28] = System.Int64.clipu8((s10.shr(14)).or((s11.shl(7))));
                    s[29] = System.Int64.clipu8(s11.shr(1));
                    s[30] = System.Int64.clipu8(s11.shr(9));
                    s[31] = System.Int64.clipu8(s11.shr(17));
                },
                load_3: function (input, offset) {
                    var result;
                    result = System.Int64(input[System.Array.index(((offset + 0) | 0), input)]);
                    result = result.or((System.Int64(input[System.Array.index(((offset + 1) | 0), input)]).shl(8)));
                    result = result.or((System.Int64(input[System.Array.index(((offset + 2) | 0), input)]).shl(16)));
                    return result;
                },
                load_4: function (input, offset) {
                    var result;
                    result = System.Int64(input[System.Array.index(((offset + 0) | 0), input)]);
                    result = result.or((System.Int64(input[System.Array.index(((offset + 1) | 0), input)]).shl(8)));
                    result = result.or((System.Int64(input[System.Array.index(((offset + 2) | 0), input)]).shl(16)));
                    result = result.or((System.Int64(input[System.Array.index(((offset + 3) | 0), input)]).shl(24)));
                    return result;
                },
                sc_muladd: function (s, a, b, c) {
                    var a0 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(a, 0));
                    var a1 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(a, 2).shr(5)));
                    var a2 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(a, 5).shr(2)));
                    var a3 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(a, 7).shr(7)));
                    var a4 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(a, 10).shr(4)));
                    var a5 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(a, 13).shr(1)));
                    var a6 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(a, 15).shr(6)));
                    var a7 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(a, 18).shr(3)));
                    var a8 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(a, 21));
                    var a9 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(a, 23).shr(5)));
                    var a10 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(a, 26).shr(2)));
                    var a11 = (Phantasma.Cryptography.ScalarOperations.load_4(a, 28).shr(7));
                    var b0 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(b, 0));
                    var b1 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(b, 2).shr(5)));
                    var b2 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(b, 5).shr(2)));
                    var b3 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(b, 7).shr(7)));
                    var b4 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(b, 10).shr(4)));
                    var b5 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(b, 13).shr(1)));
                    var b6 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(b, 15).shr(6)));
                    var b7 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(b, 18).shr(3)));
                    var b8 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(b, 21));
                    var b9 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(b, 23).shr(5)));
                    var b10 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(b, 26).shr(2)));
                    var b11 = (Phantasma.Cryptography.ScalarOperations.load_4(b, 28).shr(7));
                    var c0 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(c, 0));
                    var c1 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(c, 2).shr(5)));
                    var c2 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(c, 5).shr(2)));
                    var c3 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(c, 7).shr(7)));
                    var c4 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(c, 10).shr(4)));
                    var c5 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(c, 13).shr(1)));
                    var c6 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(c, 15).shr(6)));
                    var c7 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(c, 18).shr(3)));
                    var c8 = System.Int64(2097151).and(Phantasma.Cryptography.ScalarOperations.load_3(c, 21));
                    var c9 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_4(c, 23).shr(5)));
                    var c10 = System.Int64(2097151).and((Phantasma.Cryptography.ScalarOperations.load_3(c, 26).shr(2)));
                    var c11 = (Phantasma.Cryptography.ScalarOperations.load_4(c, 28).shr(7));
                    var s0;
                    var s1;
                    var s2;
                    var s3;
                    var s4;
                    var s5;
                    var s6;
                    var s7;
                    var s8;
                    var s9;
                    var s10;
                    var s11;
                    var s12;
                    var s13;
                    var s14;
                    var s15;
                    var s16;
                    var s17;
                    var s18;
                    var s19;
                    var s20;
                    var s21;
                    var s22;
                    var s23;
                    var carry0;
                    var carry1;
                    var carry2;
                    var carry3;
                    var carry4;
                    var carry5;
                    var carry6;
                    var carry7;
                    var carry8;
                    var carry9;
                    var carry10;
                    var carry11;
                    var carry12;
                    var carry13;
                    var carry14;
                    var carry15;
                    var carry16;
                    var carry17;
                    var carry18;
                    var carry19;
                    var carry20;
                    var carry21;
                    var carry22;

                    s0 = c0.add(a0.mul(b0));
                    s1 = c1.add(a0.mul(b1)).add(a1.mul(b0));
                    s2 = c2.add(a0.mul(b2)).add(a1.mul(b1)).add(a2.mul(b0));
                    s3 = c3.add(a0.mul(b3)).add(a1.mul(b2)).add(a2.mul(b1)).add(a3.mul(b0));
                    s4 = c4.add(a0.mul(b4)).add(a1.mul(b3)).add(a2.mul(b2)).add(a3.mul(b1)).add(a4.mul(b0));
                    s5 = c5.add(a0.mul(b5)).add(a1.mul(b4)).add(a2.mul(b3)).add(a3.mul(b2)).add(a4.mul(b1)).add(a5.mul(b0));
                    s6 = c6.add(a0.mul(b6)).add(a1.mul(b5)).add(a2.mul(b4)).add(a3.mul(b3)).add(a4.mul(b2)).add(a5.mul(b1)).add(a6.mul(b0));
                    s7 = c7.add(a0.mul(b7)).add(a1.mul(b6)).add(a2.mul(b5)).add(a3.mul(b4)).add(a4.mul(b3)).add(a5.mul(b2)).add(a6.mul(b1)).add(a7.mul(b0));
                    s8 = c8.add(a0.mul(b8)).add(a1.mul(b7)).add(a2.mul(b6)).add(a3.mul(b5)).add(a4.mul(b4)).add(a5.mul(b3)).add(a6.mul(b2)).add(a7.mul(b1)).add(a8.mul(b0));
                    s9 = c9.add(a0.mul(b9)).add(a1.mul(b8)).add(a2.mul(b7)).add(a3.mul(b6)).add(a4.mul(b5)).add(a5.mul(b4)).add(a6.mul(b3)).add(a7.mul(b2)).add(a8.mul(b1)).add(a9.mul(b0));
                    s10 = c10.add(a0.mul(b10)).add(a1.mul(b9)).add(a2.mul(b8)).add(a3.mul(b7)).add(a4.mul(b6)).add(a5.mul(b5)).add(a6.mul(b4)).add(a7.mul(b3)).add(a8.mul(b2)).add(a9.mul(b1)).add(a10.mul(b0));
                    s11 = c11.add(a0.mul(b11)).add(a1.mul(b10)).add(a2.mul(b9)).add(a3.mul(b8)).add(a4.mul(b7)).add(a5.mul(b6)).add(a6.mul(b5)).add(a7.mul(b4)).add(a8.mul(b3)).add(a9.mul(b2)).add(a10.mul(b1)).add(a11.mul(b0));
                    s12 = a1.mul(b11).add(a2.mul(b10)).add(a3.mul(b9)).add(a4.mul(b8)).add(a5.mul(b7)).add(a6.mul(b6)).add(a7.mul(b5)).add(a8.mul(b4)).add(a9.mul(b3)).add(a10.mul(b2)).add(a11.mul(b1));
                    s13 = a2.mul(b11).add(a3.mul(b10)).add(a4.mul(b9)).add(a5.mul(b8)).add(a6.mul(b7)).add(a7.mul(b6)).add(a8.mul(b5)).add(a9.mul(b4)).add(a10.mul(b3)).add(a11.mul(b2));
                    s14 = a3.mul(b11).add(a4.mul(b10)).add(a5.mul(b9)).add(a6.mul(b8)).add(a7.mul(b7)).add(a8.mul(b6)).add(a9.mul(b5)).add(a10.mul(b4)).add(a11.mul(b3));
                    s15 = a4.mul(b11).add(a5.mul(b10)).add(a6.mul(b9)).add(a7.mul(b8)).add(a8.mul(b7)).add(a9.mul(b6)).add(a10.mul(b5)).add(a11.mul(b4));
                    s16 = a5.mul(b11).add(a6.mul(b10)).add(a7.mul(b9)).add(a8.mul(b8)).add(a9.mul(b7)).add(a10.mul(b6)).add(a11.mul(b5));
                    s17 = a6.mul(b11).add(a7.mul(b10)).add(a8.mul(b9)).add(a9.mul(b8)).add(a10.mul(b7)).add(a11.mul(b6));
                    s18 = a7.mul(b11).add(a8.mul(b10)).add(a9.mul(b9)).add(a10.mul(b8)).add(a11.mul(b7));
                    s19 = a8.mul(b11).add(a9.mul(b10)).add(a10.mul(b9)).add(a11.mul(b8));
                    s20 = a9.mul(b11).add(a10.mul(b10)).add(a11.mul(b9));
                    s21 = a10.mul(b11).add(a11.mul(b10));
                    s22 = a11.mul(b11);
                    s23 = System.Int64(0);

                    carry0 = (s0.add(System.Int64((1048576)))).shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry2 = (s2.add(System.Int64((1048576)))).shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry4 = (s4.add(System.Int64((1048576)))).shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry6 = (s6.add(System.Int64((1048576)))).shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry8 = (s8.add(System.Int64((1048576)))).shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry10 = (s10.add(System.Int64((1048576)))).shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));
                    carry12 = (s12.add(System.Int64((1048576)))).shr(21);
                    s13 = s13.add(carry12);
                    s12 = s12.sub((carry12.shl(21)));
                    carry14 = (s14.add(System.Int64((1048576)))).shr(21);
                    s15 = s15.add(carry14);
                    s14 = s14.sub((carry14.shl(21)));
                    carry16 = (s16.add(System.Int64((1048576)))).shr(21);
                    s17 = s17.add(carry16);
                    s16 = s16.sub((carry16.shl(21)));
                    carry18 = (s18.add(System.Int64((1048576)))).shr(21);
                    s19 = s19.add(carry18);
                    s18 = s18.sub((carry18.shl(21)));
                    carry20 = (s20.add(System.Int64((1048576)))).shr(21);
                    s21 = s21.add(carry20);
                    s20 = s20.sub((carry20.shl(21)));
                    carry22 = (s22.add(System.Int64((1048576)))).shr(21);
                    s23 = s23.add(carry22);
                    s22 = s22.sub((carry22.shl(21)));

                    carry1 = (s1.add(System.Int64((1048576)))).shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry3 = (s3.add(System.Int64((1048576)))).shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry5 = (s5.add(System.Int64((1048576)))).shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry7 = (s7.add(System.Int64((1048576)))).shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry9 = (s9.add(System.Int64((1048576)))).shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry11 = (s11.add(System.Int64((1048576)))).shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));
                    carry13 = (s13.add(System.Int64((1048576)))).shr(21);
                    s14 = s14.add(carry13);
                    s13 = s13.sub((carry13.shl(21)));
                    carry15 = (s15.add(System.Int64((1048576)))).shr(21);
                    s16 = s16.add(carry15);
                    s15 = s15.sub((carry15.shl(21)));
                    carry17 = (s17.add(System.Int64((1048576)))).shr(21);
                    s18 = s18.add(carry17);
                    s17 = s17.sub((carry17.shl(21)));
                    carry19 = (s19.add(System.Int64((1048576)))).shr(21);
                    s20 = s20.add(carry19);
                    s19 = s19.sub((carry19.shl(21)));
                    carry21 = (s21.add(System.Int64((1048576)))).shr(21);
                    s22 = s22.add(carry21);
                    s21 = s21.sub((carry21.shl(21)));

                    s11 = s11.add((s23.mul(System.Int64(666643))));
                    s12 = s12.add((s23.mul(System.Int64(470296))));
                    s13 = s13.add((s23.mul(System.Int64(654183))));
                    s14 = s14.sub((s23.mul(System.Int64(997805))));
                    s15 = s15.add((s23.mul(System.Int64(136657))));
                    s16 = s16.sub((s23.mul(System.Int64(683901))));
                    s23 = System.Int64(0);

                    s10 = s10.add((s22.mul(System.Int64(666643))));
                    s11 = s11.add((s22.mul(System.Int64(470296))));
                    s12 = s12.add((s22.mul(System.Int64(654183))));
                    s13 = s13.sub((s22.mul(System.Int64(997805))));
                    s14 = s14.add((s22.mul(System.Int64(136657))));
                    s15 = s15.sub((s22.mul(System.Int64(683901))));
                    s22 = System.Int64(0);

                    s9 = s9.add((s21.mul(System.Int64(666643))));
                    s10 = s10.add((s21.mul(System.Int64(470296))));
                    s11 = s11.add((s21.mul(System.Int64(654183))));
                    s12 = s12.sub((s21.mul(System.Int64(997805))));
                    s13 = s13.add((s21.mul(System.Int64(136657))));
                    s14 = s14.sub((s21.mul(System.Int64(683901))));
                    s21 = System.Int64(0);

                    s8 = s8.add((s20.mul(System.Int64(666643))));
                    s9 = s9.add((s20.mul(System.Int64(470296))));
                    s10 = s10.add((s20.mul(System.Int64(654183))));
                    s11 = s11.sub((s20.mul(System.Int64(997805))));
                    s12 = s12.add((s20.mul(System.Int64(136657))));
                    s13 = s13.sub((s20.mul(System.Int64(683901))));
                    s20 = System.Int64(0);

                    s7 = s7.add((s19.mul(System.Int64(666643))));
                    s8 = s8.add((s19.mul(System.Int64(470296))));
                    s9 = s9.add((s19.mul(System.Int64(654183))));
                    s10 = s10.sub((s19.mul(System.Int64(997805))));
                    s11 = s11.add((s19.mul(System.Int64(136657))));
                    s12 = s12.sub((s19.mul(System.Int64(683901))));
                    s19 = System.Int64(0);

                    s6 = s6.add((s18.mul(System.Int64(666643))));
                    s7 = s7.add((s18.mul(System.Int64(470296))));
                    s8 = s8.add((s18.mul(System.Int64(654183))));
                    s9 = s9.sub((s18.mul(System.Int64(997805))));
                    s10 = s10.add((s18.mul(System.Int64(136657))));
                    s11 = s11.sub((s18.mul(System.Int64(683901))));
                    s18 = System.Int64(0);

                    carry6 = (s6.add(System.Int64((1048576)))).shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry8 = (s8.add(System.Int64((1048576)))).shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry10 = (s10.add(System.Int64((1048576)))).shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));
                    carry12 = (s12.add(System.Int64((1048576)))).shr(21);
                    s13 = s13.add(carry12);
                    s12 = s12.sub((carry12.shl(21)));
                    carry14 = (s14.add(System.Int64((1048576)))).shr(21);
                    s15 = s15.add(carry14);
                    s14 = s14.sub((carry14.shl(21)));
                    carry16 = (s16.add(System.Int64((1048576)))).shr(21);
                    s17 = s17.add(carry16);
                    s16 = s16.sub((carry16.shl(21)));

                    carry7 = (s7.add(System.Int64((1048576)))).shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry9 = (s9.add(System.Int64((1048576)))).shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry11 = (s11.add(System.Int64((1048576)))).shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));
                    carry13 = (s13.add(System.Int64((1048576)))).shr(21);
                    s14 = s14.add(carry13);
                    s13 = s13.sub((carry13.shl(21)));
                    carry15 = (s15.add(System.Int64((1048576)))).shr(21);
                    s16 = s16.add(carry15);
                    s15 = s15.sub((carry15.shl(21)));

                    s5 = s5.add((s17.mul(System.Int64(666643))));
                    s6 = s6.add((s17.mul(System.Int64(470296))));
                    s7 = s7.add((s17.mul(System.Int64(654183))));
                    s8 = s8.sub((s17.mul(System.Int64(997805))));
                    s9 = s9.add((s17.mul(System.Int64(136657))));
                    s10 = s10.sub((s17.mul(System.Int64(683901))));
                    s17 = System.Int64(0);

                    s4 = s4.add((s16.mul(System.Int64(666643))));
                    s5 = s5.add((s16.mul(System.Int64(470296))));
                    s6 = s6.add((s16.mul(System.Int64(654183))));
                    s7 = s7.sub((s16.mul(System.Int64(997805))));
                    s8 = s8.add((s16.mul(System.Int64(136657))));
                    s9 = s9.sub((s16.mul(System.Int64(683901))));
                    s16 = System.Int64(0);

                    s3 = s3.add((s15.mul(System.Int64(666643))));
                    s4 = s4.add((s15.mul(System.Int64(470296))));
                    s5 = s5.add((s15.mul(System.Int64(654183))));
                    s6 = s6.sub((s15.mul(System.Int64(997805))));
                    s7 = s7.add((s15.mul(System.Int64(136657))));
                    s8 = s8.sub((s15.mul(System.Int64(683901))));
                    s15 = System.Int64(0);

                    s2 = s2.add((s14.mul(System.Int64(666643))));
                    s3 = s3.add((s14.mul(System.Int64(470296))));
                    s4 = s4.add((s14.mul(System.Int64(654183))));
                    s5 = s5.sub((s14.mul(System.Int64(997805))));
                    s6 = s6.add((s14.mul(System.Int64(136657))));
                    s7 = s7.sub((s14.mul(System.Int64(683901))));
                    s14 = System.Int64(0);

                    s1 = s1.add((s13.mul(System.Int64(666643))));
                    s2 = s2.add((s13.mul(System.Int64(470296))));
                    s3 = s3.add((s13.mul(System.Int64(654183))));
                    s4 = s4.sub((s13.mul(System.Int64(997805))));
                    s5 = s5.add((s13.mul(System.Int64(136657))));
                    s6 = s6.sub((s13.mul(System.Int64(683901))));
                    s13 = System.Int64(0);

                    s0 = s0.add((s12.mul(System.Int64(666643))));
                    s1 = s1.add((s12.mul(System.Int64(470296))));
                    s2 = s2.add((s12.mul(System.Int64(654183))));
                    s3 = s3.sub((s12.mul(System.Int64(997805))));
                    s4 = s4.add((s12.mul(System.Int64(136657))));
                    s5 = s5.sub((s12.mul(System.Int64(683901))));
                    s12 = System.Int64(0);

                    carry0 = (s0.add(System.Int64((1048576)))).shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry2 = (s2.add(System.Int64((1048576)))).shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry4 = (s4.add(System.Int64((1048576)))).shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry6 = (s6.add(System.Int64((1048576)))).shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry8 = (s8.add(System.Int64((1048576)))).shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry10 = (s10.add(System.Int64((1048576)))).shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));

                    carry1 = (s1.add(System.Int64((1048576)))).shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry3 = (s3.add(System.Int64((1048576)))).shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry5 = (s5.add(System.Int64((1048576)))).shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry7 = (s7.add(System.Int64((1048576)))).shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry9 = (s9.add(System.Int64((1048576)))).shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry11 = (s11.add(System.Int64((1048576)))).shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));

                    s0 = s0.add((s12.mul(System.Int64(666643))));
                    s1 = s1.add((s12.mul(System.Int64(470296))));
                    s2 = s2.add((s12.mul(System.Int64(654183))));
                    s3 = s3.sub((s12.mul(System.Int64(997805))));
                    s4 = s4.add((s12.mul(System.Int64(136657))));
                    s5 = s5.sub((s12.mul(System.Int64(683901))));
                    s12 = System.Int64(0);

                    carry0 = s0.shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry1 = s1.shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry2 = s2.shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry3 = s3.shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry4 = s4.shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry5 = s5.shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry6 = s6.shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry7 = s7.shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry8 = s8.shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry9 = s9.shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry10 = s10.shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));
                    carry11 = s11.shr(21);
                    s12 = s12.add(carry11);
                    s11 = s11.sub((carry11.shl(21)));

                    s0 = s0.add((s12.mul(System.Int64(666643))));
                    s1 = s1.add((s12.mul(System.Int64(470296))));
                    s2 = s2.add((s12.mul(System.Int64(654183))));
                    s3 = s3.sub((s12.mul(System.Int64(997805))));
                    s4 = s4.add((s12.mul(System.Int64(136657))));
                    s5 = s5.sub((s12.mul(System.Int64(683901))));
                    s12 = System.Int64(0);

                    carry0 = s0.shr(21);
                    s1 = s1.add(carry0);
                    s0 = s0.sub((carry0.shl(21)));
                    carry1 = s1.shr(21);
                    s2 = s2.add(carry1);
                    s1 = s1.sub((carry1.shl(21)));
                    carry2 = s2.shr(21);
                    s3 = s3.add(carry2);
                    s2 = s2.sub((carry2.shl(21)));
                    carry3 = s3.shr(21);
                    s4 = s4.add(carry3);
                    s3 = s3.sub((carry3.shl(21)));
                    carry4 = s4.shr(21);
                    s5 = s5.add(carry4);
                    s4 = s4.sub((carry4.shl(21)));
                    carry5 = s5.shr(21);
                    s6 = s6.add(carry5);
                    s5 = s5.sub((carry5.shl(21)));
                    carry6 = s6.shr(21);
                    s7 = s7.add(carry6);
                    s6 = s6.sub((carry6.shl(21)));
                    carry7 = s7.shr(21);
                    s8 = s8.add(carry7);
                    s7 = s7.sub((carry7.shl(21)));
                    carry8 = s8.shr(21);
                    s9 = s9.add(carry8);
                    s8 = s8.sub((carry8.shl(21)));
                    carry9 = s9.shr(21);
                    s10 = s10.add(carry9);
                    s9 = s9.sub((carry9.shl(21)));
                    carry10 = s10.shr(21);
                    s11 = s11.add(carry10);
                    s10 = s10.sub((carry10.shl(21)));

                    s[0] = System.Int64.clipu8(s0.shr(0));
                    s[1] = System.Int64.clipu8(s0.shr(8));
                    s[2] = System.Int64.clipu8((s0.shr(16)).or((s1.shl(5))));
                    s[3] = System.Int64.clipu8(s1.shr(3));
                    s[4] = System.Int64.clipu8(s1.shr(11));
                    s[5] = System.Int64.clipu8((s1.shr(19)).or((s2.shl(2))));
                    s[6] = System.Int64.clipu8(s2.shr(6));
                    s[7] = System.Int64.clipu8((s2.shr(14)).or((s3.shl(7))));
                    s[8] = System.Int64.clipu8(s3.shr(1));
                    s[9] = System.Int64.clipu8(s3.shr(9));
                    s[10] = System.Int64.clipu8((s3.shr(17)).or((s4.shl(4))));
                    s[11] = System.Int64.clipu8(s4.shr(4));
                    s[12] = System.Int64.clipu8(s4.shr(12));
                    s[13] = System.Int64.clipu8((s4.shr(20)).or((s5.shl(1))));
                    s[14] = System.Int64.clipu8(s5.shr(7));
                    s[15] = System.Int64.clipu8((s5.shr(15)).or((s6.shl(6))));
                    s[16] = System.Int64.clipu8(s6.shr(2));
                    s[17] = System.Int64.clipu8(s6.shr(10));
                    s[18] = System.Int64.clipu8((s6.shr(18)).or((s7.shl(3))));
                    s[19] = System.Int64.clipu8(s7.shr(5));
                    s[20] = System.Int64.clipu8(s7.shr(13));
                    s[21] = System.Int64.clipu8(s8.shr(0));
                    s[22] = System.Int64.clipu8(s8.shr(8));
                    s[23] = System.Int64.clipu8((s8.shr(16)).or((s9.shl(5))));
                    s[24] = System.Int64.clipu8(s9.shr(3));
                    s[25] = System.Int64.clipu8(s9.shr(11));
                    s[26] = System.Int64.clipu8((s9.shr(19)).or((s10.shl(2))));
                    s[27] = System.Int64.clipu8(s10.shr(6));
                    s[28] = System.Int64.clipu8((s10.shr(14)).or((s11.shl(7))));
                    s[29] = System.Int64.clipu8(s11.shr(1));
                    s[30] = System.Int64.clipu8(s11.shr(9));
                    s[31] = System.Int64.clipu8(s11.shr(17));
                }
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.SHA256", {
        statics: {
            fields: {
                K: null
            },
            ctors: {
                init: function () {
                    this.K = System.Array.init([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], System.UInt32);
                }
            },
            methods: {
                ROTL: function (x, n) {
                    System.Diagnostics.Debug.Assert(n < 32);
                    return (((((x << n) >>> 0)) | (x >>> (((32 - n) | 0)))) >>> 0);
                },
                ROTR: function (x, n) {
                    System.Diagnostics.Debug.Assert(n < 32);
                    return (((x >>> n) | (((x << (((32 - n) | 0))) >>> 0))) >>> 0);
                },
                Ch: function (x, y, z) {
                    return (((((x & y) >>> 0)) ^ ((((~x) & z) >>> 0))) >>> 0);
                },
                Maj: function (x, y, z) {
                    return (((((((x & y) >>> 0)) ^ (((x & z) >>> 0))) >>> 0) ^ (((y & z) >>> 0))) >>> 0);
                },
                Sigma0: function (x) {
                    return ((((Phantasma.Cryptography.SHA256.ROTR(x, 2) ^ Phantasma.Cryptography.SHA256.ROTR(x, 13)) >>> 0) ^ Phantasma.Cryptography.SHA256.ROTR(x, 22)) >>> 0);
                },
                Sigma1: function (x) {
                    return ((((Phantasma.Cryptography.SHA256.ROTR(x, 6) ^ Phantasma.Cryptography.SHA256.ROTR(x, 11)) >>> 0) ^ Phantasma.Cryptography.SHA256.ROTR(x, 25)) >>> 0);
                },
                sigma0: function (x) {
                    return ((((Phantasma.Cryptography.SHA256.ROTR(x, 7) ^ Phantasma.Cryptography.SHA256.ROTR(x, 18)) >>> 0) ^ (x >>> 3)) >>> 0);
                },
                sigma1: function (x) {
                    return ((((Phantasma.Cryptography.SHA256.ROTR(x, 17) ^ Phantasma.Cryptography.SHA256.ROTR(x, 19)) >>> 0) ^ (x >>> 10)) >>> 0);
                },
                toUintArray: function (src, dest) {
                    for (var i = 0, j = 0; System.Int64(i).lt(System.Int64(dest.length)); i = (i + 1) >>> 0, j = (j + 4) >>> 0) {
                        dest[System.Array.index(i, dest)] = ((((((((src[System.Array.index(((j + 0) >>> 0), src)] << 24) >>> 0)) | (((src[System.Array.index(((j + 1) >>> 0), src)] << 16) >>> 0))) >>> 0) | (((src[System.Array.index(((j + 2) >>> 0), src)] << 8) >>> 0))) >>> 0) | src[System.Array.index(((j + 3) >>> 0), src)]) >>> 0;
                    }
                },
                toByteArray: function (src) {
                    var dest = System.Array.init(Bridge.Int.mul(src.length, 4), 0, System.Byte);
                    var pos = 0;

                    for (var i = 0; i < src.length; i = (i + 1) | 0) {
                        dest[System.Array.index(Bridge.identity(pos, (pos = (pos + 1) | 0)), dest)] = (src[System.Array.index(i, src)] >>> 24) & 255;
                        dest[System.Array.index(Bridge.identity(pos, (pos = (pos + 1) | 0)), dest)] = (src[System.Array.index(i, src)] >>> 16) & 255;
                        dest[System.Array.index(Bridge.identity(pos, (pos = (pos + 1) | 0)), dest)] = (src[System.Array.index(i, src)] >>> 8) & 255;
                        dest[System.Array.index(Bridge.identity(pos, (pos = (pos + 1) | 0)), dest)] = (src[System.Array.index(i, src)]) & 255;
                    }

                    return dest;
                }
            }
        },
        fields: {
            H: null,
            pending_block: null,
            pending_block_off: 0,
            uint_buffer: null,
            bits_processed: System.UInt64(0),
            closed: false
        },
        ctors: {
            init: function () {
                this.H = System.Array.init([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], System.UInt32);
                this.pending_block = System.Array.init(64, 0, System.Byte);
                this.uint_buffer = System.Array.init(16, 0, System.UInt32);
            }
        },
        methods: {
            Reset: function () {
                this.pending_block_off = 0;
                this.bits_processed = System.UInt64(0);
                this.closed = false;
            },
            processBlock: function (M) {
                System.Diagnostics.Debug.Assert(M.length === 16);

                var W = System.Array.init(64, 0, System.UInt32);
                for (var t = 0; t < 16; t = (t + 1) | 0) {
                    W[System.Array.index(t, W)] = M[System.Array.index(t, M)];
                }

                for (var t1 = 16; t1 < 64; t1 = (t1 + 1) | 0) {
                    W[System.Array.index(t1, W)] = (((((Phantasma.Cryptography.SHA256.sigma1(W[System.Array.index(((t1 - 2) | 0), W)]) + W[System.Array.index(((t1 - 7) | 0), W)]) >>> 0) + Phantasma.Cryptography.SHA256.sigma0(W[System.Array.index(((t1 - 15) | 0), W)])) >>> 0) + W[System.Array.index(((t1 - 16) | 0), W)]) >>> 0;
                }

                var a = this.H[System.Array.index(0, this.H)], b = this.H[System.Array.index(1, this.H)], c = this.H[System.Array.index(2, this.H)], d = this.H[System.Array.index(3, this.H)], e = this.H[System.Array.index(4, this.H)], f = this.H[System.Array.index(5, this.H)], g = this.H[System.Array.index(6, this.H)], h = this.H[System.Array.index(7, this.H)];

                for (var t2 = 0; t2 < 64; t2 = (t2 + 1) | 0) {
                    var T1 = (((((((h + Phantasma.Cryptography.SHA256.Sigma1(e)) >>> 0) + Phantasma.Cryptography.SHA256.Ch(e, f, g)) >>> 0) + Phantasma.Cryptography.SHA256.K[System.Array.index(t2, Phantasma.Cryptography.SHA256.K)]) >>> 0) + W[System.Array.index(t2, W)]) >>> 0;
                    var T2 = (Phantasma.Cryptography.SHA256.Sigma0(a) + Phantasma.Cryptography.SHA256.Maj(a, b, c)) >>> 0;
                    h = g;
                    g = f;
                    f = e;
                    e = (d + T1) >>> 0;
                    d = c;
                    c = b;
                    b = a;
                    a = (T1 + T2) >>> 0;
                }

                this.H[System.Array.index(0, this.H)] = (a + this.H[System.Array.index(0, this.H)]) >>> 0;
                this.H[System.Array.index(1, this.H)] = (b + this.H[System.Array.index(1, this.H)]) >>> 0;
                this.H[System.Array.index(2, this.H)] = (c + this.H[System.Array.index(2, this.H)]) >>> 0;
                this.H[System.Array.index(3, this.H)] = (d + this.H[System.Array.index(3, this.H)]) >>> 0;
                this.H[System.Array.index(4, this.H)] = (e + this.H[System.Array.index(4, this.H)]) >>> 0;
                this.H[System.Array.index(5, this.H)] = (f + this.H[System.Array.index(5, this.H)]) >>> 0;
                this.H[System.Array.index(6, this.H)] = (g + this.H[System.Array.index(6, this.H)]) >>> 0;
                this.H[System.Array.index(7, this.H)] = (h + this.H[System.Array.index(7, this.H)]) >>> 0;
            },
            AddData: function (data, offset, len) {
                if (this.closed) {
                    throw new System.InvalidOperationException.$ctor1("Adding data to a closed hasher.");
                }

                if (len === 0) {
                    return;
                }

                this.bits_processed = this.bits_processed.add(System.UInt64((Bridge.Int.umul(len, 8))));

                while (len > 0) {
                    var amount_to_copy;

                    if (len < 64) {
                        if (((this.pending_block_off + len) >>> 0) > 64) {
                            amount_to_copy = (64 - this.pending_block_off) >>> 0;
                        } else {
                            amount_to_copy = len;
                        }
                    } else {
                        amount_to_copy = (64 - this.pending_block_off) >>> 0;
                    }

                    System.Array.copy(data, (offset | 0), this.pending_block, (this.pending_block_off | 0), (amount_to_copy | 0));
                    len = (len - amount_to_copy) >>> 0;
                    offset = (offset + amount_to_copy) >>> 0;
                    this.pending_block_off = (this.pending_block_off + amount_to_copy) >>> 0;

                    if (this.pending_block_off === 64) {
                        Phantasma.Cryptography.SHA256.toUintArray(this.pending_block, this.uint_buffer);
                        this.processBlock(this.uint_buffer);
                        this.pending_block_off = 0;
                    }
                }
            },
            ComputeHash: function (data) {
                return this.ComputeHash$1(data, 0, ((data.length) >>> 0));
            },
            ComputeHash$1: function (data, offset, length) {
                this.Reset();
                this.AddData(data, offset, length);
                return Phantasma.Cryptography.SHA256.toByteArray(this.GetHashUInt32());
            },
            GetHashUInt32: function () {
                if (!this.closed) {
                    var size_temp = this.bits_processed;

                    this.AddData(System.Array.init([128], System.Byte), 0, 1);

                    var available_space = (64 - this.pending_block_off) >>> 0;

                    if (available_space < 8) {
                        available_space = (available_space + 64) >>> 0;
                    }

                    var padding = System.Array.init(available_space, 0, System.Byte);
                    for (var i = 1; i <= 8; i = (i + 1) >>> 0) {
                        padding[System.Array.index(System.Int64.toNumber(System.Int64(padding.length).sub(System.Int64(i))), padding)] = System.Int64.clipu8(size_temp);
                        size_temp = size_temp.shru(8);
                    }

                    this.AddData(padding, 0, ((padding.length) >>> 0));

                    System.Diagnostics.Debug.Assert(this.pending_block_off === 0);

                    this.closed = true;
                }

                return this.H;
            }
        }
    });

    Bridge.define("Phantasma.Cryptography.SHA512", {
        statics: {
            fields: {
                BlockSize: 0,
                _padding: null,
                K: null
            },
            ctors: {
                init: function () {
                    this.BlockSize = 128;
                    this._padding = System.Array.init([128], System.Byte);
                    this.K = System.Array.init([System.UInt64(System.Int64([-685199838,1116352408])), System.UInt64(System.Int64([602891725,1899447441])), System.UInt64([-330482897,-1245643825]), System.UInt64([-2121671748,-373957723]), System.UInt64(System.Int64([-213338824,961987163])), System.UInt64(System.Int64([-1241133031,1508970993])), System.UInt64([-1357295717,-1841331548]), System.UInt64([-630357736,-1424204075]), System.UInt64([-1560083902,-670586216]), System.UInt64(System.Int64([1164996542,310598401])), System.UInt64(System.Int64([1323610764,607225278])), System.UInt64(System.Int64([-704662302,1426881987])), System.UInt64(System.Int64([-226784913,1925078388])), System.UInt64([991336113,-2132889090]), System.UInt64([633803317,-1680079193]), System.UInt64([-815192428,-1046744716]), System.UInt64([-1628353838,-459576895]), System.UInt64([944711139,-272742522]), System.UInt64(System.Int64([-1953704523,264347078])), System.UInt64(System.Int64([2007800933,604807628])), System.UInt64(System.Int64([1495990901,770255983])), System.UInt64(System.Int64([1856431235,1249150122])), System.UInt64(System.Int64([-1119749164,1555081692])), System.UInt64(System.Int64([-2096016459,1996064986])), System.UInt64([-295247957,-1740746414]), System.UInt64([766784016,-1473132947]), System.UInt64([-1728372417,-1341970488]), System.UInt64([-1091629340,-1084653625]), System.UInt64([1034457026,-958395405]), System.UInt64([-1828018395,-710438585]), System.UInt64(System.Int64([-536640913,113926993])), System.UInt64(System.Int64([168717936,338241895])), System.UInt64(System.Int64([1188179964,666307205])), System.UInt64(System.Int64([1546045734,773529912])), System.UInt64(System.Int64([1522805485,1294757372])), System.UInt64(System.Int64([-1651133473,1396182291])), System.UInt64(System.Int64([-1951439906,1695183700])), System.UInt64(System.Int64([1014477480,1986661051])), System.UInt64([1206759142,-2117940946]), System.UInt64([344077627,-1838011259]), System.UInt64([1290863460,-1564481375]), System.UInt64([-1136513023,-1474664885]), System.UInt64([-789014639,-1035236496]), System.UInt64([106217008,-949202525]), System.UInt64([-688958952,-778901479]), System.UInt64([1432725776,-694614492]), System.UInt64([1467031594,-200395387]), System.UInt64(System.Int64([851169720,275423344])), System.UInt64(System.Int64([-1194143544,430227734])), System.UInt64(System.Int64([1363258195,506948616])), System.UInt64(System.Int64([-544281703,659060556])), System.UInt64(System.Int64([-509917016,883997877])), System.UInt64(System.Int64([-976659869,958139571])), System.UInt64(System.Int64([-482243893,1322822218])), System.UInt64(System.Int64([2003034995,1537002063])), System.UInt64(System.Int64([-692930397,1747873779])), System.UInt64(System.Int64([1575990012,1955562222])), System.UInt64(System.Int64([1125592928,2024104815])), System.UInt64([-1578062990,-2067236844]), System.UInt64([442776044,-1933114872]), System.UInt64([593698344,-1866530822]), System.UInt64([-561857047,-1538233109]), System.UInt64([-1295615723,-1090935817]), System.UInt64([-479046869,-965641998]), System.UInt64([-366583396,-903397682]), System.UInt64([566280711,-779700025]), System.UInt64([-840897762,-354779690]), System.UInt64([-294727304,-176337025]), System.UInt64(System.Int64([1914138554,116418474])), System.UInt64(System.Int64([-1563912026,174292421])), System.UInt64(System.Int64([-1090974290,289380356])), System.UInt64(System.Int64([320620315,460393269])), System.UInt64(System.Int64([587496836,685471733])), System.UInt64(System.Int64([1086792851,852142971])), System.UInt64(System.Int64([365543100,1017036298])), System.UInt64(System.Int64([-1676669620,1126000580])), System.UInt64(System.Int64([-885112138,1288033470])), System.UInt64(System.Int64([-60457430,1501505948])), System.UInt64(System.Int64([987167468,1607167915])), System.UInt64(System.Int64([1246189591,1816402316]))], System.UInt64);
                }
            },
            methods: {
                Hash: function (data) {
                    return Phantasma.Cryptography.SHA512.Hash$1(data, 0, data.length);
                },
                Hash$1: function (data, offset, count) {
                    var hasher = new Phantasma.Cryptography.SHA512();
                    hasher.Update$1(data, offset, count);
                    return hasher.Finish();
                },
                Sha512Init: function (state) {
                    state.v.x0 = System.UInt64(System.Int64([-205731576,1779033703]));
                    state.v.x1 = System.UInt64([-2067093701,-1150833019]);
                    state.v.x2 = System.UInt64(System.Int64([-23791573,1013904242]));
                    state.v.x3 = System.UInt64([1595750129,-1521486534]);
                    state.v.x4 = System.UInt64(System.Int64([-1377402159,1359893119]));
                    state.v.x5 = System.UInt64([725511199,-1694144372]);
                    state.v.x6 = System.UInt64(System.Int64([-79577749,528734635]));
                    state.v.x7 = System.UInt64(System.Int64([327033209,1541459225]));
                },
                Core: function (outputState, inputState, input) {
                    var a = inputState.v.x0;
                    var b = inputState.v.x1;
                    var c = inputState.v.x2;
                    var d = inputState.v.x3;
                    var e = inputState.v.x4;
                    var f = inputState.v.x5;
                    var g = inputState.v.x6;
                    var h = inputState.v.x7;

                    var w0 = input.v.x0;
                    var w1 = input.v.x1;
                    var w2 = input.v.x2;
                    var w3 = input.v.x3;
                    var w4 = input.v.x4;
                    var w5 = input.v.x5;
                    var w6 = input.v.x6;
                    var w7 = input.v.x7;
                    var w8 = input.v.x8;
                    var w9 = input.v.x9;
                    var w10 = input.v.x10;
                    var w11 = input.v.x11;
                    var w12 = input.v.x12;
                    var w13 = input.v.x13;
                    var w14 = input.v.x14;
                    var w15 = input.v.x15;

                    var t = 0;
                    while (true) {
                        var t1, t2;

                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w0);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w1);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w2);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w3);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w4);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w5);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w6);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w7);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w8);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w9);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w10);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w11);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w12);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w13);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w14);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        {
                            t1 = h.add(((e.shru(14)).xor((e.shl((50)))).xor((e.shru(18))).xor((e.shl((46)))).xor((e.shru(41))).xor((e.shl((23)))))).add(((e.and(f)).xor((e.not().and(g))))).add(Phantasma.Cryptography.SHA512.K[t]).add(w15);
                            t2 = ((a.shru(28)).xor((a.shl((36)))).xor((a.shru(34))).xor((a.shl((30)))).xor((a.shru(39))).xor((a.shl((25))))).add(((a.and(b)).xor((a.and(c))).xor((b.and(c)))));
                            h = g;
                            g = f;
                            f = e;
                            e = d.add(t1);
                            d = c;
                            c = b;
                            b = a;
                            a = t1.add(t2);
                            t = (t + 1) | 0;
                        }
                        if (t === 80) {
                            break;
                        }

                        w0 = w0.add((((w14.shru(19)).xor((w14.shl((45)))).xor((w14.shru(61))).xor((w14.shl((3)))).xor((w14.shru(6)))).add(w9).add(((w1.shru(1)).xor((w1.shl((63)))).xor((w1.shru(8))).xor((w1.shl((56)))).xor((w1.shru(7)))))));
                        w1 = w1.add((((w15.shru(19)).xor((w15.shl((45)))).xor((w15.shru(61))).xor((w15.shl((3)))).xor((w15.shru(6)))).add(w10).add(((w2.shru(1)).xor((w2.shl((63)))).xor((w2.shru(8))).xor((w2.shl((56)))).xor((w2.shru(7)))))));
                        w2 = w2.add((((w0.shru(19)).xor((w0.shl((45)))).xor((w0.shru(61))).xor((w0.shl((3)))).xor((w0.shru(6)))).add(w11).add(((w3.shru(1)).xor((w3.shl((63)))).xor((w3.shru(8))).xor((w3.shl((56)))).xor((w3.shru(7)))))));
                        w3 = w3.add((((w1.shru(19)).xor((w1.shl((45)))).xor((w1.shru(61))).xor((w1.shl((3)))).xor((w1.shru(6)))).add(w12).add(((w4.shru(1)).xor((w4.shl((63)))).xor((w4.shru(8))).xor((w4.shl((56)))).xor((w4.shru(7)))))));
                        w4 = w4.add((((w2.shru(19)).xor((w2.shl((45)))).xor((w2.shru(61))).xor((w2.shl((3)))).xor((w2.shru(6)))).add(w13).add(((w5.shru(1)).xor((w5.shl((63)))).xor((w5.shru(8))).xor((w5.shl((56)))).xor((w5.shru(7)))))));
                        w5 = w5.add((((w3.shru(19)).xor((w3.shl((45)))).xor((w3.shru(61))).xor((w3.shl((3)))).xor((w3.shru(6)))).add(w14).add(((w6.shru(1)).xor((w6.shl((63)))).xor((w6.shru(8))).xor((w6.shl((56)))).xor((w6.shru(7)))))));
                        w6 = w6.add((((w4.shru(19)).xor((w4.shl((45)))).xor((w4.shru(61))).xor((w4.shl((3)))).xor((w4.shru(6)))).add(w15).add(((w7.shru(1)).xor((w7.shl((63)))).xor((w7.shru(8))).xor((w7.shl((56)))).xor((w7.shru(7)))))));
                        w7 = w7.add((((w5.shru(19)).xor((w5.shl((45)))).xor((w5.shru(61))).xor((w5.shl((3)))).xor((w5.shru(6)))).add(w0).add(((w8.shru(1)).xor((w8.shl((63)))).xor((w8.shru(8))).xor((w8.shl((56)))).xor((w8.shru(7)))))));
                        w8 = w8.add((((w6.shru(19)).xor((w6.shl((45)))).xor((w6.shru(61))).xor((w6.shl((3)))).xor((w6.shru(6)))).add(w1).add(((w9.shru(1)).xor((w9.shl((63)))).xor((w9.shru(8))).xor((w9.shl((56)))).xor((w9.shru(7)))))));
                        w9 = w9.add((((w7.shru(19)).xor((w7.shl((45)))).xor((w7.shru(61))).xor((w7.shl((3)))).xor((w7.shru(6)))).add(w2).add(((w10.shru(1)).xor((w10.shl((63)))).xor((w10.shru(8))).xor((w10.shl((56)))).xor((w10.shru(7)))))));
                        w10 = w10.add((((w8.shru(19)).xor((w8.shl((45)))).xor((w8.shru(61))).xor((w8.shl((3)))).xor((w8.shru(6)))).add(w3).add(((w11.shru(1)).xor((w11.shl((63)))).xor((w11.shru(8))).xor((w11.shl((56)))).xor((w11.shru(7)))))));
                        w11 = w11.add((((w9.shru(19)).xor((w9.shl((45)))).xor((w9.shru(61))).xor((w9.shl((3)))).xor((w9.shru(6)))).add(w4).add(((w12.shru(1)).xor((w12.shl((63)))).xor((w12.shru(8))).xor((w12.shl((56)))).xor((w12.shru(7)))))));
                        w12 = w12.add((((w10.shru(19)).xor((w10.shl((45)))).xor((w10.shru(61))).xor((w10.shl((3)))).xor((w10.shru(6)))).add(w5).add(((w13.shru(1)).xor((w13.shl((63)))).xor((w13.shru(8))).xor((w13.shl((56)))).xor((w13.shru(7)))))));
                        w13 = w13.add((((w11.shru(19)).xor((w11.shl((45)))).xor((w11.shru(61))).xor((w11.shl((3)))).xor((w11.shru(6)))).add(w6).add(((w14.shru(1)).xor((w14.shl((63)))).xor((w14.shru(8))).xor((w14.shl((56)))).xor((w14.shru(7)))))));
                        w14 = w14.add((((w12.shru(19)).xor((w12.shl((45)))).xor((w12.shru(61))).xor((w12.shl((3)))).xor((w12.shru(6)))).add(w7).add(((w15.shru(1)).xor((w15.shl((63)))).xor((w15.shru(8))).xor((w15.shl((56)))).xor((w15.shru(7)))))));
                        w15 = w15.add((((w13.shru(19)).xor((w13.shl((45)))).xor((w13.shru(61))).xor((w13.shl((3)))).xor((w13.shru(6)))).add(w8).add(((w0.shru(1)).xor((w0.shl((63)))).xor((w0.shru(8))).xor((w0.shl((56)))).xor((w0.shru(7)))))));
                    }

                    outputState.v.x0 = inputState.v.x0.add(a);
                    outputState.v.x1 = inputState.v.x1.add(b);
                    outputState.v.x2 = inputState.v.x2.add(c);
                    outputState.v.x3 = inputState.v.x3.add(d);
                    outputState.v.x4 = inputState.v.x4.add(e);
                    outputState.v.x5 = inputState.v.x5.add(f);
                    outputState.v.x6 = inputState.v.x6.add(g);
                    outputState.v.x7 = inputState.v.x7.add(h);
                }
            }
        },
        fields: {
            _state: null,
            _buffer: null,
            _totalBytes: System.UInt64(0)
        },
        ctors: {
            init: function () {
                this._state = new (Phantasma.Cryptography.Array8$1(System.UInt64))();
            },
            ctor: function () {
                this.$initialize();
                this._buffer = System.Array.init(Phantasma.Cryptography.SHA512.BlockSize, 0, System.Byte);
                this.Init();
            }
        },
        methods: {
            Init: function () {
                Phantasma.Cryptography.SHA512.Sha512Init(Bridge.ref(this, "_state"));
                this._totalBytes = System.UInt64(0);
            },
            Update: function (data) {
                if (data.getArray() == null) {
                    throw new System.ArgumentNullException.$ctor1("data.Array");
                }
                this.Update$1(data.getArray(), data.getOffset(), data.getCount());
            },
            Update$1: function (data, offset, count) {
                if (data == null) {
                    throw new System.ArgumentNullException.$ctor1("data");
                }
                if (offset < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("offset");
                }
                if (count < 0) {
                    throw new System.ArgumentOutOfRangeException.$ctor1("count");
                }
                if (((data.length - offset) | 0) < count) {
                    throw new System.ArgumentException.$ctor1("Requires offset + count <= data.Length");
                }

                var block = { v : new (Phantasma.Cryptography.Array16$1(System.UInt64))() };
                var bytesInBuffer = System.Int64.clip32(this._totalBytes) & (127);
                this._totalBytes = this._totalBytes.add((count >>> 0));

                if (this._totalBytes.gte(System.UInt64([-1,536870911]))) {
                    throw new System.InvalidOperationException.$ctor1("Too much data");
                }
                if (bytesInBuffer !== 0) {
                    var toCopy = Math.min(((Phantasma.Cryptography.SHA512.BlockSize - bytesInBuffer) | 0), count);
                    System.Array.copy(data, offset, this._buffer, bytesInBuffer, toCopy);
                    offset = (offset + toCopy) | 0;
                    count = (count - toCopy) | 0;
                    bytesInBuffer = (bytesInBuffer + toCopy) | 0;
                    if (bytesInBuffer === Phantasma.Cryptography.SHA512.BlockSize) {
                        Phantasma.Cryptography.ByteIntegerConverter.Array16LoadBigEndian64(block, this._buffer, 0);
                        Phantasma.Cryptography.SHA512.Core(Bridge.ref(this, "_state"), Bridge.ref(this, "_state"), block);
                        Phantasma.Cryptography.CryptoBytes.InternalWipe(this._buffer, 0, this._buffer.length);
                        bytesInBuffer = 0;
                    }
                }
                while (count >= Phantasma.Cryptography.SHA512.BlockSize) {
                    Phantasma.Cryptography.ByteIntegerConverter.Array16LoadBigEndian64(block, data, offset);
                    Phantasma.Cryptography.SHA512.Core(Bridge.ref(this, "_state"), Bridge.ref(this, "_state"), block);
                    offset = (offset + Phantasma.Cryptography.SHA512.BlockSize) | 0;
                    count = (count - Phantasma.Cryptography.SHA512.BlockSize) | 0;
                }
                if (count > 0) {
                    System.Array.copy(data, offset, this._buffer, bytesInBuffer, count);
                }
            },
            Finish$1: function (output) {
                if (output.getArray() == null) {
                    throw new System.ArgumentNullException.$ctor1("output.Array");
                }
                if (output.getCount() !== 64) {
                    throw new System.ArgumentException.$ctor1("output.Count must be 64");
                }

                this.Update$1(Phantasma.Cryptography.SHA512._padding, 0, Phantasma.Cryptography.SHA512._padding.length);
                var block = { v : new (Phantasma.Cryptography.Array16$1(System.UInt64))() };
                Phantasma.Cryptography.ByteIntegerConverter.Array16LoadBigEndian64(block, this._buffer, 0);
                Phantasma.Cryptography.CryptoBytes.InternalWipe(this._buffer, 0, this._buffer.length);
                var bytesInBuffer = System.Int64.clip32(this._totalBytes) & (127);
                if (bytesInBuffer > 112) {
                    Phantasma.Cryptography.SHA512.Core(Bridge.ref(this, "_state"), Bridge.ref(this, "_state"), block);
                    block.v = Bridge.getDefaultValue(Phantasma.Cryptography.Array16$1(System.UInt64));
                }
                block.v.x15 = (this._totalBytes.sub(System.UInt64(1))).mul(System.UInt64(8));
                Phantasma.Cryptography.SHA512.Core(Bridge.ref(this, "_state"), Bridge.ref(this, "_state"), block);

                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 0) | 0), this._state.x0);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 8) | 0), this._state.x1);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 16) | 0), this._state.x2);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 24) | 0), this._state.x3);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 32) | 0), this._state.x4);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 40) | 0), this._state.x5);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 48) | 0), this._state.x6);
                Phantasma.Cryptography.ByteIntegerConverter.StoreBigEndian64(output.getArray(), ((output.getOffset() + 56) | 0), this._state.x7);
                this._state = Bridge.getDefaultValue(Phantasma.Cryptography.Array8$1(System.UInt64));
            },
            Finish: function () {
                var result = System.Array.init(64, 0, System.Byte);
                this.Finish$1(new System.ArraySegment(result));
                return result;
            }
        }
    });

    Bridge.define("Phantasma.Utils.ByteArrayComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Array.type(System.Byte))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Byte$Array$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Byte$Array$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (left, right) {
                if (left == null || right == null) {
                    return Bridge.referenceEquals(left, right);
                }
                return System.Linq.Enumerable.from(left).sequenceEqual(right);
            },
            getHashCode2: function (key) {
                if (key == null) {
                    throw new System.ArgumentNullException.$ctor1("key");
                }
                return System.Linq.Enumerable.from(key).sum(function (b) {
                        return b;
                    });
            }
        }
    });

    Bridge.define("Phantasma.Utils.ChainUtils", {
        statics: {
            fields: {
                hexAlphabet: null,
                unixEpoch: null
            },
            ctors: {
                init: function () {
                    this.unixEpoch = System.DateTime.getDefaultValue();
                    this.hexAlphabet = "0123456789ABCDEF";
                    this.unixEpoch = System.DateTime.create(1970, 1, 1, 0, 0, 0, 0, 1);
                }
            },
            methods: {
                HexToBytes: function (value) {
                    if (value == null || value.length === 0) {
                        return System.Array.init(0, 0, System.Byte);
                    }

                    if (System.String.startsWith(value, "0x")) {
                        return Phantasma.Utils.ChainUtils.HexToBytes(value.substr(2));
                    }

                    if (value.length % 2 === 1) {
                        throw new System.FormatException.ctor();
                    }

                    var result = System.Array.init(((Bridge.Int.div(value.length, 2)) | 0), 0, System.Byte);

                    for (var i = 0; i < result.length; i = (i + 1) | 0) {
                        var str = value.substr(Bridge.Int.mul(i, 2), 2);
                        result[System.Array.index(i, result)] = (((Bridge.Int.mul(System.String.indexOf(Phantasma.Utils.ChainUtils.hexAlphabet, String.fromCharCode(str.charCodeAt(0))), 16) + System.String.indexOf(Phantasma.Utils.ChainUtils.hexAlphabet, String.fromCharCode(str.charCodeAt(1)))) | 0)) & 255;
                    }

                    return result;
                },
                ByteToHex: function (data) {
                    if (data == null) {
                        return null;
                    }
                    var c = System.Array.init(Bridge.Int.mul(data.length, 2), 0, System.Char);
                    var b;
                    for (var i = 0; i < data.length; i = (i + 1) | 0) {
                        b = data[System.Array.index(i, data)] >> 4;
                        c[System.Array.index(Bridge.Int.mul(i, 2), c)] = (((((55 + b) | 0) + (((((b - 10) | 0)) >> 31) & -7)) | 0)) & 65535;
                        b = data[System.Array.index(i, data)] & 15;
                        c[System.Array.index(((Bridge.Int.mul(i, 2) + 1) | 0), c)] = (((((55 + b) | 0) + (((((b - 10) | 0)) >> 31) & -7)) | 0)) & 65535;
                    }
                    return System.String.fromCharArray(c);
                },
                ToDateTime: function (timestamp) {
                    return System.DateTime.toLocalTime(System.DateTime.addSeconds(Phantasma.Utils.ChainUtils.unixEpoch, timestamp));
                },
                ToDateTime$1: function (timestamp) {
                    return System.DateTime.toLocalTime(System.DateTime.addSeconds(Phantasma.Utils.ChainUtils.unixEpoch, System.Int64.toNumber(timestamp)));
                },
                ToTimestamp: function (time) {
                    return Bridge.Int.clipu32((System.DateTime.subdd(System.DateTime.toUniversalTime(time), Phantasma.Utils.ChainUtils.unixEpoch)).getTotalSeconds());
                },
                ToHexString: function (value) {
                    var $t;
                    var sb = new System.Text.StringBuilder();
                    $t = Bridge.getEnumerator(value, System.Byte);
                    try {
                        while ($t.moveNext()) {
                            var b = $t.Current;
                            sb.appendFormat("{0:x2}", Bridge.box(b, System.Byte));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }return sb.toString();
                },
                ToUInt32: function (value, startIndex) {
                    var a = value[System.Array.index(startIndex, value)];
                    startIndex = (startIndex + 1) | 0;
                    var b = value[System.Array.index(startIndex, value)];
                    startIndex = (startIndex + 1) | 0;
                    var c = value[System.Array.index(startIndex, value)];
                    startIndex = (startIndex + 1) | 0;
                    var d = value[System.Array.index(startIndex, value)];
                    startIndex = (startIndex + 1) | 0;
                    return ((((((((a + (b << 8)) | 0) + (c << 16)) | 0) + (d << 24)) | 0)) >>> 0);
                    /* fixed (byte* pbyte = &value[startIndex])
                    {
                       return *((uint*)pbyte);
                    }*/
                },
                WeightedAverage: function (T, source, valueSelector, weightSelector) {
                    var $t;
                    var sum_weight = System.Int64(0);
                    var sum_value = System.Int64(0);
                    $t = Bridge.getEnumerator(source, T);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            var weight = weightSelector(item);
                            sum_weight = sum_weight.add(weight);
                            sum_value = sum_value.add((valueSelector(item).mul(weight)));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }if (sum_value.equals(System.Int64(0))) {
                        return System.Int64(0);
                    }
                    return sum_value.div(sum_weight);
                },
                Adler16: function (data) {
                    var $t;
                    var mod = 251;
                    var a = 1, b = 0;
                    $t = Bridge.getEnumerator(data, System.Byte);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            a = ((((a + c) | 0)) % mod) & 65535;
                            b = ((((b + a) | 0)) % mod) & 65535;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }return (((b << 16) | a) & 65535);
                },
                Adler32: function (data) {
                    var $t;
                    var mod = 65521;
                    var a = 1, b = 0;
                    $t = Bridge.getEnumerator(data, System.Byte);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            a = (((a + c) >>> 0)) % mod;
                            b = (((b + a) >>> 0)) % mod;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }return (((((b << 16) >>> 0)) | a) >>> 0);
                },
                WeightedFilter: function (T, TResult, source, start, end, weightSelector, resultSelector) {
                    return new (Bridge.GeneratorEnumerable$1(TResult))(Bridge.fn.bind(this, function (T, TResult, source, start, end, weightSelector, resultSelector) {
                        var $step = 0,
                            $jumpFromFinally,
                            $returnValue,
                            amount,
                            sum,
                            current,
                            $t,
                            item,
                            weight,
                            old,
                            $async_e;

                        var $enumerator = new (Bridge.GeneratorEnumerator$1(TResult))(Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    switch ($step) {
                                        case 0: {
                                            if (source == null) {
                                                    throw new System.ArgumentNullException.$ctor1("source");
                                                }
                                                if (start < 0 || start > 1) {
                                                    throw new System.ArgumentOutOfRangeException.$ctor1("start");
                                                }
                                                if (end < start || start + end > 1) {
                                                    throw new System.ArgumentOutOfRangeException.$ctor1("end");
                                                }
                                                if (Bridge.staticEquals(weightSelector, null)) {
                                                    throw new System.ArgumentNullException.$ctor1("weightSelector");
                                                }
                                                if (Bridge.staticEquals(resultSelector, null)) {
                                                    throw new System.ArgumentNullException.$ctor1("resultSelector");
                                                }
                                                if (System.Array.getCount(source, T) === 0 || start === end) {
                                                    $step = 1;
                                                    continue;
                                                } 
                                                $step = 2;
                                                continue;
                                        }
                                        case 1: {
                                            return false;
                                        }
                                        case 2: {
                                            amount = System.Int64.toNumber(System.Linq.Enumerable.from(source).sum(weightSelector, System.Int64.Zero));
                                                sum = System.Int64(0);
                                                current = 0;
                                                $t = Bridge.getEnumerator(source, T);
                                                $step = 3;
                                                continue;
                                        }
                                        case 3: {
                                            if ($t.moveNext()) {
                                                    item = $t.Current;
                                                    $step = 4;
                                                    continue;
                                                }
                                            $step = 6;
                                            continue;
                                        }
                                        case 4: {
                                            if (current >= end) {
                                                    $step = 6;
                                                    continue;
                                                }
                                                weight = weightSelector(item);
                                                sum = sum.add(weight);
                                                old = current;
                                                current = sum / amount;
                                                if (current <= start) {
                                                    $step = 3;
                                                    continue;
                                                }
                                                if (old < start) {
                                                    if (current > end) {
                                                        weight = Bridge.Int.clip64((end - start) * amount);
                                                    } else {
                                                        weight = Bridge.Int.clip64((current - start) * amount);
                                                    }
                                                } else if (current > end) {
                                                    weight = Bridge.Int.clip64((end - old) * amount);
                                                }
                                                $enumerator.current = resultSelector(item, weight);
                                                $step = 5;
                                                return true;
                                        }
                                        case 5: {
                                            $step = 3;
                                            continue;
                                        }
                                        case 6: {

                                        }
                                        default: {
                                            return false;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                throw $async_e;
                            }
                        }));
                        return $enumerator;
                    }, arguments));
                }
            }
        }
    });

    Bridge.define("Phantasma.Utils.CryptoUtils", {
        statics: {
            methods: {
                SubArray: function (T, data, index, length) {
                    var result = System.Array.init(length, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copy(data, index, result, 0, length);
                    return result;
                },
                Base58CheckDecode: function (input) {
                    var buffer = Phantasma.Cryptography.Base58.Decode(input);
                    if (buffer.length < 4) {
                        throw new System.FormatException.ctor();
                    }
                    var expected_checksum = Phantasma.Utils.CryptoUtils.Sha256$1(Phantasma.Utils.CryptoUtils.Sha256(buffer, 0, ((((buffer.length - 4) | 0)) >>> 0)));
                    expected_checksum = System.Linq.Enumerable.from(expected_checksum).take(4).ToArray(System.Byte);
                    var src_checksum = System.Linq.Enumerable.from(buffer).skip(((buffer.length - 4) | 0)).ToArray(System.Byte);
                    if (!System.Linq.Enumerable.from(src_checksum).sequenceEqual(expected_checksum)) {
                        throw new System.FormatException.ctor();
                    }
                    return System.Linq.Enumerable.from(buffer).take(((buffer.length - 4) | 0)).ToArray(System.Byte);
                },
                Base58CheckEncode: function (data) {
                    var checksum = Phantasma.Utils.CryptoUtils.Sha256$1(Phantasma.Utils.CryptoUtils.Sha256$1(data));
                    var buffer = System.Array.init(((data.length + 4) | 0), 0, System.Byte);
                    System.Array.copy(data, 0, buffer, 0, data.length);
                    System.Array.copy(checksum, 0, buffer, data.length, 4);
                    return Phantasma.Cryptography.Base58.Encode(buffer);
                },
                Sha256$1: function (value) {
                    return new Phantasma.Cryptography.SHA256().ComputeHash(System.Linq.Enumerable.from(value).ToArray());
                },
                Sha256: function (value, offset, count) {
                    return new Phantasma.Cryptography.SHA256().ComputeHash$1(value, offset, count);
                },
                NextBigInteger: function (rand, sizeInBits) {
                    var $t;
                    if (sizeInBits < 0) {
                        throw new System.ArgumentException.$ctor1("sizeInBits must be non-negative");
                    }
                    if (sizeInBits === 0) {
                        return System.Numerics.BigInteger.op_Implicit(0);
                    }
                    var b = System.Array.init(((((Bridge.Int.div(sizeInBits, 8)) | 0) + 1) | 0), 0, System.Byte);
                    rand.NextBytes(b);
                    if (sizeInBits % 8 === 0) {
                        b[System.Array.index(((b.length - 1) | 0), b)] = 0;
                    } else {
                        b[System.Array.index(($t = ((b.length - 1) | 0)), b)] = (b[System.Array.index($t, b)] & ((((((1 << sizeInBits % 8) - 1) | 0)) & 255))) & 255;
                    }
                    return new System.Numerics.BigInteger.$ctor1(b);
                },
                Hash256: function (message) {
                    return Phantasma.Utils.CryptoUtils.Sha256$1(Phantasma.Utils.CryptoUtils.Sha256$1(message));
                },
                Sign: function (message, prikey, pubkey) {
                    return Phantasma.Cryptography.Ed25519.Sign(message, prikey);
                },
                VerifySignature: function (message, signature, pubkey) {
                    return Phantasma.Cryptography.Ed25519.Verify$1(message, signature, pubkey);
                },
                PublicKeyToAddress: function (publicKey) {
                    var bytes = System.Array.init(((publicKey.length + 1) | 0), 0, System.Byte);

                    bytes[System.Array.index(0, bytes)] = 74;
                    for (var i = 0; i < publicKey.length; i = (i + 1) | 0) {
                        bytes[System.Array.index(((i + 1) | 0), bytes)] = publicKey[System.Array.index(i, publicKey)];
                    }

                    return Phantasma.Cryptography.Base58.Encode(bytes);
                },
                AddressToPublicKey: function (address) {
                    var bytes = Phantasma.Cryptography.Base58.Decode(address);
                    if (bytes[System.Array.index(0, bytes)] !== 74) {
                        throw new System.ArgumentException.$ctor1("Invalid address");
                    }

                    return System.Linq.Enumerable.from(bytes).skip(1).ToArray(System.Byte);
                },
                ScriptToPublicKey: function (script) {
                    var hash = Phantasma.Utils.CryptoUtils.Sha256$1(script);
                    return hash;
                }
            }
        }
    });

    Bridge.define("System.Numerics.BigInteger", {
        statics: {
            fields: {
                maxLength: 0,
                Zero: null,
                One: null
            },
            ctors: {
                init: function () {
                    this.maxLength = 70;
                    this.Zero = new System.Numerics.BigInteger.$ctor2(System.Int64(0));
                    this.One = new System.Numerics.BigInteger.$ctor2(System.Int64(1));
                }
            },
            methods: {
                shiftLeft: function (buffer, shiftVal) {
                    var num = 32;
                    var num2 = buffer.length;
                    while (num2 > 1 && buffer[System.Array.index(((num2 - 1) | 0), buffer)] === 0) {
                        num2 = (num2 - 1) | 0;
                    }
                    for (var num3 = shiftVal; num3 > 0; num3 = (num3 - num) | 0) {
                        if (num3 < num) {
                            num = num3;
                        }
                        var num4 = System.UInt64(0);
                        for (var i = 0; i < num2; i = (i + 1) | 0) {
                            var num5 = System.UInt64(buffer[System.Array.index(i, buffer)]).shl(num);
                            num5 = num5.or(num4);
                            buffer[System.Array.index(i, buffer)] = System.Int64.clipu32(num5.and(System.UInt64(4294967295)));
                            num4 = num5.shru(32);
                        }
                        if (num4.ne(System.UInt64(0)) && ((num2 + 1) | 0) <= buffer.length) {
                            buffer[System.Array.index(num2, buffer)] = System.Int64.clipu32(num4);
                            num2 = (num2 + 1) | 0;
                        }
                    }
                    return num2;
                },
                shiftRight: function (buffer, shiftVal) {
                    var num = 32;
                    var num2 = 0;
                    var num3 = buffer.length;
                    while (num3 > 1 && buffer[System.Array.index(((num3 - 1) | 0), buffer)] === 0) {
                        num3 = (num3 - 1) | 0;
                    }
                    for (var num4 = shiftVal; num4 > 0; num4 = (num4 - num) | 0) {
                        if (num4 < num) {
                            num = num4;
                            num2 = (32 - num) | 0;
                        }
                        var num5 = System.UInt64(0);
                        for (var num6 = (num3 - 1) | 0; num6 >= 0; num6 = (num6 - 1) | 0) {
                            var num7 = System.UInt64(buffer[System.Array.index(num6, buffer)]).shru(num);
                            num7 = num7.or(num5);
                            num5 = ((System.UInt64(buffer[System.Array.index(num6, buffer)]).shl(num2)).and(System.UInt64(4294967295)));
                            buffer[System.Array.index(num6, buffer)] = System.Int64.clipu32(num7);
                        }
                    }
                    while (num3 > 1 && buffer[System.Array.index(((num3 - 1) | 0), buffer)] === 0) {
                        num3 = (num3 - 1) | 0;
                    }
                    return num3;
                },
                multiByteDivide: function (bi1, bi2, outQuotient, outRemainder) {
                    var array = System.Array.init(70, 0, System.UInt32);
                    var num = (bi1.dataLength + 1) | 0;
                    var array2 = System.Array.init(num, 0, System.UInt32);
                    var num2 = 2147483648;
                    var num3 = bi2.data[System.Array.index(((bi2.dataLength - 1) | 0), bi2.data)];
                    var num4 = 0;
                    var num5 = 0;
                    while (num2 !== 0 && (((num3 & num2) >>> 0)) === 0) {
                        num4 = (num4 + 1) | 0;
                        num2 = num2 >>> 1;
                    }
                    for (var i = 0; i < bi1.dataLength; i = (i + 1) | 0) {
                        array2[System.Array.index(i, array2)] = bi1.data[System.Array.index(i, bi1.data)];
                    }
                    System.Numerics.BigInteger.shiftLeft(array2, num4);
                    bi2 = System.Numerics.BigInteger.op_LeftShift(bi2, num4);
                    var num6 = (num - bi2.dataLength) | 0;
                    var num7 = (num - 1) | 0;
                    var num8 = System.UInt64(bi2.data[System.Array.index(((bi2.dataLength - 1) | 0), bi2.data)]);
                    var num9 = System.UInt64(bi2.data[System.Array.index(((bi2.dataLength - 2) | 0), bi2.data)]);
                    var num10 = (bi2.dataLength + 1) | 0;
                    var array3 = System.Array.init(num10, 0, System.UInt32);
                    while (num6 > 0) {
                        var num11 = (System.UInt64(array2[System.Array.index(num7, array2)]).shl(32)).add(System.UInt64(array2[System.Array.index(((num7 - 1) | 0), array2)]));
                        var num12 = num11.div(num8);
                        var num13 = num11.mod(num8);
                        var flag = false;
                        while (!flag) {
                            flag = true;
                            if (num12.equals(System.UInt64(System.Int64([0,1]))) || num12.mul(num9).gt((num13.shl(32)).add(System.UInt64(array2[System.Array.index(((num7 - 2) | 0), array2)])))) {
                                num12 = num12.dec();
                                num13 = num13.add(num8);
                                if (num13.lt(System.UInt64(System.Int64([0,1])))) {
                                    flag = false;
                                }
                            }
                        }
                        for (var j = 0; j < num10; j = (j + 1) | 0) {
                            array3[System.Array.index(j, array3)] = array2[System.Array.index(((num7 - j) | 0), array2)];
                        }
                        var bigInteger = new System.Numerics.BigInteger.$ctor5(array3);
                        var bigInteger2 = System.Numerics.BigInteger.op_Multiply(bi2, System.Numerics.BigInteger.op_Implicit$1(num12));
                        while (System.Numerics.BigInteger.op_GreaterThan(bigInteger2, bigInteger)) {
                            num12 = num12.dec();
                            bigInteger2 = System.Numerics.BigInteger.op_Subtraction(bigInteger2, bi2);
                        }
                        var bigInteger3 = System.Numerics.BigInteger.op_Subtraction(bigInteger, bigInteger2);
                        for (var k = 0; k < num10; k = (k + 1) | 0) {
                            array2[System.Array.index(((num7 - k) | 0), array2)] = bigInteger3.data[System.Array.index(((bi2.dataLength - k) | 0), bigInteger3.data)];
                        }
                        array[System.Array.index(Bridge.identity(num5, (num5 = (num5 + 1) | 0)), array)] = System.Int64.clipu32(num12);
                        num7 = (num7 - 1) | 0;
                        num6 = (num6 - 1) | 0;
                    }
                    outQuotient.dataLength = num5;
                    var l = 0;
                    var num15 = (outQuotient.dataLength - 1) | 0;
                    while (num15 >= 0) {
                        outQuotient.data[System.Array.index(l, outQuotient.data)] = array[System.Array.index(num15, array)];
                        num15 = (num15 - 1) | 0;
                        l = (l + 1) | 0;
                    }
                    for (; l < 70; l = (l + 1) | 0) {
                        outQuotient.data[System.Array.index(l, outQuotient.data)] = 0;
                    }
                    while (outQuotient.dataLength > 1 && outQuotient.data[System.Array.index(((outQuotient.dataLength - 1) | 0), outQuotient.data)] === 0) {
                        outQuotient.dataLength = (outQuotient.dataLength - 1) | 0;
                    }
                    if (outQuotient.dataLength === 0) {
                        outQuotient.dataLength = 1;
                    }
                    outRemainder.dataLength = System.Numerics.BigInteger.shiftRight(array2, num4);
                    for (l = 0; l < outRemainder.dataLength; l = (l + 1) | 0) {
                        outRemainder.data[System.Array.index(l, outRemainder.data)] = array2[System.Array.index(l, array2)];
                    }
                    for (; l < 70; l = (l + 1) | 0) {
                        outRemainder.data[System.Array.index(l, outRemainder.data)] = 0;
                    }
                },
                singleByteDivide: function (bi1, bi2, outQuotient, outRemainder) {
                    var array = System.Array.init(70, 0, System.UInt32);
                    var num = 0;
                    for (var i = 0; i < 70; i = (i + 1) | 0) {
                        outRemainder.data[System.Array.index(i, outRemainder.data)] = bi1.data[System.Array.index(i, bi1.data)];
                    }
                    outRemainder.dataLength = bi1.dataLength;
                    while (outRemainder.dataLength > 1 && outRemainder.data[System.Array.index(((outRemainder.dataLength - 1) | 0), outRemainder.data)] === 0) {
                        outRemainder.dataLength = (outRemainder.dataLength - 1) | 0;
                    }
                    var num2 = System.UInt64(bi2.data[System.Array.index(0, bi2.data)]);
                    var num3 = (outRemainder.dataLength - 1) | 0;
                    var num4 = System.UInt64(outRemainder.data[System.Array.index(num3, outRemainder.data)]);
                    if (num4.gte(num2)) {
                        var num5 = num4.div(num2);
                        array[System.Array.index(Bridge.identity(num, (num = (num + 1) | 0)), array)] = System.Int64.clipu32(num5);
                        outRemainder.data[System.Array.index(num3, outRemainder.data)] = System.Int64.clipu32(num4.mod(num2));
                    }
                    num3 = (num3 - 1) | 0;
                    while (num3 >= 0) {
                        num4 = (System.UInt64(outRemainder.data[System.Array.index(((num3 + 1) | 0), outRemainder.data)]).shl(32)).add(System.UInt64(outRemainder.data[System.Array.index(num3, outRemainder.data)]));
                        var num7 = num4.div(num2);
                        array[System.Array.index(Bridge.identity(num, (num = (num + 1) | 0)), array)] = System.Int64.clipu32(num7);
                        outRemainder.data[System.Array.index(((num3 + 1) | 0), outRemainder.data)] = 0;
                        outRemainder.data[System.Array.index(Bridge.identity(num3, (num3 = (num3 - 1) | 0)), outRemainder.data)] = System.Int64.clipu32(num4.mod(num2));
                    }
                    outQuotient.dataLength = num;
                    var j = 0;
                    var num10 = (outQuotient.dataLength - 1) | 0;
                    while (num10 >= 0) {
                        outQuotient.data[System.Array.index(j, outQuotient.data)] = array[System.Array.index(num10, array)];
                        num10 = (num10 - 1) | 0;
                        j = (j + 1) | 0;
                    }
                    for (; j < 70; j = (j + 1) | 0) {
                        outQuotient.data[System.Array.index(j, outQuotient.data)] = 0;
                    }
                    while (outQuotient.dataLength > 1 && outQuotient.data[System.Array.index(((outQuotient.dataLength - 1) | 0), outQuotient.data)] === 0) {
                        outQuotient.dataLength = (outQuotient.dataLength - 1) | 0;
                    }
                    if (outQuotient.dataLength === 0) {
                        outQuotient.dataLength = 1;
                    }
                    while (outRemainder.dataLength > 1 && outRemainder.data[System.Array.index(((outRemainder.dataLength - 1) | 0), outRemainder.data)] === 0) {
                        outRemainder.dataLength = (outRemainder.dataLength - 1) | 0;
                    }
                },
                Pow: function (a, b) {
                    var bigInteger = System.Numerics.BigInteger.op_Implicit(1);
                    for (var i = 0; System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger.op_Implicit(i), b); i = (i + 1) | 0) {
                        bigInteger = System.Numerics.BigInteger.op_Multiply(bigInteger, a);
                    }
                    return bigInteger;
                },
                op_Implicit$1: function (value) {
                    return new System.Numerics.BigInteger.$ctor2(value);
                },
                op_Implicit$3: function (value) {
                    return new System.Numerics.BigInteger.$ctor6(value);
                },
                op_Implicit: function (value) {
                    return new System.Numerics.BigInteger.$ctor2(System.Int64(value));
                },
                op_Implicit$2: function (value) {
                    return new System.Numerics.BigInteger.$ctor6(System.UInt64(value));
                },
                op_Addition: function (bi1, bi2) {
                    var $t;
                    var bigInteger = ($t = new System.Numerics.BigInteger.ctor(), $t.dataLength = ((bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength), $t);
                    var num = System.Int64(0);
                    for (var i = 0; i < bigInteger.dataLength; i = (i + 1) | 0) {
                        var num2 = System.Int64(bi1.data[System.Array.index(i, bi1.data)]).add(System.Int64(bi2.data[System.Array.index(i, bi2.data)])).add(num);
                        num = num2.shr(32);
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = System.Int64.clipu32(num2.and(System.Int64(4294967295)));
                    }
                    if (num.ne(System.Int64(0)) && bigInteger.dataLength < 70) {
                        bigInteger.data[System.Array.index(bigInteger.dataLength, bigInteger.data)] = System.Int64.clipu32(num);
                        bigInteger.dataLength = (bigInteger.dataLength + 1) | 0;
                    }
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    var num3 = 69;
                    if ((((bi1.data[System.Array.index(num3, bi1.data)]) | 0) & -2147483648) === (((bi2.data[System.Array.index(num3, bi2.data)]) | 0) & -2147483648) && (((bigInteger.data[System.Array.index(num3, bigInteger.data)]) | 0) & -2147483648) !== (((bi1.data[System.Array.index(num3, bi1.data)]) | 0) & -2147483648)) {
                        throw new System.ArithmeticException.ctor();
                    }
                    return bigInteger;
                },
                op_Increment: function (bi1) {
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    var num = System.Int64(1);
                    var num2 = 0;
                    while (num.ne(System.Int64(0)) && num2 < 70) {
                        var num3 = System.Int64(bigInteger.data[System.Array.index(num2, bigInteger.data)]);
                        num3 = num3.inc();
                        bigInteger.data[System.Array.index(num2, bigInteger.data)] = System.Int64.clipu32(num3.and(System.Int64(4294967295)));
                        num = num3.shr(32);
                        num2 = (num2 + 1) | 0;
                    }
                    if (num2 <= bigInteger.dataLength) {
                        while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                            bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                        }
                    } else {
                        bigInteger.dataLength = num2;
                    }
                    var num4 = 69;
                    if ((((bi1.data[System.Array.index(num4, bi1.data)]) | 0) & -2147483648) === 0 && (((bigInteger.data[System.Array.index(num4, bigInteger.data)]) | 0) & -2147483648) !== (((bi1.data[System.Array.index(num4, bi1.data)]) | 0) & -2147483648)) {
                        throw new System.ArithmeticException.$ctor1("Overflow in ++.");
                    }
                    return bigInteger;
                },
                op_Subtraction: function (bi1, bi2) {
                    var $t;
                    var bigInteger = ($t = new System.Numerics.BigInteger.ctor(), $t.dataLength = ((bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength), $t);
                    var num = System.Int64(0);
                    for (var i = 0; i < bigInteger.dataLength; i = (i + 1) | 0) {
                        var num2 = System.Int64(bi1.data[System.Array.index(i, bi1.data)]).sub(System.Int64(bi2.data[System.Array.index(i, bi2.data)])).sub(num);
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = System.Int64.clipu32(num2.and(System.Int64(4294967295)));
                        num = System.Int64(((num2.gte(System.Int64(0))) ? 0 : 1));
                    }
                    if (num.ne(System.Int64(0))) {
                        for (var j = bigInteger.dataLength; j < 70; j = (j + 1) | 0) {
                            bigInteger.data[System.Array.index(j, bigInteger.data)] = 4294967295;
                        }
                        bigInteger.dataLength = 70;
                    }
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    var num3 = 69;
                    if ((((bi1.data[System.Array.index(num3, bi1.data)]) | 0) & -2147483648) !== (((bi2.data[System.Array.index(num3, bi2.data)]) | 0) & -2147483648) && (((bigInteger.data[System.Array.index(num3, bigInteger.data)]) | 0) & -2147483648) !== (((bi1.data[System.Array.index(num3, bi1.data)]) | 0) & -2147483648)) {
                        throw new System.ArithmeticException.ctor();
                    }
                    return bigInteger;
                },
                op_Decrement: function (bi1) {
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    var flag = true;
                    var num = 0;
                    while (flag && num < 70) {
                        var num2 = System.Int64(bigInteger.data[System.Array.index(num, bigInteger.data)]);
                        num2 = num2.dec();
                        bigInteger.data[System.Array.index(num, bigInteger.data)] = System.Int64.clipu32(num2.and(System.Int64(4294967295)));
                        if (num2.gte(System.Int64(0))) {
                            flag = false;
                        }
                        num = (num + 1) | 0;
                    }
                    if (num > bigInteger.dataLength) {
                        bigInteger.dataLength = num;
                    }
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    var num3 = 69;
                    if ((((bi1.data[System.Array.index(num3, bi1.data)]) | 0) & -2147483648) !== 0 && (((bigInteger.data[System.Array.index(num3, bigInteger.data)]) | 0) & -2147483648) !== (((bi1.data[System.Array.index(num3, bi1.data)]) | 0) & -2147483648)) {
                        throw new System.ArithmeticException.$ctor1("Underflow in --.");
                    }
                    return bigInteger;
                },
                op_Multiply: function (bi1, bi2) {
                    var num = 69;
                    var flag = false;
                    var flag2 = false;
                    try {
                        if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) !== 0) {
                            flag = true;
                            bi1 = System.Numerics.BigInteger.op_UnaryNegation(bi1);
                        }
                        if ((((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) !== 0) {
                            flag2 = true;
                            bi2 = System.Numerics.BigInteger.op_UnaryNegation(bi2);
                        }
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                    var bigInteger = new System.Numerics.BigInteger.ctor();
                    try {
                        for (var i = 0; i < bi1.dataLength; i = (i + 1) | 0) {
                            if (bi1.data[System.Array.index(i, bi1.data)] !== 0) {
                                var num2 = System.UInt64(0);
                                var num3 = 0;
                                var num4 = i;
                                while (num3 < bi2.dataLength) {
                                    var num5 = System.Int64.clipu64(System.Int64(bi1.data[System.Array.index(i, bi1.data)]).mul(System.Int64(bi2.data[System.Array.index(num3, bi2.data)])).add(System.Int64(bigInteger.data[System.Array.index(num4, bigInteger.data)])).add(System.Int64.clip64(num2)));
                                    bigInteger.data[System.Array.index(num4, bigInteger.data)] = System.Int64.clipu32(num5.and(System.UInt64(4294967295)));
                                    num2 = num5.shru(32);
                                    num3 = (num3 + 1) | 0;
                                    num4 = (num4 + 1) | 0;
                                }
                                if (num2.ne(System.UInt64(0))) {
                                    bigInteger.data[System.Array.index(((i + bi2.dataLength) | 0), bigInteger.data)] = System.Int64.clipu32(num2);
                                }
                            }
                        }
                    }
                    catch ($e2) {
                        $e2 = System.Exception.create($e2);
                        throw new System.ArithmeticException.$ctor1("Multiplication overflow.");
                    }
                    bigInteger.dataLength = (bi1.dataLength + bi2.dataLength) | 0;
                    if (bigInteger.dataLength > 70) {
                        bigInteger.dataLength = 70;
                    }
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    if ((((bigInteger.data[System.Array.index(num, bigInteger.data)]) | 0) & -2147483648) !== 0) {
                        if (flag !== flag2 && bigInteger.data[System.Array.index(num, bigInteger.data)] === 2147483648) {
                            if (bigInteger.dataLength === 1) {
                                return bigInteger;
                            }
                            var flag3 = true;
                            for (var j = 0; j < ((bigInteger.dataLength - 1) | 0); j = (j + 1) | 0) {
                                if (!flag3) {
                                    break;
                                }
                                if (bigInteger.data[System.Array.index(j, bigInteger.data)] !== 0) {
                                    flag3 = false;
                                }
                            }
                            if (flag3) {
                                return bigInteger;
                            }
                        }
                        throw new System.ArithmeticException.$ctor1("Multiplication overflow.");
                    }
                    if (flag !== flag2) {
                        return System.Numerics.BigInteger.op_UnaryNegation(bigInteger);
                    }
                    return bigInteger;
                },
                op_LeftShift: function (bi1, shiftVal) {
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    bigInteger.dataLength = System.Numerics.BigInteger.shiftLeft(bigInteger.data, shiftVal);
                    return bigInteger;
                },
                op_RightShift: function (bi1, shiftVal) {
                    var $t;
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    bigInteger.dataLength = System.Numerics.BigInteger.shiftRight(bigInteger.data, shiftVal);
                    if ((((bi1.data[System.Array.index(69, bi1.data)]) | 0) & -2147483648) !== 0) {
                        for (var num = 69; num >= bigInteger.dataLength; num = (num - 1) | 0) {
                            bigInteger.data[System.Array.index(num, bigInteger.data)] = 4294967295;
                        }
                        var num2 = 2147483648;
                        for (var i = 0; i < 32; i = (i + 1) | 0) {
                            if ((((bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] & num2) >>> 0)) !== 0) {
                                break;
                            }
                            bigInteger.data[System.Array.index(($t = ((bigInteger.dataLength - 1) | 0)), bigInteger.data)] = (bigInteger.data[System.Array.index($t, bigInteger.data)] | num2) >>> 0;
                            num2 = num2 >>> 1;
                        }
                        bigInteger.dataLength = 70;
                    }
                    return bigInteger;
                },
                op_OnesComplement: function (bi1) {
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    for (var i = 0; i < 70; i = (i + 1) | 0) {
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = ~bi1.data[System.Array.index(i, bi1.data)];
                    }
                    bigInteger.dataLength = 70;
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    return bigInteger;
                },
                op_UnaryNegation: function (bi1) {
                    if (bi1.dataLength === 1 && bi1.data[System.Array.index(0, bi1.data)] === 0) {
                        return new System.Numerics.BigInteger.ctor();
                    }
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    for (var i = 0; i < 70; i = (i + 1) | 0) {
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = ~bi1.data[System.Array.index(i, bi1.data)];
                    }
                    var num = System.Int64(1);
                    var num2 = 0;
                    while (num.ne(System.Int64(0)) && num2 < 70) {
                        var num3 = System.Int64(bigInteger.data[System.Array.index(num2, bigInteger.data)]);
                        num3 = num3.inc();
                        bigInteger.data[System.Array.index(num2, bigInteger.data)] = System.Int64.clipu32(num3.and(System.Int64(4294967295)));
                        num = num3.shr(32);
                        num2 = (num2 + 1) | 0;
                    }
                    if ((((bi1.data[System.Array.index(69, bi1.data)]) | 0) & -2147483648) === (((bigInteger.data[System.Array.index(69, bigInteger.data)]) | 0) & -2147483648)) {
                        throw new System.ArithmeticException.$ctor1("Overflow in negation.\n");
                    }
                    bigInteger.dataLength = 70;
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    return bigInteger;
                },
                op_Equality: function (bi1, bi2) {
                    return bi1.equals(bi2);
                },
                op_Inequality: function (bi1, bi2) {
                    return !bi1.equals(bi2);
                },
                op_GreaterThan: function (bi1, bi2) {
                    var num = 69;
                    if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) !== 0 && (((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) === 0) {
                        return false;
                    }
                    if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) === 0 && (((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) !== 0) {
                        return true;
                    }
                    var num2 = (bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength;
                    num = (num2 - 1) | 0;
                    while (num >= 0 && bi1.data[System.Array.index(num, bi1.data)] === bi2.data[System.Array.index(num, bi2.data)]) {
                        num = (num - 1) | 0;
                    }
                    if (num >= 0) {
                        if (bi1.data[System.Array.index(num, bi1.data)] > bi2.data[System.Array.index(num, bi2.data)]) {
                            return true;
                        }
                        return false;
                    }
                    return false;
                },
                op_LessThan: function (bi1, bi2) {
                    var num = 69;
                    if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) !== 0 && (((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) === 0) {
                        return true;
                    }
                    if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) === 0 && (((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) !== 0) {
                        return false;
                    }
                    var num2 = (bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength;
                    num = (num2 - 1) | 0;
                    while (num >= 0 && bi1.data[System.Array.index(num, bi1.data)] === bi2.data[System.Array.index(num, bi2.data)]) {
                        num = (num - 1) | 0;
                    }
                    if (num >= 0) {
                        if (bi1.data[System.Array.index(num, bi1.data)] < bi2.data[System.Array.index(num, bi2.data)]) {
                            return true;
                        }
                        return false;
                    }
                    return false;
                },
                op_GreaterThanOrEqual: function (bi1, bi2) {
                    return System.Numerics.BigInteger.op_Equality(bi1, bi2) || System.Numerics.BigInteger.op_GreaterThan(bi1, bi2);
                },
                op_LessThanOrEqual: function (bi1, bi2) {
                    return System.Numerics.BigInteger.op_Equality(bi1, bi2) || System.Numerics.BigInteger.op_LessThan(bi1, bi2);
                },
                op_Division: function (bi1, bi2) {
                    var bigInteger = new System.Numerics.BigInteger.ctor();
                    var outRemainder = new System.Numerics.BigInteger.ctor();
                    var num = 69;
                    var flag = false;
                    var flag2 = false;
                    if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) !== 0) {
                        bi1 = System.Numerics.BigInteger.op_UnaryNegation(bi1);
                        flag2 = true;
                    }
                    if ((((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) !== 0) {
                        bi2 = System.Numerics.BigInteger.op_UnaryNegation(bi2);
                        flag = true;
                    }
                    if (System.Numerics.BigInteger.op_LessThan(bi1, bi2)) {
                        return bigInteger;
                    }
                    if (bi2.dataLength === 1) {
                        System.Numerics.BigInteger.singleByteDivide(bi1, bi2, bigInteger, outRemainder);
                    } else {
                        System.Numerics.BigInteger.multiByteDivide(bi1, bi2, bigInteger, outRemainder);
                    }
                    if (flag2 !== flag) {
                        return System.Numerics.BigInteger.op_UnaryNegation(bigInteger);
                    }
                    return bigInteger;
                },
                op_Modulus: function (bi1, bi2) {
                    var outQuotient = new System.Numerics.BigInteger.ctor();
                    var bigInteger = new System.Numerics.BigInteger.$ctor3(bi1);
                    var num = 69;
                    var flag = false;
                    if ((((bi1.data[System.Array.index(num, bi1.data)]) | 0) & -2147483648) !== 0) {
                        bi1 = System.Numerics.BigInteger.op_UnaryNegation(bi1);
                        flag = true;
                    }
                    if ((((bi2.data[System.Array.index(num, bi2.data)]) | 0) & -2147483648) !== 0) {
                        bi2 = System.Numerics.BigInteger.op_UnaryNegation(bi2);
                    }
                    if (System.Numerics.BigInteger.op_LessThan(bi1, bi2)) {
                        return bigInteger;
                    }
                    if (bi2.dataLength === 1) {
                        System.Numerics.BigInteger.singleByteDivide(bi1, bi2, outQuotient, bigInteger);
                    } else {
                        System.Numerics.BigInteger.multiByteDivide(bi1, bi2, outQuotient, bigInteger);
                    }
                    if (flag) {
                        return System.Numerics.BigInteger.op_UnaryNegation(bigInteger);
                    }
                    return bigInteger;
                },
                op_BitwiseAnd: function (bi1, bi2) {
                    var bigInteger = new System.Numerics.BigInteger.ctor();
                    var num = (bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength;
                    for (var i = 0; i < num; i = (i + 1) | 0) {
                        var num2 = (bi1.data[System.Array.index(i, bi1.data)] & bi2.data[System.Array.index(i, bi2.data)]) >>> 0;
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = num2;
                    }
                    bigInteger.dataLength = 70;
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    return bigInteger;
                },
                op_BitwiseOr: function (bi1, bi2) {
                    var bigInteger = new System.Numerics.BigInteger.ctor();
                    var num = (bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength;
                    for (var i = 0; i < num; i = (i + 1) | 0) {
                        var num2 = (bi1.data[System.Array.index(i, bi1.data)] | bi2.data[System.Array.index(i, bi2.data)]) >>> 0;
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = num2;
                    }
                    bigInteger.dataLength = 70;
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    return bigInteger;
                },
                op_ExclusiveOr: function (bi1, bi2) {
                    var bigInteger = new System.Numerics.BigInteger.ctor();
                    var num = (bi1.dataLength > bi2.dataLength) ? bi1.dataLength : bi2.dataLength;
                    for (var i = 0; i < num; i = (i + 1) | 0) {
                        var num2 = (bi1.data[System.Array.index(i, bi1.data)] ^ bi2.data[System.Array.index(i, bi2.data)]) >>> 0;
                        bigInteger.data[System.Array.index(i, bigInteger.data)] = num2;
                    }
                    bigInteger.dataLength = 70;
                    while (bigInteger.dataLength > 1 && bigInteger.data[System.Array.index(((bigInteger.dataLength - 1) | 0), bigInteger.data)] === 0) {
                        bigInteger.dataLength = (bigInteger.dataLength - 1) | 0;
                    }
                    return bigInteger;
                },
                op_Explicit: function (value) {
                    return ((value.data[System.Array.index(0, value.data)]) | 0);
                },
                op_Explicit$1: function (value) {
                    var num = System.Int64(0);
                    num = System.Int64(value.data[System.Array.index(0, value.data)]);
                    try {
                        num = num.or((System.Int64.clip64(System.UInt64(value.data[System.Array.index(1, value.data)]).shl(32))));
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if ((((value.data[System.Array.index(0, value.data)]) | 0) & -2147483648) !== 0) {
                            num = System.Int64((value.data[System.Array.index(0, value.data)]) | 0);
                        }
                    }
                    return num;
                }
            }
        },
        fields: {
            data: null,
            dataLength: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.data = System.Array.init(70, 0, System.UInt32);
                this.dataLength = 1;
            },
            $ctor2: function (value) {
                this.$initialize();
                this.data = System.Array.init(70, 0, System.UInt32);
                var num = value;
                this.dataLength = 0;
                while (value.ne(System.Int64(0)) && this.dataLength < 70) {
                    this.data[System.Array.index(this.dataLength, this.data)] = System.Int64.clipu32(value.and(System.Int64(4294967295)));
                    value = value.shr(32);
                    this.dataLength = (this.dataLength + 1) | 0;
                }
                if (num.gt(System.Int64(0))) {
                    if (value.ne(System.Int64(0)) || (((this.data[System.Array.index(69, this.data)]) | 0) & -2147483648) !== 0) {
                        throw new System.ArithmeticException.$ctor1("Positive overflow in constructor.");
                    }
                } else if (num.lt(System.Int64(0)) && (value.ne(System.Int64(-1)) || (((this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)]) | 0) & -2147483648) === 0)) {
                    throw new System.ArithmeticException.$ctor1("Negative underflow in constructor.");
                }
                if (this.dataLength === 0) {
                    this.dataLength = 1;
                }
            },
            $ctor6: function (value) {
                this.$initialize();
                this.data = System.Array.init(70, 0, System.UInt32);
                this.dataLength = 0;
                while (value.ne(System.UInt64(System.Int64(0))) && this.dataLength < 70) {
                    this.data[System.Array.index(this.dataLength, this.data)] = System.Int64.clipu32(value.and(System.UInt64(4294967295)));
                    value = value.shru(32);
                    this.dataLength = (this.dataLength + 1) | 0;
                }
                if (value.ne(System.UInt64(System.Int64(0))) || (((this.data[System.Array.index(69, this.data)]) | 0) & -2147483648) !== 0) {
                    throw new System.ArithmeticException.$ctor1("Positive overflow in constructor.");
                }
                if (this.dataLength === 0) {
                    this.dataLength = 1;
                }
            },
            $ctor3: function (bi) {
                this.$initialize();
                this.data = System.Array.init(70, 0, System.UInt32);
                this.dataLength = bi.dataLength;
                for (var i = 0; i < this.dataLength; i = (i + 1) | 0) {
                    this.data[System.Array.index(i, this.data)] = bi.data[System.Array.index(i, bi.data)];
                }
            },
            $ctor4: function (value, radix) {
                this.$initialize();
                var bi = new System.Numerics.BigInteger.$ctor2(System.Int64(1));
                var bigInteger = new System.Numerics.BigInteger.ctor();
                value = value.toUpperCase().trim();
                var num = 0;
                if (value.charCodeAt(0) === 45) {
                    num = 1;
                }
                for (var num2 = (value.length - 1) | 0; num2 >= num; num2 = (num2 - 1) | 0) {
                    var num3 = value.charCodeAt(num2);
                    num3 = ((num3 >= 48 && num3 <= 57) ? (((num3 - 48) | 0)) : ((num3 < 65 || num3 > 90) ? 9999999 : (((((num3 - 65) | 0) + 10) | 0))));
                    if (num3 >= radix) {
                        throw new System.ArithmeticException.$ctor1("Invalid string in constructor.");
                    }
                    if (value.charCodeAt(0) === 45) {
                        num3 = (-num3) | 0;
                    }
                    bigInteger = System.Numerics.BigInteger.op_Addition(bigInteger, System.Numerics.BigInteger.op_Multiply(bi, System.Numerics.BigInteger.op_Implicit(num3)));
                    if (((num2 - 1) | 0) >= num) {
                        bi = System.Numerics.BigInteger.op_Multiply(bi, System.Numerics.BigInteger.op_Implicit(radix));
                    }
                }
                if (value.charCodeAt(0) === 45) {
                    if ((((bigInteger.data[System.Array.index(69, bigInteger.data)]) | 0) & -2147483648) === 0) {
                        throw new System.ArithmeticException.$ctor1("Negative underflow in constructor.");
                    }
                } else if ((((bigInteger.data[System.Array.index(69, bigInteger.data)]) | 0) & -2147483648) !== 0) {
                    throw new System.ArithmeticException.$ctor1("Positive overflow in constructor.");
                }
                this.data = System.Array.init(70, 0, System.UInt32);
                for (var i = 0; i < bigInteger.dataLength; i = (i + 1) | 0) {
                    this.data[System.Array.index(i, this.data)] = bigInteger.data[System.Array.index(i, bigInteger.data)];
                }
                this.dataLength = bigInteger.dataLength;
            },
            $ctor1: function (inData) {
                this.$initialize();
                var num = inData.length;
                System.Array.reverse(inData);
                this.dataLength = num >> 2;
                var num2 = num & 3;
                if (num2 !== 0) {
                    this.dataLength = (this.dataLength + 1) | 0;
                }
                if (this.dataLength > 70) {
                    throw new System.ArithmeticException.$ctor1("Byte overflow in constructor.");
                }
                this.data = System.Array.init(70, 0, System.UInt32);
                var num3 = 0;
                for (var num4 = (num - 1) | 0; num4 >= 3; num4 = (num4 - 4) | 0) {
                    this.data[System.Array.index(Bridge.identity(num3, (num3 = (num3 + 1) | 0)), this.data)] = ((((((((inData[System.Array.index(((num4 - 3) | 0), inData)] << 24) + (inData[System.Array.index(((num4 - 2) | 0), inData)] << 16)) | 0) + (inData[System.Array.index(((num4 - 1) | 0), inData)] << 8)) | 0) + inData[System.Array.index(num4, inData)]) | 0)) >>> 0;
                }
                switch (num2) {
                    case 1: 
                        this.data[System.Array.index(num3, this.data)] = inData[System.Array.index(0, inData)];
                        break;
                    case 2: 
                        this.data[System.Array.index(num3, this.data)] = ((((inData[System.Array.index(0, inData)] << 8) + inData[System.Array.index(1, inData)]) | 0)) >>> 0;
                        break;
                    case 3: 
                        this.data[System.Array.index(num3, this.data)] = ((((((inData[System.Array.index(0, inData)] << 16) + (inData[System.Array.index(1, inData)] << 8)) | 0) + inData[System.Array.index(2, inData)]) | 0)) >>> 0;
                        break;
                }
                if (this.dataLength === 0) {
                    this.dataLength = 1;
                }
                while (this.dataLength > 1 && this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)] === 0) {
                    this.dataLength = (this.dataLength - 1) | 0;
                }
            },
            $ctor5: function (inData) {
                this.$initialize();
                this.dataLength = inData.length;
                if (this.dataLength > 70) {
                    throw new System.ArithmeticException.$ctor1("Byte overflow in constructor.");
                }
                this.data = System.Array.init(70, 0, System.UInt32);
                var num = (this.dataLength - 1) | 0;
                var num2 = 0;
                while (num >= 0) {
                    this.data[System.Array.index(num2, this.data)] = inData[System.Array.index(num, inData)];
                    num = (num - 1) | 0;
                    num2 = (num2 + 1) | 0;
                }
                while (this.dataLength > 1 && this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)] === 0) {
                    this.dataLength = (this.dataLength - 1) | 0;
                }
            }
        },
        methods: {
            equals: function (o) {
                var bigInteger = Bridge.cast(o, System.Numerics.BigInteger);
                if (this.dataLength !== bigInteger.dataLength) {
                    return false;
                }
                for (var i = 0; i < this.dataLength; i = (i + 1) | 0) {
                    if (this.data[System.Array.index(i, this.data)] !== bigInteger.data[System.Array.index(i, bigInteger.data)]) {
                        return false;
                    }
                }
                return true;
            },
            getHashCode: function () {
                return Bridge.getHashCode(this.toString());
            },
            max: function (bi) {
                if (System.Numerics.BigInteger.op_GreaterThan(this, bi)) {
                    return new System.Numerics.BigInteger.$ctor3(this);
                }
                return new System.Numerics.BigInteger.$ctor3(bi);
            },
            min: function (bi) {
                if (System.Numerics.BigInteger.op_LessThan(this, bi)) {
                    return new System.Numerics.BigInteger.$ctor3(this);
                }
                return new System.Numerics.BigInteger.$ctor3(bi);
            },
            abs: function () {
                if ((((this.data[System.Array.index(69, this.data)]) | 0) & -2147483648) !== 0) {
                    return System.Numerics.BigInteger.op_UnaryNegation(this);
                }
                return new System.Numerics.BigInteger.$ctor3(this);
            },
            toString: function () {
                return this.ToString(10);
            },
            ToString: function (radix) {
                if (radix < 2 || radix > 36) {
                    throw new System.ArgumentException.$ctor1("Radix must be >= 2 and <= 36");
                }
                var text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                var text2 = "";
                var bigInteger = this;
                var flag = false;
                if ((((bigInteger.data[System.Array.index(69, bigInteger.data)]) | 0) & -2147483648) !== 0) {
                    flag = true;
                    try {
                        bigInteger = System.Numerics.BigInteger.op_UnaryNegation(bigInteger);
                    }
                    catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
                var bigInteger2 = new System.Numerics.BigInteger.ctor();
                var bigInteger3 = new System.Numerics.BigInteger.ctor();
                var bi = new System.Numerics.BigInteger.$ctor2(System.Int64(radix));
                if (bigInteger.dataLength === 1 && bigInteger.data[System.Array.index(0, bigInteger.data)] === 0) {
                    text2 = "0";
                } else {
                    while (bigInteger.dataLength > 1 || (bigInteger.dataLength === 1 && bigInteger.data[System.Array.index(0, bigInteger.data)] !== 0)) {
                        System.Numerics.BigInteger.singleByteDivide(bigInteger, bi, bigInteger2, bigInteger3);
                        text2 = ((bigInteger3.data[System.Array.index(0, bigInteger3.data)] >= 10) ? ((String.fromCharCode(text.charCodeAt(((((bigInteger3.data[System.Array.index(0, bigInteger3.data)] - 10) >>> 0)) | 0))) || "") + (text2 || "")) : (bigInteger3.data[System.Array.index(0, bigInteger3.data)] + (text2 || "")));
                        bigInteger = bigInteger2;
                    }
                    if (flag) {
                        text2 = "-" + (text2 || "");
                    }
                }
                return text2;
            },
            ToHexString: function () {
                var text = System.UInt32.format(this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)], "X");
                for (var num = (this.dataLength - 2) | 0; num >= 0; num = (num - 1) | 0) {
                    text = (text || "") + ((System.UInt32.format(this.data[System.Array.index(num, this.data)], "X8")) || "");
                }
                return text;
            },
            gcd: function (bi) {
                var bigInteger = ((((this.data[System.Array.index(69, this.data)]) | 0) & -2147483648) === 0) ? this : (System.Numerics.BigInteger.op_UnaryNegation(this));
                var bigInteger2 = ((((bi.data[System.Array.index(69, bi.data)]) | 0) & -2147483648) === 0) ? bi : (System.Numerics.BigInteger.op_UnaryNegation(bi));
                var bigInteger3 = bigInteger2;
                while (bigInteger.dataLength > 1 || (bigInteger.dataLength === 1 && bigInteger.data[System.Array.index(0, bigInteger.data)] !== 0)) {
                    bigInteger3 = bigInteger;
                    bigInteger = System.Numerics.BigInteger.op_Modulus(bigInteger2, bigInteger);
                    bigInteger2 = bigInteger3;
                }
                return bigInteger3;
            },
            bitCount: function () {
                while (this.dataLength > 1 && this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)] === 0) {
                    this.dataLength = (this.dataLength - 1) | 0;
                }
                var num = this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)];
                var num2 = 2147483648;
                var num3 = 32;
                while (num3 > 0 && (((num & num2) >>> 0)) === 0) {
                    num3 = (num3 - 1) | 0;
                    num2 = num2 >>> 1;
                }
                num3 = (num3 + (((this.dataLength - 1) | 0) << 5)) | 0;
                return (num3 === 0) ? 1 : num3;
            },
            modInverse: function (modulus) {
                var $t;
                var array = System.Array.init([System.Numerics.BigInteger.op_Implicit(0), System.Numerics.BigInteger.op_Implicit(1)], System.Numerics.BigInteger);
                var array2 = System.Array.init(2, null, System.Numerics.BigInteger);
                var array3 = System.Array.init([System.Numerics.BigInteger.op_Implicit(0), System.Numerics.BigInteger.op_Implicit(0)], System.Numerics.BigInteger);
                var num = 0;
                var bi = modulus;
                var bigInteger = this;
                while (bigInteger.dataLength > 1 || (bigInteger.dataLength === 1 && bigInteger.data[System.Array.index(0, bigInteger.data)] !== 0)) {
                    var bigInteger2 = new System.Numerics.BigInteger.ctor();
                    var bigInteger3 = new System.Numerics.BigInteger.ctor();
                    if (num > 1) {
                        var bigInteger4 = System.Numerics.BigInteger.op_Modulus((System.Numerics.BigInteger.op_Subtraction(array[System.Array.index(0, array)], System.Numerics.BigInteger.op_Multiply(array[System.Array.index(1, array)], array2[System.Array.index(0, array2)]))), modulus);
                        array[System.Array.index(0, array)] = array[System.Array.index(1, array)];
                        array[System.Array.index(1, array)] = bigInteger4;
                    }
                    if (bigInteger.dataLength === 1) {
                        System.Numerics.BigInteger.singleByteDivide(bi, bigInteger, bigInteger2, bigInteger3);
                    } else {
                        System.Numerics.BigInteger.multiByteDivide(bi, bigInteger, bigInteger2, bigInteger3);
                    }
                    array2[System.Array.index(0, array2)] = array2[System.Array.index(1, array2)];
                    array3[System.Array.index(0, array3)] = array3[System.Array.index(1, array3)];
                    array2[System.Array.index(1, array2)] = bigInteger2;
                    array3[System.Array.index(1, array3)] = bigInteger3;
                    bi = bigInteger;
                    bigInteger = bigInteger3;
                    num = (num + 1) | 0;
                }
                if (array3[System.Array.index(0, array3)].dataLength > 1 || (array3[System.Array.index(0, array3)].dataLength === 1 && ($t = array3[System.Array.index(0, array3)].data)[System.Array.index(0, $t)] !== 1)) {
                    throw new System.ArithmeticException.$ctor1("No inverse!");
                }
                var bigInteger5 = System.Numerics.BigInteger.op_Modulus((System.Numerics.BigInteger.op_Subtraction(array[System.Array.index(0, array)], System.Numerics.BigInteger.op_Multiply(array[System.Array.index(1, array)], array2[System.Array.index(0, array2)]))), modulus);
                if ((((bigInteger5.data[System.Array.index(69, bigInteger5.data)]) | 0) & -2147483648) !== 0) {
                    bigInteger5 = System.Numerics.BigInteger.op_Addition(bigInteger5, modulus);
                }
                return bigInteger5;
            },
            ToByteArray: function () {
                var flag = true;
                var num = this.bitCount();
                if (flag) {
                    num = (num + 1) | 0;
                }
                var num2 = num >> 3;
                if ((num & 7) !== 0) {
                    num2 = (num2 + 1) | 0;
                }
                var array = System.Array.init(num2, 0, System.Byte);
                var num3 = 0;
                var num4 = this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)];
                if (flag) {
                    array[System.Array.index(Bridge.identity(num3, (num3 = (num3 + 1) | 0)), array)] = 0;
                }
                var num6 = num3;
                var num7;
                if (((num7 = ((((num4 >>> 24) & 255) >>> 0)))) !== 0) {
                    array[System.Array.index(Bridge.identity(num3, (num3 = (num3 + 1) | 0)), array)] = num7 & 255;
                }
                if (((num7 = ((((num4 >>> 16) & 255) >>> 0)))) !== 0) {
                    array[System.Array.index(Bridge.identity(num3, (num3 = (num3 + 1) | 0)), array)] = num7 & 255;
                } else if (num3 > num6) {
                    num3 = (num3 + 1) | 0;
                }
                if (((num7 = ((((num4 >>> 8) & 255) >>> 0)))) !== 0) {
                    array[System.Array.index(Bridge.identity(num3, (num3 = (num3 + 1) | 0)), array)] = num7 & 255;
                } else if (num3 > num6) {
                    num3 = (num3 + 1) | 0;
                }
                if (((num7 = (((num4 & 255) >>> 0)))) !== 0) {
                    array[System.Array.index(Bridge.identity(num3, (num3 = (num3 + 1) | 0)), array)] = num7 & 255;
                } else if (num3 > num6) {
                    num3 = (num3 + 1) | 0;
                }
                var num12 = (this.dataLength - 2) | 0;
                while (num12 >= 0) {
                    num4 = this.data[System.Array.index(num12, this.data)];
                    array[System.Array.index(((num3 + 3) | 0), array)] = (((num4 & 255) >>> 0)) & 255;
                    num4 = num4 >>> 8;
                    array[System.Array.index(((num3 + 2) | 0), array)] = (((num4 & 255) >>> 0)) & 255;
                    num4 = num4 >>> 8;
                    array[System.Array.index(((num3 + 1) | 0), array)] = (((num4 & 255) >>> 0)) & 255;
                    num4 = num4 >>> 8;
                    array[System.Array.index(num3, array)] = (((num4 & 255) >>> 0)) & 255;
                    num12 = (num12 - 1) | 0;
                    num3 = (num3 + 4) | 0;
                }
                System.Array.reverse(array);
                return array;
            },
            setBit: function (bitNum) {
                var num = bitNum >>> 5;
                var b = (((bitNum & 31) >>> 0)) & 255;
                var num2 = (1 << b) >>> 0;
                this.data[System.Array.index(num, this.data)] = (this.data[System.Array.index(num, this.data)] | num2) >>> 0;
                if (System.Int64(num).gte(System.Int64(this.dataLength))) {
                    this.dataLength = (((num + 1) >>> 0)) | 0;
                }
            },
            unsetBit: function (bitNum) {
                var num = bitNum >>> 5;
                if (System.Int64(num).lt(System.Int64(this.dataLength))) {
                    var b = (((bitNum & 31) >>> 0)) & 255;
                    var num2 = (1 << b) >>> 0;
                    var num3 = (-1 ^ (num2 | 0)) >>> 0;
                    this.data[System.Array.index(num, this.data)] = (this.data[System.Array.index(num, this.data)] & num3) >>> 0;
                    if (this.dataLength > 1 && this.data[System.Array.index(((this.dataLength - 1) | 0), this.data)] === 0) {
                        this.dataLength = (this.dataLength - 1) | 0;
                    }
                }
            },
            Sqrt: function () {
                var num = (this.bitCount()) >>> 0;
                num = (((((num & 1) >>> 0)) === 0) ? (num >>> 1) : ((((num >>> 1) + 1) >>> 0)));
                var num2 = num >>> 5;
                var b = (((num & 31) >>> 0)) & 255;
                var bigInteger = new System.Numerics.BigInteger.ctor();
                var num3;
                if (b === 0) {
                    num3 = 2147483648;
                } else {
                    num3 = (1 << b) >>> 0;
                    num2 = (num2 + 1) >>> 0;
                }
                bigInteger.dataLength = num2 | 0;
                for (var num4 = (((num2 - 1) >>> 0)) | 0; num4 >= 0; num4 = (num4 - 1) | 0) {
                    while (num3 !== 0) {
                        bigInteger.data[System.Array.index(num4, bigInteger.data)] = (bigInteger.data[System.Array.index(num4, bigInteger.data)] ^ num3) >>> 0;
                        if (System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger.op_Multiply(bigInteger, bigInteger), this)) {
                            bigInteger.data[System.Array.index(num4, bigInteger.data)] = (bigInteger.data[System.Array.index(num4, bigInteger.data)] ^ num3) >>> 0;
                        }
                        num3 = num3 >>> 1;
                    }
                    num3 = 2147483648;
                }
                return bigInteger;
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
Bridge.assembly("PhantasmaBridge", function ($asm, globals) {
    "use strict";


    var $m = Bridge.setMetadata,
        $n = ["System","System.Numerics","System.Collections.Generic","Phantasma.Cryptography"];
    $m("System.Numerics.BigInteger", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte)],"pi":[{"n":"inData","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Int64],"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[1].BigInteger],"pi":[{"n":"bi","pt":$n[1].BigInteger,"ps":0}],"sn":"$ctor3"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.UInt32)],"pi":[{"n":"inData","pt":$n[0].Array.type(System.UInt32),"ps":0}],"sn":"$ctor5"},{"a":2,"n":".ctor","t":1,"p":[$n[0].UInt64],"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"$ctor6"},{"a":2,"n":".ctor","t":1,"p":[$n[0].String,$n[0].Int32],"pi":[{"n":"value","pt":$n[0].String,"ps":0},{"n":"radix","pt":$n[0].Int32,"ps":1}],"sn":"$ctor4"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[0].Object,"ps":0}],"sn":"equals","rt":$n[0].Boolean,"p":[$n[0].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"Pow","is":true,"t":8,"pi":[{"n":"a","pt":$n[1].BigInteger,"ps":0},{"n":"b","pt":$n[1].BigInteger,"ps":1}],"sn":"Pow","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"Sqrt","t":8,"sn":"Sqrt","rt":$n[1].BigInteger},{"a":2,"n":"ToByteArray","t":8,"sn":"ToByteArray","rt":$n[0].Array.type(System.Byte)},{"a":2,"n":"ToHexString","t":8,"sn":"ToHexString","rt":$n[0].String},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"radix","pt":$n[0].Int32,"ps":0}],"sn":"ToString","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"abs","t":8,"sn":"abs","rt":$n[1].BigInteger},{"a":2,"n":"bitCount","t":8,"sn":"bitCount","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"gcd","t":8,"pi":[{"n":"bi","pt":$n[1].BigInteger,"ps":0}],"sn":"gcd","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"max","t":8,"pi":[{"n":"bi","pt":$n[1].BigInteger,"ps":0}],"sn":"max","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"min","t":8,"pi":[{"n":"bi","pt":$n[1].BigInteger,"ps":0}],"sn":"min","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"modInverse","t":8,"pi":[{"n":"modulus","pt":$n[1].BigInteger,"ps":0}],"sn":"modInverse","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":1,"n":"multiByteDivide","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1},{"n":"outQuotient","pt":$n[1].BigInteger,"ps":2},{"n":"outRemainder","pt":$n[1].BigInteger,"ps":3}],"sn":"multiByteDivide","rt":$n[0].Void,"p":[$n[1].BigInteger,$n[1].BigInteger,$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Addition","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_BitwiseAnd","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_BitwiseAnd","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_BitwiseOr","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_BitwiseOr","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_Decrement","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0}],"sn":"op_Decrement","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"op_Division","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Division","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Equality","rt":$n[0].Boolean,"p":[$n[1].BigInteger,$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_ExclusiveOr","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_ExclusiveOr","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].BigInteger,"ps":0}],"sn":"op_Explicit","rt":$n[0].Int32,"p":[$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[1].BigInteger,"ps":0}],"sn":"op_Explicit$1","rt":$n[0].Int64,"p":[$n[1].BigInteger]},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_GreaterThan","rt":$n[0].Boolean,"p":[$n[1].BigInteger,$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":$n[0].Boolean,"p":[$n[1].BigInteger,$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"op_Implicit","rt":$n[1].BigInteger,"p":[$n[0].Int32]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Int64,"ps":0}],"sn":"op_Implicit$1","rt":$n[1].BigInteger,"p":[$n[0].Int64]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt32,"ps":0}],"sn":"op_Implicit$2","rt":$n[1].BigInteger,"p":[$n[0].UInt32]},{"a":2,"n":"op_Implicit","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].UInt64,"ps":0}],"sn":"op_Implicit$3","rt":$n[1].BigInteger,"p":[$n[0].UInt64]},{"a":2,"n":"op_Increment","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0}],"sn":"op_Increment","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Inequality","rt":$n[0].Boolean,"p":[$n[1].BigInteger,$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LeftShift","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"shiftVal","pt":$n[0].Int32,"ps":1}],"sn":"op_LeftShift","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[0].Int32]},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_LessThan","rt":$n[0].Boolean,"p":[$n[1].BigInteger,$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_LessThanOrEqual","rt":$n[0].Boolean,"p":[$n[1].BigInteger,$n[1].BigInteger],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Modulus","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Modulus","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_Multiply","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Multiply","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_OnesComplement","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0}],"sn":"op_OnesComplement","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"op_RightShift","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"shiftVal","pt":$n[0].Int32,"ps":1}],"sn":"op_RightShift","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[0].Int32]},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1}],"sn":"op_Subtraction","rt":$n[1].BigInteger,"p":[$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"op_UnaryNegation","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0}],"sn":"op_UnaryNegation","rt":$n[1].BigInteger,"p":[$n[1].BigInteger]},{"a":2,"n":"setBit","t":8,"pi":[{"n":"bitNum","pt":$n[0].UInt32,"ps":0}],"sn":"setBit","rt":$n[0].Void,"p":[$n[0].UInt32]},{"a":1,"n":"shiftLeft","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.UInt32),"ps":0},{"n":"shiftVal","pt":$n[0].Int32,"ps":1}],"sn":"shiftLeft","rt":$n[0].Int32,"p":[$n[0].Array.type(System.UInt32),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"shiftRight","is":true,"t":8,"pi":[{"n":"buffer","pt":$n[0].Array.type(System.UInt32),"ps":0},{"n":"shiftVal","pt":$n[0].Int32,"ps":1}],"sn":"shiftRight","rt":$n[0].Int32,"p":[$n[0].Array.type(System.UInt32),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"singleByteDivide","is":true,"t":8,"pi":[{"n":"bi1","pt":$n[1].BigInteger,"ps":0},{"n":"bi2","pt":$n[1].BigInteger,"ps":1},{"n":"outQuotient","pt":$n[1].BigInteger,"ps":2},{"n":"outRemainder","pt":$n[1].BigInteger,"ps":3}],"sn":"singleByteDivide","rt":$n[0].Void,"p":[$n[1].BigInteger,$n[1].BigInteger,$n[1].BigInteger,$n[1].BigInteger]},{"a":2,"n":"unsetBit","t":8,"pi":[{"n":"bitNum","pt":$n[0].UInt32,"ps":0}],"sn":"unsetBit","rt":$n[0].Void,"p":[$n[0].UInt32]},{"a":2,"n":"One","is":true,"t":4,"rt":$n[1].BigInteger,"sn":"One","ro":true},{"a":2,"n":"Zero","is":true,"t":4,"rt":$n[1].BigInteger,"sn":"Zero","ro":true},{"a":1,"n":"data","t":4,"rt":$n[0].Array.type(System.UInt32),"sn":"data"},{"a":2,"n":"dataLength","t":4,"rt":$n[0].Int32,"sn":"dataLength","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"maxLength","is":true,"t":4,"rt":$n[0].Int32,"sn":"maxLength","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Phantasma.Utils.ByteArrayComparer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Equals","t":8,"pi":[{"n":"left","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"right","pt":$n[0].Array.type(System.Byte),"ps":1}],"sn":"equals2","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"GetHashCode","t":8,"pi":[{"n":"key","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"getHashCode2","rt":$n[0].Int32,"p":[$n[0].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Phantasma.Utils.ChainUtils", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"Adler16","is":true,"t":8,"pi":[{"n":"data","pt":$n[2].IEnumerable$1(System.Byte),"ps":0}],"sn":"Adler16","rt":$n[0].UInt16,"p":[$n[2].IEnumerable$1(System.Byte)],"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"Adler32","is":true,"t":8,"pi":[{"n":"data","pt":$n[2].IEnumerable$1(System.Byte),"ps":0}],"sn":"Adler32","rt":$n[0].UInt32,"p":[$n[2].IEnumerable$1(System.Byte)],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ByteToHex","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"ByteToHex","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"HexToBytes","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].String,"ps":0}],"sn":"HexToBytes","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":2,"n":"ToDateTime","is":true,"t":8,"pi":[{"n":"timestamp","pt":$n[0].UInt32,"ps":0}],"sn":"ToDateTime","rt":$n[0].DateTime,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"ToDateTime","is":true,"t":8,"pi":[{"n":"timestamp","pt":$n[0].UInt64,"ps":0}],"sn":"ToDateTime$1","rt":$n[0].DateTime,"p":[$n[0].UInt64],"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"ToHexString","is":true,"t":8,"pi":[{"n":"value","pt":$n[2].IEnumerable$1(System.Byte),"ps":0}],"sn":"ToHexString","rt":$n[0].String,"p":[$n[2].IEnumerable$1(System.Byte)]},{"a":2,"n":"ToTimestamp","is":true,"t":8,"pi":[{"n":"time","pt":$n[0].DateTime,"ps":0}],"sn":"ToTimestamp","rt":$n[0].UInt32,"p":[$n[0].DateTime],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":4,"n":"ToUInt32","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"startIndex","pt":$n[0].Int32,"ps":1}],"sn":"ToUInt32","rt":$n[0].UInt32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":4,"n":"WeightedAverage","is":true,"t":8,"pi":[{"n":"source","pt":$n[2].IEnumerable$1(System.Object),"ps":0},{"n":"valueSelector","pt":Function,"ps":1},{"n":"weightSelector","pt":Function,"ps":2}],"tpc":1,"tprm":["T"],"sn":"WeightedAverage","rt":$n[0].Int64,"p":[$n[2].IEnumerable$1(System.Object),Function,Function]},{"a":4,"n":"WeightedFilter","is":true,"t":8,"pi":[{"n":"source","pt":$n[2].IList$1(System.Object),"ps":0},{"n":"start","pt":$n[0].Double,"ps":1},{"n":"end","pt":$n[0].Double,"ps":2},{"n":"weightSelector","pt":Function,"ps":3},{"n":"resultSelector","pt":Function,"ps":4}],"tpc":2,"tprm":["T","TResult"],"sn":"WeightedFilter","rt":$n[2].IEnumerable$1(System.Object),"p":[$n[2].IList$1(System.Object),$n[0].Double,$n[0].Double,Function,Function]},{"a":1,"n":"hexAlphabet","is":true,"t":4,"rt":$n[0].String,"sn":"hexAlphabet"},{"a":1,"n":"unixEpoch","is":true,"t":4,"rt":$n[0].DateTime,"sn":"unixEpoch","ro":true,"box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}]}; }, $n);
    $m("Phantasma.Utils.CryptoUtils", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AddressToPublicKey","is":true,"t":8,"pi":[{"n":"address","pt":$n[0].String,"ps":0}],"sn":"AddressToPublicKey","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":2,"n":"Base58CheckDecode","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"Base58CheckDecode","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":2,"n":"Base58CheckEncode","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Base58CheckEncode","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"Hash256","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Hash256","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte)]},{"a":4,"n":"NextBigInteger","is":true,"t":8,"pi":[{"n":"rand","pt":$n[0].Random,"ps":0},{"n":"sizeInBits","pt":$n[0].Int32,"ps":1}],"sn":"NextBigInteger","rt":$n[1].BigInteger,"p":[$n[0].Random,$n[0].Int32]},{"a":2,"n":"PublicKeyToAddress","is":true,"t":8,"pi":[{"n":"publicKey","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"PublicKeyToAddress","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"ScriptToPublicKey","is":true,"t":8,"pi":[{"n":"script","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"ScriptToPublicKey","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"Sha256","is":true,"t":8,"pi":[{"n":"value","pt":$n[2].IEnumerable$1(System.Byte),"ps":0}],"sn":"Sha256$1","rt":$n[0].Array.type(System.Byte),"p":[$n[2].IEnumerable$1(System.Byte)]},{"a":2,"n":"Sha256","is":true,"t":8,"pi":[{"n":"value","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].UInt32,"ps":1},{"n":"count","pt":$n[0].UInt32,"ps":2}],"sn":"Sha256","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].UInt32,$n[0].UInt32]},{"a":2,"n":"Sign","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"prikey","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"pubkey","pt":$n[0].Array.type(System.Byte),"ps":2}],"sn":"Sign","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)]},{"a":2,"n":"SubArray","is":true,"t":8,"pi":[{"n":"data","pt":System.Array.type(System.Object),"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"length","pt":$n[0].Int32,"ps":2}],"tpc":1,"tprm":["T"],"sn":"SubArray","rt":System.Array.type(System.Object),"p":[System.Array.type(System.Object),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"VerifySignature","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"signature","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"pubkey","pt":$n[0].Array.type(System.Byte),"ps":2}],"sn":"VerifySignature","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Phantasma.Cryptography.Base58", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"Decode","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"Decode","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":2,"n":"Encode","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Encode","rt":$n[0].String,"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"Alphabet","is":true,"t":4,"rt":$n[0].String,"sn":"Alphabet"}]}; }, $n);
    $m("Phantasma.Cryptography.Array16$1", function (T) { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"x0","t":4,"rt":T,"sn":"x0"},{"a":2,"n":"x1","t":4,"rt":T,"sn":"x1"},{"a":2,"n":"x10","t":4,"rt":T,"sn":"x10"},{"a":2,"n":"x11","t":4,"rt":T,"sn":"x11"},{"a":2,"n":"x12","t":4,"rt":T,"sn":"x12"},{"a":2,"n":"x13","t":4,"rt":T,"sn":"x13"},{"a":2,"n":"x14","t":4,"rt":T,"sn":"x14"},{"a":2,"n":"x15","t":4,"rt":T,"sn":"x15"},{"a":2,"n":"x2","t":4,"rt":T,"sn":"x2"},{"a":2,"n":"x3","t":4,"rt":T,"sn":"x3"},{"a":2,"n":"x4","t":4,"rt":T,"sn":"x4"},{"a":2,"n":"x5","t":4,"rt":T,"sn":"x5"},{"a":2,"n":"x6","t":4,"rt":T,"sn":"x6"},{"a":2,"n":"x7","t":4,"rt":T,"sn":"x7"},{"a":2,"n":"x8","t":4,"rt":T,"sn":"x8"},{"a":2,"n":"x9","t":4,"rt":T,"sn":"x9"}]}; }, $n);
    $m("Phantasma.Cryptography.Array8$1", function (T) { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"x0","t":4,"rt":T,"sn":"x0"},{"a":2,"n":"x1","t":4,"rt":T,"sn":"x1"},{"a":2,"n":"x2","t":4,"rt":T,"sn":"x2"},{"a":2,"n":"x3","t":4,"rt":T,"sn":"x3"},{"a":2,"n":"x4","t":4,"rt":T,"sn":"x4"},{"a":2,"n":"x5","t":4,"rt":T,"sn":"x5"},{"a":2,"n":"x6","t":4,"rt":T,"sn":"x6"},{"a":2,"n":"x7","t":4,"rt":T,"sn":"x7"}]}; }, $n);
    $m("Phantasma.Cryptography.ByteIntegerConverter", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":2,"n":"Array16LoadBigEndian64","is":true,"t":8,"pi":[{"n":"output","out":true,"pt":$n[3].Array16$1(System.UInt64),"ps":0},{"n":"input","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"inputOffset","pt":$n[0].Int32,"ps":2}],"sn":"Array16LoadBigEndian64","rt":$n[0].Void,"p":[$n[3].Array16$1(System.UInt64),$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"Array16LoadLittleEndian32","is":true,"t":8,"pi":[{"n":"output","out":true,"pt":$n[3].Array16$1(System.UInt32),"ps":0},{"n":"input","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"inputOffset","pt":$n[0].Int32,"ps":2}],"sn":"Array16LoadLittleEndian32","rt":$n[0].Void,"p":[$n[3].Array16$1(System.UInt32),$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"Array16StoreLittleEndian32","is":true,"t":8,"pi":[{"n":"output","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"outputOffset","pt":$n[0].Int32,"ps":1},{"n":"input","ref":true,"pt":$n[3].Array16$1(System.UInt32),"ps":2}],"sn":"Array16StoreLittleEndian32","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[3].Array16$1(System.UInt32)]},{"a":2,"n":"Array8LoadLittleEndian32","is":true,"t":8,"pi":[{"n":"output","out":true,"pt":$n[3].Array8$1(System.UInt32),"ps":0},{"n":"input","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"inputOffset","pt":$n[0].Int32,"ps":2}],"sn":"Array8LoadLittleEndian32","rt":$n[0].Void,"p":[$n[3].Array8$1(System.UInt32),$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"LoadBigEndian64","is":true,"t":8,"pi":[{"n":"buf","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"LoadBigEndian64","rt":$n[0].UInt64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"LoadLittleEndian32","is":true,"t":8,"pi":[{"n":"buf","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"LoadLittleEndian32","rt":$n[0].UInt32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"StoreBigEndian64","is":true,"t":8,"pi":[{"n":"buf","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"value","pt":$n[0].UInt64,"ps":2}],"sn":"StoreBigEndian64","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].UInt64]},{"a":2,"n":"StoreLittleEndian32","is":true,"t":8,"pi":[{"n":"buf","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"value","pt":$n[0].UInt32,"ps":2}],"sn":"StoreLittleEndian32","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].UInt32]}]}; }, $n);
    $m("Phantasma.Cryptography.CryptoBytes", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"ConstantTimeEquals","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].ArraySegment,"ps":0},{"n":"y","pt":$n[0].ArraySegment,"ps":1}],"sn":"ConstantTimeEquals","rt":$n[0].Boolean,"p":[$n[0].ArraySegment,$n[0].ArraySegment],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ConstantTimeEquals","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"y","pt":$n[0].Array.type(System.Byte),"ps":1}],"sn":"ConstantTimeEquals$1","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ConstantTimeEquals","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"xOffset","pt":$n[0].Int32,"ps":1},{"n":"y","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"yOffset","pt":$n[0].Int32,"ps":3},{"n":"length","pt":$n[0].Int32,"ps":4}],"sn":"ConstantTimeEquals$2","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"InternalConstantTimeEquals","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"xOffset","pt":$n[0].Int32,"ps":1},{"n":"y","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"yOffset","pt":$n[0].Int32,"ps":3},{"n":"length","pt":$n[0].Int32,"ps":4}],"sn":"InternalConstantTimeEquals","rt":$n[0].UInt32,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":4,"n":"InternalWipe","is":true,"t":8,"pi":[{"n":"data","ref":true,"pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"InternalWipe$1","rt":$n[0].Void,"p":[System.Object]},{"a":4,"n":"InternalWipe","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"InternalWipe","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Wipe","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].ArraySegment,"ps":0}],"sn":"Wipe","rt":$n[0].Void,"p":[$n[0].ArraySegment]},{"a":2,"n":"Wipe","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Wipe$1","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"Wipe","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Wipe$2","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]}]}; }, $n);
    $m("Phantasma.Cryptography.Ed25519", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":4,"n":"EdwardsToMontgomeryX","is":true,"t":8,"pi":[{"n":"montgomeryX","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"edwardsY","ref":true,"pt":$n[3].FieldElement,"ps":1},{"n":"edwardsZ","ref":true,"pt":$n[3].FieldElement,"ps":2}],"sn":"EdwardsToMontgomeryX","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[3].FieldElement]},{"a":2,"n":"ExpandedPrivateKeyFromSeed","is":true,"t":8,"pi":[{"n":"privateKeySeed","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"ExpandedPrivateKeyFromSeed","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"KeyExchange","is":true,"t":8,"pi":[{"n":"publicKey","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"privateKey","pt":$n[0].Array.type(System.Byte),"ps":1}],"sn":"KeyExchange","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)]},{"a":2,"n":"KeyExchange","is":true,"t":8,"pi":[{"n":"sharedKey","pt":$n[0].ArraySegment,"ps":0},{"n":"publicKey","pt":$n[0].ArraySegment,"ps":1},{"n":"privateKey","pt":$n[0].ArraySegment,"ps":2}],"sn":"KeyExchange$1","rt":$n[0].Void,"p":[$n[0].ArraySegment,$n[0].ArraySegment,$n[0].ArraySegment]},{"a":4,"n":"KeyExchangeOutputHashNaCl","is":true,"t":8,"pi":[{"n":"sharedKey","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"KeyExchangeOutputHashNaCl","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"KeyPairFromSeed","is":true,"t":8,"pi":[{"n":"publicKey","pt":$n[0].ArraySegment,"ps":0},{"n":"expandedPrivateKey","pt":$n[0].ArraySegment,"ps":1},{"n":"privateKeySeed","pt":$n[0].ArraySegment,"ps":2}],"sn":"KeyPairFromSeed","rt":$n[0].Void,"p":[$n[0].ArraySegment,$n[0].ArraySegment,$n[0].ArraySegment]},{"a":2,"n":"KeyPairFromSeed","is":true,"t":8,"pi":[{"n":"publicKey","out":true,"pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"expandedPrivateKey","out":true,"pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"privateKeySeed","pt":$n[0].Array.type(System.Byte),"ps":2}],"sn":"KeyPairFromSeed$1","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)]},{"a":2,"n":"PublicKeyFromSeed","is":true,"t":8,"pi":[{"n":"privateKeySeed","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"PublicKeyFromSeed","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"Sign","is":true,"t":8,"pi":[{"n":"message","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"expandedPrivateKey","pt":$n[0].Array.type(System.Byte),"ps":1}],"sn":"Sign","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)]},{"a":2,"n":"Sign","is":true,"t":8,"pi":[{"n":"signature","pt":$n[0].ArraySegment,"ps":0},{"n":"message","pt":$n[0].ArraySegment,"ps":1},{"n":"expandedPrivateKey","pt":$n[0].ArraySegment,"ps":2}],"sn":"Sign$1","rt":$n[0].Void,"p":[$n[0].ArraySegment,$n[0].ArraySegment,$n[0].ArraySegment]},{"a":2,"n":"Verify","is":true,"t":8,"pi":[{"n":"signature","pt":$n[0].ArraySegment,"ps":0},{"n":"message","pt":$n[0].ArraySegment,"ps":1},{"n":"publicKey","pt":$n[0].ArraySegment,"ps":2}],"sn":"Verify","rt":$n[0].Boolean,"p":[$n[0].ArraySegment,$n[0].ArraySegment,$n[0].ArraySegment],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Verify","is":true,"t":8,"pi":[{"n":"signature","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"message","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"publicKey","pt":$n[0].Array.type(System.Byte),"ps":2}],"sn":"Verify$1","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ExpandedPrivateKeySizeInBytes","is":true,"t":4,"rt":$n[0].Int32,"sn":"ExpandedPrivateKeySizeInBytes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PrivateKeySeedSizeInBytes","is":true,"t":4,"rt":$n[0].Int32,"sn":"PrivateKeySeedSizeInBytes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PublicKeySizeInBytes","is":true,"t":4,"rt":$n[0].Int32,"sn":"PublicKeySizeInBytes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"SharedKeySizeInBytes","is":true,"t":4,"rt":$n[0].Int32,"sn":"SharedKeySizeInBytes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"SignatureSizeInBytes","is":true,"t":4,"rt":$n[0].Int32,"sn":"SignatureSizeInBytes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"_zero16","is":true,"t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_zero16","ro":true}]}; }, $n);
    $m("Phantasma.Cryptography.Ed25519Operations", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"crypto_sign2","is":true,"t":8,"pi":[{"n":"sig","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"sigoffset","pt":$n[0].Int32,"ps":1},{"n":"m","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"moffset","pt":$n[0].Int32,"ps":3},{"n":"mlen","pt":$n[0].Int32,"ps":4},{"n":"sk","pt":$n[0].Array.type(System.Byte),"ps":5},{"n":"skoffset","pt":$n[0].Int32,"ps":6}],"sn":"crypto_sign2","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"crypto_sign_keypair","is":true,"t":8,"pi":[{"n":"pk","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"pkoffset","pt":$n[0].Int32,"ps":1},{"n":"sk","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"skoffset","pt":$n[0].Int32,"ps":3},{"n":"seed","pt":$n[0].Array.type(System.Byte),"ps":4},{"n":"seedoffset","pt":$n[0].Int32,"ps":5}],"sn":"crypto_sign_keypair","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"crypto_sign_verify","is":true,"t":8,"pi":[{"n":"sig","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"sigoffset","pt":$n[0].Int32,"ps":1},{"n":"m","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"moffset","pt":$n[0].Int32,"ps":3},{"n":"mlen","pt":$n[0].Int32,"ps":4},{"n":"pk","pt":$n[0].Array.type(System.Byte),"ps":5},{"n":"pkoffset","pt":$n[0].Int32,"ps":6}],"sn":"crypto_sign_verify","rt":$n[0].Boolean,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("Phantasma.Cryptography.FieldElement", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Int32)],"pi":[{"n":"elements","ip":true,"pt":$n[0].Array.type(System.Int32),"ps":0}],"sn":"$ctor1"},{"a":4,"n":"x0","t":4,"rt":$n[0].Int32,"sn":"x0","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x1","t":4,"rt":$n[0].Int32,"sn":"x1","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x2","t":4,"rt":$n[0].Int32,"sn":"x2","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x3","t":4,"rt":$n[0].Int32,"sn":"x3","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x4","t":4,"rt":$n[0].Int32,"sn":"x4","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x5","t":4,"rt":$n[0].Int32,"sn":"x5","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x6","t":4,"rt":$n[0].Int32,"sn":"x6","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x7","t":4,"rt":$n[0].Int32,"sn":"x7","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x8","t":4,"rt":$n[0].Int32,"sn":"x8","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"x9","t":4,"rt":$n[0].Int32,"sn":"x9","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("Phantasma.Cryptography.FieldOperations", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":2,"n":"fe_0","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0}],"sn":"fe_0","rt":$n[0].Void,"p":[$n[3].FieldElement]},{"a":2,"n":"fe_1","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0}],"sn":"fe_1","rt":$n[0].Void,"p":[$n[3].FieldElement]},{"a":4,"n":"fe_add","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1},{"n":"g","ref":true,"pt":$n[3].FieldElement,"ps":2}],"sn":"fe_add","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_cmov","is":true,"t":8,"pi":[{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":0},{"n":"g","ref":true,"pt":$n[3].FieldElement,"ps":1},{"n":"b","pt":$n[0].Int32,"ps":2}],"sn":"fe_cmov","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[0].Int32]},{"a":2,"n":"fe_cswap","is":true,"t":8,"pi":[{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":0},{"n":"g","ref":true,"pt":$n[3].FieldElement,"ps":1},{"n":"b","pt":$n[0].UInt32,"ps":2}],"sn":"fe_cswap","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[0].UInt32]},{"a":4,"n":"fe_frombytes","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"offset","pt":$n[0].Int32,"ps":2}],"sn":"fe_frombytes","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":4,"n":"fe_frombytes2","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"offset","pt":$n[0].Int32,"ps":2}],"sn":"fe_frombytes2","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":4,"n":"fe_invert","is":true,"t":8,"pi":[{"n":"result","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"z","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_invert","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":2,"n":"fe_isnegative","is":true,"t":8,"pi":[{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":0}],"sn":"fe_isnegative","rt":$n[0].Int32,"p":[$n[3].FieldElement],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"fe_isnonzero","is":true,"t":8,"pi":[{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":0}],"sn":"fe_isnonzero","rt":$n[0].Int32,"p":[$n[3].FieldElement],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"fe_mul","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1},{"n":"g","ref":true,"pt":$n[3].FieldElement,"ps":2}],"sn":"fe_mul","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[3].FieldElement]},{"a":2,"n":"fe_mul121666","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_mul121666","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_neg","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_neg","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_pow22523","is":true,"t":8,"pi":[{"n":"result","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"z","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_pow22523","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_reduce","is":true,"t":8,"pi":[{"n":"hr","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"h","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_reduce","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_sq","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_sq","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_sq2","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1}],"sn":"fe_sq2","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_sub","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"f","ref":true,"pt":$n[3].FieldElement,"ps":1},{"n":"g","ref":true,"pt":$n[3].FieldElement,"ps":2}],"sn":"fe_sub","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[3].FieldElement]},{"a":4,"n":"fe_tobytes","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"h","ref":true,"pt":$n[3].FieldElement,"ps":2}],"sn":"fe_tobytes","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[3].FieldElement]},{"a":1,"n":"load_3","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"load_3","rt":$n[0].Int64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":1,"n":"load_4","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"load_4","rt":$n[0].Int64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]}]}; }, $n);
    $m("Phantasma.Cryptography.GroupElementP2", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"X","t":4,"rt":$n[3].FieldElement,"sn":"X"},{"a":2,"n":"Y","t":4,"rt":$n[3].FieldElement,"sn":"Y"},{"a":2,"n":"Z","t":4,"rt":$n[3].FieldElement,"sn":"Z"}]}; }, $n);
    $m("Phantasma.Cryptography.GroupElementP3", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"T","t":4,"rt":$n[3].FieldElement,"sn":"T"},{"a":2,"n":"X","t":4,"rt":$n[3].FieldElement,"sn":"X"},{"a":2,"n":"Y","t":4,"rt":$n[3].FieldElement,"sn":"Y"},{"a":2,"n":"Z","t":4,"rt":$n[3].FieldElement,"sn":"Z"}]}; }, $n);
    $m("Phantasma.Cryptography.GroupElementP1P1", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"T","t":4,"rt":$n[3].FieldElement,"sn":"T"},{"a":2,"n":"X","t":4,"rt":$n[3].FieldElement,"sn":"X"},{"a":2,"n":"Y","t":4,"rt":$n[3].FieldElement,"sn":"Y"},{"a":2,"n":"Z","t":4,"rt":$n[3].FieldElement,"sn":"Z"}]}; }, $n);
    $m("Phantasma.Cryptography.GroupElementPreComp", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[3].FieldElement,$n[3].FieldElement,$n[3].FieldElement],"pi":[{"n":"yplusx","pt":$n[3].FieldElement,"ps":0},{"n":"yminusx","pt":$n[3].FieldElement,"ps":1},{"n":"xy2d","pt":$n[3].FieldElement,"ps":2}],"sn":"$ctor1"},{"a":2,"n":"xy2d","t":4,"rt":$n[3].FieldElement,"sn":"xy2d"},{"a":2,"n":"yminusx","t":4,"rt":$n[3].FieldElement,"sn":"yminusx"},{"a":2,"n":"yplusx","t":4,"rt":$n[3].FieldElement,"sn":"yplusx"}]}; }, $n);
    $m("Phantasma.Cryptography.GroupElementCached", function () { return {"att":1048840,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"T2d","t":4,"rt":$n[3].FieldElement,"sn":"T2d"},{"a":2,"n":"YminusX","t":4,"rt":$n[3].FieldElement,"sn":"YminusX"},{"a":2,"n":"YplusX","t":4,"rt":$n[3].FieldElement,"sn":"YplusX"},{"a":2,"n":"Z","t":4,"rt":$n[3].FieldElement,"sn":"Z"}]}; }, $n);
    $m("Phantasma.Cryptography.GroupOperations", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":1,"n":"cmov","is":true,"t":8,"pi":[{"n":"t","ref":true,"pt":$n[3].GroupElementPreComp,"ps":0},{"n":"u","ref":true,"pt":$n[3].GroupElementPreComp,"ps":1},{"n":"b","pt":$n[0].Byte,"ps":2}],"sn":"cmov","rt":$n[0].Void,"p":[$n[3].GroupElementPreComp,$n[3].GroupElementPreComp,$n[0].Byte]},{"a":1,"n":"equal","is":true,"t":8,"pi":[{"n":"b","pt":$n[0].Byte,"ps":0},{"n":"c","pt":$n[0].Byte,"ps":1}],"sn":"equal","rt":$n[0].Byte,"p":[$n[0].Byte,$n[0].Byte],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":4,"n":"ge_add","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP1P1,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1},{"n":"q","ref":true,"pt":$n[3].GroupElementCached,"ps":2}],"sn":"ge_add","rt":$n[0].Void,"p":[$n[3].GroupElementP1P1,$n[3].GroupElementP3,$n[3].GroupElementCached]},{"a":2,"n":"ge_double_scalarmult_vartime","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP2,"ps":0},{"n":"a","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"A","ref":true,"pt":$n[3].GroupElementP3,"ps":2},{"n":"b","pt":$n[0].Array.type(System.Byte),"ps":3}],"sn":"ge_double_scalarmult_vartime","rt":$n[0].Void,"p":[$n[3].GroupElementP2,$n[0].Array.type(System.Byte),$n[3].GroupElementP3,$n[0].Array.type(System.Byte)]},{"a":2,"n":"ge_frombytes_negate_vartime","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].GroupElementP3,"ps":0},{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"offset","pt":$n[0].Int32,"ps":2}],"sn":"ge_frombytes_negate_vartime","rt":$n[0].Int32,"p":[$n[3].GroupElementP3,$n[0].Array.type(System.Byte),$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ge_madd","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP1P1,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1},{"n":"q","ref":true,"pt":$n[3].GroupElementPreComp,"ps":2}],"sn":"ge_madd","rt":$n[0].Void,"p":[$n[3].GroupElementP1P1,$n[3].GroupElementP3,$n[3].GroupElementPreComp]},{"a":2,"n":"ge_msub","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP1P1,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1},{"n":"q","ref":true,"pt":$n[3].GroupElementPreComp,"ps":2}],"sn":"ge_msub","rt":$n[0].Void,"p":[$n[3].GroupElementP1P1,$n[3].GroupElementP3,$n[3].GroupElementPreComp]},{"a":2,"n":"ge_p1p1_to_p2","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP2,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP1P1,"ps":1}],"sn":"ge_p1p1_to_p2","rt":$n[0].Void,"p":[$n[3].GroupElementP2,$n[3].GroupElementP1P1]},{"a":2,"n":"ge_p1p1_to_p3","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP3,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP1P1,"ps":1}],"sn":"ge_p1p1_to_p3","rt":$n[0].Void,"p":[$n[3].GroupElementP3,$n[3].GroupElementP1P1]},{"a":2,"n":"ge_p2_0","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].GroupElementP2,"ps":0}],"sn":"ge_p2_0","rt":$n[0].Void,"p":[$n[3].GroupElementP2]},{"a":2,"n":"ge_p2_dbl","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP1P1,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP2,"ps":1}],"sn":"ge_p2_dbl","rt":$n[0].Void,"p":[$n[3].GroupElementP1P1,$n[3].GroupElementP2]},{"a":2,"n":"ge_p3_0","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].GroupElementP3,"ps":0}],"sn":"ge_p3_0","rt":$n[0].Void,"p":[$n[3].GroupElementP3]},{"a":2,"n":"ge_p3_dbl","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP1P1,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1}],"sn":"ge_p3_dbl","rt":$n[0].Void,"p":[$n[3].GroupElementP1P1,$n[3].GroupElementP3]},{"a":2,"n":"ge_p3_to_cached","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementCached,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1}],"sn":"ge_p3_to_cached","rt":$n[0].Void,"p":[$n[3].GroupElementCached,$n[3].GroupElementP3]},{"a":2,"n":"ge_p3_to_p2","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP2,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1}],"sn":"ge_p3_to_p2","rt":$n[0].Void,"p":[$n[3].GroupElementP2,$n[3].GroupElementP3]},{"a":2,"n":"ge_p3_tobytes","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"h","ref":true,"pt":$n[3].GroupElementP3,"ps":2}],"sn":"ge_p3_tobytes","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[3].GroupElementP3]},{"a":2,"n":"ge_precomp_0","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].GroupElementPreComp,"ps":0}],"sn":"ge_precomp_0","rt":$n[0].Void,"p":[$n[3].GroupElementPreComp]},{"a":2,"n":"ge_scalarmult_base","is":true,"t":8,"pi":[{"n":"h","out":true,"pt":$n[3].GroupElementP3,"ps":0},{"n":"a","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"offset","pt":$n[0].Int32,"ps":2}],"sn":"ge_scalarmult_base","rt":$n[0].Void,"p":[$n[3].GroupElementP3,$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"ge_sub","is":true,"t":8,"pi":[{"n":"r","out":true,"pt":$n[3].GroupElementP1P1,"ps":0},{"n":"p","ref":true,"pt":$n[3].GroupElementP3,"ps":1},{"n":"q","ref":true,"pt":$n[3].GroupElementCached,"ps":2}],"sn":"ge_sub","rt":$n[0].Void,"p":[$n[3].GroupElementP1P1,$n[3].GroupElementP3,$n[3].GroupElementCached]},{"a":2,"n":"ge_tobytes","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"h","ref":true,"pt":$n[3].GroupElementP2,"ps":2}],"sn":"ge_tobytes","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[3].GroupElementP2]},{"a":1,"n":"negative","is":true,"t":8,"pi":[{"n":"b","pt":$n[0].SByte,"ps":0}],"sn":"negative","rt":$n[0].Byte,"p":[$n[0].SByte],"box":function ($v) { return Bridge.box($v, System.Byte);}},{"a":1,"n":"select","is":true,"t":8,"pi":[{"n":"t","out":true,"pt":$n[3].GroupElementPreComp,"ps":0},{"n":"pos","pt":$n[0].Int32,"ps":1},{"n":"b","pt":$n[0].SByte,"ps":2}],"sn":"select","rt":$n[0].Void,"p":[$n[3].GroupElementPreComp,$n[0].Int32,$n[0].SByte]},{"a":1,"n":"slide","is":true,"t":8,"pi":[{"n":"r","pt":$n[0].Array.type(System.SByte),"ps":0},{"n":"a","pt":$n[0].Array.type(System.Byte),"ps":1}],"sn":"slide","rt":$n[0].Void,"p":[$n[0].Array.type(System.SByte),$n[0].Array.type(System.Byte)]}]}; }, $n);
    $m("Phantasma.Cryptography.KeyPair", function () { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Array.type(System.Byte)],"pi":[{"n":"privateKey","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"ctor"},{"a":2,"n":"FromWIF","is":true,"t":8,"pi":[{"n":"wif","pt":$n[0].String,"ps":0}],"sn":"FromWIF","rt":$n[3].KeyPair,"p":[$n[0].String]},{"a":2,"n":"Generate","is":true,"t":8,"sn":"Generate","rt":$n[3].KeyPair},{"a":2,"n":"GetScriptHashFromAddress","is":true,"t":8,"pi":[{"n":"address","pt":$n[0].String,"ps":0}],"sn":"GetScriptHashFromAddress","rt":$n[0].Array.type(System.Byte),"p":[$n[0].String]},{"a":2,"n":"ToWIF","t":8,"sn":"ToWIF","rt":$n[0].String},{"a":1,"n":"XOR","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"y","pt":$n[0].Array.type(System.Byte),"ps":1}],"sn":"XOR","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)]},{"a":2,"n":"Address","t":4,"rt":$n[0].String,"sn":"Address","ro":true},{"a":2,"n":"PrivateKey","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"PrivateKey","ro":true},{"a":2,"n":"PublicKey","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"PublicKey","ro":true},{"a":2,"n":"PublicKeyLength","is":true,"t":4,"rt":$n[0].Int32,"sn":"PublicKeyLength","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"rnd","is":true,"t":4,"rt":$n[0].Random,"sn":"rnd"}]}; }, $n);
    $m("Phantasma.Cryptography.LookupTables", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"Base","is":true,"t":4,"rt":System.Array.type(System.Array.type(Phantasma.Cryptography.GroupElementPreComp)),"sn":"Base"},{"a":4,"n":"Base2","is":true,"t":4,"rt":System.Array.type(Phantasma.Cryptography.GroupElementPreComp),"sn":"Base2","ro":true},{"a":4,"n":"d","is":true,"t":4,"rt":$n[3].FieldElement,"sn":"d"},{"a":4,"n":"d2","is":true,"t":4,"rt":$n[3].FieldElement,"sn":"d2"},{"a":4,"n":"sqrtm1","is":true,"t":4,"rt":$n[3].FieldElement,"sn":"sqrtm1"}]}; }, $n);
    $m("Phantasma.Cryptography.MontgomeryOperations", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":4,"n":"scalarmult","is":true,"t":8,"pi":[{"n":"q","out":true,"pt":$n[3].FieldElement,"ps":0},{"n":"n","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"noffset","pt":$n[0].Int32,"ps":2},{"n":"p","ref":true,"pt":$n[3].FieldElement,"ps":3}],"sn":"scalarmult$1","rt":$n[0].Void,"p":[$n[3].FieldElement,$n[0].Array.type(System.Byte),$n[0].Int32,$n[3].FieldElement]},{"a":2,"n":"scalarmult","is":true,"t":8,"pi":[{"n":"q","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"qoffset","pt":$n[0].Int32,"ps":1},{"n":"n","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"noffset","pt":$n[0].Int32,"ps":3},{"n":"p","pt":$n[0].Array.type(System.Byte),"ps":4},{"n":"poffset","pt":$n[0].Int32,"ps":5}],"sn":"scalarmult","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32]}]}; }, $n);
    $m("Phantasma.Cryptography.Salsa20", function () { return {"att":1048576,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"HSalsa","is":true,"t":8,"pi":[{"n":"output","out":true,"pt":$n[3].Array16$1(System.UInt32),"ps":0},{"n":"input","ref":true,"pt":$n[3].Array16$1(System.UInt32),"ps":1},{"n":"rounds","pt":$n[0].Int32,"ps":2}],"sn":"HSalsa","rt":$n[0].Void,"p":[$n[3].Array16$1(System.UInt32),$n[3].Array16$1(System.UInt32),$n[0].Int32]},{"a":2,"n":"HSalsa20","is":true,"t":8,"pi":[{"n":"output","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"outputOffset","pt":$n[0].Int32,"ps":1},{"n":"key","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"keyOffset","pt":$n[0].Int32,"ps":3},{"n":"nonce","pt":$n[0].Array.type(System.Byte),"ps":4},{"n":"nonceOffset","pt":$n[0].Int32,"ps":5}],"sn":"HSalsa20","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"Salsa","is":true,"t":8,"pi":[{"n":"output","out":true,"pt":$n[3].Array16$1(System.UInt32),"ps":0},{"n":"input","ref":true,"pt":$n[3].Array16$1(System.UInt32),"ps":1},{"n":"rounds","pt":$n[0].Int32,"ps":2}],"sn":"Salsa","rt":$n[0].Void,"p":[$n[3].Array16$1(System.UInt32),$n[3].Array16$1(System.UInt32),$n[0].Int32]},{"a":2,"n":"SalsaConst0","is":true,"t":4,"rt":$n[0].UInt32,"sn":"SalsaConst0","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"SalsaConst1","is":true,"t":4,"rt":$n[0].UInt32,"sn":"SalsaConst1","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"SalsaConst2","is":true,"t":4,"rt":$n[0].UInt32,"sn":"SalsaConst2","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"SalsaConst3","is":true,"t":4,"rt":$n[0].UInt32,"sn":"SalsaConst3","box":function ($v) { return Bridge.box($v, System.UInt32);}}]}; }, $n);
    $m("Phantasma.Cryptography.ScalarOperations", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":1,"n":"load_3","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"load_3","rt":$n[0].Int64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":1,"n":"load_4","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"load_4","rt":$n[0].Int64,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"sc_clamp","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1}],"sn":"sc_clamp","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32]},{"a":2,"n":"sc_muladd","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"a","pt":$n[0].Array.type(System.Byte),"ps":1},{"n":"b","pt":$n[0].Array.type(System.Byte),"ps":2},{"n":"c","pt":$n[0].Array.type(System.Byte),"ps":3}],"sn":"sc_muladd","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte),$n[0].Array.type(System.Byte)]},{"a":2,"n":"sc_reduce","is":true,"t":8,"pi":[{"n":"s","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"sc_reduce","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte)]}]}; }, $n);
    $m("Phantasma.Cryptography.SHA256", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"AddData","t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].UInt32,"ps":1},{"n":"len","pt":$n[0].UInt32,"ps":2}],"sn":"AddData","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].UInt32,$n[0].UInt32]},{"a":1,"n":"Ch","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0},{"n":"y","pt":$n[0].UInt32,"ps":1},{"n":"z","pt":$n[0].UInt32,"ps":2}],"sn":"Ch","rt":$n[0].UInt32,"p":[$n[0].UInt32,$n[0].UInt32,$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ComputeHash","t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"ComputeHash","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"ComputeHash","t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].UInt32,"ps":1},{"n":"length","pt":$n[0].UInt32,"ps":2}],"sn":"ComputeHash$1","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].UInt32,$n[0].UInt32]},{"a":1,"n":"GetHashUInt32","t":8,"sn":"GetHashUInt32","rt":$n[0].Array.type(System.UInt32)},{"a":1,"n":"Maj","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0},{"n":"y","pt":$n[0].UInt32,"ps":1},{"n":"z","pt":$n[0].UInt32,"ps":2}],"sn":"Maj","rt":$n[0].UInt32,"p":[$n[0].UInt32,$n[0].UInt32,$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"ROTL","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0},{"n":"n","pt":$n[0].Byte,"ps":1}],"sn":"ROTL","rt":$n[0].UInt32,"p":[$n[0].UInt32,$n[0].Byte],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"ROTR","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0},{"n":"n","pt":$n[0].Byte,"ps":1}],"sn":"ROTR","rt":$n[0].UInt32,"p":[$n[0].UInt32,$n[0].Byte],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"Reset","t":8,"sn":"Reset","rt":$n[0].Void},{"a":1,"n":"Sigma0","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0}],"sn":"Sigma0","rt":$n[0].UInt32,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"Sigma1","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0}],"sn":"Sigma1","rt":$n[0].UInt32,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"processBlock","t":8,"pi":[{"n":"M","pt":$n[0].Array.type(System.UInt32),"ps":0}],"sn":"processBlock","rt":$n[0].Void,"p":[$n[0].Array.type(System.UInt32)]},{"a":1,"n":"sigma0","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0}],"sn":"sigma0","rt":$n[0].UInt32,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"sigma1","is":true,"t":8,"pi":[{"n":"x","pt":$n[0].UInt32,"ps":0}],"sn":"sigma1","rt":$n[0].UInt32,"p":[$n[0].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"toByteArray","is":true,"t":8,"pi":[{"n":"src","pt":$n[0].Array.type(System.UInt32),"ps":0}],"sn":"toByteArray","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.UInt32)]},{"a":1,"n":"toUintArray","is":true,"t":8,"pi":[{"n":"src","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"dest","pt":$n[0].Array.type(System.UInt32),"ps":1}],"sn":"toUintArray","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Array.type(System.UInt32)]},{"a":1,"n":"H","t":4,"rt":$n[0].Array.type(System.UInt32),"sn":"H"},{"a":1,"n":"K","is":true,"t":4,"rt":$n[0].Array.type(System.UInt32),"sn":"K","ro":true},{"a":1,"n":"bits_processed","t":4,"rt":$n[0].UInt64,"sn":"bits_processed"},{"a":1,"n":"closed","t":4,"rt":$n[0].Boolean,"sn":"closed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"pending_block","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"pending_block"},{"a":1,"n":"pending_block_off","t":4,"rt":$n[0].UInt32,"sn":"pending_block_off","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"uint_buffer","t":4,"rt":$n[0].Array.type(System.UInt32),"sn":"uint_buffer"}]}; }, $n);
    $m("Phantasma.Cryptography.SHA512", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"Core","is":true,"t":8,"pi":[{"n":"outputState","out":true,"pt":$n[3].Array8$1(System.UInt64),"ps":0},{"n":"inputState","ref":true,"pt":$n[3].Array8$1(System.UInt64),"ps":1},{"n":"input","ref":true,"pt":$n[3].Array16$1(System.UInt64),"ps":2}],"sn":"Core","rt":$n[0].Void,"p":[$n[3].Array8$1(System.UInt64),$n[3].Array8$1(System.UInt64),$n[3].Array16$1(System.UInt64)]},{"a":2,"n":"Finish","t":8,"sn":"Finish","rt":$n[0].Array.type(System.Byte)},{"a":2,"n":"Finish","t":8,"pi":[{"n":"output","pt":$n[0].ArraySegment,"ps":0}],"sn":"Finish$1","rt":$n[0].Void,"p":[$n[0].ArraySegment]},{"a":2,"n":"Hash","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0}],"sn":"Hash","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte)]},{"a":2,"n":"Hash","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Hash$1","rt":$n[0].Array.type(System.Byte),"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"Init","t":8,"sn":"Init","rt":$n[0].Void},{"a":4,"n":"Sha512Init","is":true,"t":8,"pi":[{"n":"state","out":true,"pt":$n[3].Array8$1(System.UInt64),"ps":0}],"sn":"Sha512Init","rt":$n[0].Void,"p":[$n[3].Array8$1(System.UInt64)]},{"a":2,"n":"Update","t":8,"pi":[{"n":"data","pt":$n[0].ArraySegment,"ps":0}],"sn":"Update","rt":$n[0].Void,"p":[$n[0].ArraySegment]},{"a":2,"n":"Update","t":8,"pi":[{"n":"data","pt":$n[0].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[0].Int32,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"Update$1","rt":$n[0].Void,"p":[$n[0].Array.type(System.Byte),$n[0].Int32,$n[0].Int32]},{"a":2,"n":"BlockSize","is":true,"t":4,"rt":$n[0].Int32,"sn":"BlockSize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"K","is":true,"t":4,"rt":$n[0].Array.type(System.UInt64),"sn":"K","ro":true},{"a":1,"n":"_buffer","t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_buffer","ro":true},{"a":1,"n":"_padding","is":true,"t":4,"rt":$n[0].Array.type(System.Byte),"sn":"_padding","ro":true},{"a":1,"n":"_state","t":4,"rt":$n[3].Array8$1(System.UInt64),"sn":"_state"},{"a":1,"n":"_totalBytes","t":4,"rt":$n[0].UInt64,"sn":"_totalBytes"}]}; }, $n);
});
function PhantasmaLink() {
    this.majorVersion = 0;
    this.minorVersion = 1;
}

PhantasmaLink.prototype.version = function() {
    return this.majorVersion+"."+this.minorVersion;
};